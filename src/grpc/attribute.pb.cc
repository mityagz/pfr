// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribute.proto

#include "attribute.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsSegment_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthernetSegmentIdentifier_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Family_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecComponentItem_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LargeCommunity_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAttributeBgpPeerSegment_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsAttributeLink_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LsAttributeNode_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAttributePrefix_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsBgpPeerSegmentSID_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsIGPFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsLinkDescriptor_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeDescriptor_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsPrefixDescriptor_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrCapabilities_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrLocalBlock_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsSrRange_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRWeight_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRv6EndPointBehavior_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRv6SIDFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6TLV_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapTLV_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace apipb {
class OriginAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginAttribute> _instance;
} _OriginAttribute_default_instance_;
class AsSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsSegment> _instance;
} _AsSegment_default_instance_;
class AsPathAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsPathAttribute> _instance;
} _AsPathAttribute_default_instance_;
class NextHopAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextHopAttribute> _instance;
} _NextHopAttribute_default_instance_;
class MultiExitDiscAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiExitDiscAttribute> _instance;
} _MultiExitDiscAttribute_default_instance_;
class LocalPrefAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPrefAttribute> _instance;
} _LocalPrefAttribute_default_instance_;
class AtomicAggregateAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtomicAggregateAttribute> _instance;
} _AtomicAggregateAttribute_default_instance_;
class AggregatorAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregatorAttribute> _instance;
} _AggregatorAttribute_default_instance_;
class CommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunitiesAttribute> _instance;
} _CommunitiesAttribute_default_instance_;
class OriginatorIdAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginatorIdAttribute> _instance;
} _OriginatorIdAttribute_default_instance_;
class ClusterListAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterListAttribute> _instance;
} _ClusterListAttribute_default_instance_;
class IPAddressPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPAddressPrefix> _instance;
} _IPAddressPrefix_default_instance_;
class LabeledIPAddressPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledIPAddressPrefix> _instance;
} _LabeledIPAddressPrefix_default_instance_;
class EncapsulationNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncapsulationNLRI> _instance;
} _EncapsulationNLRI_default_instance_;
class RouteDistinguisherTwoOctetASNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteDistinguisherTwoOctetASN> _instance;
} _RouteDistinguisherTwoOctetASN_default_instance_;
class RouteDistinguisherIPAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteDistinguisherIPAddress> _instance;
} _RouteDistinguisherIPAddress_default_instance_;
class RouteDistinguisherFourOctetASNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteDistinguisherFourOctetASN> _instance;
} _RouteDistinguisherFourOctetASN_default_instance_;
class EthernetSegmentIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthernetSegmentIdentifier> _instance;
} _EthernetSegmentIdentifier_default_instance_;
class EVPNEthernetAutoDiscoveryRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNEthernetAutoDiscoveryRoute> _instance;
} _EVPNEthernetAutoDiscoveryRoute_default_instance_;
class EVPNMACIPAdvertisementRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNMACIPAdvertisementRoute> _instance;
} _EVPNMACIPAdvertisementRoute_default_instance_;
class EVPNInclusiveMulticastEthernetTagRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNInclusiveMulticastEthernetTagRoute> _instance;
} _EVPNInclusiveMulticastEthernetTagRoute_default_instance_;
class EVPNEthernetSegmentRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNEthernetSegmentRoute> _instance;
} _EVPNEthernetSegmentRoute_default_instance_;
class EVPNIPPrefixRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNIPPrefixRoute> _instance;
} _EVPNIPPrefixRoute_default_instance_;
class EVPNIPMSIRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNIPMSIRoute> _instance;
} _EVPNIPMSIRoute_default_instance_;
class SRPolicyNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRPolicyNLRI> _instance;
} _SRPolicyNLRI_default_instance_;
class LabeledVPNIPAddressPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledVPNIPAddressPrefix> _instance;
} _LabeledVPNIPAddressPrefix_default_instance_;
class RouteTargetMembershipNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembershipNLRI> _instance;
} _RouteTargetMembershipNLRI_default_instance_;
class FlowSpecIPPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecIPPrefix> _instance;
} _FlowSpecIPPrefix_default_instance_;
class FlowSpecMACDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecMAC> _instance;
} _FlowSpecMAC_default_instance_;
class FlowSpecComponentItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecComponentItem> _instance;
} _FlowSpecComponentItem_default_instance_;
class FlowSpecComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecComponent> _instance;
} _FlowSpecComponent_default_instance_;
class FlowSpecNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecNLRI> _instance;
} _FlowSpecNLRI_default_instance_;
class VPNFlowSpecNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VPNFlowSpecNLRI> _instance;
} _VPNFlowSpecNLRI_default_instance_;
class OpaqueNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpaqueNLRI> _instance;
} _OpaqueNLRI_default_instance_;
class LsNodeDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsNodeDescriptor> _instance;
} _LsNodeDescriptor_default_instance_;
class LsLinkDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsLinkDescriptor> _instance;
} _LsLinkDescriptor_default_instance_;
class LsPrefixDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsPrefixDescriptor> _instance;
} _LsPrefixDescriptor_default_instance_;
class LsNodeNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsNodeNLRI> _instance;
} _LsNodeNLRI_default_instance_;
class LsLinkNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsLinkNLRI> _instance;
} _LsLinkNLRI_default_instance_;
class LsPrefixV4NLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsPrefixV4NLRI> _instance;
} _LsPrefixV4NLRI_default_instance_;
class LsPrefixV6NLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsPrefixV6NLRI> _instance;
} _LsPrefixV6NLRI_default_instance_;
class LsAddrPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAddrPrefix> _instance;
} _LsAddrPrefix_default_instance_;
class MUPInterworkSegmentDiscoveryRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MUPInterworkSegmentDiscoveryRoute> _instance;
} _MUPInterworkSegmentDiscoveryRoute_default_instance_;
class MUPDirectSegmentDiscoveryRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MUPDirectSegmentDiscoveryRoute> _instance;
} _MUPDirectSegmentDiscoveryRoute_default_instance_;
class MUPType1SessionTransformedRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MUPType1SessionTransformedRoute> _instance;
} _MUPType1SessionTransformedRoute_default_instance_;
class MUPType2SessionTransformedRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MUPType2SessionTransformedRoute> _instance;
} _MUPType2SessionTransformedRoute_default_instance_;
class MpReachNLRIAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpReachNLRIAttribute> _instance;
} _MpReachNLRIAttribute_default_instance_;
class MpUnreachNLRIAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpUnreachNLRIAttribute> _instance;
} _MpUnreachNLRIAttribute_default_instance_;
class TwoOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwoOctetAsSpecificExtended> _instance;
} _TwoOctetAsSpecificExtended_default_instance_;
class IPv4AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPv4AddressSpecificExtended> _instance;
} _IPv4AddressSpecificExtended_default_instance_;
class FourOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FourOctetAsSpecificExtended> _instance;
} _FourOctetAsSpecificExtended_default_instance_;
class LinkBandwidthExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkBandwidthExtended> _instance;
} _LinkBandwidthExtended_default_instance_;
class ValidationExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationExtended> _instance;
} _ValidationExtended_default_instance_;
class ColorExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorExtended> _instance;
} _ColorExtended_default_instance_;
class EncapExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncapExtended> _instance;
} _EncapExtended_default_instance_;
class DefaultGatewayExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultGatewayExtended> _instance;
} _DefaultGatewayExtended_default_instance_;
class OpaqueExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpaqueExtended> _instance;
} _OpaqueExtended_default_instance_;
class ESILabelExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ESILabelExtended> _instance;
} _ESILabelExtended_default_instance_;
class ESImportRouteTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ESImportRouteTarget> _instance;
} _ESImportRouteTarget_default_instance_;
class MacMobilityExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MacMobilityExtended> _instance;
} _MacMobilityExtended_default_instance_;
class RouterMacExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouterMacExtended> _instance;
} _RouterMacExtended_default_instance_;
class TrafficRateExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRateExtended> _instance;
} _TrafficRateExtended_default_instance_;
class TrafficActionExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficActionExtended> _instance;
} _TrafficActionExtended_default_instance_;
class RedirectTwoOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectTwoOctetAsSpecificExtended> _instance;
} _RedirectTwoOctetAsSpecificExtended_default_instance_;
class RedirectIPv4AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectIPv4AddressSpecificExtended> _instance;
} _RedirectIPv4AddressSpecificExtended_default_instance_;
class RedirectFourOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectFourOctetAsSpecificExtended> _instance;
} _RedirectFourOctetAsSpecificExtended_default_instance_;
class TrafficRemarkExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRemarkExtended> _instance;
} _TrafficRemarkExtended_default_instance_;
class MUPExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MUPExtended> _instance;
} _MUPExtended_default_instance_;
class UnknownExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownExtended> _instance;
} _UnknownExtended_default_instance_;
class ExtendedCommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtendedCommunitiesAttribute> _instance;
} _ExtendedCommunitiesAttribute_default_instance_;
class As4PathAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<As4PathAttribute> _instance;
} _As4PathAttribute_default_instance_;
class As4AggregatorAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<As4AggregatorAttribute> _instance;
} _As4AggregatorAttribute_default_instance_;
class PmsiTunnelAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PmsiTunnelAttribute> _instance;
} _PmsiTunnelAttribute_default_instance_;
class TunnelEncapSubTLVEncapsulationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVEncapsulation> _instance;
} _TunnelEncapSubTLVEncapsulation_default_instance_;
class TunnelEncapSubTLVProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVProtocol> _instance;
} _TunnelEncapSubTLVProtocol_default_instance_;
class TunnelEncapSubTLVColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVColor> _instance;
} _TunnelEncapSubTLVColor_default_instance_;
class TunnelEncapSubTLVSRPreferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVSRPreference> _instance;
} _TunnelEncapSubTLVSRPreference_default_instance_;
class TunnelEncapSubTLVSRCandidatePathNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVSRCandidatePathName> _instance;
} _TunnelEncapSubTLVSRCandidatePathName_default_instance_;
class TunnelEncapSubTLVSRPriorityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVSRPriority> _instance;
} _TunnelEncapSubTLVSRPriority_default_instance_;
class TunnelEncapSubTLVSRBindingSIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVSRBindingSID> _instance;
} _TunnelEncapSubTLVSRBindingSID_default_instance_;
class SRBindingSIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRBindingSID> _instance;
} _SRBindingSID_default_instance_;
class SRv6EndPointBehaviorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6EndPointBehavior> _instance;
} _SRv6EndPointBehavior_default_instance_;
class SRv6BindingSIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6BindingSID> _instance;
} _SRv6BindingSID_default_instance_;
class TunnelEncapSubTLVSRENLPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVSRENLP> _instance;
} _TunnelEncapSubTLVSRENLP_default_instance_;
class SRWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRWeight> _instance;
} _SRWeight_default_instance_;
class SegmentFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentFlags> _instance;
} _SegmentFlags_default_instance_;
class SegmentTypeADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentTypeA> _instance;
} _SegmentTypeA_default_instance_;
class SegmentTypeBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentTypeB> _instance;
} _SegmentTypeB_default_instance_;
class TunnelEncapSubTLVSRSegmentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVSRSegmentList> _instance;
} _TunnelEncapSubTLVSRSegmentList_default_instance_;
class TunnelEncapSubTLVEgressEndpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVEgressEndpoint> _instance;
} _TunnelEncapSubTLVEgressEndpoint_default_instance_;
class TunnelEncapSubTLVUDPDestPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVUDPDestPort> _instance;
} _TunnelEncapSubTLVUDPDestPort_default_instance_;
class TunnelEncapSubTLVUnknownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVUnknown> _instance;
} _TunnelEncapSubTLVUnknown_default_instance_;
class TunnelEncapTLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapTLV> _instance;
} _TunnelEncapTLV_default_instance_;
class TunnelEncapAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapAttribute> _instance;
} _TunnelEncapAttribute_default_instance_;
class IPv6AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPv6AddressSpecificExtended> _instance;
} _IPv6AddressSpecificExtended_default_instance_;
class RedirectIPv6AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectIPv6AddressSpecificExtended> _instance;
} _RedirectIPv6AddressSpecificExtended_default_instance_;
class IP6ExtendedCommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IP6ExtendedCommunitiesAttribute> _instance;
} _IP6ExtendedCommunitiesAttribute_default_instance_;
class AigpTLVIGPMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AigpTLVIGPMetric> _instance;
} _AigpTLVIGPMetric_default_instance_;
class AigpTLVUnknownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AigpTLVUnknown> _instance;
} _AigpTLVUnknown_default_instance_;
class AigpAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AigpAttribute> _instance;
} _AigpAttribute_default_instance_;
class LargeCommunityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LargeCommunity> _instance;
} _LargeCommunity_default_instance_;
class LargeCommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LargeCommunitiesAttribute> _instance;
} _LargeCommunitiesAttribute_default_instance_;
class LsNodeFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsNodeFlags> _instance;
} _LsNodeFlags_default_instance_;
class LsIGPFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsIGPFlags> _instance;
} _LsIGPFlags_default_instance_;
class LsSrRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsSrRange> _instance;
} _LsSrRange_default_instance_;
class LsSrCapabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsSrCapabilities> _instance;
} _LsSrCapabilities_default_instance_;
class LsSrLocalBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsSrLocalBlock> _instance;
} _LsSrLocalBlock_default_instance_;
class LsAttributeNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributeNode> _instance;
} _LsAttributeNode_default_instance_;
class LsAttributeLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributeLink> _instance;
} _LsAttributeLink_default_instance_;
class LsAttributePrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributePrefix> _instance;
} _LsAttributePrefix_default_instance_;
class LsBgpPeerSegmentSIDFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsBgpPeerSegmentSIDFlags> _instance;
} _LsBgpPeerSegmentSIDFlags_default_instance_;
class LsBgpPeerSegmentSIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsBgpPeerSegmentSID> _instance;
} _LsBgpPeerSegmentSID_default_instance_;
class LsAttributeBgpPeerSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributeBgpPeerSegment> _instance;
} _LsAttributeBgpPeerSegment_default_instance_;
class LsAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttribute> _instance;
} _LsAttribute_default_instance_;
class UnknownAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownAttribute> _instance;
} _UnknownAttribute_default_instance_;
class SRv6StructureSubSubTLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6StructureSubSubTLV> _instance;
} _SRv6StructureSubSubTLV_default_instance_;
class SRv6SIDFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6SIDFlags> _instance;
} _SRv6SIDFlags_default_instance_;
class SRv6TLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6TLV> _instance;
} _SRv6TLV_default_instance_;
class SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse> _instance;
} _SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_default_instance_;
class SRv6InformationSubTLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6InformationSubTLV> _instance;
} _SRv6InformationSubTLV_default_instance_;
class SRv6L3ServiceTLV_SubTlvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse> _instance;
} _SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_;
class SRv6L3ServiceTLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6L3ServiceTLV> _instance;
} _SRv6L3ServiceTLV_default_instance_;
class SRv6L2ServiceTLV_SubTlvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse> _instance;
} _SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_;
class SRv6L2ServiceTLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRv6L2ServiceTLV> _instance;
} _SRv6L2ServiceTLV_default_instance_;
class PrefixSIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrefixSID> _instance;
} _PrefixSID_default_instance_;
}  // namespace apipb
static void InitDefaultsscc_info_AggregatorAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AggregatorAttribute_default_instance_;
    new (ptr) ::apipb::AggregatorAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AggregatorAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AggregatorAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AggregatorAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_AigpAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AigpAttribute_default_instance_;
    new (ptr) ::apipb::AigpAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AigpAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AigpAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AigpAttribute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_AigpTLVIGPMetric_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AigpTLVIGPMetric_default_instance_;
    new (ptr) ::apipb::AigpTLVIGPMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AigpTLVIGPMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AigpTLVIGPMetric_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AigpTLVIGPMetric_attribute_2eproto}, {}};

static void InitDefaultsscc_info_AigpTLVUnknown_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AigpTLVUnknown_default_instance_;
    new (ptr) ::apipb::AigpTLVUnknown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AigpTLVUnknown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AigpTLVUnknown_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AigpTLVUnknown_attribute_2eproto}, {}};

static void InitDefaultsscc_info_As4AggregatorAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_As4AggregatorAttribute_default_instance_;
    new (ptr) ::apipb::As4AggregatorAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::As4AggregatorAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_As4AggregatorAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_As4AggregatorAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_As4PathAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_As4PathAttribute_default_instance_;
    new (ptr) ::apipb::As4PathAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::As4PathAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_As4PathAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_As4PathAttribute_attribute_2eproto}, {
      &scc_info_AsSegment_attribute_2eproto.base,}};

static void InitDefaultsscc_info_AsPathAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AsPathAttribute_default_instance_;
    new (ptr) ::apipb::AsPathAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AsPathAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsPathAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsPathAttribute_attribute_2eproto}, {
      &scc_info_AsSegment_attribute_2eproto.base,}};

static void InitDefaultsscc_info_AsSegment_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AsSegment_default_instance_;
    new (ptr) ::apipb::AsSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AsSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsSegment_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsSegment_attribute_2eproto}, {}};

static void InitDefaultsscc_info_AtomicAggregateAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AtomicAggregateAttribute_default_instance_;
    new (ptr) ::apipb::AtomicAggregateAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AtomicAggregateAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtomicAggregateAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AtomicAggregateAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ClusterListAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ClusterListAttribute_default_instance_;
    new (ptr) ::apipb::ClusterListAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ClusterListAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClusterListAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClusterListAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ColorExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ColorExtended_default_instance_;
    new (ptr) ::apipb::ColorExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ColorExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_CommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_CommunitiesAttribute_default_instance_;
    new (ptr) ::apipb::CommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::CommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunitiesAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_DefaultGatewayExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DefaultGatewayExtended_default_instance_;
    new (ptr) ::apipb::DefaultGatewayExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DefaultGatewayExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultGatewayExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultGatewayExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ESILabelExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ESILabelExtended_default_instance_;
    new (ptr) ::apipb::ESILabelExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ESILabelExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ESILabelExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ESILabelExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ESImportRouteTarget_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ESImportRouteTarget_default_instance_;
    new (ptr) ::apipb::ESImportRouteTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ESImportRouteTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ESImportRouteTarget_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ESImportRouteTarget_attribute_2eproto}, {}};

static void InitDefaultsscc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EVPNEthernetAutoDiscoveryRoute_default_instance_;
    new (ptr) ::apipb::EVPNEthernetAutoDiscoveryRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EVPNEthernetAutoDiscoveryRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EVPNEthernetSegmentRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EVPNEthernetSegmentRoute_default_instance_;
    new (ptr) ::apipb::EVPNEthernetSegmentRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EVPNEthernetSegmentRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNEthernetSegmentRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNEthernetSegmentRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EVPNIPMSIRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EVPNIPMSIRoute_default_instance_;
    new (ptr) ::apipb::EVPNIPMSIRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EVPNIPMSIRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EVPNIPMSIRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EVPNIPMSIRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EVPNIPPrefixRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EVPNIPPrefixRoute_default_instance_;
    new (ptr) ::apipb::EVPNIPPrefixRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EVPNIPPrefixRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNIPPrefixRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNIPPrefixRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EVPNInclusiveMulticastEthernetTagRoute_default_instance_;
    new (ptr) ::apipb::EVPNInclusiveMulticastEthernetTagRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EVPNInclusiveMulticastEthernetTagRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EVPNMACIPAdvertisementRoute_default_instance_;
    new (ptr) ::apipb::EVPNMACIPAdvertisementRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EVPNMACIPAdvertisementRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EncapExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EncapExtended_default_instance_;
    new (ptr) ::apipb::EncapExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EncapExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncapExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncapExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_EncapsulationNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EncapsulationNLRI_default_instance_;
    new (ptr) ::apipb::EncapsulationNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EncapsulationNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncapsulationNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncapsulationNLRI_attribute_2eproto}, {}};

static void InitDefaultsscc_info_EthernetSegmentIdentifier_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EthernetSegmentIdentifier_default_instance_;
    new (ptr) ::apipb::EthernetSegmentIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EthernetSegmentIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthernetSegmentIdentifier_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthernetSegmentIdentifier_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ExtendedCommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ExtendedCommunitiesAttribute_default_instance_;
    new (ptr) ::apipb::ExtendedCommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ExtendedCommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtendedCommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExtendedCommunitiesAttribute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FlowSpecComponent_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_FlowSpecComponent_default_instance_;
    new (ptr) ::apipb::FlowSpecComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::FlowSpecComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowSpecComponent_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowSpecComponent_attribute_2eproto}, {
      &scc_info_FlowSpecComponentItem_attribute_2eproto.base,}};

static void InitDefaultsscc_info_FlowSpecComponentItem_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_FlowSpecComponentItem_default_instance_;
    new (ptr) ::apipb::FlowSpecComponentItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::FlowSpecComponentItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecComponentItem_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowSpecComponentItem_attribute_2eproto}, {}};

static void InitDefaultsscc_info_FlowSpecIPPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_FlowSpecIPPrefix_default_instance_;
    new (ptr) ::apipb::FlowSpecIPPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::FlowSpecIPPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecIPPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowSpecIPPrefix_attribute_2eproto}, {}};

static void InitDefaultsscc_info_FlowSpecMAC_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_FlowSpecMAC_default_instance_;
    new (ptr) ::apipb::FlowSpecMAC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::FlowSpecMAC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecMAC_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowSpecMAC_attribute_2eproto}, {}};

static void InitDefaultsscc_info_FlowSpecNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_FlowSpecNLRI_default_instance_;
    new (ptr) ::apipb::FlowSpecNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::FlowSpecNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowSpecNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowSpecNLRI_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FourOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_FourOctetAsSpecificExtended_default_instance_;
    new (ptr) ::apipb::FourOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::FourOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FourOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FourOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_IP6ExtendedCommunitiesAttribute_default_instance_;
    new (ptr) ::apipb::IP6ExtendedCommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::IP6ExtendedCommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_IPAddressPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_IPAddressPrefix_default_instance_;
    new (ptr) ::apipb::IPAddressPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::IPAddressPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPAddressPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPAddressPrefix_attribute_2eproto}, {}};

static void InitDefaultsscc_info_IPv4AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_IPv4AddressSpecificExtended_default_instance_;
    new (ptr) ::apipb::IPv4AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::IPv4AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv4AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPv4AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_IPv6AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_IPv6AddressSpecificExtended_default_instance_;
    new (ptr) ::apipb::IPv6AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::IPv6AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv6AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPv6AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LabeledIPAddressPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LabeledIPAddressPrefix_default_instance_;
    new (ptr) ::apipb::LabeledIPAddressPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LabeledIPAddressPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabeledIPAddressPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabeledIPAddressPrefix_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LabeledVPNIPAddressPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LabeledVPNIPAddressPrefix_default_instance_;
    new (ptr) ::apipb::LabeledVPNIPAddressPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LabeledVPNIPAddressPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabeledVPNIPAddressPrefix_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_LargeCommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LargeCommunitiesAttribute_default_instance_;
    new (ptr) ::apipb::LargeCommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LargeCommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LargeCommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LargeCommunitiesAttribute_attribute_2eproto}, {
      &scc_info_LargeCommunity_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LargeCommunity_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LargeCommunity_default_instance_;
    new (ptr) ::apipb::LargeCommunity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LargeCommunity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LargeCommunity_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LargeCommunity_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LinkBandwidthExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LinkBandwidthExtended_default_instance_;
    new (ptr) ::apipb::LinkBandwidthExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LinkBandwidthExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkBandwidthExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkBandwidthExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LocalPrefAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LocalPrefAttribute_default_instance_;
    new (ptr) ::apipb::LocalPrefAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LocalPrefAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPrefAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalPrefAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsAddrPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsAddrPrefix_default_instance_;
    new (ptr) ::apipb::LsAddrPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsAddrPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAddrPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsAddrPrefix_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_LsAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsAttribute_default_instance_;
    new (ptr) ::apipb::LsAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LsAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LsAttribute_attribute_2eproto}, {
      &scc_info_LsAttributeNode_attribute_2eproto.base,
      &scc_info_LsAttributeLink_attribute_2eproto.base,
      &scc_info_LsAttributePrefix_attribute_2eproto.base,
      &scc_info_LsAttributeBgpPeerSegment_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsAttributeBgpPeerSegment_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsAttributeBgpPeerSegment_default_instance_;
    new (ptr) ::apipb::LsAttributeBgpPeerSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsAttributeBgpPeerSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAttributeBgpPeerSegment_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsAttributeBgpPeerSegment_attribute_2eproto}, {
      &scc_info_LsBgpPeerSegmentSID_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsAttributeLink_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsAttributeLink_default_instance_;
    new (ptr) ::apipb::LsAttributeLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsAttributeLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsAttributeLink_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsAttributeLink_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsAttributeNode_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsAttributeNode_default_instance_;
    new (ptr) ::apipb::LsAttributeNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsAttributeNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LsAttributeNode_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LsAttributeNode_attribute_2eproto}, {
      &scc_info_LsNodeFlags_attribute_2eproto.base,
      &scc_info_LsSrCapabilities_attribute_2eproto.base,
      &scc_info_LsSrLocalBlock_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsAttributePrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsAttributePrefix_default_instance_;
    new (ptr) ::apipb::LsAttributePrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsAttributePrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAttributePrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsAttributePrefix_attribute_2eproto}, {
      &scc_info_LsIGPFlags_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsBgpPeerSegmentSID_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsBgpPeerSegmentSID_default_instance_;
    new (ptr) ::apipb::LsBgpPeerSegmentSID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsBgpPeerSegmentSID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsBgpPeerSegmentSID_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsBgpPeerSegmentSID_attribute_2eproto}, {
      &scc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsBgpPeerSegmentSIDFlags_default_instance_;
    new (ptr) ::apipb::LsBgpPeerSegmentSIDFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsBgpPeerSegmentSIDFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsIGPFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsIGPFlags_default_instance_;
    new (ptr) ::apipb::LsIGPFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsIGPFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsIGPFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsIGPFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsLinkDescriptor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsLinkDescriptor_default_instance_;
    new (ptr) ::apipb::LsLinkDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsLinkDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsLinkDescriptor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsLinkDescriptor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsLinkNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsLinkNLRI_default_instance_;
    new (ptr) ::apipb::LsLinkNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsLinkNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LsLinkNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LsLinkNLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,
      &scc_info_LsLinkDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsNodeDescriptor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsNodeDescriptor_default_instance_;
    new (ptr) ::apipb::LsNodeDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsNodeDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeDescriptor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsNodeDescriptor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsNodeFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsNodeFlags_default_instance_;
    new (ptr) ::apipb::LsNodeFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsNodeFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsNodeFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsNodeNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsNodeNLRI_default_instance_;
    new (ptr) ::apipb::LsNodeNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsNodeNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsNodeNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsNodeNLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsPrefixDescriptor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsPrefixDescriptor_default_instance_;
    new (ptr) ::apipb::LsPrefixDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsPrefixDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsPrefixDescriptor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsPrefixDescriptor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsPrefixV4NLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsPrefixV4NLRI_default_instance_;
    new (ptr) ::apipb::LsPrefixV4NLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsPrefixV4NLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LsPrefixV4NLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LsPrefixV4NLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,
      &scc_info_LsPrefixDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsPrefixV6NLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsPrefixV6NLRI_default_instance_;
    new (ptr) ::apipb::LsPrefixV6NLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsPrefixV6NLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LsPrefixV6NLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LsPrefixV6NLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,
      &scc_info_LsPrefixDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsSrCapabilities_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsSrCapabilities_default_instance_;
    new (ptr) ::apipb::LsSrCapabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsSrCapabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrCapabilities_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsSrCapabilities_attribute_2eproto}, {
      &scc_info_LsSrRange_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsSrLocalBlock_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsSrLocalBlock_default_instance_;
    new (ptr) ::apipb::LsSrLocalBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsSrLocalBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrLocalBlock_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsSrLocalBlock_attribute_2eproto}, {
      &scc_info_LsSrRange_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsSrRange_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LsSrRange_default_instance_;
    new (ptr) ::apipb::LsSrRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LsSrRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsSrRange_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsSrRange_attribute_2eproto}, {}};

static void InitDefaultsscc_info_MUPDirectSegmentDiscoveryRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MUPDirectSegmentDiscoveryRoute_default_instance_;
    new (ptr) ::apipb::MUPDirectSegmentDiscoveryRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MUPDirectSegmentDiscoveryRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MUPDirectSegmentDiscoveryRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MUPDirectSegmentDiscoveryRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MUPExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MUPExtended_default_instance_;
    new (ptr) ::apipb::MUPExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MUPExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MUPExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MUPExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_MUPInterworkSegmentDiscoveryRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MUPInterworkSegmentDiscoveryRoute_default_instance_;
    new (ptr) ::apipb::MUPInterworkSegmentDiscoveryRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MUPInterworkSegmentDiscoveryRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MUPInterworkSegmentDiscoveryRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MUPInterworkSegmentDiscoveryRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MUPType1SessionTransformedRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MUPType1SessionTransformedRoute_default_instance_;
    new (ptr) ::apipb::MUPType1SessionTransformedRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MUPType1SessionTransformedRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MUPType1SessionTransformedRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MUPType1SessionTransformedRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MUPType2SessionTransformedRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MUPType2SessionTransformedRoute_default_instance_;
    new (ptr) ::apipb::MUPType2SessionTransformedRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MUPType2SessionTransformedRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MUPType2SessionTransformedRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MUPType2SessionTransformedRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MacMobilityExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MacMobilityExtended_default_instance_;
    new (ptr) ::apipb::MacMobilityExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MacMobilityExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MacMobilityExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MacMobilityExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_MpReachNLRIAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MpReachNLRIAttribute_default_instance_;
    new (ptr) ::apipb::MpReachNLRIAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MpReachNLRIAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpReachNLRIAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpReachNLRIAttribute_attribute_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MpUnreachNLRIAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MpUnreachNLRIAttribute_default_instance_;
    new (ptr) ::apipb::MpUnreachNLRIAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MpUnreachNLRIAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpUnreachNLRIAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpUnreachNLRIAttribute_attribute_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MultiExitDiscAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MultiExitDiscAttribute_default_instance_;
    new (ptr) ::apipb::MultiExitDiscAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MultiExitDiscAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiExitDiscAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiExitDiscAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_NextHopAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_NextHopAttribute_default_instance_;
    new (ptr) ::apipb::NextHopAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::NextHopAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextHopAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NextHopAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OpaqueExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_OpaqueExtended_default_instance_;
    new (ptr) ::apipb::OpaqueExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::OpaqueExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpaqueExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpaqueExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OpaqueNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_OpaqueNLRI_default_instance_;
    new (ptr) ::apipb::OpaqueNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::OpaqueNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpaqueNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpaqueNLRI_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OriginAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_OriginAttribute_default_instance_;
    new (ptr) ::apipb::OriginAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::OriginAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OriginAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OriginatorIdAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_OriginatorIdAttribute_default_instance_;
    new (ptr) ::apipb::OriginatorIdAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::OriginatorIdAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginatorIdAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OriginatorIdAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_PmsiTunnelAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PmsiTunnelAttribute_default_instance_;
    new (ptr) ::apipb::PmsiTunnelAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PmsiTunnelAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PmsiTunnelAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PmsiTunnelAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_PrefixSID_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PrefixSID_default_instance_;
    new (ptr) ::apipb::PrefixSID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PrefixSID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrefixSID_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrefixSID_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RedirectFourOctetAsSpecificExtended_default_instance_;
    new (ptr) ::apipb::RedirectFourOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RedirectFourOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RedirectIPv4AddressSpecificExtended_default_instance_;
    new (ptr) ::apipb::RedirectIPv4AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RedirectIPv4AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RedirectIPv6AddressSpecificExtended_default_instance_;
    new (ptr) ::apipb::RedirectIPv6AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RedirectIPv6AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RedirectTwoOctetAsSpecificExtended_default_instance_;
    new (ptr) ::apipb::RedirectTwoOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RedirectTwoOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteDistinguisherFourOctetASN_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteDistinguisherFourOctetASN_default_instance_;
    new (ptr) ::apipb::RouteDistinguisherFourOctetASN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteDistinguisherFourOctetASN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteDistinguisherFourOctetASN_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteDistinguisherFourOctetASN_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteDistinguisherIPAddress_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteDistinguisherIPAddress_default_instance_;
    new (ptr) ::apipb::RouteDistinguisherIPAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteDistinguisherIPAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteDistinguisherIPAddress_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteDistinguisherIPAddress_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteDistinguisherTwoOctetASN_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteDistinguisherTwoOctetASN_default_instance_;
    new (ptr) ::apipb::RouteDistinguisherTwoOctetASN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteDistinguisherTwoOctetASN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteDistinguisherTwoOctetASN_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteDistinguisherTwoOctetASN_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteTargetMembershipNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteTargetMembershipNLRI_default_instance_;
    new (ptr) ::apipb::RouteTargetMembershipNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteTargetMembershipNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteTargetMembershipNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteTargetMembershipNLRI_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RouterMacExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouterMacExtended_default_instance_;
    new (ptr) ::apipb::RouterMacExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouterMacExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouterMacExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouterMacExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRBindingSID_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRBindingSID_default_instance_;
    new (ptr) ::apipb::SRBindingSID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRBindingSID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRBindingSID_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRBindingSID_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRPolicyNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRPolicyNLRI_default_instance_;
    new (ptr) ::apipb::SRPolicyNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRPolicyNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRPolicyNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRPolicyNLRI_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRWeight_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRWeight_default_instance_;
    new (ptr) ::apipb::SRWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRWeight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRWeight_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRWeight_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRv6BindingSID_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6BindingSID_default_instance_;
    new (ptr) ::apipb::SRv6BindingSID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6BindingSID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6BindingSID_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6BindingSID_attribute_2eproto}, {
      &scc_info_SRv6EndPointBehavior_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6EndPointBehavior_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6EndPointBehavior_default_instance_;
    new (ptr) ::apipb::SRv6EndPointBehavior();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6EndPointBehavior::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRv6EndPointBehavior_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRv6EndPointBehavior_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRv6InformationSubTLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6InformationSubTLV_default_instance_;
    new (ptr) ::apipb::SRv6InformationSubTLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6InformationSubTLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SRv6InformationSubTLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SRv6InformationSubTLV_attribute_2eproto}, {
      &scc_info_SRv6SIDFlags_attribute_2eproto.base,
      &scc_info_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_default_instance_;
    new (ptr) ::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse();
  }
  ::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_attribute_2eproto}, {
      &scc_info_SRv6TLV_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6L2ServiceTLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6L2ServiceTLV_default_instance_;
    new (ptr) ::apipb::SRv6L2ServiceTLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6L2ServiceTLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6L2ServiceTLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6L2ServiceTLV_attribute_2eproto}, {
      &scc_info_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_;
    new (ptr) ::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse();
  }
  ::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto}, {
      &scc_info_SRv6TLV_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6L3ServiceTLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6L3ServiceTLV_default_instance_;
    new (ptr) ::apipb::SRv6L3ServiceTLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6L3ServiceTLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6L3ServiceTLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6L3ServiceTLV_attribute_2eproto}, {
      &scc_info_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_;
    new (ptr) ::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse();
  }
  ::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto}, {
      &scc_info_SRv6TLV_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SRv6SIDFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6SIDFlags_default_instance_;
    new (ptr) ::apipb::SRv6SIDFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6SIDFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRv6SIDFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRv6SIDFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRv6StructureSubSubTLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6StructureSubSubTLV_default_instance_;
    new (ptr) ::apipb::SRv6StructureSubSubTLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6StructureSubSubTLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRv6StructureSubSubTLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRv6StructureSubSubTLV_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SRv6TLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SRv6TLV_default_instance_;
    new (ptr) ::apipb::SRv6TLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SRv6TLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRv6TLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRv6TLV_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_SegmentFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SegmentFlags_default_instance_;
    new (ptr) ::apipb::SegmentFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SegmentFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SegmentFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_SegmentTypeA_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SegmentTypeA_default_instance_;
    new (ptr) ::apipb::SegmentTypeA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SegmentTypeA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentTypeA_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SegmentTypeA_attribute_2eproto}, {
      &scc_info_SegmentFlags_attribute_2eproto.base,}};

static void InitDefaultsscc_info_SegmentTypeB_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SegmentTypeB_default_instance_;
    new (ptr) ::apipb::SegmentTypeB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SegmentTypeB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SegmentTypeB_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SegmentTypeB_attribute_2eproto}, {
      &scc_info_SegmentFlags_attribute_2eproto.base,
      &scc_info_SRv6EndPointBehavior_attribute_2eproto.base,}};

static void InitDefaultsscc_info_TrafficActionExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TrafficActionExtended_default_instance_;
    new (ptr) ::apipb::TrafficActionExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TrafficActionExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficActionExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficActionExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TrafficRateExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TrafficRateExtended_default_instance_;
    new (ptr) ::apipb::TrafficRateExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TrafficRateExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficRateExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficRateExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TrafficRemarkExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TrafficRemarkExtended_default_instance_;
    new (ptr) ::apipb::TrafficRemarkExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TrafficRemarkExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficRemarkExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficRemarkExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapAttribute_default_instance_;
    new (ptr) ::apipb::TunnelEncapAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TunnelEncapAttribute_attribute_2eproto}, {
      &scc_info_TunnelEncapTLV_attribute_2eproto.base,}};

static void InitDefaultsscc_info_TunnelEncapSubTLVColor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVColor_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVColor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVColor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVEgressEndpoint_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVEgressEndpoint_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVEgressEndpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVEgressEndpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVEgressEndpoint_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVEgressEndpoint_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVEncapsulation_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVEncapsulation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVEncapsulation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVProtocol_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVProtocol_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVProtocol_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVProtocol_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVSRBindingSID_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVSRBindingSID_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVSRBindingSID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVSRBindingSID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapSubTLVSRBindingSID_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TunnelEncapSubTLVSRBindingSID_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_TunnelEncapSubTLVSRCandidatePathName_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVSRCandidatePathName_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVSRCandidatePathName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVSRCandidatePathName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVSRCandidatePathName_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVSRCandidatePathName_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVSRENLP_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVSRENLP_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVSRENLP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVSRENLP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVSRENLP_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVSRENLP_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVSRPreference_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVSRPreference_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVSRPreference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVSRPreference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVSRPreference_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVSRPreference_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVSRPriority_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVSRPriority_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVSRPriority();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVSRPriority::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVSRPriority_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVSRPriority_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVSRSegmentList_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVSRSegmentList_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVSRSegmentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVSRSegmentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TunnelEncapSubTLVSRSegmentList_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TunnelEncapSubTLVSRSegmentList_attribute_2eproto}, {
      &scc_info_SRWeight_attribute_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_TunnelEncapSubTLVUDPDestPort_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVUDPDestPort_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVUDPDestPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVUDPDestPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVUDPDestPort_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVUDPDestPort_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVUnknown_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapSubTLVUnknown_default_instance_;
    new (ptr) ::apipb::TunnelEncapSubTLVUnknown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapSubTLVUnknown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVUnknown_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapTLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TunnelEncapTLV_default_instance_;
    new (ptr) ::apipb::TunnelEncapTLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TunnelEncapTLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapTLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TunnelEncapTLV_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_TwoOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TwoOctetAsSpecificExtended_default_instance_;
    new (ptr) ::apipb::TwoOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TwoOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TwoOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TwoOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_UnknownAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UnknownAttribute_default_instance_;
    new (ptr) ::apipb::UnknownAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UnknownAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_UnknownExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UnknownExtended_default_instance_;
    new (ptr) ::apipb::UnknownExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UnknownExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_VPNFlowSpecNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_VPNFlowSpecNLRI_default_instance_;
    new (ptr) ::apipb::VPNFlowSpecNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::VPNFlowSpecNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VPNFlowSpecNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VPNFlowSpecNLRI_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ValidationExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ValidationExtended_default_instance_;
    new (ptr) ::apipb::ValidationExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ValidationExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidationExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidationExtended_attribute_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_attribute_2eproto[125];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_attribute_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_attribute_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_attribute_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::OriginAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::OriginAttribute, origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AsSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AsSegment, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::AsSegment, numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AsPathAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AsPathAttribute, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::NextHopAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::NextHopAttribute, next_hop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MultiExitDiscAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MultiExitDiscAttribute, med_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LocalPrefAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LocalPrefAttribute, local_pref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AtomicAggregateAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AggregatorAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AggregatorAttribute, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::AggregatorAttribute, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::CommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::CommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::OriginatorIdAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::OriginatorIdAttribute, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ClusterListAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ClusterListAttribute, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::IPAddressPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::IPAddressPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPAddressPrefix, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledIPAddressPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledIPAddressPrefix, labels_),
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledIPAddressPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledIPAddressPrefix, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EncapsulationNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EncapsulationNLRI, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherTwoOctetASN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherTwoOctetASN, admin_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherTwoOctetASN, assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherIPAddress, admin_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherIPAddress, assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherFourOctetASN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherFourOctetASN, admin_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteDistinguisherFourOctetASN, assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EthernetSegmentIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EthernetSegmentIdentifier, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::EthernetSegmentIdentifier, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetAutoDiscoveryRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetAutoDiscoveryRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetAutoDiscoveryRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetAutoDiscoveryRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetAutoDiscoveryRoute, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, mac_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, ip_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNMACIPAdvertisementRoute, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNInclusiveMulticastEthernetTagRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNInclusiveMulticastEthernetTagRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNInclusiveMulticastEthernetTagRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNInclusiveMulticastEthernetTagRoute, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetSegmentRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetSegmentRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetSegmentRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNEthernetSegmentRoute, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, ip_prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, ip_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, gw_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPPrefixRoute, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPMSIRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPMSIRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPMSIRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::apipb::EVPNIPMSIRoute, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRPolicyNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRPolicyNLRI, length_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRPolicyNLRI, distinguisher_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRPolicyNLRI, color_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRPolicyNLRI, endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledVPNIPAddressPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledVPNIPAddressPrefix, labels_),
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledVPNIPAddressPrefix, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledVPNIPAddressPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::LabeledVPNIPAddressPrefix, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipNLRI, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipNLRI, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecIPPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecIPPrefix, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecIPPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecIPPrefix, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecIPPrefix, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecMAC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecMAC, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecMAC, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecComponentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecComponentItem, op_),
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecComponentItem, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecComponent, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecComponent, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::FlowSpecNLRI, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::VPNFlowSpecNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::VPNFlowSpecNLRI, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::VPNFlowSpecNLRI, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::OpaqueNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::OpaqueNLRI, key_),
  PROTOBUF_FIELD_OFFSET(::apipb::OpaqueNLRI, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, bgp_ls_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, ospf_area_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, pseudonode_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, igp_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, bgp_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeDescriptor, bgp_confederation_member_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, link_local_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, link_remote_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, interface_addr_ipv4_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, neighbor_addr_ipv4_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, interface_addr_ipv6_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkDescriptor, neighbor_addr_ipv6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixDescriptor, ip_reachability_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixDescriptor, ospf_route_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeNLRI, local_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkNLRI, local_node_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkNLRI, remote_node_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsLinkNLRI, link_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixV4NLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixV4NLRI, local_node_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixV4NLRI, prefix_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixV6NLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixV6NLRI, local_node_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsPrefixV6NLRI, prefix_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAddrPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAddrPrefix, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAddrPrefix, nlri_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAddrPrefix, length_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAddrPrefix, protocol_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAddrPrefix, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPInterworkSegmentDiscoveryRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPInterworkSegmentDiscoveryRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPInterworkSegmentDiscoveryRoute, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPDirectSegmentDiscoveryRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPDirectSegmentDiscoveryRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPDirectSegmentDiscoveryRoute, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, prefix_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, teid_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, qfi_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, endpoint_address_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType1SessionTransformedRoute, endpoint_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType2SessionTransformedRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType2SessionTransformedRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType2SessionTransformedRoute, endpoint_address_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType2SessionTransformedRoute, endpoint_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPType2SessionTransformedRoute, teid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MpReachNLRIAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MpReachNLRIAttribute, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpReachNLRIAttribute, next_hops_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpReachNLRIAttribute, nlris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MpUnreachNLRIAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MpUnreachNLRIAttribute, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpUnreachNLRIAttribute, nlris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TwoOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TwoOctetAsSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::apipb::TwoOctetAsSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::TwoOctetAsSpecificExtended, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::TwoOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::IPv4AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::IPv4AddressSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPv4AddressSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPv4AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPv4AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::FourOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::FourOctetAsSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::apipb::FourOctetAsSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::FourOctetAsSpecificExtended, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::FourOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LinkBandwidthExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LinkBandwidthExtended, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::LinkBandwidthExtended, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ValidationExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ValidationExtended, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ColorExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ColorExtended, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EncapExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EncapExtended, tunnel_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DefaultGatewayExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::OpaqueExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::OpaqueExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::apipb::OpaqueExtended, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ESILabelExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ESILabelExtended, is_single_active_),
  PROTOBUF_FIELD_OFFSET(::apipb::ESILabelExtended, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ESImportRouteTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ESImportRouteTarget, es_import_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MacMobilityExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MacMobilityExtended, is_sticky_),
  PROTOBUF_FIELD_OFFSET(::apipb::MacMobilityExtended, sequence_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouterMacExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouterMacExtended, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficRateExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficRateExtended, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficRateExtended, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficActionExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficActionExtended, terminal_),
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficActionExtended, sample_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectTwoOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectTwoOctetAsSpecificExtended, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectTwoOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectIPv4AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectIPv4AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectIPv4AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectFourOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectFourOctetAsSpecificExtended, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectFourOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficRemarkExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TrafficRemarkExtended, dscp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MUPExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPExtended, segment_id2_),
  PROTOBUF_FIELD_OFFSET(::apipb::MUPExtended, segment_id4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownExtended, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownExtended, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ExtendedCommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ExtendedCommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::As4PathAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::As4PathAttribute, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::As4AggregatorAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::As4AggregatorAttribute, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::As4AggregatorAttribute, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PmsiTunnelAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PmsiTunnelAttribute, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::PmsiTunnelAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::PmsiTunnelAttribute, label_),
  PROTOBUF_FIELD_OFFSET(::apipb::PmsiTunnelAttribute, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVEncapsulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVEncapsulation, key_),
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVEncapsulation, cookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVProtocol, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVColor, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRPreference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRPreference, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRPreference, preference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRCandidatePathName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRCandidatePathName, candidate_path_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRPriority, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRBindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRBindingSID, bsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRBindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRBindingSID, s_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRBindingSID, i_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRBindingSID, sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6EndPointBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6EndPointBehavior, behavior_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6EndPointBehavior, block_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6EndPointBehavior, node_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6EndPointBehavior, func_len_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6EndPointBehavior, arg_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6BindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6BindingSID, s_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6BindingSID, i_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6BindingSID, b_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6BindingSID, sid_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6BindingSID, endpoint_behavior_structure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRENLP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRENLP, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRENLP, enlp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRWeight, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRWeight, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentFlags, v_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentFlags, a_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentFlags, s_flag_),
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentFlags, b_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeA, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeA, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeB, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeB, sid_),
  PROTOBUF_FIELD_OFFSET(::apipb::SegmentTypeB, endpoint_behavior_structure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRSegmentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRSegmentList, weight_),
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVSRSegmentList, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVEgressEndpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVEgressEndpoint, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVUDPDestPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVUDPDestPort, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVUnknown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVUnknown, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapSubTLVUnknown, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapTLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapTLV, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapTLV, tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TunnelEncapAttribute, tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::IPv6AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::IPv6AddressSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPv6AddressSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPv6AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::IPv6AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectIPv6AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectIPv6AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::RedirectIPv6AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::IP6ExtendedCommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::IP6ExtendedCommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AigpTLVIGPMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AigpTLVIGPMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AigpTLVUnknown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AigpTLVUnknown, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::AigpTLVUnknown, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AigpAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AigpAttribute, tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LargeCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LargeCommunity, global_admin_),
  PROTOBUF_FIELD_OFFSET(::apipb::LargeCommunity, local_data1_),
  PROTOBUF_FIELD_OFFSET(::apipb::LargeCommunity, local_data2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LargeCommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LargeCommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, overload_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, attached_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, external_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, abr_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, router_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsNodeFlags, v6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsIGPFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsIGPFlags, down_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsIGPFlags, no_unicast_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsIGPFlags, local_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsIGPFlags, propagate_nssa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrRange, begin_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrCapabilities, ipv4_supported_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrCapabilities, ipv6_supported_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrCapabilities, ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrLocalBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsSrLocalBlock, ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, local_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, local_router_id_v6_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, isis_area_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, opaque_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, sr_capabilities_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, sr_algorithms_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeNode, sr_local_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, local_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, local_router_id_v6_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, remote_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, remote_router_id_v6_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, admin_group_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, default_te_metric_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, igp_metric_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, opaque_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, reservable_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, unreserved_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, sr_adjacency_sid_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeLink, srlgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributePrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributePrefix, igp_flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributePrefix, opaque_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributePrefix, sr_prefix_sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSIDFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSIDFlags, value_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSIDFlags, local_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSIDFlags, backup_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSIDFlags, persistent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSID, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSID, weight_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsBgpPeerSegmentSID, sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeBgpPeerSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeBgpPeerSegment, bgp_peer_node_sid_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeBgpPeerSegment, bgp_peer_adjacency_sid_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttributeBgpPeerSegment, bgp_peer_set_sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttribute, node_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttribute, link_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttribute, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::LsAttribute, bgp_peer_segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownAttribute, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::UnknownAttribute, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, locator_block_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, locator_node_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, function_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, argument_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, transposition_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6StructureSubSubTLV, transposition_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6SIDFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6SIDFlags, flag_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6TLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6TLV, tlv_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV, sid_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV, flags_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV, endpoint_behavior_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6InformationSubTLV, sub_sub_tlvs_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L3ServiceTLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L3ServiceTLV, sub_tlvs_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L2ServiceTLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SRv6L2ServiceTLV, sub_tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PrefixSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PrefixSID, tlvs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apipb::OriginAttribute)},
  { 6, -1, sizeof(::apipb::AsSegment)},
  { 13, -1, sizeof(::apipb::AsPathAttribute)},
  { 19, -1, sizeof(::apipb::NextHopAttribute)},
  { 25, -1, sizeof(::apipb::MultiExitDiscAttribute)},
  { 31, -1, sizeof(::apipb::LocalPrefAttribute)},
  { 37, -1, sizeof(::apipb::AtomicAggregateAttribute)},
  { 42, -1, sizeof(::apipb::AggregatorAttribute)},
  { 49, -1, sizeof(::apipb::CommunitiesAttribute)},
  { 55, -1, sizeof(::apipb::OriginatorIdAttribute)},
  { 61, -1, sizeof(::apipb::ClusterListAttribute)},
  { 67, -1, sizeof(::apipb::IPAddressPrefix)},
  { 74, -1, sizeof(::apipb::LabeledIPAddressPrefix)},
  { 82, -1, sizeof(::apipb::EncapsulationNLRI)},
  { 88, -1, sizeof(::apipb::RouteDistinguisherTwoOctetASN)},
  { 95, -1, sizeof(::apipb::RouteDistinguisherIPAddress)},
  { 102, -1, sizeof(::apipb::RouteDistinguisherFourOctetASN)},
  { 109, -1, sizeof(::apipb::EthernetSegmentIdentifier)},
  { 116, -1, sizeof(::apipb::EVPNEthernetAutoDiscoveryRoute)},
  { 125, -1, sizeof(::apipb::EVPNMACIPAdvertisementRoute)},
  { 136, -1, sizeof(::apipb::EVPNInclusiveMulticastEthernetTagRoute)},
  { 144, -1, sizeof(::apipb::EVPNEthernetSegmentRoute)},
  { 152, -1, sizeof(::apipb::EVPNIPPrefixRoute)},
  { 164, -1, sizeof(::apipb::EVPNIPMSIRoute)},
  { 172, -1, sizeof(::apipb::SRPolicyNLRI)},
  { 181, -1, sizeof(::apipb::LabeledVPNIPAddressPrefix)},
  { 190, -1, sizeof(::apipb::RouteTargetMembershipNLRI)},
  { 197, -1, sizeof(::apipb::FlowSpecIPPrefix)},
  { 206, -1, sizeof(::apipb::FlowSpecMAC)},
  { 213, -1, sizeof(::apipb::FlowSpecComponentItem)},
  { 220, -1, sizeof(::apipb::FlowSpecComponent)},
  { 227, -1, sizeof(::apipb::FlowSpecNLRI)},
  { 233, -1, sizeof(::apipb::VPNFlowSpecNLRI)},
  { 240, -1, sizeof(::apipb::OpaqueNLRI)},
  { 247, -1, sizeof(::apipb::LsNodeDescriptor)},
  { 259, -1, sizeof(::apipb::LsLinkDescriptor)},
  { 270, -1, sizeof(::apipb::LsPrefixDescriptor)},
  { 277, -1, sizeof(::apipb::LsNodeNLRI)},
  { 283, -1, sizeof(::apipb::LsLinkNLRI)},
  { 291, -1, sizeof(::apipb::LsPrefixV4NLRI)},
  { 298, -1, sizeof(::apipb::LsPrefixV6NLRI)},
  { 305, -1, sizeof(::apipb::LsAddrPrefix)},
  { 315, -1, sizeof(::apipb::MUPInterworkSegmentDiscoveryRoute)},
  { 322, -1, sizeof(::apipb::MUPDirectSegmentDiscoveryRoute)},
  { 329, -1, sizeof(::apipb::MUPType1SessionTransformedRoute)},
  { 341, -1, sizeof(::apipb::MUPType2SessionTransformedRoute)},
  { 350, -1, sizeof(::apipb::MpReachNLRIAttribute)},
  { 358, -1, sizeof(::apipb::MpUnreachNLRIAttribute)},
  { 365, -1, sizeof(::apipb::TwoOctetAsSpecificExtended)},
  { 374, -1, sizeof(::apipb::IPv4AddressSpecificExtended)},
  { 383, -1, sizeof(::apipb::FourOctetAsSpecificExtended)},
  { 392, -1, sizeof(::apipb::LinkBandwidthExtended)},
  { 399, -1, sizeof(::apipb::ValidationExtended)},
  { 405, -1, sizeof(::apipb::ColorExtended)},
  { 411, -1, sizeof(::apipb::EncapExtended)},
  { 417, -1, sizeof(::apipb::DefaultGatewayExtended)},
  { 422, -1, sizeof(::apipb::OpaqueExtended)},
  { 429, -1, sizeof(::apipb::ESILabelExtended)},
  { 436, -1, sizeof(::apipb::ESImportRouteTarget)},
  { 442, -1, sizeof(::apipb::MacMobilityExtended)},
  { 449, -1, sizeof(::apipb::RouterMacExtended)},
  { 455, -1, sizeof(::apipb::TrafficRateExtended)},
  { 462, -1, sizeof(::apipb::TrafficActionExtended)},
  { 469, -1, sizeof(::apipb::RedirectTwoOctetAsSpecificExtended)},
  { 476, -1, sizeof(::apipb::RedirectIPv4AddressSpecificExtended)},
  { 483, -1, sizeof(::apipb::RedirectFourOctetAsSpecificExtended)},
  { 490, -1, sizeof(::apipb::TrafficRemarkExtended)},
  { 496, -1, sizeof(::apipb::MUPExtended)},
  { 504, -1, sizeof(::apipb::UnknownExtended)},
  { 511, -1, sizeof(::apipb::ExtendedCommunitiesAttribute)},
  { 517, -1, sizeof(::apipb::As4PathAttribute)},
  { 523, -1, sizeof(::apipb::As4AggregatorAttribute)},
  { 530, -1, sizeof(::apipb::PmsiTunnelAttribute)},
  { 539, -1, sizeof(::apipb::TunnelEncapSubTLVEncapsulation)},
  { 546, -1, sizeof(::apipb::TunnelEncapSubTLVProtocol)},
  { 552, -1, sizeof(::apipb::TunnelEncapSubTLVColor)},
  { 558, -1, sizeof(::apipb::TunnelEncapSubTLVSRPreference)},
  { 565, -1, sizeof(::apipb::TunnelEncapSubTLVSRCandidatePathName)},
  { 571, -1, sizeof(::apipb::TunnelEncapSubTLVSRPriority)},
  { 577, -1, sizeof(::apipb::TunnelEncapSubTLVSRBindingSID)},
  { 583, -1, sizeof(::apipb::SRBindingSID)},
  { 591, -1, sizeof(::apipb::SRv6EndPointBehavior)},
  { 601, -1, sizeof(::apipb::SRv6BindingSID)},
  { 611, -1, sizeof(::apipb::TunnelEncapSubTLVSRENLP)},
  { 618, -1, sizeof(::apipb::SRWeight)},
  { 625, -1, sizeof(::apipb::SegmentFlags)},
  { 634, -1, sizeof(::apipb::SegmentTypeA)},
  { 641, -1, sizeof(::apipb::SegmentTypeB)},
  { 649, -1, sizeof(::apipb::TunnelEncapSubTLVSRSegmentList)},
  { 656, -1, sizeof(::apipb::TunnelEncapSubTLVEgressEndpoint)},
  { 662, -1, sizeof(::apipb::TunnelEncapSubTLVUDPDestPort)},
  { 668, -1, sizeof(::apipb::TunnelEncapSubTLVUnknown)},
  { 675, -1, sizeof(::apipb::TunnelEncapTLV)},
  { 682, -1, sizeof(::apipb::TunnelEncapAttribute)},
  { 688, -1, sizeof(::apipb::IPv6AddressSpecificExtended)},
  { 697, -1, sizeof(::apipb::RedirectIPv6AddressSpecificExtended)},
  { 704, -1, sizeof(::apipb::IP6ExtendedCommunitiesAttribute)},
  { 710, -1, sizeof(::apipb::AigpTLVIGPMetric)},
  { 716, -1, sizeof(::apipb::AigpTLVUnknown)},
  { 723, -1, sizeof(::apipb::AigpAttribute)},
  { 729, -1, sizeof(::apipb::LargeCommunity)},
  { 737, -1, sizeof(::apipb::LargeCommunitiesAttribute)},
  { 743, -1, sizeof(::apipb::LsNodeFlags)},
  { 754, -1, sizeof(::apipb::LsIGPFlags)},
  { 763, -1, sizeof(::apipb::LsSrRange)},
  { 770, -1, sizeof(::apipb::LsSrCapabilities)},
  { 778, -1, sizeof(::apipb::LsSrLocalBlock)},
  { 784, -1, sizeof(::apipb::LsAttributeNode)},
  { 798, -1, sizeof(::apipb::LsAttributeLink)},
  { 817, -1, sizeof(::apipb::LsAttributePrefix)},
  { 825, -1, sizeof(::apipb::LsBgpPeerSegmentSIDFlags)},
  { 834, -1, sizeof(::apipb::LsBgpPeerSegmentSID)},
  { 842, -1, sizeof(::apipb::LsAttributeBgpPeerSegment)},
  { 850, -1, sizeof(::apipb::LsAttribute)},
  { 859, -1, sizeof(::apipb::UnknownAttribute)},
  { 867, -1, sizeof(::apipb::SRv6StructureSubSubTLV)},
  { 878, -1, sizeof(::apipb::SRv6SIDFlags)},
  { 884, -1, sizeof(::apipb::SRv6TLV)},
  { 890, 897, sizeof(::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse)},
  { 899, -1, sizeof(::apipb::SRv6InformationSubTLV)},
  { 908, 915, sizeof(::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse)},
  { 917, -1, sizeof(::apipb::SRv6L3ServiceTLV)},
  { 923, 930, sizeof(::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse)},
  { 932, -1, sizeof(::apipb::SRv6L2ServiceTLV)},
  { 938, -1, sizeof(::apipb::PrefixSID)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_OriginAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AsSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AsPathAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_NextHopAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MultiExitDiscAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LocalPrefAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AtomicAggregateAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AggregatorAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_CommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_OriginatorIdAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ClusterListAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_IPAddressPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LabeledIPAddressPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EncapsulationNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteDistinguisherTwoOctetASN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteDistinguisherIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteDistinguisherFourOctetASN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EthernetSegmentIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EVPNEthernetAutoDiscoveryRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EVPNMACIPAdvertisementRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EVPNInclusiveMulticastEthernetTagRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EVPNEthernetSegmentRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EVPNIPPrefixRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EVPNIPMSIRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRPolicyNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LabeledVPNIPAddressPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteTargetMembershipNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_FlowSpecIPPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_FlowSpecMAC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_FlowSpecComponentItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_FlowSpecComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_FlowSpecNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_VPNFlowSpecNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_OpaqueNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsNodeDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsLinkDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsPrefixDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsNodeNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsLinkNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsPrefixV4NLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsPrefixV6NLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsAddrPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MUPInterworkSegmentDiscoveryRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MUPDirectSegmentDiscoveryRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MUPType1SessionTransformedRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MUPType2SessionTransformedRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MpReachNLRIAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MpUnreachNLRIAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TwoOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_IPv4AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_FourOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LinkBandwidthExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ValidationExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ColorExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EncapExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DefaultGatewayExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_OpaqueExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ESILabelExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ESImportRouteTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MacMobilityExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouterMacExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TrafficRateExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TrafficActionExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RedirectTwoOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RedirectIPv4AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RedirectFourOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TrafficRemarkExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MUPExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UnknownExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ExtendedCommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_As4PathAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_As4AggregatorAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PmsiTunnelAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVEncapsulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVSRPreference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVSRCandidatePathName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVSRPriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVSRBindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRBindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6EndPointBehavior_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6BindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVSRENLP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SegmentFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SegmentTypeA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SegmentTypeB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVSRSegmentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVEgressEndpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVUDPDestPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapSubTLVUnknown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapTLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TunnelEncapAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_IPv6AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RedirectIPv6AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_IP6ExtendedCommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AigpTLVIGPMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AigpTLVUnknown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AigpAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LargeCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LargeCommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsNodeFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsIGPFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsSrRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsSrCapabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsSrLocalBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsAttributeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsAttributeLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsAttributePrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsBgpPeerSegmentSIDFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsBgpPeerSegmentSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsAttributeBgpPeerSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LsAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UnknownAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6StructureSubSubTLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6SIDFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6TLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6InformationSubTLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6L3ServiceTLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SRv6L2ServiceTLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PrefixSID_default_instance_),
};

const char descriptor_table_protodef_attribute_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017attribute.proto\022\005apipb\032\031google/protobu"
  "f/any.proto\032\013gobgp.proto\"!\n\017OriginAttrib"
  "ute\022\016\n\006origin\030\001 \001(\r\"\236\001\n\tAsSegment\022#\n\004typ"
  "e\030\001 \001(\0162\025.apipb.AsSegment.Type\022\017\n\007number"
  "s\030\002 \003(\r\"[\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006AS_SET\020\001"
  "\022\017\n\013AS_SEQUENCE\020\002\022\026\n\022AS_CONFED_SEQUENCE\020"
  "\003\022\021\n\rAS_CONFED_SET\020\004\"5\n\017AsPathAttribute\022"
  "\"\n\010segments\030\001 \003(\0132\020.apipb.AsSegment\"$\n\020N"
  "extHopAttribute\022\020\n\010next_hop\030\001 \001(\t\"%\n\026Mul"
  "tiExitDiscAttribute\022\013\n\003med\030\001 \001(\r\"(\n\022Loca"
  "lPrefAttribute\022\022\n\nlocal_pref\030\001 \001(\r\"\032\n\030At"
  "omicAggregateAttribute\"3\n\023AggregatorAttr"
  "ibute\022\013\n\003asn\030\001 \001(\r\022\017\n\007address\030\002 \001(\t\"+\n\024C"
  "ommunitiesAttribute\022\023\n\013communities\030\001 \003(\r"
  "\"#\n\025OriginatorIdAttribute\022\n\n\002id\030\001 \001(\t\"#\n"
  "\024ClusterListAttribute\022\013\n\003ids\030\001 \003(\t\"5\n\017IP"
  "AddressPrefix\022\022\n\nprefix_len\030\001 \001(\r\022\016\n\006pre"
  "fix\030\002 \001(\t\"L\n\026LabeledIPAddressPrefix\022\016\n\006l"
  "abels\030\001 \003(\r\022\022\n\nprefix_len\030\002 \001(\r\022\016\n\006prefi"
  "x\030\003 \001(\t\"$\n\021EncapsulationNLRI\022\017\n\007address\030"
  "\001 \001(\t\"@\n\035RouteDistinguisherTwoOctetASN\022\r"
  "\n\005admin\030\001 \001(\r\022\020\n\010assigned\030\002 \001(\r\">\n\033Route"
  "DistinguisherIPAddress\022\r\n\005admin\030\001 \001(\t\022\020\n"
  "\010assigned\030\002 \001(\r\"A\n\036RouteDistinguisherFou"
  "rOctetASN\022\r\n\005admin\030\001 \001(\r\022\020\n\010assigned\030\002 \001"
  "(\r\"8\n\031EthernetSegmentIdentifier\022\014\n\004type\030"
  "\001 \001(\r\022\r\n\005value\030\002 \001(\014\"\226\001\n\036EVPNEthernetAut"
  "oDiscoveryRoute\022 \n\002rd\030\001 \001(\0132\024.google.pro"
  "tobuf.Any\022-\n\003esi\030\002 \001(\0132 .apipb.EthernetS"
  "egmentIdentifier\022\024\n\014ethernet_tag\030\003 \001(\r\022\r"
  "\n\005label\030\004 \001(\r\"\275\001\n\033EVPNMACIPAdvertisement"
  "Route\022 \n\002rd\030\001 \001(\0132\024.google.protobuf.Any\022"
  "-\n\003esi\030\002 \001(\0132 .apipb.EthernetSegmentIden"
  "tifier\022\024\n\014ethernet_tag\030\003 \001(\r\022\023\n\013mac_addr"
  "ess\030\004 \001(\t\022\022\n\nip_address\030\005 \001(\t\022\016\n\006labels\030"
  "\006 \003(\r\"t\n&EVPNInclusiveMulticastEthernetT"
  "agRoute\022 \n\002rd\030\001 \001(\0132\024.google.protobuf.An"
  "y\022\024\n\014ethernet_tag\030\002 \001(\r\022\022\n\nip_address\030\003 "
  "\001(\t\"\177\n\030EVPNEthernetSegmentRoute\022 \n\002rd\030\001 "
  "\001(\0132\024.google.protobuf.Any\022-\n\003esi\030\002 \001(\0132 "
  ".apipb.EthernetSegmentIdentifier\022\022\n\nip_a"
  "ddress\030\003 \001(\t\"\307\001\n\021EVPNIPPrefixRoute\022 \n\002rd"
  "\030\001 \001(\0132\024.google.protobuf.Any\022-\n\003esi\030\002 \001("
  "\0132 .apipb.EthernetSegmentIdentifier\022\024\n\014e"
  "thernet_tag\030\003 \001(\r\022\021\n\tip_prefix\030\004 \001(\t\022\025\n\r"
  "ip_prefix_len\030\005 \001(\r\022\022\n\ngw_address\030\006 \001(\t\022"
  "\r\n\005label\030\007 \001(\r\"j\n\016EVPNIPMSIRoute\022 \n\002rd\030\001"
  " \001(\0132\024.google.protobuf.Any\022\024\n\014ethernet_t"
  "ag\030\002 \001(\r\022 \n\002rt\030\003 \001(\0132\024.google.protobuf.A"
  "ny\"V\n\014SRPolicyNLRI\022\016\n\006length\030\001 \001(\r\022\025\n\rdi"
  "stinguisher\030\002 \001(\r\022\r\n\005color\030\003 \001(\r\022\020\n\010endp"
  "oint\030\004 \001(\014\"q\n\031LabeledVPNIPAddressPrefix\022"
  "\016\n\006labels\030\001 \003(\r\022 \n\002rd\030\002 \001(\0132\024.google.pro"
  "tobuf.Any\022\022\n\nprefix_len\030\003 \001(\r\022\016\n\006prefix\030"
  "\004 \001(\t\"J\n\031RouteTargetMembershipNLRI\022\013\n\003as"
  "n\030\001 \001(\r\022 \n\002rt\030\002 \001(\0132\024.google.protobuf.An"
  "y\"T\n\020FlowSpecIPPrefix\022\014\n\004type\030\001 \001(\r\022\022\n\np"
  "refix_len\030\002 \001(\r\022\016\n\006prefix\030\003 \001(\t\022\016\n\006offse"
  "t\030\004 \001(\r\",\n\013FlowSpecMAC\022\014\n\004type\030\001 \001(\r\022\017\n\007"
  "address\030\002 \001(\t\"2\n\025FlowSpecComponentItem\022\n"
  "\n\002op\030\001 \001(\r\022\r\n\005value\030\002 \001(\004\"N\n\021FlowSpecCom"
  "ponent\022\014\n\004type\030\001 \001(\r\022+\n\005items\030\002 \003(\0132\034.ap"
  "ipb.FlowSpecComponentItem\"3\n\014FlowSpecNLR"
  "I\022#\n\005rules\030\001 \003(\0132\024.google.protobuf.Any\"X"
  "\n\017VPNFlowSpecNLRI\022 \n\002rd\030\001 \001(\0132\024.google.p"
  "rotobuf.Any\022#\n\005rules\030\002 \003(\0132\024.google.prot"
  "obuf.Any\"(\n\nOpaqueNLRI\022\013\n\003key\030\001 \001(\014\022\r\n\005v"
  "alue\030\002 \001(\014\"\254\001\n\020LsNodeDescriptor\022\013\n\003asn\030\001"
  " \001(\r\022\021\n\tbgp_ls_id\030\002 \001(\r\022\024\n\014ospf_area_id\030"
  "\003 \001(\r\022\022\n\npseudonode\030\004 \001(\010\022\025\n\rigp_router_"
  "id\030\005 \001(\t\022\025\n\rbgp_router_id\030\006 \001(\t\022 \n\030bgp_c"
  "onfederation_member\030\007 \001(\r\"\263\001\n\020LsLinkDesc"
  "riptor\022\025\n\rlink_local_id\030\001 \001(\r\022\026\n\016link_re"
  "mote_id\030\002 \001(\r\022\033\n\023interface_addr_ipv4\030\003 \001"
  "(\t\022\032\n\022neighbor_addr_ipv4\030\004 \001(\t\022\033\n\023interf"
  "ace_addr_ipv6\030\005 \001(\t\022\032\n\022neighbor_addr_ipv"
  "6\030\006 \001(\t\"^\n\022LsPrefixDescriptor\022\027\n\017ip_reac"
  "hability\030\001 \003(\t\022/\n\017ospf_route_type\030\002 \001(\0162"
  "\026.apipb.LsOspfRouteType\"9\n\nLsNodeNLRI\022+\n"
  "\nlocal_node\030\001 \001(\0132\027.apipb.LsNodeDescript"
  "or\"\231\001\n\nLsLinkNLRI\022+\n\nlocal_node\030\001 \001(\0132\027."
  "apipb.LsNodeDescriptor\022,\n\013remote_node\030\002 "
  "\001(\0132\027.apipb.LsNodeDescriptor\0220\n\017link_des"
  "criptor\030\003 \001(\0132\027.apipb.LsLinkDescriptor\"s"
  "\n\016LsPrefixV4NLRI\022+\n\nlocal_node\030\001 \001(\0132\027.a"
  "pipb.LsNodeDescriptor\0224\n\021prefix_descript"
  "or\030\002 \001(\0132\031.apipb.LsPrefixDescriptor\"s\n\016L"
  "sPrefixV6NLRI\022+\n\nlocal_node\030\001 \001(\0132\027.apip"
  "b.LsNodeDescriptor\0224\n\021prefix_descriptor\030"
  "\002 \001(\0132\031.apipb.LsPrefixDescriptor\"\241\001\n\014LsA"
  "ddrPrefix\022\037\n\004type\030\001 \001(\0162\021.apipb.LsNLRITy"
  "pe\022\"\n\004nlri\030\002 \001(\0132\024.google.protobuf.Any\022\016"
  "\n\006length\030\003 \001(\r\022(\n\013protocol_id\030\004 \001(\0162\023.ap"
  "ipb.LsProtocolID\022\022\n\nidentifier\030\005 \001(\004\"U\n!"
  "MUPInterworkSegmentDiscoveryRoute\022 \n\002rd\030"
  "\001 \001(\0132\024.google.protobuf.Any\022\016\n\006prefix\030\002 "
  "\001(\t\"S\n\036MUPDirectSegmentDiscoveryRoute\022 \n"
  "\002rd\030\001 \001(\0132\024.google.protobuf.Any\022\017\n\007addre"
  "ss\030\002 \001(\t\"\304\001\n\037MUPType1SessionTransformedR"
  "oute\022 \n\002rd\030\001 \001(\0132\024.google.protobuf.Any\022\031"
  "\n\rprefix_length\030\002 \001(\rB\002\030\001\022\016\n\006prefix\030\003 \001("
  "\t\022\014\n\004teid\030\004 \001(\r\022\013\n\003qfi\030\005 \001(\r\022\037\n\027endpoint"
  "_address_length\030\006 \001(\r\022\030\n\020endpoint_addres"
  "s\030\007 \001(\t\"\214\001\n\037MUPType2SessionTransformedRo"
  "ute\022 \n\002rd\030\001 \001(\0132\024.google.protobuf.Any\022\037\n"
  "\027endpoint_address_length\030\002 \001(\r\022\030\n\020endpoi"
  "nt_address\030\003 \001(\t\022\014\n\004teid\030\004 \001(\r\"m\n\024MpReac"
  "hNLRIAttribute\022\035\n\006family\030\001 \001(\0132\r.apipb.F"
  "amily\022\021\n\tnext_hops\030\002 \003(\t\022#\n\005nlris\030\003 \003(\0132"
  "\024.google.protobuf.Any\"\\\n\026MpUnreachNLRIAt"
  "tribute\022\035\n\006family\030\001 \001(\0132\r.apipb.Family\022#"
  "\n\005nlris\030\003 \003(\0132\024.google.protobuf.Any\"g\n\032T"
  "woOctetAsSpecificExtended\022\025\n\ris_transiti"
  "ve\030\001 \001(\010\022\020\n\010sub_type\030\002 \001(\r\022\013\n\003asn\030\003 \001(\r\022"
  "\023\n\013local_admin\030\004 \001(\r\"l\n\033IPv4AddressSpeci"
  "ficExtended\022\025\n\ris_transitive\030\001 \001(\010\022\020\n\010su"
  "b_type\030\002 \001(\r\022\017\n\007address\030\003 \001(\t\022\023\n\013local_a"
  "dmin\030\004 \001(\r\"h\n\033FourOctetAsSpecificExtende"
  "d\022\025\n\ris_transitive\030\001 \001(\010\022\020\n\010sub_type\030\002 \001"
  "(\r\022\013\n\003asn\030\003 \001(\r\022\023\n\013local_admin\030\004 \001(\r\"7\n\025"
  "LinkBandwidthExtended\022\013\n\003asn\030\001 \001(\r\022\021\n\tba"
  "ndwidth\030\002 \001(\002\"#\n\022ValidationExtended\022\r\n\005s"
  "tate\030\001 \001(\r\"\036\n\rColorExtended\022\r\n\005color\030\001 \001"
  "(\r\"$\n\rEncapExtended\022\023\n\013tunnel_type\030\001 \001(\r"
  "\"\030\n\026DefaultGatewayExtended\"6\n\016OpaqueExte"
  "nded\022\025\n\ris_transitive\030\001 \001(\010\022\r\n\005value\030\003 \001"
  "(\014\";\n\020ESILabelExtended\022\030\n\020is_single_acti"
  "ve\030\001 \001(\010\022\r\n\005label\030\002 \001(\r\"(\n\023ESImportRoute"
  "Target\022\021\n\tes_import\030\001 \001(\t\">\n\023MacMobility"
  "Extended\022\021\n\tis_sticky\030\001 \001(\010\022\024\n\014sequence_"
  "num\030\002 \001(\r\" \n\021RouterMacExtended\022\013\n\003mac\030\001 "
  "\001(\t\"0\n\023TrafficRateExtended\022\013\n\003asn\030\001 \001(\r\022"
  "\014\n\004rate\030\002 \001(\002\"9\n\025TrafficActionExtended\022\020"
  "\n\010terminal\030\001 \001(\010\022\016\n\006sample\030\002 \001(\010\"F\n\"Redi"
  "rectTwoOctetAsSpecificExtended\022\013\n\003asn\030\001 "
  "\001(\r\022\023\n\013local_admin\030\002 \001(\r\"K\n#RedirectIPv4"
  "AddressSpecificExtended\022\017\n\007address\030\001 \001(\t"
  "\022\023\n\013local_admin\030\002 \001(\r\"G\n#RedirectFourOct"
  "etAsSpecificExtended\022\013\n\003asn\030\001 \001(\r\022\023\n\013loc"
  "al_admin\030\002 \001(\r\"%\n\025TrafficRemarkExtended\022"
  "\014\n\004dscp\030\001 \001(\r\"I\n\013MUPExtended\022\020\n\010sub_type"
  "\030\001 \001(\r\022\023\n\013segment_id2\030\002 \001(\r\022\023\n\013segment_i"
  "d4\030\003 \001(\r\".\n\017UnknownExtended\022\014\n\004type\030\001 \001("
  "\r\022\r\n\005value\030\002 \001(\014\"I\n\034ExtendedCommunitiesA"
  "ttribute\022)\n\013communities\030\001 \003(\0132\024.google.p"
  "rotobuf.Any\"6\n\020As4PathAttribute\022\"\n\010segme"
  "nts\030\001 \003(\0132\020.apipb.AsSegment\"6\n\026As4Aggreg"
  "atorAttribute\022\013\n\003asn\030\002 \001(\r\022\017\n\007address\030\003 "
  "\001(\t\"M\n\023PmsiTunnelAttribute\022\r\n\005flags\030\001 \001("
  "\r\022\014\n\004type\030\002 \001(\r\022\r\n\005label\030\003 \001(\r\022\n\n\002id\030\004 \001"
  "(\014\"=\n\036TunnelEncapSubTLVEncapsulation\022\013\n\003"
  "key\030\001 \001(\r\022\016\n\006cookie\030\002 \001(\014\"-\n\031TunnelEncap"
  "SubTLVProtocol\022\020\n\010protocol\030\001 \001(\r\"\'\n\026Tunn"
  "elEncapSubTLVColor\022\r\n\005color\030\001 \001(\r\"B\n\035Tun"
  "nelEncapSubTLVSRPreference\022\r\n\005flags\030\001 \001("
  "\r\022\022\n\npreference\030\002 \001(\r\"C\n$TunnelEncapSubT"
  "LVSRCandidatePathName\022\033\n\023candidate_path_"
  "name\030\001 \001(\t\"/\n\033TunnelEncapSubTLVSRPriorit"
  "y\022\020\n\010priority\030\001 \001(\r\"C\n\035TunnelEncapSubTLV"
  "SRBindingSID\022\"\n\004bsid\030\001 \001(\0132\024.google.prot"
  "obuf.Any\";\n\014SRBindingSID\022\016\n\006s_flag\030\001 \001(\010"
  "\022\016\n\006i_flag\030\002 \001(\010\022\013\n\003sid\030\003 \001(\014\"\205\001\n\024SRv6En"
  "dPointBehavior\022%\n\010behavior\030\001 \001(\0162\023.apipb"
  ".SRv6Behavior\022\021\n\tblock_len\030\002 \001(\r\022\020\n\010node"
  "_len\030\003 \001(\r\022\020\n\010func_len\030\004 \001(\r\022\017\n\007arg_len\030"
  "\005 \001(\r\"\217\001\n\016SRv6BindingSID\022\016\n\006s_flag\030\001 \001(\010"
  "\022\016\n\006i_flag\030\002 \001(\010\022\016\n\006b_flag\030\003 \001(\010\022\013\n\003sid\030"
  "\004 \001(\014\022@\n\033endpoint_behavior_structure\030\005 \001"
  "(\0132\033.apipb.SRv6EndPointBehavior\"G\n\027Tunne"
  "lEncapSubTLVSRENLP\022\r\n\005flags\030\001 \001(\r\022\035\n\004enl"
  "p\030\002 \001(\0162\017.apipb.ENLPType\")\n\010SRWeight\022\r\n\005"
  "flags\030\001 \001(\r\022\016\n\006weight\030\002 \001(\r\"N\n\014SegmentFl"
  "ags\022\016\n\006v_flag\030\001 \001(\010\022\016\n\006a_flag\030\002 \001(\010\022\016\n\006s"
  "_flag\030\003 \001(\010\022\016\n\006b_flag\030\004 \001(\010\"A\n\014SegmentTy"
  "peA\022\"\n\005flags\030\001 \001(\0132\023.apipb.SegmentFlags\022"
  "\r\n\005label\030\002 \001(\r\"\201\001\n\014SegmentTypeB\022\"\n\005flags"
  "\030\001 \001(\0132\023.apipb.SegmentFlags\022\013\n\003sid\030\002 \001(\014"
  "\022@\n\033endpoint_behavior_structure\030\003 \001(\0132\033."
  "apipb.SRv6EndPointBehavior\"i\n\036TunnelEnca"
  "pSubTLVSRSegmentList\022\037\n\006weight\030\001 \001(\0132\017.a"
  "pipb.SRWeight\022&\n\010segments\030\002 \003(\0132\024.google"
  ".protobuf.Any\"2\n\037TunnelEncapSubTLVEgress"
  "Endpoint\022\017\n\007address\030\001 \001(\t\",\n\034TunnelEncap"
  "SubTLVUDPDestPort\022\014\n\004port\030\001 \001(\r\"7\n\030Tunne"
  "lEncapSubTLVUnknown\022\014\n\004type\030\001 \001(\r\022\r\n\005val"
  "ue\030\002 \001(\014\"B\n\016TunnelEncapTLV\022\014\n\004type\030\001 \001(\r"
  "\022\"\n\004tlvs\030\002 \003(\0132\024.google.protobuf.Any\";\n\024"
  "TunnelEncapAttribute\022#\n\004tlvs\030\001 \003(\0132\025.api"
  "pb.TunnelEncapTLV\"l\n\033IPv6AddressSpecific"
  "Extended\022\025\n\ris_transitive\030\001 \001(\010\022\020\n\010sub_t"
  "ype\030\002 \001(\r\022\017\n\007address\030\003 \001(\t\022\023\n\013local_admi"
  "n\030\004 \001(\r\"K\n#RedirectIPv6AddressSpecificEx"
  "tended\022\017\n\007address\030\001 \001(\t\022\023\n\013local_admin\030\002"
  " \001(\r\"L\n\037IP6ExtendedCommunitiesAttribute\022"
  ")\n\013communities\030\001 \003(\0132\024.google.protobuf.A"
  "ny\"\"\n\020AigpTLVIGPMetric\022\016\n\006metric\030\001 \001(\004\"-"
  "\n\016AigpTLVUnknown\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030"
  "\002 \001(\014\"3\n\rAigpAttribute\022\"\n\004tlvs\030\001 \003(\0132\024.g"
  "oogle.protobuf.Any\"P\n\016LargeCommunity\022\024\n\014"
  "global_admin\030\001 \001(\r\022\023\n\013local_data1\030\002 \001(\r\022"
  "\023\n\013local_data2\030\003 \001(\r\"G\n\031LargeCommunities"
  "Attribute\022*\n\013communities\030\001 \003(\0132\025.apipb.L"
  "argeCommunity\"l\n\013LsNodeFlags\022\020\n\010overload"
  "\030\001 \001(\010\022\020\n\010attached\030\002 \001(\010\022\020\n\010external\030\003 \001"
  "(\010\022\013\n\003abr\030\004 \001(\010\022\016\n\006router\030\005 \001(\010\022\n\n\002v6\030\006 "
  "\001(\010\"]\n\nLsIGPFlags\022\014\n\004down\030\001 \001(\010\022\022\n\nno_un"
  "icast\030\002 \001(\010\022\025\n\rlocal_address\030\003 \001(\010\022\026\n\016pr"
  "opagate_nssa\030\004 \001(\010\"\'\n\tLsSrRange\022\r\n\005begin"
  "\030\001 \001(\r\022\013\n\003end\030\002 \001(\r\"d\n\020LsSrCapabilities\022"
  "\026\n\016ipv4_supported\030\001 \001(\010\022\026\n\016ipv6_supporte"
  "d\030\002 \001(\010\022 \n\006ranges\030\003 \003(\0132\020.apipb.LsSrRang"
  "e\"2\n\016LsSrLocalBlock\022 \n\006ranges\030\001 \003(\0132\020.ap"
  "ipb.LsSrRange\"\222\002\n\017LsAttributeNode\022\014\n\004nam"
  "e\030\001 \001(\t\022!\n\005flags\030\002 \001(\0132\022.apipb.LsNodeFla"
  "gs\022\027\n\017local_router_id\030\003 \001(\t\022\032\n\022local_rou"
  "ter_id_v6\030\004 \001(\t\022\021\n\tisis_area\030\005 \001(\014\022\016\n\006op"
  "aque\030\006 \001(\014\0220\n\017sr_capabilities\030\007 \001(\0132\027.ap"
  "ipb.LsSrCapabilities\022\025\n\rsr_algorithms\030\010 "
  "\001(\014\022-\n\016sr_local_block\030\t \001(\0132\025.apipb.LsSr"
  "LocalBlock\"\327\002\n\017LsAttributeLink\022\014\n\004name\030\001"
  " \001(\t\022\027\n\017local_router_id\030\002 \001(\t\022\032\n\022local_r"
  "outer_id_v6\030\003 \001(\t\022\030\n\020remote_router_id\030\004 "
  "\001(\t\022\033\n\023remote_router_id_v6\030\005 \001(\t\022\023\n\013admi"
  "n_group\030\006 \001(\r\022\031\n\021default_te_metric\030\007 \001(\r"
  "\022\022\n\nigp_metric\030\010 \001(\r\022\016\n\006opaque\030\t \001(\014\022\021\n\t"
  "bandwidth\030\n \001(\002\022\034\n\024reservable_bandwidth\030"
  "\013 \001(\002\022\034\n\024unreserved_bandwidth\030\014 \003(\002\022\030\n\020s"
  "r_adjacency_sid\030\r \001(\r\022\r\n\005srlgs\030\016 \003(\r\"`\n\021"
  "LsAttributePrefix\022$\n\tigp_flags\030\001 \001(\0132\021.a"
  "pipb.LsIGPFlags\022\016\n\006opaque\030\002 \001(\014\022\025\n\rsr_pr"
  "efix_sid\030\003 \001(\r\"\\\n\030LsBgpPeerSegmentSIDFla"
  "gs\022\r\n\005value\030\001 \001(\010\022\r\n\005local\030\002 \001(\010\022\016\n\006back"
  "up\030\003 \001(\010\022\022\n\npersistent\030\004 \001(\010\"b\n\023LsBgpPee"
  "rSegmentSID\022.\n\005flags\030\001 \001(\0132\037.apipb.LsBgp"
  "PeerSegmentSIDFlags\022\016\n\006weight\030\002 \001(\r\022\013\n\003s"
  "id\030\003 \001(\r\"\304\001\n\031LsAttributeBgpPeerSegment\0225"
  "\n\021bgp_peer_node_sid\030\001 \001(\0132\032.apipb.LsBgpP"
  "eerSegmentSID\022:\n\026bgp_peer_adjacency_sid\030"
  "\002 \001(\0132\032.apipb.LsBgpPeerSegmentSID\0224\n\020bgp"
  "_peer_set_sid\030\003 \001(\0132\032.apipb.LsBgpPeerSeg"
  "mentSID\"\277\001\n\013LsAttribute\022$\n\004node\030\001 \001(\0132\026."
  "apipb.LsAttributeNode\022$\n\004link\030\002 \001(\0132\026.ap"
  "ipb.LsAttributeLink\022(\n\006prefix\030\003 \001(\0132\030.ap"
  "ipb.LsAttributePrefix\022:\n\020bgp_peer_segmen"
  "t\030\004 \001(\0132 .apipb.LsAttributeBgpPeerSegmen"
  "t\">\n\020UnknownAttribute\022\r\n\005flags\030\001 \001(\r\022\014\n\004"
  "type\030\002 \001(\r\022\r\n\005value\030\003 \001(\014\"\301\001\n\026SRv6Struct"
  "ureSubSubTLV\022\034\n\024locator_block_length\030\001 \001"
  "(\r\022\033\n\023locator_node_length\030\002 \001(\r\022\027\n\017funct"
  "ion_length\030\003 \001(\r\022\027\n\017argument_length\030\004 \001("
  "\r\022\034\n\024transposition_length\030\005 \001(\r\022\034\n\024trans"
  "position_offset\030\006 \001(\r\"\036\n\014SRv6SIDFlags\022\016\n"
  "\006flag_1\030\001 \001(\010\",\n\007SRv6TLV\022!\n\003tlv\030\001 \003(\0132\024."
  "google.protobuf.Any\"\352\001\n\025SRv6InformationS"
  "ubTLV\022\013\n\003sid\030\001 \001(\014\022\"\n\005flags\030\002 \001(\0132\023.apip"
  "b.SRv6SIDFlags\022\031\n\021endpoint_behavior\030\003 \001("
  "\r\022B\n\014sub_sub_tlvs\030\004 \003(\0132,.apipb.SRv6Info"
  "rmationSubTLV.SubSubTlvsEntry\032A\n\017SubSubT"
  "lvsEntry\022\013\n\003key\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132\016.a"
  "pipb.SRv6TLV:\0028\001\"\212\001\n\020SRv6L3ServiceTLV\0226\n"
  "\010sub_tlvs\030\001 \003(\0132$.apipb.SRv6L3ServiceTLV"
  ".SubTlvsEntry\032>\n\014SubTlvsEntry\022\013\n\003key\030\001 \001"
  "(\r\022\035\n\005value\030\002 \001(\0132\016.apipb.SRv6TLV:\0028\001\"\212\001"
  "\n\020SRv6L2ServiceTLV\0226\n\010sub_tlvs\030\001 \003(\0132$.a"
  "pipb.SRv6L2ServiceTLV.SubTlvsEntry\032>\n\014Su"
  "bTlvsEntry\022\013\n\003key\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132\016"
  ".apipb.SRv6TLV:\0028\001\"/\n\tPrefixSID\022\"\n\004tlvs\030"
  "\001 \003(\0132\024.google.protobuf.Any*\367\001\n\017LsOspfRo"
  "uteType\022\036\n\032LS_OSPF_ROUTE_TYPE_UNKNOWN\020\000\022"
  "!\n\035LS_OSPF_ROUTE_TYPE_INTRA_AREA\020\001\022!\n\035LS"
  "_OSPF_ROUTE_TYPE_INTER_AREA\020\002\022 \n\034LS_OSPF"
  "_ROUTE_TYPE_EXTERNAL1\020\003\022 \n\034LS_OSPF_ROUTE"
  "_TYPE_EXTERNAL2\020\004\022\034\n\030LS_OSPF_ROUTE_TYPE_"
  "NSSA1\020\005\022\034\n\030LS_OSPF_ROUTE_TYPE_NSSA2\020\006*s\n"
  "\nLsNLRIType\022\023\n\017LS_NLRI_UNKNOWN\020\000\022\020\n\014LS_N"
  "LRI_NODE\020\001\022\020\n\014LS_NLRI_LINK\020\002\022\025\n\021LS_NLRI_"
  "PREFIX_V4\020\003\022\025\n\021LS_NLRI_PREFIX_V6\020\004*\273\001\n\014L"
  "sProtocolID\022\027\n\023LS_PROTOCOL_UNKNOWN\020\000\022\027\n\023"
  "LS_PROTOCOL_ISIS_L1\020\001\022\027\n\023LS_PROTOCOL_ISI"
  "S_L2\020\002\022\027\n\023LS_PROTOCOL_OSPF_V2\020\003\022\026\n\022LS_PR"
  "OTOCOL_DIRECT\020\004\022\026\n\022LS_PROTOCOL_STATIC\020\005\022"
  "\027\n\023LS_PROTOCOL_OSPF_V3\020\006*\355\005\n\014SRv6Behavio"
  "r\022\014\n\010RESERVED\020\000\022\007\n\003END\020\001\022\020\n\014END_WITH_PSP"
  "\020\002\022\020\n\014END_WITH_USP\020\003\022\024\n\020END_WITH_PSP_USP"
  "\020\004\022\010\n\004ENDX\020\005\022\021\n\rENDX_WITH_PSP\020\006\022\021\n\rENDX_"
  "WITH_USP\020\007\022\025\n\021ENDX_WITH_PSP_USP\020\010\022\010\n\004END"
  "T\020\t\022\021\n\rENDT_WITH_PSP\020\n\022\021\n\rENDT_WITH_USP\020"
  "\013\022\025\n\021ENDT_WITH_PSP_USP\020\014\022\021\n\rEND_B6_ENCAP"
  "S\020\016\022\n\n\006END_BM\020\017\022\013\n\007END_DX6\020\020\022\013\n\007END_DX4\020"
  "\021\022\013\n\007END_DT6\020\022\022\013\n\007END_DT4\020\023\022\014\n\010END_DT46\020"
  "\024\022\013\n\007END_DX2\020\025\022\014\n\010END_DX2V\020\026\022\014\n\010END_DT2U"
  "\020\027\022\014\n\010END_DT2M\020\030\022\025\n\021END_B6_ENCAPS_Red\020\033\022"
  "\020\n\014END_WITH_USD\020\034\022\024\n\020END_WITH_PSP_USD\020\035\022"
  "\024\n\020END_WITH_USP_USD\020\036\022\030\n\024END_WITH_PSP_US"
  "P_USD\020\037\022\021\n\rENDX_WITH_USD\020 \022\025\n\021ENDX_WITH_"
  "PSP_USD\020!\022\025\n\021ENDX_WITH_USP_USD\020\"\022\031\n\025ENDX"
  "_WITH_PSP_USP_USD\020#\022\021\n\rENDT_WITH_USD\020$\022\025"
  "\n\021ENDT_WITH_PSP_USD\020%\022\025\n\021ENDT_WITH_USP_U"
  "SD\020&\022\031\n\025ENDT_WITH_PSP_USP_USD\020\'\022\016\n\nENDM_"
  "GTP6D\020E\022\017\n\013ENDM_GTP6DI\020F\022\016\n\nENDM_GTP6E\020G"
  "\022\016\n\nENDM_GTP4E\020H*D\n\010ENLPType\022\014\n\010Reserved"
  "\020\000\022\t\n\005Type1\020\001\022\t\n\005Type2\020\002\022\t\n\005Type3\020\003\022\t\n\005T"
  "ype4\020\004B$Z\"github.com/osrg/gobgp/v3/api;a"
  "pipbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_attribute_2eproto_deps[2] = {
  &::descriptor_table_gobgp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_attribute_2eproto_sccs[125] = {
  &scc_info_AggregatorAttribute_attribute_2eproto.base,
  &scc_info_AigpAttribute_attribute_2eproto.base,
  &scc_info_AigpTLVIGPMetric_attribute_2eproto.base,
  &scc_info_AigpTLVUnknown_attribute_2eproto.base,
  &scc_info_As4AggregatorAttribute_attribute_2eproto.base,
  &scc_info_As4PathAttribute_attribute_2eproto.base,
  &scc_info_AsPathAttribute_attribute_2eproto.base,
  &scc_info_AsSegment_attribute_2eproto.base,
  &scc_info_AtomicAggregateAttribute_attribute_2eproto.base,
  &scc_info_ClusterListAttribute_attribute_2eproto.base,
  &scc_info_ColorExtended_attribute_2eproto.base,
  &scc_info_CommunitiesAttribute_attribute_2eproto.base,
  &scc_info_DefaultGatewayExtended_attribute_2eproto.base,
  &scc_info_ESILabelExtended_attribute_2eproto.base,
  &scc_info_ESImportRouteTarget_attribute_2eproto.base,
  &scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto.base,
  &scc_info_EVPNEthernetSegmentRoute_attribute_2eproto.base,
  &scc_info_EVPNIPMSIRoute_attribute_2eproto.base,
  &scc_info_EVPNIPPrefixRoute_attribute_2eproto.base,
  &scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto.base,
  &scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto.base,
  &scc_info_EncapExtended_attribute_2eproto.base,
  &scc_info_EncapsulationNLRI_attribute_2eproto.base,
  &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,
  &scc_info_ExtendedCommunitiesAttribute_attribute_2eproto.base,
  &scc_info_FlowSpecComponent_attribute_2eproto.base,
  &scc_info_FlowSpecComponentItem_attribute_2eproto.base,
  &scc_info_FlowSpecIPPrefix_attribute_2eproto.base,
  &scc_info_FlowSpecMAC_attribute_2eproto.base,
  &scc_info_FlowSpecNLRI_attribute_2eproto.base,
  &scc_info_FourOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto.base,
  &scc_info_IPAddressPrefix_attribute_2eproto.base,
  &scc_info_IPv4AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_IPv6AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_LabeledIPAddressPrefix_attribute_2eproto.base,
  &scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto.base,
  &scc_info_LargeCommunitiesAttribute_attribute_2eproto.base,
  &scc_info_LargeCommunity_attribute_2eproto.base,
  &scc_info_LinkBandwidthExtended_attribute_2eproto.base,
  &scc_info_LocalPrefAttribute_attribute_2eproto.base,
  &scc_info_LsAddrPrefix_attribute_2eproto.base,
  &scc_info_LsAttribute_attribute_2eproto.base,
  &scc_info_LsAttributeBgpPeerSegment_attribute_2eproto.base,
  &scc_info_LsAttributeLink_attribute_2eproto.base,
  &scc_info_LsAttributeNode_attribute_2eproto.base,
  &scc_info_LsAttributePrefix_attribute_2eproto.base,
  &scc_info_LsBgpPeerSegmentSID_attribute_2eproto.base,
  &scc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto.base,
  &scc_info_LsIGPFlags_attribute_2eproto.base,
  &scc_info_LsLinkDescriptor_attribute_2eproto.base,
  &scc_info_LsLinkNLRI_attribute_2eproto.base,
  &scc_info_LsNodeDescriptor_attribute_2eproto.base,
  &scc_info_LsNodeFlags_attribute_2eproto.base,
  &scc_info_LsNodeNLRI_attribute_2eproto.base,
  &scc_info_LsPrefixDescriptor_attribute_2eproto.base,
  &scc_info_LsPrefixV4NLRI_attribute_2eproto.base,
  &scc_info_LsPrefixV6NLRI_attribute_2eproto.base,
  &scc_info_LsSrCapabilities_attribute_2eproto.base,
  &scc_info_LsSrLocalBlock_attribute_2eproto.base,
  &scc_info_LsSrRange_attribute_2eproto.base,
  &scc_info_MUPDirectSegmentDiscoveryRoute_attribute_2eproto.base,
  &scc_info_MUPExtended_attribute_2eproto.base,
  &scc_info_MUPInterworkSegmentDiscoveryRoute_attribute_2eproto.base,
  &scc_info_MUPType1SessionTransformedRoute_attribute_2eproto.base,
  &scc_info_MUPType2SessionTransformedRoute_attribute_2eproto.base,
  &scc_info_MacMobilityExtended_attribute_2eproto.base,
  &scc_info_MpReachNLRIAttribute_attribute_2eproto.base,
  &scc_info_MpUnreachNLRIAttribute_attribute_2eproto.base,
  &scc_info_MultiExitDiscAttribute_attribute_2eproto.base,
  &scc_info_NextHopAttribute_attribute_2eproto.base,
  &scc_info_OpaqueExtended_attribute_2eproto.base,
  &scc_info_OpaqueNLRI_attribute_2eproto.base,
  &scc_info_OriginAttribute_attribute_2eproto.base,
  &scc_info_OriginatorIdAttribute_attribute_2eproto.base,
  &scc_info_PmsiTunnelAttribute_attribute_2eproto.base,
  &scc_info_PrefixSID_attribute_2eproto.base,
  &scc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_RouteDistinguisherFourOctetASN_attribute_2eproto.base,
  &scc_info_RouteDistinguisherIPAddress_attribute_2eproto.base,
  &scc_info_RouteDistinguisherTwoOctetASN_attribute_2eproto.base,
  &scc_info_RouteTargetMembershipNLRI_attribute_2eproto.base,
  &scc_info_RouterMacExtended_attribute_2eproto.base,
  &scc_info_SRBindingSID_attribute_2eproto.base,
  &scc_info_SRPolicyNLRI_attribute_2eproto.base,
  &scc_info_SRWeight_attribute_2eproto.base,
  &scc_info_SRv6BindingSID_attribute_2eproto.base,
  &scc_info_SRv6EndPointBehavior_attribute_2eproto.base,
  &scc_info_SRv6InformationSubTLV_attribute_2eproto.base,
  &scc_info_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_attribute_2eproto.base,
  &scc_info_SRv6L2ServiceTLV_attribute_2eproto.base,
  &scc_info_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto.base,
  &scc_info_SRv6L3ServiceTLV_attribute_2eproto.base,
  &scc_info_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_attribute_2eproto.base,
  &scc_info_SRv6SIDFlags_attribute_2eproto.base,
  &scc_info_SRv6StructureSubSubTLV_attribute_2eproto.base,
  &scc_info_SRv6TLV_attribute_2eproto.base,
  &scc_info_SegmentFlags_attribute_2eproto.base,
  &scc_info_SegmentTypeA_attribute_2eproto.base,
  &scc_info_SegmentTypeB_attribute_2eproto.base,
  &scc_info_TrafficActionExtended_attribute_2eproto.base,
  &scc_info_TrafficRateExtended_attribute_2eproto.base,
  &scc_info_TrafficRemarkExtended_attribute_2eproto.base,
  &scc_info_TunnelEncapAttribute_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVColor_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVEgressEndpoint_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVProtocol_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVSRBindingSID_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVSRCandidatePathName_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVSRENLP_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVSRPreference_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVSRPriority_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVSRSegmentList_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVUDPDestPort_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto.base,
  &scc_info_TunnelEncapTLV_attribute_2eproto.base,
  &scc_info_TwoOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_UnknownAttribute_attribute_2eproto.base,
  &scc_info_UnknownExtended_attribute_2eproto.base,
  &scc_info_VPNFlowSpecNLRI_attribute_2eproto.base,
  &scc_info_ValidationExtended_attribute_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_attribute_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_attribute_2eproto = {
  false, false, descriptor_table_protodef_attribute_2eproto, "attribute.proto", 12132,
  &descriptor_table_attribute_2eproto_once, descriptor_table_attribute_2eproto_sccs, descriptor_table_attribute_2eproto_deps, 125, 2,
  schemas, file_default_instances, TableStruct_attribute_2eproto::offsets,
  file_level_metadata_attribute_2eproto, 125, file_level_enum_descriptors_attribute_2eproto, file_level_service_descriptors_attribute_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_attribute_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_attribute_2eproto)), true);
namespace apipb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsSegment_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[0];
}
bool AsSegment_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AsSegment_Type AsSegment::UNKNOWN;
constexpr AsSegment_Type AsSegment::AS_SET;
constexpr AsSegment_Type AsSegment::AS_SEQUENCE;
constexpr AsSegment_Type AsSegment::AS_CONFED_SEQUENCE;
constexpr AsSegment_Type AsSegment::AS_CONFED_SET;
constexpr AsSegment_Type AsSegment::Type_MIN;
constexpr AsSegment_Type AsSegment::Type_MAX;
constexpr int AsSegment::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsOspfRouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[1];
}
bool LsOspfRouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsNLRIType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[2];
}
bool LsNLRIType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsProtocolID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[3];
}
bool LsProtocolID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRv6Behavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[4];
}
bool SRv6Behavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 69:
    case 70:
    case 71:
    case 72:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENLPType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[5];
}
bool ENLPType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OriginAttribute::InitAsDefaultInstance() {
}
class OriginAttribute::_Internal {
 public:
};

OriginAttribute::OriginAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.OriginAttribute)
}
OriginAttribute::OriginAttribute(const OriginAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  origin_ = from.origin_;
  // @@protoc_insertion_point(copy_constructor:apipb.OriginAttribute)
}

void OriginAttribute::SharedCtor() {
  origin_ = 0u;
}

OriginAttribute::~OriginAttribute() {
  // @@protoc_insertion_point(destructor:apipb.OriginAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OriginAttribute::ArenaDtor(void* object) {
  OriginAttribute* _this = reinterpret_cast< OriginAttribute* >(object);
  (void)_this;
}
void OriginAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginAttribute& OriginAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void OriginAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.OriginAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.OriginAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 origin = 1;
  if (this->origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.OriginAttribute)
  return target;
}

size_t OriginAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.OriginAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 origin = 1;
  if (this->origin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_origin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.OriginAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.OriginAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.OriginAttribute)
    MergeFrom(*source);
  }
}

void OriginAttribute::MergeFrom(const OriginAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.OriginAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.origin() != 0) {
    _internal_set_origin(from._internal_origin());
  }
}

void OriginAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.OriginAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginAttribute::CopyFrom(const OriginAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.OriginAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginAttribute::IsInitialized() const {
  return true;
}

void OriginAttribute::InternalSwap(OriginAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(origin_, other->origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsSegment::InitAsDefaultInstance() {
}
class AsSegment::_Internal {
 public:
};

AsSegment::AsSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  numbers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AsSegment)
}
AsSegment::AsSegment(const AsSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      numbers_(from.numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.AsSegment)
}

void AsSegment::SharedCtor() {
  type_ = 0;
}

AsSegment::~AsSegment() {
  // @@protoc_insertion_point(destructor:apipb.AsSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsSegment::ArenaDtor(void* object) {
  AsSegment* _this = reinterpret_cast< AsSegment* >(object);
  (void)_this;
}
void AsSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsSegment& AsSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsSegment_attribute_2eproto.base);
  return *internal_default_instance();
}


void AsSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AsSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.AsSegment.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::AsSegment_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 numbers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AsSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.AsSegment.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated uint32 numbers = 2;
  {
    int byte_size = _numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_numbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AsSegment)
  return target;
}

size_t AsSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AsSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 numbers = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .apipb.AsSegment.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AsSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const AsSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AsSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AsSegment)
    MergeFrom(*source);
  }
}

void AsSegment::MergeFrom(const AsSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AsSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AsSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AsSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsSegment::CopyFrom(const AsSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AsSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsSegment::IsInitialized() const {
  return true;
}

void AsSegment::InternalSwap(AsSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  numbers_.InternalSwap(&other->numbers_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsPathAttribute::InitAsDefaultInstance() {
}
class AsPathAttribute::_Internal {
 public:
};

AsPathAttribute::AsPathAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AsPathAttribute)
}
AsPathAttribute::AsPathAttribute(const AsPathAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.AsPathAttribute)
}

void AsPathAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsPathAttribute_attribute_2eproto.base);
}

AsPathAttribute::~AsPathAttribute() {
  // @@protoc_insertion_point(destructor:apipb.AsPathAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsPathAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsPathAttribute::ArenaDtor(void* object) {
  AsPathAttribute* _this = reinterpret_cast< AsPathAttribute* >(object);
  (void)_this;
}
void AsPathAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsPathAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsPathAttribute& AsPathAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsPathAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AsPathAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AsPathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsPathAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.AsSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsPathAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AsPathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.AsSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AsPathAttribute)
  return target;
}

size_t AsPathAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AsPathAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.AsSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsPathAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AsPathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPathAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsPathAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AsPathAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AsPathAttribute)
    MergeFrom(*source);
  }
}

void AsPathAttribute::MergeFrom(const AsPathAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AsPathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void AsPathAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AsPathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPathAttribute::CopyFrom(const AsPathAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AsPathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPathAttribute::IsInitialized() const {
  return true;
}

void AsPathAttribute::InternalSwap(AsPathAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsPathAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextHopAttribute::InitAsDefaultInstance() {
}
class NextHopAttribute::_Internal {
 public:
};

NextHopAttribute::NextHopAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.NextHopAttribute)
}
NextHopAttribute::NextHopAttribute(const NextHopAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_hop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_hop().empty()) {
    next_hop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_hop(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.NextHopAttribute)
}

void NextHopAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NextHopAttribute_attribute_2eproto.base);
  next_hop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NextHopAttribute::~NextHopAttribute() {
  // @@protoc_insertion_point(destructor:apipb.NextHopAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NextHopAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_hop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NextHopAttribute::ArenaDtor(void* object) {
  NextHopAttribute* _this = reinterpret_cast< NextHopAttribute* >(object);
  (void)_this;
}
void NextHopAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextHopAttribute& NextHopAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextHopAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void NextHopAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.NextHopAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_hop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string next_hop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_next_hop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.NextHopAttribute.next_hop"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextHopAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.NextHopAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string next_hop = 1;
  if (this->next_hop().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_hop().data(), static_cast<int>(this->_internal_next_hop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.NextHopAttribute.next_hop");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_next_hop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.NextHopAttribute)
  return target;
}

size_t NextHopAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.NextHopAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string next_hop = 1;
  if (this->next_hop().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_hop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextHopAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.NextHopAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const NextHopAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextHopAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.NextHopAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.NextHopAttribute)
    MergeFrom(*source);
  }
}

void NextHopAttribute::MergeFrom(const NextHopAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.NextHopAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_hop().size() > 0) {
    _internal_set_next_hop(from._internal_next_hop());
  }
}

void NextHopAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.NextHopAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextHopAttribute::CopyFrom(const NextHopAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.NextHopAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopAttribute::IsInitialized() const {
  return true;
}

void NextHopAttribute::InternalSwap(NextHopAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_hop_.Swap(&other->next_hop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiExitDiscAttribute::InitAsDefaultInstance() {
}
class MultiExitDiscAttribute::_Internal {
 public:
};

MultiExitDiscAttribute::MultiExitDiscAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MultiExitDiscAttribute)
}
MultiExitDiscAttribute::MultiExitDiscAttribute(const MultiExitDiscAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  med_ = from.med_;
  // @@protoc_insertion_point(copy_constructor:apipb.MultiExitDiscAttribute)
}

void MultiExitDiscAttribute::SharedCtor() {
  med_ = 0u;
}

MultiExitDiscAttribute::~MultiExitDiscAttribute() {
  // @@protoc_insertion_point(destructor:apipb.MultiExitDiscAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiExitDiscAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiExitDiscAttribute::ArenaDtor(void* object) {
  MultiExitDiscAttribute* _this = reinterpret_cast< MultiExitDiscAttribute* >(object);
  (void)_this;
}
void MultiExitDiscAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiExitDiscAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiExitDiscAttribute& MultiExitDiscAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiExitDiscAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MultiExitDiscAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MultiExitDiscAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  med_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiExitDiscAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 med = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiExitDiscAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MultiExitDiscAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 med = 1;
  if (this->med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_med(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MultiExitDiscAttribute)
  return target;
}

size_t MultiExitDiscAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MultiExitDiscAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 med = 1;
  if (this->med() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_med());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiExitDiscAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MultiExitDiscAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiExitDiscAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiExitDiscAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MultiExitDiscAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MultiExitDiscAttribute)
    MergeFrom(*source);
  }
}

void MultiExitDiscAttribute::MergeFrom(const MultiExitDiscAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MultiExitDiscAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.med() != 0) {
    _internal_set_med(from._internal_med());
  }
}

void MultiExitDiscAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MultiExitDiscAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiExitDiscAttribute::CopyFrom(const MultiExitDiscAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MultiExitDiscAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiExitDiscAttribute::IsInitialized() const {
  return true;
}

void MultiExitDiscAttribute::InternalSwap(MultiExitDiscAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(med_, other->med_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiExitDiscAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPrefAttribute::InitAsDefaultInstance() {
}
class LocalPrefAttribute::_Internal {
 public:
};

LocalPrefAttribute::LocalPrefAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LocalPrefAttribute)
}
LocalPrefAttribute::LocalPrefAttribute(const LocalPrefAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  local_pref_ = from.local_pref_;
  // @@protoc_insertion_point(copy_constructor:apipb.LocalPrefAttribute)
}

void LocalPrefAttribute::SharedCtor() {
  local_pref_ = 0u;
}

LocalPrefAttribute::~LocalPrefAttribute() {
  // @@protoc_insertion_point(destructor:apipb.LocalPrefAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalPrefAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalPrefAttribute::ArenaDtor(void* object) {
  LocalPrefAttribute* _this = reinterpret_cast< LocalPrefAttribute* >(object);
  (void)_this;
}
void LocalPrefAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalPrefAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPrefAttribute& LocalPrefAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPrefAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void LocalPrefAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LocalPrefAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_pref_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalPrefAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 local_pref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          local_pref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPrefAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LocalPrefAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 local_pref = 1;
  if (this->local_pref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_local_pref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LocalPrefAttribute)
  return target;
}

size_t LocalPrefAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LocalPrefAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 local_pref = 1;
  if (this->local_pref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_pref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPrefAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LocalPrefAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPrefAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPrefAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LocalPrefAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LocalPrefAttribute)
    MergeFrom(*source);
  }
}

void LocalPrefAttribute::MergeFrom(const LocalPrefAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LocalPrefAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_pref() != 0) {
    _internal_set_local_pref(from._internal_local_pref());
  }
}

void LocalPrefAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LocalPrefAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPrefAttribute::CopyFrom(const LocalPrefAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LocalPrefAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPrefAttribute::IsInitialized() const {
  return true;
}

void LocalPrefAttribute::InternalSwap(LocalPrefAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(local_pref_, other->local_pref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPrefAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AtomicAggregateAttribute::InitAsDefaultInstance() {
}
class AtomicAggregateAttribute::_Internal {
 public:
};

AtomicAggregateAttribute::AtomicAggregateAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AtomicAggregateAttribute)
}
AtomicAggregateAttribute::AtomicAggregateAttribute(const AtomicAggregateAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.AtomicAggregateAttribute)
}

void AtomicAggregateAttribute::SharedCtor() {
}

AtomicAggregateAttribute::~AtomicAggregateAttribute() {
  // @@protoc_insertion_point(destructor:apipb.AtomicAggregateAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AtomicAggregateAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AtomicAggregateAttribute::ArenaDtor(void* object) {
  AtomicAggregateAttribute* _this = reinterpret_cast< AtomicAggregateAttribute* >(object);
  (void)_this;
}
void AtomicAggregateAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AtomicAggregateAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtomicAggregateAttribute& AtomicAggregateAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtomicAggregateAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AtomicAggregateAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AtomicAggregateAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AtomicAggregateAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AtomicAggregateAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AtomicAggregateAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AtomicAggregateAttribute)
  return target;
}

size_t AtomicAggregateAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AtomicAggregateAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtomicAggregateAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AtomicAggregateAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AtomicAggregateAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AtomicAggregateAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AtomicAggregateAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AtomicAggregateAttribute)
    MergeFrom(*source);
  }
}

void AtomicAggregateAttribute::MergeFrom(const AtomicAggregateAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AtomicAggregateAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AtomicAggregateAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AtomicAggregateAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtomicAggregateAttribute::CopyFrom(const AtomicAggregateAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AtomicAggregateAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomicAggregateAttribute::IsInitialized() const {
  return true;
}

void AtomicAggregateAttribute::InternalSwap(AtomicAggregateAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtomicAggregateAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregatorAttribute::InitAsDefaultInstance() {
}
class AggregatorAttribute::_Internal {
 public:
};

AggregatorAttribute::AggregatorAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AggregatorAttribute)
}
AggregatorAttribute::AggregatorAttribute(const AggregatorAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  asn_ = from.asn_;
  // @@protoc_insertion_point(copy_constructor:apipb.AggregatorAttribute)
}

void AggregatorAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregatorAttribute_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_ = 0u;
}

AggregatorAttribute::~AggregatorAttribute() {
  // @@protoc_insertion_point(destructor:apipb.AggregatorAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregatorAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AggregatorAttribute::ArenaDtor(void* object) {
  AggregatorAttribute* _this = reinterpret_cast< AggregatorAttribute* >(object);
  (void)_this;
}
void AggregatorAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregatorAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatorAttribute& AggregatorAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregatorAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AggregatorAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregatorAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AggregatorAttribute.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregatorAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AggregatorAttribute.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AggregatorAttribute)
  return target;
}

size_t AggregatorAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AggregatorAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatorAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregatorAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregatorAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AggregatorAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AggregatorAttribute)
    MergeFrom(*source);
  }
}

void AggregatorAttribute::MergeFrom(const AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
}

void AggregatorAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatorAttribute::CopyFrom(const AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorAttribute::IsInitialized() const {
  return true;
}

void AggregatorAttribute::InternalSwap(AggregatorAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(asn_, other->asn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregatorAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommunitiesAttribute::InitAsDefaultInstance() {
}
class CommunitiesAttribute::_Internal {
 public:
};

CommunitiesAttribute::CommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.CommunitiesAttribute)
}
CommunitiesAttribute::CommunitiesAttribute(const CommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.CommunitiesAttribute)
}

void CommunitiesAttribute::SharedCtor() {
}

CommunitiesAttribute::~CommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:apipb.CommunitiesAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunitiesAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommunitiesAttribute::ArenaDtor(void* object) {
  CommunitiesAttribute* _this = reinterpret_cast< CommunitiesAttribute* >(object);
  (void)_this;
}
void CommunitiesAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunitiesAttribute& CommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void CommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.CommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_communities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_communities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.CommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 communities = 1;
  {
    int byte_size = _communities_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_communities(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.CommunitiesAttribute)
  return target;
}

size_t CommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.CommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 communities = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->communities_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _communities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.CommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.CommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.CommunitiesAttribute)
    MergeFrom(*source);
  }
}

void CommunitiesAttribute::MergeFrom(const CommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.CommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void CommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.CommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunitiesAttribute::CopyFrom(const CommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.CommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunitiesAttribute::IsInitialized() const {
  return true;
}

void CommunitiesAttribute::InternalSwap(CommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginatorIdAttribute::InitAsDefaultInstance() {
}
class OriginatorIdAttribute::_Internal {
 public:
};

OriginatorIdAttribute::OriginatorIdAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.OriginatorIdAttribute)
}
OriginatorIdAttribute::OriginatorIdAttribute(const OriginatorIdAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.OriginatorIdAttribute)
}

void OriginatorIdAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginatorIdAttribute_attribute_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OriginatorIdAttribute::~OriginatorIdAttribute() {
  // @@protoc_insertion_point(destructor:apipb.OriginatorIdAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginatorIdAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OriginatorIdAttribute::ArenaDtor(void* object) {
  OriginatorIdAttribute* _this = reinterpret_cast< OriginatorIdAttribute* >(object);
  (void)_this;
}
void OriginatorIdAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginatorIdAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginatorIdAttribute& OriginatorIdAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginatorIdAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void OriginatorIdAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.OriginatorIdAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginatorIdAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.OriginatorIdAttribute.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginatorIdAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.OriginatorIdAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.OriginatorIdAttribute.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.OriginatorIdAttribute)
  return target;
}

size_t OriginatorIdAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.OriginatorIdAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginatorIdAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.OriginatorIdAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginatorIdAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginatorIdAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.OriginatorIdAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.OriginatorIdAttribute)
    MergeFrom(*source);
  }
}

void OriginatorIdAttribute::MergeFrom(const OriginatorIdAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.OriginatorIdAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void OriginatorIdAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.OriginatorIdAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginatorIdAttribute::CopyFrom(const OriginatorIdAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.OriginatorIdAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginatorIdAttribute::IsInitialized() const {
  return true;
}

void OriginatorIdAttribute::InternalSwap(OriginatorIdAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginatorIdAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterListAttribute::InitAsDefaultInstance() {
}
class ClusterListAttribute::_Internal {
 public:
};

ClusterListAttribute::ClusterListAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ClusterListAttribute)
}
ClusterListAttribute::ClusterListAttribute(const ClusterListAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.ClusterListAttribute)
}

void ClusterListAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterListAttribute_attribute_2eproto.base);
}

ClusterListAttribute::~ClusterListAttribute() {
  // @@protoc_insertion_point(destructor:apipb.ClusterListAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClusterListAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClusterListAttribute::ArenaDtor(void* object) {
  ClusterListAttribute* _this = reinterpret_cast< ClusterListAttribute* >(object);
  (void)_this;
}
void ClusterListAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClusterListAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterListAttribute& ClusterListAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterListAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void ClusterListAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ClusterListAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterListAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ClusterListAttribute.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterListAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ClusterListAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ClusterListAttribute.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ClusterListAttribute)
  return target;
}

size_t ClusterListAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ClusterListAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterListAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ClusterListAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterListAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterListAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ClusterListAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ClusterListAttribute)
    MergeFrom(*source);
  }
}

void ClusterListAttribute::MergeFrom(const ClusterListAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ClusterListAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void ClusterListAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ClusterListAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterListAttribute::CopyFrom(const ClusterListAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ClusterListAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterListAttribute::IsInitialized() const {
  return true;
}

void ClusterListAttribute::InternalSwap(ClusterListAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterListAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPAddressPrefix::InitAsDefaultInstance() {
}
class IPAddressPrefix::_Internal {
 public:
};

IPAddressPrefix::IPAddressPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.IPAddressPrefix)
}
IPAddressPrefix::IPAddressPrefix(const IPAddressPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:apipb.IPAddressPrefix)
}

void IPAddressPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPAddressPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0u;
}

IPAddressPrefix::~IPAddressPrefix() {
  // @@protoc_insertion_point(destructor:apipb.IPAddressPrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPAddressPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPAddressPrefix::ArenaDtor(void* object) {
  IPAddressPrefix* _this = reinterpret_cast< IPAddressPrefix* >(object);
  (void)_this;
}
void IPAddressPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPAddressPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPAddressPrefix& IPAddressPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPAddressPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void IPAddressPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.IPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_len_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPAddressPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 prefix_len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.IPAddressPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPAddressPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.IPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 prefix_len = 1;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prefix_len(), target);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.IPAddressPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.IPAddressPrefix)
  return target;
}

size_t IPAddressPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.IPAddressPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // uint32 prefix_len = 1;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPAddressPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.IPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAddressPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPAddressPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.IPAddressPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.IPAddressPrefix)
    MergeFrom(*source);
  }
}

void IPAddressPrefix::MergeFrom(const IPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.IPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void IPAddressPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.IPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAddressPrefix::CopyFrom(const IPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.IPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddressPrefix::IsInitialized() const {
  return true;
}

void IPAddressPrefix::InternalSwap(IPAddressPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPAddressPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledIPAddressPrefix::InitAsDefaultInstance() {
}
class LabeledIPAddressPrefix::_Internal {
 public:
};

LabeledIPAddressPrefix::LabeledIPAddressPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LabeledIPAddressPrefix)
}
LabeledIPAddressPrefix::LabeledIPAddressPrefix(const LabeledIPAddressPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:apipb.LabeledIPAddressPrefix)
}

void LabeledIPAddressPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledIPAddressPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0u;
}

LabeledIPAddressPrefix::~LabeledIPAddressPrefix() {
  // @@protoc_insertion_point(destructor:apipb.LabeledIPAddressPrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabeledIPAddressPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabeledIPAddressPrefix::ArenaDtor(void* object) {
  LabeledIPAddressPrefix* _this = reinterpret_cast< LabeledIPAddressPrefix* >(object);
  (void)_this;
}
void LabeledIPAddressPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabeledIPAddressPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledIPAddressPrefix& LabeledIPAddressPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledIPAddressPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LabeledIPAddressPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LabeledIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_len_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabeledIPAddressPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LabeledIPAddressPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledIPAddressPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LabeledIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    int byte_size = _labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_labels(), byte_size, target);
    }
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LabeledIPAddressPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LabeledIPAddressPrefix)
  return target;
}

size_t LabeledIPAddressPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LabeledIPAddressPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledIPAddressPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LabeledIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledIPAddressPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledIPAddressPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LabeledIPAddressPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LabeledIPAddressPrefix)
    MergeFrom(*source);
  }
}

void LabeledIPAddressPrefix::MergeFrom(const LabeledIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LabeledIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void LabeledIPAddressPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LabeledIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledIPAddressPrefix::CopyFrom(const LabeledIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LabeledIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledIPAddressPrefix::IsInitialized() const {
  return true;
}

void LabeledIPAddressPrefix::InternalSwap(LabeledIPAddressPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledIPAddressPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncapsulationNLRI::InitAsDefaultInstance() {
}
class EncapsulationNLRI::_Internal {
 public:
};

EncapsulationNLRI::EncapsulationNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EncapsulationNLRI)
}
EncapsulationNLRI::EncapsulationNLRI(const EncapsulationNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.EncapsulationNLRI)
}

void EncapsulationNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncapsulationNLRI_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EncapsulationNLRI::~EncapsulationNLRI() {
  // @@protoc_insertion_point(destructor:apipb.EncapsulationNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncapsulationNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EncapsulationNLRI::ArenaDtor(void* object) {
  EncapsulationNLRI* _this = reinterpret_cast< EncapsulationNLRI* >(object);
  (void)_this;
}
void EncapsulationNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncapsulationNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncapsulationNLRI& EncapsulationNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncapsulationNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void EncapsulationNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EncapsulationNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncapsulationNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EncapsulationNLRI.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncapsulationNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EncapsulationNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EncapsulationNLRI.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EncapsulationNLRI)
  return target;
}

size_t EncapsulationNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EncapsulationNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncapsulationNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EncapsulationNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const EncapsulationNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncapsulationNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EncapsulationNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EncapsulationNLRI)
    MergeFrom(*source);
  }
}

void EncapsulationNLRI::MergeFrom(const EncapsulationNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EncapsulationNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void EncapsulationNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EncapsulationNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncapsulationNLRI::CopyFrom(const EncapsulationNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EncapsulationNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncapsulationNLRI::IsInitialized() const {
  return true;
}

void EncapsulationNLRI::InternalSwap(EncapsulationNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EncapsulationNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteDistinguisherTwoOctetASN::InitAsDefaultInstance() {
}
class RouteDistinguisherTwoOctetASN::_Internal {
 public:
};

RouteDistinguisherTwoOctetASN::RouteDistinguisherTwoOctetASN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteDistinguisherTwoOctetASN)
}
RouteDistinguisherTwoOctetASN::RouteDistinguisherTwoOctetASN(const RouteDistinguisherTwoOctetASN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&admin_, &from.admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&assigned_) -
    reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  // @@protoc_insertion_point(copy_constructor:apipb.RouteDistinguisherTwoOctetASN)
}

void RouteDistinguisherTwoOctetASN::SharedCtor() {
  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
}

RouteDistinguisherTwoOctetASN::~RouteDistinguisherTwoOctetASN() {
  // @@protoc_insertion_point(destructor:apipb.RouteDistinguisherTwoOctetASN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteDistinguisherTwoOctetASN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteDistinguisherTwoOctetASN::ArenaDtor(void* object) {
  RouteDistinguisherTwoOctetASN* _this = reinterpret_cast< RouteDistinguisherTwoOctetASN* >(object);
  (void)_this;
}
void RouteDistinguisherTwoOctetASN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteDistinguisherTwoOctetASN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteDistinguisherTwoOctetASN& RouteDistinguisherTwoOctetASN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteDistinguisherTwoOctetASN_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteDistinguisherTwoOctetASN::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteDistinguisherTwoOctetASN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteDistinguisherTwoOctetASN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteDistinguisherTwoOctetASN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteDistinguisherTwoOctetASN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_admin(), target);
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteDistinguisherTwoOctetASN)
  return target;
}

size_t RouteDistinguisherTwoOctetASN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteDistinguisherTwoOctetASN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assigned());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteDistinguisherTwoOctetASN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteDistinguisherTwoOctetASN)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDistinguisherTwoOctetASN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteDistinguisherTwoOctetASN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteDistinguisherTwoOctetASN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteDistinguisherTwoOctetASN)
    MergeFrom(*source);
  }
}

void RouteDistinguisherTwoOctetASN::MergeFrom(const RouteDistinguisherTwoOctetASN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteDistinguisherTwoOctetASN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.assigned() != 0) {
    _internal_set_assigned(from._internal_assigned());
  }
}

void RouteDistinguisherTwoOctetASN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteDistinguisherTwoOctetASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDistinguisherTwoOctetASN::CopyFrom(const RouteDistinguisherTwoOctetASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteDistinguisherTwoOctetASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDistinguisherTwoOctetASN::IsInitialized() const {
  return true;
}

void RouteDistinguisherTwoOctetASN::InternalSwap(RouteDistinguisherTwoOctetASN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteDistinguisherTwoOctetASN, assigned_)
      + sizeof(RouteDistinguisherTwoOctetASN::assigned_)
      - PROTOBUF_FIELD_OFFSET(RouteDistinguisherTwoOctetASN, admin_)>(
          reinterpret_cast<char*>(&admin_),
          reinterpret_cast<char*>(&other->admin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteDistinguisherTwoOctetASN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteDistinguisherIPAddress::InitAsDefaultInstance() {
}
class RouteDistinguisherIPAddress::_Internal {
 public:
};

RouteDistinguisherIPAddress::RouteDistinguisherIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteDistinguisherIPAddress)
}
RouteDistinguisherIPAddress::RouteDistinguisherIPAddress(const RouteDistinguisherIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_admin().empty()) {
    admin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_admin(),
      GetArena());
  }
  assigned_ = from.assigned_;
  // @@protoc_insertion_point(copy_constructor:apipb.RouteDistinguisherIPAddress)
}

void RouteDistinguisherIPAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteDistinguisherIPAddress_attribute_2eproto.base);
  admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assigned_ = 0u;
}

RouteDistinguisherIPAddress::~RouteDistinguisherIPAddress() {
  // @@protoc_insertion_point(destructor:apipb.RouteDistinguisherIPAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteDistinguisherIPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  admin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteDistinguisherIPAddress::ArenaDtor(void* object) {
  RouteDistinguisherIPAddress* _this = reinterpret_cast< RouteDistinguisherIPAddress* >(object);
  (void)_this;
}
void RouteDistinguisherIPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteDistinguisherIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteDistinguisherIPAddress& RouteDistinguisherIPAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteDistinguisherIPAddress_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteDistinguisherIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteDistinguisherIPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  admin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assigned_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteDistinguisherIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_admin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.RouteDistinguisherIPAddress.admin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteDistinguisherIPAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteDistinguisherIPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string admin = 1;
  if (this->admin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_admin().data(), static_cast<int>(this->_internal_admin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.RouteDistinguisherIPAddress.admin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_admin(), target);
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteDistinguisherIPAddress)
  return target;
}

size_t RouteDistinguisherIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteDistinguisherIPAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin = 1;
  if (this->admin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_admin());
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assigned());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteDistinguisherIPAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteDistinguisherIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDistinguisherIPAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteDistinguisherIPAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteDistinguisherIPAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteDistinguisherIPAddress)
    MergeFrom(*source);
  }
}

void RouteDistinguisherIPAddress::MergeFrom(const RouteDistinguisherIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteDistinguisherIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admin().size() > 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.assigned() != 0) {
    _internal_set_assigned(from._internal_assigned());
  }
}

void RouteDistinguisherIPAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteDistinguisherIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDistinguisherIPAddress::CopyFrom(const RouteDistinguisherIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteDistinguisherIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDistinguisherIPAddress::IsInitialized() const {
  return true;
}

void RouteDistinguisherIPAddress::InternalSwap(RouteDistinguisherIPAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  admin_.Swap(&other->admin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(assigned_, other->assigned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteDistinguisherIPAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteDistinguisherFourOctetASN::InitAsDefaultInstance() {
}
class RouteDistinguisherFourOctetASN::_Internal {
 public:
};

RouteDistinguisherFourOctetASN::RouteDistinguisherFourOctetASN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteDistinguisherFourOctetASN)
}
RouteDistinguisherFourOctetASN::RouteDistinguisherFourOctetASN(const RouteDistinguisherFourOctetASN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&admin_, &from.admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&assigned_) -
    reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  // @@protoc_insertion_point(copy_constructor:apipb.RouteDistinguisherFourOctetASN)
}

void RouteDistinguisherFourOctetASN::SharedCtor() {
  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
}

RouteDistinguisherFourOctetASN::~RouteDistinguisherFourOctetASN() {
  // @@protoc_insertion_point(destructor:apipb.RouteDistinguisherFourOctetASN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteDistinguisherFourOctetASN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteDistinguisherFourOctetASN::ArenaDtor(void* object) {
  RouteDistinguisherFourOctetASN* _this = reinterpret_cast< RouteDistinguisherFourOctetASN* >(object);
  (void)_this;
}
void RouteDistinguisherFourOctetASN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteDistinguisherFourOctetASN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteDistinguisherFourOctetASN& RouteDistinguisherFourOctetASN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteDistinguisherFourOctetASN_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteDistinguisherFourOctetASN::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteDistinguisherFourOctetASN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteDistinguisherFourOctetASN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteDistinguisherFourOctetASN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteDistinguisherFourOctetASN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_admin(), target);
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteDistinguisherFourOctetASN)
  return target;
}

size_t RouteDistinguisherFourOctetASN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteDistinguisherFourOctetASN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assigned());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteDistinguisherFourOctetASN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteDistinguisherFourOctetASN)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDistinguisherFourOctetASN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteDistinguisherFourOctetASN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteDistinguisherFourOctetASN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteDistinguisherFourOctetASN)
    MergeFrom(*source);
  }
}

void RouteDistinguisherFourOctetASN::MergeFrom(const RouteDistinguisherFourOctetASN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteDistinguisherFourOctetASN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.assigned() != 0) {
    _internal_set_assigned(from._internal_assigned());
  }
}

void RouteDistinguisherFourOctetASN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteDistinguisherFourOctetASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDistinguisherFourOctetASN::CopyFrom(const RouteDistinguisherFourOctetASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteDistinguisherFourOctetASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDistinguisherFourOctetASN::IsInitialized() const {
  return true;
}

void RouteDistinguisherFourOctetASN::InternalSwap(RouteDistinguisherFourOctetASN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteDistinguisherFourOctetASN, assigned_)
      + sizeof(RouteDistinguisherFourOctetASN::assigned_)
      - PROTOBUF_FIELD_OFFSET(RouteDistinguisherFourOctetASN, admin_)>(
          reinterpret_cast<char*>(&admin_),
          reinterpret_cast<char*>(&other->admin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteDistinguisherFourOctetASN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EthernetSegmentIdentifier::InitAsDefaultInstance() {
}
class EthernetSegmentIdentifier::_Internal {
 public:
};

EthernetSegmentIdentifier::EthernetSegmentIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EthernetSegmentIdentifier)
}
EthernetSegmentIdentifier::EthernetSegmentIdentifier(const EthernetSegmentIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.EthernetSegmentIdentifier)
}

void EthernetSegmentIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthernetSegmentIdentifier_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

EthernetSegmentIdentifier::~EthernetSegmentIdentifier() {
  // @@protoc_insertion_point(destructor:apipb.EthernetSegmentIdentifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EthernetSegmentIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthernetSegmentIdentifier::ArenaDtor(void* object) {
  EthernetSegmentIdentifier* _this = reinterpret_cast< EthernetSegmentIdentifier* >(object);
  (void)_this;
}
void EthernetSegmentIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EthernetSegmentIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthernetSegmentIdentifier& EthernetSegmentIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthernetSegmentIdentifier_attribute_2eproto.base);
  return *internal_default_instance();
}


void EthernetSegmentIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EthernetSegmentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EthernetSegmentIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthernetSegmentIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EthernetSegmentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EthernetSegmentIdentifier)
  return target;
}

size_t EthernetSegmentIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EthernetSegmentIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthernetSegmentIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EthernetSegmentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const EthernetSegmentIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthernetSegmentIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EthernetSegmentIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EthernetSegmentIdentifier)
    MergeFrom(*source);
  }
}

void EthernetSegmentIdentifier::MergeFrom(const EthernetSegmentIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EthernetSegmentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EthernetSegmentIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EthernetSegmentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthernetSegmentIdentifier::CopyFrom(const EthernetSegmentIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EthernetSegmentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthernetSegmentIdentifier::IsInitialized() const {
  return true;
}

void EthernetSegmentIdentifier::InternalSwap(EthernetSegmentIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthernetSegmentIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNEthernetAutoDiscoveryRoute::InitAsDefaultInstance() {
  ::apipb::_EVPNEthernetAutoDiscoveryRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::apipb::_EVPNEthernetAutoDiscoveryRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::apipb::EthernetSegmentIdentifier*>(
      ::apipb::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNEthernetAutoDiscoveryRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNEthernetAutoDiscoveryRoute* msg);
  static const ::apipb::EthernetSegmentIdentifier& esi(const EVPNEthernetAutoDiscoveryRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNEthernetAutoDiscoveryRoute::_Internal::rd(const EVPNEthernetAutoDiscoveryRoute* msg) {
  return *msg->rd_;
}
const ::apipb::EthernetSegmentIdentifier&
EVPNEthernetAutoDiscoveryRoute::_Internal::esi(const EVPNEthernetAutoDiscoveryRoute* msg) {
  return *msg->esi_;
}
void EVPNEthernetAutoDiscoveryRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNEthernetAutoDiscoveryRoute::EVPNEthernetAutoDiscoveryRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EVPNEthernetAutoDiscoveryRoute)
}
EVPNEthernetAutoDiscoveryRoute::EVPNEthernetAutoDiscoveryRoute(const EVPNEthernetAutoDiscoveryRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::apipb::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  ::memcpy(&ethernet_tag_, &from.ethernet_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:apipb.EVPNEthernetAutoDiscoveryRoute)
}

void EVPNEthernetAutoDiscoveryRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto.base);
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(label_));
}

EVPNEthernetAutoDiscoveryRoute::~EVPNEthernetAutoDiscoveryRoute() {
  // @@protoc_insertion_point(destructor:apipb.EVPNEthernetAutoDiscoveryRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EVPNEthernetAutoDiscoveryRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNEthernetAutoDiscoveryRoute::ArenaDtor(void* object) {
  EVPNEthernetAutoDiscoveryRoute* _this = reinterpret_cast< EVPNEthernetAutoDiscoveryRoute* >(object);
  (void)_this;
}
void EVPNEthernetAutoDiscoveryRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EVPNEthernetAutoDiscoveryRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNEthernetAutoDiscoveryRoute& EVPNEthernetAutoDiscoveryRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNEthernetAutoDiscoveryRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  ::memset(&ethernet_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EVPNEthernetAutoDiscoveryRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNEthernetAutoDiscoveryRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ethernet_tag(), target);
  }

  // uint32 label = 4;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EVPNEthernetAutoDiscoveryRoute)
  return target;
}

size_t EVPNEthernetAutoDiscoveryRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  // uint32 label = 4;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNEthernetAutoDiscoveryRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNEthernetAutoDiscoveryRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNEthernetAutoDiscoveryRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EVPNEthernetAutoDiscoveryRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EVPNEthernetAutoDiscoveryRoute)
    MergeFrom(*source);
  }
}

void EVPNEthernetAutoDiscoveryRoute::MergeFrom(const EVPNEthernetAutoDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::apipb::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void EVPNEthernetAutoDiscoveryRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNEthernetAutoDiscoveryRoute::CopyFrom(const EVPNEthernetAutoDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EVPNEthernetAutoDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNEthernetAutoDiscoveryRoute::IsInitialized() const {
  return true;
}

void EVPNEthernetAutoDiscoveryRoute::InternalSwap(EVPNEthernetAutoDiscoveryRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EVPNEthernetAutoDiscoveryRoute, label_)
      + sizeof(EVPNEthernetAutoDiscoveryRoute::label_)
      - PROTOBUF_FIELD_OFFSET(EVPNEthernetAutoDiscoveryRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNEthernetAutoDiscoveryRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNMACIPAdvertisementRoute::InitAsDefaultInstance() {
  ::apipb::_EVPNMACIPAdvertisementRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::apipb::_EVPNMACIPAdvertisementRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::apipb::EthernetSegmentIdentifier*>(
      ::apipb::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNMACIPAdvertisementRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNMACIPAdvertisementRoute* msg);
  static const ::apipb::EthernetSegmentIdentifier& esi(const EVPNMACIPAdvertisementRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNMACIPAdvertisementRoute::_Internal::rd(const EVPNMACIPAdvertisementRoute* msg) {
  return *msg->rd_;
}
const ::apipb::EthernetSegmentIdentifier&
EVPNMACIPAdvertisementRoute::_Internal::esi(const EVPNMACIPAdvertisementRoute* msg) {
  return *msg->esi_;
}
void EVPNMACIPAdvertisementRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNMACIPAdvertisementRoute::EVPNMACIPAdvertisementRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EVPNMACIPAdvertisementRoute)
}
EVPNMACIPAdvertisementRoute::EVPNMACIPAdvertisementRoute(const EVPNMACIPAdvertisementRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_address(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::apipb::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  ethernet_tag_ = from.ethernet_tag_;
  // @@protoc_insertion_point(copy_constructor:apipb.EVPNMACIPAdvertisementRoute)
}

void EVPNMACIPAdvertisementRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto.base);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_tag_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(ethernet_tag_));
}

EVPNMACIPAdvertisementRoute::~EVPNMACIPAdvertisementRoute() {
  // @@protoc_insertion_point(destructor:apipb.EVPNMACIPAdvertisementRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EVPNMACIPAdvertisementRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNMACIPAdvertisementRoute::ArenaDtor(void* object) {
  EVPNMACIPAdvertisementRoute* _this = reinterpret_cast< EVPNMACIPAdvertisementRoute* >(object);
  (void)_this;
}
void EVPNMACIPAdvertisementRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EVPNMACIPAdvertisementRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNMACIPAdvertisementRoute& EVPNMACIPAdvertisementRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNMACIPAdvertisementRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EVPNMACIPAdvertisementRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  ethernet_tag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EVPNMACIPAdvertisementRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EVPNMACIPAdvertisementRoute.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EVPNMACIPAdvertisementRoute.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 labels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNMACIPAdvertisementRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EVPNMACIPAdvertisementRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ethernet_tag(), target);
  }

  // string mac_address = 4;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EVPNMACIPAdvertisementRoute.mac_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac_address(), target);
  }

  // string ip_address = 5;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EVPNMACIPAdvertisementRoute.ip_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip_address(), target);
  }

  // repeated uint32 labels = 6;
  {
    int byte_size = _labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_labels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EVPNMACIPAdvertisementRoute)
  return target;
}

size_t EVPNMACIPAdvertisementRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EVPNMACIPAdvertisementRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 labels = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string mac_address = 4;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // string ip_address = 5;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNMACIPAdvertisementRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EVPNMACIPAdvertisementRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNMACIPAdvertisementRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNMACIPAdvertisementRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EVPNMACIPAdvertisementRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EVPNMACIPAdvertisementRoute)
    MergeFrom(*source);
  }
}

void EVPNMACIPAdvertisementRoute::MergeFrom(const EVPNMACIPAdvertisementRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EVPNMACIPAdvertisementRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.mac_address().size() > 0) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::apipb::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
}

void EVPNMACIPAdvertisementRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EVPNMACIPAdvertisementRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNMACIPAdvertisementRoute::CopyFrom(const EVPNMACIPAdvertisementRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EVPNMACIPAdvertisementRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNMACIPAdvertisementRoute::IsInitialized() const {
  return true;
}

void EVPNMACIPAdvertisementRoute::InternalSwap(EVPNMACIPAdvertisementRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EVPNMACIPAdvertisementRoute, ethernet_tag_)
      + sizeof(EVPNMACIPAdvertisementRoute::ethernet_tag_)
      - PROTOBUF_FIELD_OFFSET(EVPNMACIPAdvertisementRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNMACIPAdvertisementRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNInclusiveMulticastEthernetTagRoute::InitAsDefaultInstance() {
  ::apipb::_EVPNInclusiveMulticastEthernetTagRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EVPNInclusiveMulticastEthernetTagRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNInclusiveMulticastEthernetTagRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNInclusiveMulticastEthernetTagRoute::_Internal::rd(const EVPNInclusiveMulticastEthernetTagRoute* msg) {
  return *msg->rd_;
}
void EVPNInclusiveMulticastEthernetTagRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNInclusiveMulticastEthernetTagRoute::EVPNInclusiveMulticastEthernetTagRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EVPNInclusiveMulticastEthernetTagRoute)
}
EVPNInclusiveMulticastEthernetTagRoute::EVPNInclusiveMulticastEthernetTagRoute(const EVPNInclusiveMulticastEthernetTagRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  ethernet_tag_ = from.ethernet_tag_;
  // @@protoc_insertion_point(copy_constructor:apipb.EVPNInclusiveMulticastEthernetTagRoute)
}

void EVPNInclusiveMulticastEthernetTagRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_tag_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(ethernet_tag_));
}

EVPNInclusiveMulticastEthernetTagRoute::~EVPNInclusiveMulticastEthernetTagRoute() {
  // @@protoc_insertion_point(destructor:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EVPNInclusiveMulticastEthernetTagRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void EVPNInclusiveMulticastEthernetTagRoute::ArenaDtor(void* object) {
  EVPNInclusiveMulticastEthernetTagRoute* _this = reinterpret_cast< EVPNInclusiveMulticastEthernetTagRoute* >(object);
  (void)_this;
}
void EVPNInclusiveMulticastEthernetTagRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EVPNInclusiveMulticastEthernetTagRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNInclusiveMulticastEthernetTagRoute& EVPNInclusiveMulticastEthernetTagRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNInclusiveMulticastEthernetTagRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  ethernet_tag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EVPNInclusiveMulticastEthernetTagRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNInclusiveMulticastEthernetTagRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ethernet_tag(), target);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  return target;
}

size_t EVPNInclusiveMulticastEthernetTagRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNInclusiveMulticastEthernetTagRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNInclusiveMulticastEthernetTagRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNInclusiveMulticastEthernetTagRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EVPNInclusiveMulticastEthernetTagRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EVPNInclusiveMulticastEthernetTagRoute)
    MergeFrom(*source);
  }
}

void EVPNInclusiveMulticastEthernetTagRoute::MergeFrom(const EVPNInclusiveMulticastEthernetTagRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
}

void EVPNInclusiveMulticastEthernetTagRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNInclusiveMulticastEthernetTagRoute::CopyFrom(const EVPNInclusiveMulticastEthernetTagRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EVPNInclusiveMulticastEthernetTagRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNInclusiveMulticastEthernetTagRoute::IsInitialized() const {
  return true;
}

void EVPNInclusiveMulticastEthernetTagRoute::InternalSwap(EVPNInclusiveMulticastEthernetTagRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EVPNInclusiveMulticastEthernetTagRoute, ethernet_tag_)
      + sizeof(EVPNInclusiveMulticastEthernetTagRoute::ethernet_tag_)
      - PROTOBUF_FIELD_OFFSET(EVPNInclusiveMulticastEthernetTagRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNInclusiveMulticastEthernetTagRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNEthernetSegmentRoute::InitAsDefaultInstance() {
  ::apipb::_EVPNEthernetSegmentRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::apipb::_EVPNEthernetSegmentRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::apipb::EthernetSegmentIdentifier*>(
      ::apipb::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNEthernetSegmentRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNEthernetSegmentRoute* msg);
  static const ::apipb::EthernetSegmentIdentifier& esi(const EVPNEthernetSegmentRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNEthernetSegmentRoute::_Internal::rd(const EVPNEthernetSegmentRoute* msg) {
  return *msg->rd_;
}
const ::apipb::EthernetSegmentIdentifier&
EVPNEthernetSegmentRoute::_Internal::esi(const EVPNEthernetSegmentRoute* msg) {
  return *msg->esi_;
}
void EVPNEthernetSegmentRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNEthernetSegmentRoute::EVPNEthernetSegmentRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EVPNEthernetSegmentRoute)
}
EVPNEthernetSegmentRoute::EVPNEthernetSegmentRoute(const EVPNEthernetSegmentRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::apipb::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.EVPNEthernetSegmentRoute)
}

void EVPNEthernetSegmentRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNEthernetSegmentRoute_attribute_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&esi_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(esi_));
}

EVPNEthernetSegmentRoute::~EVPNEthernetSegmentRoute() {
  // @@protoc_insertion_point(destructor:apipb.EVPNEthernetSegmentRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EVPNEthernetSegmentRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNEthernetSegmentRoute::ArenaDtor(void* object) {
  EVPNEthernetSegmentRoute* _this = reinterpret_cast< EVPNEthernetSegmentRoute* >(object);
  (void)_this;
}
void EVPNEthernetSegmentRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EVPNEthernetSegmentRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNEthernetSegmentRoute& EVPNEthernetSegmentRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNEthernetSegmentRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNEthernetSegmentRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EVPNEthernetSegmentRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EVPNEthernetSegmentRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EVPNEthernetSegmentRoute.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNEthernetSegmentRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EVPNEthernetSegmentRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EVPNEthernetSegmentRoute.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EVPNEthernetSegmentRoute)
  return target;
}

size_t EVPNEthernetSegmentRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EVPNEthernetSegmentRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNEthernetSegmentRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EVPNEthernetSegmentRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNEthernetSegmentRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNEthernetSegmentRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EVPNEthernetSegmentRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EVPNEthernetSegmentRoute)
    MergeFrom(*source);
  }
}

void EVPNEthernetSegmentRoute::MergeFrom(const EVPNEthernetSegmentRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EVPNEthernetSegmentRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::apipb::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
}

void EVPNEthernetSegmentRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EVPNEthernetSegmentRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNEthernetSegmentRoute::CopyFrom(const EVPNEthernetSegmentRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EVPNEthernetSegmentRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNEthernetSegmentRoute::IsInitialized() const {
  return true;
}

void EVPNEthernetSegmentRoute::InternalSwap(EVPNEthernetSegmentRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EVPNEthernetSegmentRoute, esi_)
      + sizeof(EVPNEthernetSegmentRoute::esi_)
      - PROTOBUF_FIELD_OFFSET(EVPNEthernetSegmentRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNEthernetSegmentRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNIPPrefixRoute::InitAsDefaultInstance() {
  ::apipb::_EVPNIPPrefixRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::apipb::_EVPNIPPrefixRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::apipb::EthernetSegmentIdentifier*>(
      ::apipb::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNIPPrefixRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNIPPrefixRoute* msg);
  static const ::apipb::EthernetSegmentIdentifier& esi(const EVPNIPPrefixRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNIPPrefixRoute::_Internal::rd(const EVPNIPPrefixRoute* msg) {
  return *msg->rd_;
}
const ::apipb::EthernetSegmentIdentifier&
EVPNIPPrefixRoute::_Internal::esi(const EVPNIPPrefixRoute* msg) {
  return *msg->esi_;
}
void EVPNIPPrefixRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNIPPrefixRoute::EVPNIPPrefixRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EVPNIPPrefixRoute)
}
EVPNIPPrefixRoute::EVPNIPPrefixRoute(const EVPNIPPrefixRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_prefix().empty()) {
    ip_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_prefix(),
      GetArena());
  }
  gw_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gw_address().empty()) {
    gw_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gw_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::apipb::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  ::memcpy(&ethernet_tag_, &from.ethernet_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:apipb.EVPNIPPrefixRoute)
}

void EVPNIPPrefixRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNIPPrefixRoute_attribute_2eproto.base);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gw_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(label_));
}

EVPNIPPrefixRoute::~EVPNIPPrefixRoute() {
  // @@protoc_insertion_point(destructor:apipb.EVPNIPPrefixRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EVPNIPPrefixRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gw_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNIPPrefixRoute::ArenaDtor(void* object) {
  EVPNIPPrefixRoute* _this = reinterpret_cast< EVPNIPPrefixRoute* >(object);
  (void)_this;
}
void EVPNIPPrefixRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EVPNIPPrefixRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNIPPrefixRoute& EVPNIPPrefixRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNIPPrefixRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNIPPrefixRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EVPNIPPrefixRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gw_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  ::memset(&ethernet_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EVPNIPPrefixRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EVPNIPPrefixRoute.ip_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ip_prefix_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ip_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gw_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gw_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EVPNIPPrefixRoute.gw_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNIPPrefixRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EVPNIPPrefixRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ethernet_tag(), target);
  }

  // string ip_prefix = 4;
  if (this->ip_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_prefix().data(), static_cast<int>(this->_internal_ip_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EVPNIPPrefixRoute.ip_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip_prefix(), target);
  }

  // uint32 ip_prefix_len = 5;
  if (this->ip_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ip_prefix_len(), target);
  }

  // string gw_address = 6;
  if (this->gw_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gw_address().data(), static_cast<int>(this->_internal_gw_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EVPNIPPrefixRoute.gw_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gw_address(), target);
  }

  // uint32 label = 7;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EVPNIPPrefixRoute)
  return target;
}

size_t EVPNIPPrefixRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EVPNIPPrefixRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_prefix = 4;
  if (this->ip_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_prefix());
  }

  // string gw_address = 6;
  if (this->gw_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gw_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .apipb.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  // uint32 ip_prefix_len = 5;
  if (this->ip_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ip_prefix_len());
  }

  // uint32 label = 7;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNIPPrefixRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EVPNIPPrefixRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNIPPrefixRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNIPPrefixRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EVPNIPPrefixRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EVPNIPPrefixRoute)
    MergeFrom(*source);
  }
}

void EVPNIPPrefixRoute::MergeFrom(const EVPNIPPrefixRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EVPNIPPrefixRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_prefix().size() > 0) {
    _internal_set_ip_prefix(from._internal_ip_prefix());
  }
  if (from.gw_address().size() > 0) {
    _internal_set_gw_address(from._internal_gw_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::apipb::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
  if (from.ip_prefix_len() != 0) {
    _internal_set_ip_prefix_len(from._internal_ip_prefix_len());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void EVPNIPPrefixRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EVPNIPPrefixRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNIPPrefixRoute::CopyFrom(const EVPNIPPrefixRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EVPNIPPrefixRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNIPPrefixRoute::IsInitialized() const {
  return true;
}

void EVPNIPPrefixRoute::InternalSwap(EVPNIPPrefixRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_prefix_.Swap(&other->ip_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gw_address_.Swap(&other->gw_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EVPNIPPrefixRoute, label_)
      + sizeof(EVPNIPPrefixRoute::label_)
      - PROTOBUF_FIELD_OFFSET(EVPNIPPrefixRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNIPPrefixRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNIPMSIRoute::InitAsDefaultInstance() {
  ::apipb::_EVPNIPMSIRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::apipb::_EVPNIPMSIRoute_default_instance_._instance.get_mutable()->rt_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EVPNIPMSIRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNIPMSIRoute* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& rt(const EVPNIPMSIRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNIPMSIRoute::_Internal::rd(const EVPNIPMSIRoute* msg) {
  return *msg->rd_;
}
const PROTOBUF_NAMESPACE_ID::Any&
EVPNIPMSIRoute::_Internal::rt(const EVPNIPMSIRoute* msg) {
  return *msg->rt_;
}
void EVPNIPMSIRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
void EVPNIPMSIRoute::clear_rt() {
  if (GetArena() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
}
EVPNIPMSIRoute::EVPNIPMSIRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EVPNIPMSIRoute)
}
EVPNIPMSIRoute::EVPNIPMSIRoute(const EVPNIPMSIRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_rt()) {
    rt_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rt_);
  } else {
    rt_ = nullptr;
  }
  ethernet_tag_ = from.ethernet_tag_;
  // @@protoc_insertion_point(copy_constructor:apipb.EVPNIPMSIRoute)
}

void EVPNIPMSIRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNIPMSIRoute_attribute_2eproto.base);
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_tag_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(ethernet_tag_));
}

EVPNIPMSIRoute::~EVPNIPMSIRoute() {
  // @@protoc_insertion_point(destructor:apipb.EVPNIPMSIRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EVPNIPMSIRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete rt_;
}

void EVPNIPMSIRoute::ArenaDtor(void* object) {
  EVPNIPMSIRoute* _this = reinterpret_cast< EVPNIPMSIRoute* >(object);
  (void)_this;
}
void EVPNIPMSIRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EVPNIPMSIRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNIPMSIRoute& EVPNIPMSIRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNIPMSIRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNIPMSIRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EVPNIPMSIRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArena() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
  ethernet_tag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EVPNIPMSIRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNIPMSIRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EVPNIPMSIRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ethernet_tag(), target);
  }

  // .google.protobuf.Any rt = 3;
  if (this->has_rt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EVPNIPMSIRoute)
  return target;
}

size_t EVPNIPMSIRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EVPNIPMSIRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .google.protobuf.Any rt = 3;
  if (this->has_rt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rt_);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNIPMSIRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EVPNIPMSIRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNIPMSIRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNIPMSIRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EVPNIPMSIRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EVPNIPMSIRoute)
    MergeFrom(*source);
  }
}

void EVPNIPMSIRoute::MergeFrom(const EVPNIPMSIRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EVPNIPMSIRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_rt()) {
    _internal_mutable_rt()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rt());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
}

void EVPNIPMSIRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EVPNIPMSIRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNIPMSIRoute::CopyFrom(const EVPNIPMSIRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EVPNIPMSIRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNIPMSIRoute::IsInitialized() const {
  return true;
}

void EVPNIPMSIRoute::InternalSwap(EVPNIPMSIRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EVPNIPMSIRoute, ethernet_tag_)
      + sizeof(EVPNIPMSIRoute::ethernet_tag_)
      - PROTOBUF_FIELD_OFFSET(EVPNIPMSIRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNIPMSIRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRPolicyNLRI::InitAsDefaultInstance() {
}
class SRPolicyNLRI::_Internal {
 public:
};

SRPolicyNLRI::SRPolicyNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRPolicyNLRI)
}
SRPolicyNLRI::SRPolicyNLRI(const SRPolicyNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint().empty()) {
    endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint(),
      GetArena());
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&length_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:apipb.SRPolicyNLRI)
}

void SRPolicyNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRPolicyNLRI_attribute_2eproto.base);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&length_)) + sizeof(color_));
}

SRPolicyNLRI::~SRPolicyNLRI() {
  // @@protoc_insertion_point(destructor:apipb.SRPolicyNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRPolicyNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SRPolicyNLRI::ArenaDtor(void* object) {
  SRPolicyNLRI* _this = reinterpret_cast< SRPolicyNLRI* >(object);
  (void)_this;
}
void SRPolicyNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRPolicyNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRPolicyNLRI& SRPolicyNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRPolicyNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRPolicyNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRPolicyNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&length_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRPolicyNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distinguisher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          distinguisher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes endpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRPolicyNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRPolicyNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_length(), target);
  }

  // uint32 distinguisher = 2;
  if (this->distinguisher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_distinguisher(), target);
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color(), target);
  }

  // bytes endpoint = 4;
  if (this->endpoint().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRPolicyNLRI)
  return target;
}

size_t SRPolicyNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRPolicyNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes endpoint = 4;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_endpoint());
  }

  // uint32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  // uint32 distinguisher = 2;
  if (this->distinguisher() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distinguisher());
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRPolicyNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRPolicyNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const SRPolicyNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRPolicyNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRPolicyNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRPolicyNLRI)
    MergeFrom(*source);
  }
}

void SRPolicyNLRI::MergeFrom(const SRPolicyNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRPolicyNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint().size() > 0) {
    _internal_set_endpoint(from._internal_endpoint());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.distinguisher() != 0) {
    _internal_set_distinguisher(from._internal_distinguisher());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void SRPolicyNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRPolicyNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPolicyNLRI::CopyFrom(const SRPolicyNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRPolicyNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPolicyNLRI::IsInitialized() const {
  return true;
}

void SRPolicyNLRI::InternalSwap(SRPolicyNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  endpoint_.Swap(&other->endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRPolicyNLRI, color_)
      + sizeof(SRPolicyNLRI::color_)
      - PROTOBUF_FIELD_OFFSET(SRPolicyNLRI, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRPolicyNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledVPNIPAddressPrefix::InitAsDefaultInstance() {
  ::apipb::_LabeledVPNIPAddressPrefix_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class LabeledVPNIPAddressPrefix::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const LabeledVPNIPAddressPrefix* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
LabeledVPNIPAddressPrefix::_Internal::rd(const LabeledVPNIPAddressPrefix* msg) {
  return *msg->rd_;
}
void LabeledVPNIPAddressPrefix::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
LabeledVPNIPAddressPrefix::LabeledVPNIPAddressPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LabeledVPNIPAddressPrefix)
}
LabeledVPNIPAddressPrefix::LabeledVPNIPAddressPrefix(const LabeledVPNIPAddressPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:apipb.LabeledVPNIPAddressPrefix)
}

void LabeledVPNIPAddressPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_len_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(prefix_len_));
}

LabeledVPNIPAddressPrefix::~LabeledVPNIPAddressPrefix() {
  // @@protoc_insertion_point(destructor:apipb.LabeledVPNIPAddressPrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabeledVPNIPAddressPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void LabeledVPNIPAddressPrefix::ArenaDtor(void* object) {
  LabeledVPNIPAddressPrefix* _this = reinterpret_cast< LabeledVPNIPAddressPrefix* >(object);
  (void)_this;
}
void LabeledVPNIPAddressPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabeledVPNIPAddressPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledVPNIPAddressPrefix& LabeledVPNIPAddressPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LabeledVPNIPAddressPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LabeledVPNIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  prefix_len_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabeledVPNIPAddressPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LabeledVPNIPAddressPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledVPNIPAddressPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LabeledVPNIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    int byte_size = _labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_labels(), byte_size, target);
    }
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rd(this), target, stream);
  }

  // uint32 prefix_len = 3;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefix_len(), target);
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LabeledVPNIPAddressPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LabeledVPNIPAddressPrefix)
  return target;
}

size_t LabeledVPNIPAddressPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LabeledVPNIPAddressPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 prefix_len = 3;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledVPNIPAddressPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LabeledVPNIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledVPNIPAddressPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledVPNIPAddressPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LabeledVPNIPAddressPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LabeledVPNIPAddressPrefix)
    MergeFrom(*source);
  }
}

void LabeledVPNIPAddressPrefix::MergeFrom(const LabeledVPNIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LabeledVPNIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void LabeledVPNIPAddressPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LabeledVPNIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledVPNIPAddressPrefix::CopyFrom(const LabeledVPNIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LabeledVPNIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledVPNIPAddressPrefix::IsInitialized() const {
  return true;
}

void LabeledVPNIPAddressPrefix::InternalSwap(LabeledVPNIPAddressPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabeledVPNIPAddressPrefix, prefix_len_)
      + sizeof(LabeledVPNIPAddressPrefix::prefix_len_)
      - PROTOBUF_FIELD_OFFSET(LabeledVPNIPAddressPrefix, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledVPNIPAddressPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembershipNLRI::InitAsDefaultInstance() {
  ::apipb::_RouteTargetMembershipNLRI_default_instance_._instance.get_mutable()->rt_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class RouteTargetMembershipNLRI::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rt(const RouteTargetMembershipNLRI* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
RouteTargetMembershipNLRI::_Internal::rt(const RouteTargetMembershipNLRI* msg) {
  return *msg->rt_;
}
void RouteTargetMembershipNLRI::clear_rt() {
  if (GetArena() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
}
RouteTargetMembershipNLRI::RouteTargetMembershipNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteTargetMembershipNLRI)
}
RouteTargetMembershipNLRI::RouteTargetMembershipNLRI(const RouteTargetMembershipNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rt()) {
    rt_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rt_);
  } else {
    rt_ = nullptr;
  }
  asn_ = from.asn_;
  // @@protoc_insertion_point(copy_constructor:apipb.RouteTargetMembershipNLRI)
}

void RouteTargetMembershipNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteTargetMembershipNLRI_attribute_2eproto.base);
  ::memset(&rt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asn_) -
      reinterpret_cast<char*>(&rt_)) + sizeof(asn_));
}

RouteTargetMembershipNLRI::~RouteTargetMembershipNLRI() {
  // @@protoc_insertion_point(destructor:apipb.RouteTargetMembershipNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteTargetMembershipNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rt_;
}

void RouteTargetMembershipNLRI::ArenaDtor(void* object) {
  RouteTargetMembershipNLRI* _this = reinterpret_cast< RouteTargetMembershipNLRI* >(object);
  (void)_this;
}
void RouteTargetMembershipNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetMembershipNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembershipNLRI& RouteTargetMembershipNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembershipNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembershipNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteTargetMembershipNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
  asn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetMembershipNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembershipNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteTargetMembershipNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // .google.protobuf.Any rt = 2;
  if (this->has_rt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteTargetMembershipNLRI)
  return target;
}

size_t RouteTargetMembershipNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteTargetMembershipNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any rt = 2;
  if (this->has_rt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rt_);
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembershipNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteTargetMembershipNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembershipNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteTargetMembershipNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteTargetMembershipNLRI)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipNLRI::MergeFrom(const RouteTargetMembershipNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteTargetMembershipNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rt()) {
    _internal_mutable_rt()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rt());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
}

void RouteTargetMembershipNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteTargetMembershipNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipNLRI::CopyFrom(const RouteTargetMembershipNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteTargetMembershipNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipNLRI::IsInitialized() const {
  return true;
}

void RouteTargetMembershipNLRI::InternalSwap(RouteTargetMembershipNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTargetMembershipNLRI, asn_)
      + sizeof(RouteTargetMembershipNLRI::asn_)
      - PROTOBUF_FIELD_OFFSET(RouteTargetMembershipNLRI, rt_)>(
          reinterpret_cast<char*>(&rt_),
          reinterpret_cast<char*>(&other->rt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembershipNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecIPPrefix::InitAsDefaultInstance() {
}
class FlowSpecIPPrefix::_Internal {
 public:
};

FlowSpecIPPrefix::FlowSpecIPPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.FlowSpecIPPrefix)
}
FlowSpecIPPrefix::FlowSpecIPPrefix(const FlowSpecIPPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:apipb.FlowSpecIPPrefix)
}

void FlowSpecIPPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecIPPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
}

FlowSpecIPPrefix::~FlowSpecIPPrefix() {
  // @@protoc_insertion_point(destructor:apipb.FlowSpecIPPrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowSpecIPPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowSpecIPPrefix::ArenaDtor(void* object) {
  FlowSpecIPPrefix* _this = reinterpret_cast< FlowSpecIPPrefix* >(object);
  (void)_this;
}
void FlowSpecIPPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowSpecIPPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecIPPrefix& FlowSpecIPPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecIPPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecIPPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.FlowSpecIPPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowSpecIPPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.FlowSpecIPPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecIPPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.FlowSpecIPPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.FlowSpecIPPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.FlowSpecIPPrefix)
  return target;
}

size_t FlowSpecIPPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.FlowSpecIPPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecIPPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.FlowSpecIPPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecIPPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecIPPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.FlowSpecIPPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.FlowSpecIPPrefix)
    MergeFrom(*source);
  }
}

void FlowSpecIPPrefix::MergeFrom(const FlowSpecIPPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.FlowSpecIPPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void FlowSpecIPPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.FlowSpecIPPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecIPPrefix::CopyFrom(const FlowSpecIPPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.FlowSpecIPPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecIPPrefix::IsInitialized() const {
  return true;
}

void FlowSpecIPPrefix::InternalSwap(FlowSpecIPPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowSpecIPPrefix, offset_)
      + sizeof(FlowSpecIPPrefix::offset_)
      - PROTOBUF_FIELD_OFFSET(FlowSpecIPPrefix, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecIPPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecMAC::InitAsDefaultInstance() {
}
class FlowSpecMAC::_Internal {
 public:
};

FlowSpecMAC::FlowSpecMAC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.FlowSpecMAC)
}
FlowSpecMAC::FlowSpecMAC(const FlowSpecMAC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.FlowSpecMAC)
}

void FlowSpecMAC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecMAC_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

FlowSpecMAC::~FlowSpecMAC() {
  // @@protoc_insertion_point(destructor:apipb.FlowSpecMAC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowSpecMAC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowSpecMAC::ArenaDtor(void* object) {
  FlowSpecMAC* _this = reinterpret_cast< FlowSpecMAC* >(object);
  (void)_this;
}
void FlowSpecMAC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowSpecMAC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecMAC& FlowSpecMAC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecMAC_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecMAC::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.FlowSpecMAC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowSpecMAC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.FlowSpecMAC.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecMAC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.FlowSpecMAC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.FlowSpecMAC.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.FlowSpecMAC)
  return target;
}

size_t FlowSpecMAC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.FlowSpecMAC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecMAC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.FlowSpecMAC)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecMAC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecMAC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.FlowSpecMAC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.FlowSpecMAC)
    MergeFrom(*source);
  }
}

void FlowSpecMAC::MergeFrom(const FlowSpecMAC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.FlowSpecMAC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void FlowSpecMAC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.FlowSpecMAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecMAC::CopyFrom(const FlowSpecMAC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.FlowSpecMAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecMAC::IsInitialized() const {
  return true;
}

void FlowSpecMAC::InternalSwap(FlowSpecMAC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecMAC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecComponentItem::InitAsDefaultInstance() {
}
class FlowSpecComponentItem::_Internal {
 public:
};

FlowSpecComponentItem::FlowSpecComponentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.FlowSpecComponentItem)
}
FlowSpecComponentItem::FlowSpecComponentItem(const FlowSpecComponentItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&value_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:apipb.FlowSpecComponentItem)
}

void FlowSpecComponentItem::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
}

FlowSpecComponentItem::~FlowSpecComponentItem() {
  // @@protoc_insertion_point(destructor:apipb.FlowSpecComponentItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowSpecComponentItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowSpecComponentItem::ArenaDtor(void* object) {
  FlowSpecComponentItem* _this = reinterpret_cast< FlowSpecComponentItem* >(object);
  (void)_this;
}
void FlowSpecComponentItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowSpecComponentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecComponentItem& FlowSpecComponentItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecComponentItem_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecComponentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.FlowSpecComponentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowSpecComponentItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecComponentItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.FlowSpecComponentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.FlowSpecComponentItem)
  return target;
}

size_t FlowSpecComponentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.FlowSpecComponentItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  // uint32 op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecComponentItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.FlowSpecComponentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecComponentItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecComponentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.FlowSpecComponentItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.FlowSpecComponentItem)
    MergeFrom(*source);
  }
}

void FlowSpecComponentItem::MergeFrom(const FlowSpecComponentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.FlowSpecComponentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void FlowSpecComponentItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.FlowSpecComponentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecComponentItem::CopyFrom(const FlowSpecComponentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.FlowSpecComponentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecComponentItem::IsInitialized() const {
  return true;
}

void FlowSpecComponentItem::InternalSwap(FlowSpecComponentItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowSpecComponentItem, op_)
      + sizeof(FlowSpecComponentItem::op_)
      - PROTOBUF_FIELD_OFFSET(FlowSpecComponentItem, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecComponentItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecComponent::InitAsDefaultInstance() {
}
class FlowSpecComponent::_Internal {
 public:
};

FlowSpecComponent::FlowSpecComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.FlowSpecComponent)
}
FlowSpecComponent::FlowSpecComponent(const FlowSpecComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.FlowSpecComponent)
}

void FlowSpecComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecComponent_attribute_2eproto.base);
  type_ = 0u;
}

FlowSpecComponent::~FlowSpecComponent() {
  // @@protoc_insertion_point(destructor:apipb.FlowSpecComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowSpecComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowSpecComponent::ArenaDtor(void* object) {
  FlowSpecComponent* _this = reinterpret_cast< FlowSpecComponent* >(object);
  (void)_this;
}
void FlowSpecComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowSpecComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecComponent& FlowSpecComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecComponent_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.FlowSpecComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowSpecComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.FlowSpecComponentItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.FlowSpecComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .apipb.FlowSpecComponentItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.FlowSpecComponent)
  return target;
}

size_t FlowSpecComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.FlowSpecComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.FlowSpecComponentItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.FlowSpecComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.FlowSpecComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.FlowSpecComponent)
    MergeFrom(*source);
  }
}

void FlowSpecComponent::MergeFrom(const FlowSpecComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.FlowSpecComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void FlowSpecComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.FlowSpecComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecComponent::CopyFrom(const FlowSpecComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.FlowSpecComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecComponent::IsInitialized() const {
  return true;
}

void FlowSpecComponent::InternalSwap(FlowSpecComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecNLRI::InitAsDefaultInstance() {
}
class FlowSpecNLRI::_Internal {
 public:
};

void FlowSpecNLRI::clear_rules() {
  rules_.Clear();
}
FlowSpecNLRI::FlowSpecNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.FlowSpecNLRI)
}
FlowSpecNLRI::FlowSpecNLRI(const FlowSpecNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.FlowSpecNLRI)
}

void FlowSpecNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecNLRI_attribute_2eproto.base);
}

FlowSpecNLRI::~FlowSpecNLRI() {
  // @@protoc_insertion_point(destructor:apipb.FlowSpecNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowSpecNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowSpecNLRI::ArenaDtor(void* object) {
  FlowSpecNLRI* _this = reinterpret_cast< FlowSpecNLRI* >(object);
  (void)_this;
}
void FlowSpecNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowSpecNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecNLRI& FlowSpecNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.FlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowSpecNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.FlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.FlowSpecNLRI)
  return target;
}

size_t FlowSpecNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.FlowSpecNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.FlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.FlowSpecNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.FlowSpecNLRI)
    MergeFrom(*source);
  }
}

void FlowSpecNLRI::MergeFrom(const FlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.FlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void FlowSpecNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.FlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecNLRI::CopyFrom(const FlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.FlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecNLRI::IsInitialized() const {
  return true;
}

void FlowSpecNLRI::InternalSwap(FlowSpecNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VPNFlowSpecNLRI::InitAsDefaultInstance() {
  ::apipb::_VPNFlowSpecNLRI_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class VPNFlowSpecNLRI::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const VPNFlowSpecNLRI* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
VPNFlowSpecNLRI::_Internal::rd(const VPNFlowSpecNLRI* msg) {
  return *msg->rd_;
}
void VPNFlowSpecNLRI::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
void VPNFlowSpecNLRI::clear_rules() {
  rules_.Clear();
}
VPNFlowSpecNLRI::VPNFlowSpecNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.VPNFlowSpecNLRI)
}
VPNFlowSpecNLRI::VPNFlowSpecNLRI(const VPNFlowSpecNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.VPNFlowSpecNLRI)
}

void VPNFlowSpecNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VPNFlowSpecNLRI_attribute_2eproto.base);
  rd_ = nullptr;
}

VPNFlowSpecNLRI::~VPNFlowSpecNLRI() {
  // @@protoc_insertion_point(destructor:apipb.VPNFlowSpecNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPNFlowSpecNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rd_;
}

void VPNFlowSpecNLRI::ArenaDtor(void* object) {
  VPNFlowSpecNLRI* _this = reinterpret_cast< VPNFlowSpecNLRI* >(object);
  (void)_this;
}
void VPNFlowSpecNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPNFlowSpecNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VPNFlowSpecNLRI& VPNFlowSpecNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VPNFlowSpecNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void VPNFlowSpecNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.VPNFlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPNFlowSpecNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPNFlowSpecNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.VPNFlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // repeated .google.protobuf.Any rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.VPNFlowSpecNLRI)
  return target;
}

size_t VPNFlowSpecNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.VPNFlowSpecNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPNFlowSpecNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.VPNFlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const VPNFlowSpecNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPNFlowSpecNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.VPNFlowSpecNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.VPNFlowSpecNLRI)
    MergeFrom(*source);
  }
}

void VPNFlowSpecNLRI::MergeFrom(const VPNFlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.VPNFlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
}

void VPNFlowSpecNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.VPNFlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPNFlowSpecNLRI::CopyFrom(const VPNFlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.VPNFlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPNFlowSpecNLRI::IsInitialized() const {
  return true;
}

void VPNFlowSpecNLRI::InternalSwap(VPNFlowSpecNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
  swap(rd_, other->rd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VPNFlowSpecNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpaqueNLRI::InitAsDefaultInstance() {
}
class OpaqueNLRI::_Internal {
 public:
};

OpaqueNLRI::OpaqueNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.OpaqueNLRI)
}
OpaqueNLRI::OpaqueNLRI(const OpaqueNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.OpaqueNLRI)
}

void OpaqueNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpaqueNLRI_attribute_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpaqueNLRI::~OpaqueNLRI() {
  // @@protoc_insertion_point(destructor:apipb.OpaqueNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpaqueNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpaqueNLRI::ArenaDtor(void* object) {
  OpaqueNLRI* _this = reinterpret_cast< OpaqueNLRI* >(object);
  (void)_this;
}
void OpaqueNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpaqueNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpaqueNLRI& OpaqueNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpaqueNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void OpaqueNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.OpaqueNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpaqueNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpaqueNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.OpaqueNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.OpaqueNLRI)
  return target;
}

size_t OpaqueNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.OpaqueNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpaqueNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.OpaqueNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const OpaqueNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpaqueNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.OpaqueNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.OpaqueNLRI)
    MergeFrom(*source);
  }
}

void OpaqueNLRI::MergeFrom(const OpaqueNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.OpaqueNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void OpaqueNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.OpaqueNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpaqueNLRI::CopyFrom(const OpaqueNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.OpaqueNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpaqueNLRI::IsInitialized() const {
  return true;
}

void OpaqueNLRI::InternalSwap(OpaqueNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpaqueNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsNodeDescriptor::InitAsDefaultInstance() {
}
class LsNodeDescriptor::_Internal {
 public:
};

LsNodeDescriptor::LsNodeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsNodeDescriptor)
}
LsNodeDescriptor::LsNodeDescriptor(const LsNodeDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  igp_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_igp_router_id().empty()) {
    igp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_igp_router_id(),
      GetArena());
  }
  bgp_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgp_router_id().empty()) {
    bgp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bgp_router_id(),
      GetArena());
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&bgp_confederation_member_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(bgp_confederation_member_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsNodeDescriptor)
}

void LsNodeDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsNodeDescriptor_attribute_2eproto.base);
  igp_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgp_confederation_member_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(bgp_confederation_member_));
}

LsNodeDescriptor::~LsNodeDescriptor() {
  // @@protoc_insertion_point(destructor:apipb.LsNodeDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsNodeDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  igp_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsNodeDescriptor::ArenaDtor(void* object) {
  LsNodeDescriptor* _this = reinterpret_cast< LsNodeDescriptor* >(object);
  (void)_this;
}
void LsNodeDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsNodeDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsNodeDescriptor& LsNodeDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsNodeDescriptor_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsNodeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsNodeDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  igp_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgp_confederation_member_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(bgp_confederation_member_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsNodeDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bgp_ls_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bgp_ls_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ospf_area_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ospf_area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pseudonode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pseudonode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string igp_router_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_igp_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsNodeDescriptor.igp_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bgp_router_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bgp_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsNodeDescriptor.bgp_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bgp_confederation_member = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bgp_confederation_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsNodeDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsNodeDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 bgp_ls_id = 2;
  if (this->bgp_ls_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bgp_ls_id(), target);
  }

  // uint32 ospf_area_id = 3;
  if (this->ospf_area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ospf_area_id(), target);
  }

  // bool pseudonode = 4;
  if (this->pseudonode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pseudonode(), target);
  }

  // string igp_router_id = 5;
  if (this->igp_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_igp_router_id().data(), static_cast<int>(this->_internal_igp_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsNodeDescriptor.igp_router_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_igp_router_id(), target);
  }

  // string bgp_router_id = 6;
  if (this->bgp_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgp_router_id().data(), static_cast<int>(this->_internal_bgp_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsNodeDescriptor.bgp_router_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bgp_router_id(), target);
  }

  // uint32 bgp_confederation_member = 7;
  if (this->bgp_confederation_member() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bgp_confederation_member(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsNodeDescriptor)
  return target;
}

size_t LsNodeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsNodeDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string igp_router_id = 5;
  if (this->igp_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_igp_router_id());
  }

  // string bgp_router_id = 6;
  if (this->bgp_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgp_router_id());
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 bgp_ls_id = 2;
  if (this->bgp_ls_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bgp_ls_id());
  }

  // uint32 ospf_area_id = 3;
  if (this->ospf_area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ospf_area_id());
  }

  // bool pseudonode = 4;
  if (this->pseudonode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 bgp_confederation_member = 7;
  if (this->bgp_confederation_member() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bgp_confederation_member());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsNodeDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsNodeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const LsNodeDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsNodeDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsNodeDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsNodeDescriptor)
    MergeFrom(*source);
  }
}

void LsNodeDescriptor::MergeFrom(const LsNodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsNodeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.igp_router_id().size() > 0) {
    _internal_set_igp_router_id(from._internal_igp_router_id());
  }
  if (from.bgp_router_id().size() > 0) {
    _internal_set_bgp_router_id(from._internal_bgp_router_id());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.bgp_ls_id() != 0) {
    _internal_set_bgp_ls_id(from._internal_bgp_ls_id());
  }
  if (from.ospf_area_id() != 0) {
    _internal_set_ospf_area_id(from._internal_ospf_area_id());
  }
  if (from.pseudonode() != 0) {
    _internal_set_pseudonode(from._internal_pseudonode());
  }
  if (from.bgp_confederation_member() != 0) {
    _internal_set_bgp_confederation_member(from._internal_bgp_confederation_member());
  }
}

void LsNodeDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsNodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsNodeDescriptor::CopyFrom(const LsNodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsNodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsNodeDescriptor::IsInitialized() const {
  return true;
}

void LsNodeDescriptor::InternalSwap(LsNodeDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  igp_router_id_.Swap(&other->igp_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_router_id_.Swap(&other->bgp_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsNodeDescriptor, bgp_confederation_member_)
      + sizeof(LsNodeDescriptor::bgp_confederation_member_)
      - PROTOBUF_FIELD_OFFSET(LsNodeDescriptor, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsNodeDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsLinkDescriptor::InitAsDefaultInstance() {
}
class LsLinkDescriptor::_Internal {
 public:
};

LsLinkDescriptor::LsLinkDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsLinkDescriptor)
}
LsLinkDescriptor::LsLinkDescriptor(const LsLinkDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_addr_ipv4().empty()) {
    interface_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_addr_ipv4(),
      GetArena());
  }
  neighbor_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_addr_ipv4().empty()) {
    neighbor_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neighbor_addr_ipv4(),
      GetArena());
  }
  interface_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_addr_ipv6().empty()) {
    interface_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_addr_ipv6(),
      GetArena());
  }
  neighbor_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_addr_ipv6().empty()) {
    neighbor_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neighbor_addr_ipv6(),
      GetArena());
  }
  ::memcpy(&link_local_id_, &from.link_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_remote_id_) -
    reinterpret_cast<char*>(&link_local_id_)) + sizeof(link_remote_id_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsLinkDescriptor)
}

void LsLinkDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsLinkDescriptor_attribute_2eproto.base);
  interface_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_remote_id_) -
      reinterpret_cast<char*>(&link_local_id_)) + sizeof(link_remote_id_));
}

LsLinkDescriptor::~LsLinkDescriptor() {
  // @@protoc_insertion_point(destructor:apipb.LsLinkDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsLinkDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interface_addr_ipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_addr_ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsLinkDescriptor::ArenaDtor(void* object) {
  LsLinkDescriptor* _this = reinterpret_cast< LsLinkDescriptor* >(object);
  (void)_this;
}
void LsLinkDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsLinkDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsLinkDescriptor& LsLinkDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsLinkDescriptor_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsLinkDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsLinkDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_addr_ipv4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_addr_ipv4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_addr_ipv6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_addr_ipv6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&link_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_remote_id_) -
      reinterpret_cast<char*>(&link_local_id_)) + sizeof(link_remote_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsLinkDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 link_local_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          link_local_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 link_remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          link_remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_addr_ipv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_interface_addr_ipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsLinkDescriptor.interface_addr_ipv4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_addr_ipv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_neighbor_addr_ipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsLinkDescriptor.neighbor_addr_ipv4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_addr_ipv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_interface_addr_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsLinkDescriptor.interface_addr_ipv6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_addr_ipv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_neighbor_addr_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsLinkDescriptor.neighbor_addr_ipv6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsLinkDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsLinkDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_local_id = 1;
  if (this->link_local_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_link_local_id(), target);
  }

  // uint32 link_remote_id = 2;
  if (this->link_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_link_remote_id(), target);
  }

  // string interface_addr_ipv4 = 3;
  if (this->interface_addr_ipv4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_addr_ipv4().data(), static_cast<int>(this->_internal_interface_addr_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsLinkDescriptor.interface_addr_ipv4");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interface_addr_ipv4(), target);
  }

  // string neighbor_addr_ipv4 = 4;
  if (this->neighbor_addr_ipv4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_addr_ipv4().data(), static_cast<int>(this->_internal_neighbor_addr_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsLinkDescriptor.neighbor_addr_ipv4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_neighbor_addr_ipv4(), target);
  }

  // string interface_addr_ipv6 = 5;
  if (this->interface_addr_ipv6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_addr_ipv6().data(), static_cast<int>(this->_internal_interface_addr_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsLinkDescriptor.interface_addr_ipv6");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_interface_addr_ipv6(), target);
  }

  // string neighbor_addr_ipv6 = 6;
  if (this->neighbor_addr_ipv6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_addr_ipv6().data(), static_cast<int>(this->_internal_neighbor_addr_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsLinkDescriptor.neighbor_addr_ipv6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_neighbor_addr_ipv6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsLinkDescriptor)
  return target;
}

size_t LsLinkDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsLinkDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_addr_ipv4 = 3;
  if (this->interface_addr_ipv4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_addr_ipv4());
  }

  // string neighbor_addr_ipv4 = 4;
  if (this->neighbor_addr_ipv4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_addr_ipv4());
  }

  // string interface_addr_ipv6 = 5;
  if (this->interface_addr_ipv6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_addr_ipv6());
  }

  // string neighbor_addr_ipv6 = 6;
  if (this->neighbor_addr_ipv6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_addr_ipv6());
  }

  // uint32 link_local_id = 1;
  if (this->link_local_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_local_id());
  }

  // uint32 link_remote_id = 2;
  if (this->link_remote_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_remote_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsLinkDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsLinkDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const LsLinkDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsLinkDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsLinkDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsLinkDescriptor)
    MergeFrom(*source);
  }
}

void LsLinkDescriptor::MergeFrom(const LsLinkDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsLinkDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface_addr_ipv4().size() > 0) {
    _internal_set_interface_addr_ipv4(from._internal_interface_addr_ipv4());
  }
  if (from.neighbor_addr_ipv4().size() > 0) {
    _internal_set_neighbor_addr_ipv4(from._internal_neighbor_addr_ipv4());
  }
  if (from.interface_addr_ipv6().size() > 0) {
    _internal_set_interface_addr_ipv6(from._internal_interface_addr_ipv6());
  }
  if (from.neighbor_addr_ipv6().size() > 0) {
    _internal_set_neighbor_addr_ipv6(from._internal_neighbor_addr_ipv6());
  }
  if (from.link_local_id() != 0) {
    _internal_set_link_local_id(from._internal_link_local_id());
  }
  if (from.link_remote_id() != 0) {
    _internal_set_link_remote_id(from._internal_link_remote_id());
  }
}

void LsLinkDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsLinkDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsLinkDescriptor::CopyFrom(const LsLinkDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsLinkDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsLinkDescriptor::IsInitialized() const {
  return true;
}

void LsLinkDescriptor::InternalSwap(LsLinkDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interface_addr_ipv4_.Swap(&other->interface_addr_ipv4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_addr_ipv4_.Swap(&other->neighbor_addr_ipv4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_addr_ipv6_.Swap(&other->interface_addr_ipv6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_addr_ipv6_.Swap(&other->neighbor_addr_ipv6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsLinkDescriptor, link_remote_id_)
      + sizeof(LsLinkDescriptor::link_remote_id_)
      - PROTOBUF_FIELD_OFFSET(LsLinkDescriptor, link_local_id_)>(
          reinterpret_cast<char*>(&link_local_id_),
          reinterpret_cast<char*>(&other->link_local_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsLinkDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsPrefixDescriptor::InitAsDefaultInstance() {
}
class LsPrefixDescriptor::_Internal {
 public:
};

LsPrefixDescriptor::LsPrefixDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ip_reachability_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsPrefixDescriptor)
}
LsPrefixDescriptor::LsPrefixDescriptor(const LsPrefixDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_reachability_(from.ip_reachability_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ospf_route_type_ = from.ospf_route_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.LsPrefixDescriptor)
}

void LsPrefixDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsPrefixDescriptor_attribute_2eproto.base);
  ospf_route_type_ = 0;
}

LsPrefixDescriptor::~LsPrefixDescriptor() {
  // @@protoc_insertion_point(destructor:apipb.LsPrefixDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsPrefixDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsPrefixDescriptor::ArenaDtor(void* object) {
  LsPrefixDescriptor* _this = reinterpret_cast< LsPrefixDescriptor* >(object);
  (void)_this;
}
void LsPrefixDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsPrefixDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsPrefixDescriptor& LsPrefixDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsPrefixDescriptor_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsPrefixDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsPrefixDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_reachability_.Clear();
  ospf_route_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsPrefixDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ip_reachability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_reachability();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsPrefixDescriptor.ip_reachability"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .apipb.LsOspfRouteType ospf_route_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ospf_route_type(static_cast<::apipb::LsOspfRouteType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsPrefixDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsPrefixDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_reachability = 1;
  for (int i = 0, n = this->_internal_ip_reachability_size(); i < n; i++) {
    const auto& s = this->_internal_ip_reachability(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsPrefixDescriptor.ip_reachability");
    target = stream->WriteString(1, s, target);
  }

  // .apipb.LsOspfRouteType ospf_route_type = 2;
  if (this->ospf_route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ospf_route_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsPrefixDescriptor)
  return target;
}

size_t LsPrefixDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsPrefixDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_reachability = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_reachability_.size());
  for (int i = 0, n = ip_reachability_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_reachability_.Get(i));
  }

  // .apipb.LsOspfRouteType ospf_route_type = 2;
  if (this->ospf_route_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ospf_route_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsPrefixDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsPrefixDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const LsPrefixDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsPrefixDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsPrefixDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsPrefixDescriptor)
    MergeFrom(*source);
  }
}

void LsPrefixDescriptor::MergeFrom(const LsPrefixDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsPrefixDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_reachability_.MergeFrom(from.ip_reachability_);
  if (from.ospf_route_type() != 0) {
    _internal_set_ospf_route_type(from._internal_ospf_route_type());
  }
}

void LsPrefixDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsPrefixDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsPrefixDescriptor::CopyFrom(const LsPrefixDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsPrefixDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsPrefixDescriptor::IsInitialized() const {
  return true;
}

void LsPrefixDescriptor::InternalSwap(LsPrefixDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_reachability_.InternalSwap(&other->ip_reachability_);
  swap(ospf_route_type_, other->ospf_route_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsPrefixDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsNodeNLRI::InitAsDefaultInstance() {
  ::apipb::_LsNodeNLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::apipb::LsNodeDescriptor*>(
      ::apipb::LsNodeDescriptor::internal_default_instance());
}
class LsNodeNLRI::_Internal {
 public:
  static const ::apipb::LsNodeDescriptor& local_node(const LsNodeNLRI* msg);
};

const ::apipb::LsNodeDescriptor&
LsNodeNLRI::_Internal::local_node(const LsNodeNLRI* msg) {
  return *msg->local_node_;
}
LsNodeNLRI::LsNodeNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsNodeNLRI)
}
LsNodeNLRI::LsNodeNLRI(const LsNodeNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::apipb::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsNodeNLRI)
}

void LsNodeNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsNodeNLRI_attribute_2eproto.base);
  local_node_ = nullptr;
}

LsNodeNLRI::~LsNodeNLRI() {
  // @@protoc_insertion_point(destructor:apipb.LsNodeNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsNodeNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_node_;
}

void LsNodeNLRI::ArenaDtor(void* object) {
  LsNodeNLRI* _this = reinterpret_cast< LsNodeNLRI* >(object);
  (void)_this;
}
void LsNodeNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsNodeNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsNodeNLRI& LsNodeNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsNodeNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsNodeNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsNodeNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsNodeNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsNodeNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsNodeNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsNodeNLRI)
  return target;
}

size_t LsNodeNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsNodeNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsNodeNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsNodeNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsNodeNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsNodeNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsNodeNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsNodeNLRI)
    MergeFrom(*source);
  }
}

void LsNodeNLRI::MergeFrom(const LsNodeNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsNodeNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::apipb::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
}

void LsNodeNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsNodeNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsNodeNLRI::CopyFrom(const LsNodeNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsNodeNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsNodeNLRI::IsInitialized() const {
  return true;
}

void LsNodeNLRI::InternalSwap(LsNodeNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(local_node_, other->local_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsNodeNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsLinkNLRI::InitAsDefaultInstance() {
  ::apipb::_LsLinkNLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::apipb::LsNodeDescriptor*>(
      ::apipb::LsNodeDescriptor::internal_default_instance());
  ::apipb::_LsLinkNLRI_default_instance_._instance.get_mutable()->remote_node_ = const_cast< ::apipb::LsNodeDescriptor*>(
      ::apipb::LsNodeDescriptor::internal_default_instance());
  ::apipb::_LsLinkNLRI_default_instance_._instance.get_mutable()->link_descriptor_ = const_cast< ::apipb::LsLinkDescriptor*>(
      ::apipb::LsLinkDescriptor::internal_default_instance());
}
class LsLinkNLRI::_Internal {
 public:
  static const ::apipb::LsNodeDescriptor& local_node(const LsLinkNLRI* msg);
  static const ::apipb::LsNodeDescriptor& remote_node(const LsLinkNLRI* msg);
  static const ::apipb::LsLinkDescriptor& link_descriptor(const LsLinkNLRI* msg);
};

const ::apipb::LsNodeDescriptor&
LsLinkNLRI::_Internal::local_node(const LsLinkNLRI* msg) {
  return *msg->local_node_;
}
const ::apipb::LsNodeDescriptor&
LsLinkNLRI::_Internal::remote_node(const LsLinkNLRI* msg) {
  return *msg->remote_node_;
}
const ::apipb::LsLinkDescriptor&
LsLinkNLRI::_Internal::link_descriptor(const LsLinkNLRI* msg) {
  return *msg->link_descriptor_;
}
LsLinkNLRI::LsLinkNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsLinkNLRI)
}
LsLinkNLRI::LsLinkNLRI(const LsLinkNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::apipb::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  if (from._internal_has_remote_node()) {
    remote_node_ = new ::apipb::LsNodeDescriptor(*from.remote_node_);
  } else {
    remote_node_ = nullptr;
  }
  if (from._internal_has_link_descriptor()) {
    link_descriptor_ = new ::apipb::LsLinkDescriptor(*from.link_descriptor_);
  } else {
    link_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsLinkNLRI)
}

void LsLinkNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsLinkNLRI_attribute_2eproto.base);
  ::memset(&local_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_descriptor_) -
      reinterpret_cast<char*>(&local_node_)) + sizeof(link_descriptor_));
}

LsLinkNLRI::~LsLinkNLRI() {
  // @@protoc_insertion_point(destructor:apipb.LsLinkNLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsLinkNLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_node_;
  if (this != internal_default_instance()) delete remote_node_;
  if (this != internal_default_instance()) delete link_descriptor_;
}

void LsLinkNLRI::ArenaDtor(void* object) {
  LsLinkNLRI* _this = reinterpret_cast< LsLinkNLRI* >(object);
  (void)_this;
}
void LsLinkNLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsLinkNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsLinkNLRI& LsLinkNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsLinkNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsLinkNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsLinkNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  if (GetArena() == nullptr && remote_node_ != nullptr) {
    delete remote_node_;
  }
  remote_node_ = nullptr;
  if (GetArena() == nullptr && link_descriptor_ != nullptr) {
    delete link_descriptor_;
  }
  link_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsLinkNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsNodeDescriptor remote_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsLinkDescriptor link_descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsLinkNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsLinkNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  // .apipb.LsNodeDescriptor remote_node = 2;
  if (this->has_remote_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remote_node(this), target, stream);
  }

  // .apipb.LsLinkDescriptor link_descriptor = 3;
  if (this->has_link_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::link_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsLinkNLRI)
  return target;
}

size_t LsLinkNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsLinkNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  // .apipb.LsNodeDescriptor remote_node = 2;
  if (this->has_remote_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_node_);
  }

  // .apipb.LsLinkDescriptor link_descriptor = 3;
  if (this->has_link_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsLinkNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsLinkNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsLinkNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsLinkNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsLinkNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsLinkNLRI)
    MergeFrom(*source);
  }
}

void LsLinkNLRI::MergeFrom(const LsLinkNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsLinkNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::apipb::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
  if (from.has_remote_node()) {
    _internal_mutable_remote_node()->::apipb::LsNodeDescriptor::MergeFrom(from._internal_remote_node());
  }
  if (from.has_link_descriptor()) {
    _internal_mutable_link_descriptor()->::apipb::LsLinkDescriptor::MergeFrom(from._internal_link_descriptor());
  }
}

void LsLinkNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsLinkNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsLinkNLRI::CopyFrom(const LsLinkNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsLinkNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsLinkNLRI::IsInitialized() const {
  return true;
}

void LsLinkNLRI::InternalSwap(LsLinkNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsLinkNLRI, link_descriptor_)
      + sizeof(LsLinkNLRI::link_descriptor_)
      - PROTOBUF_FIELD_OFFSET(LsLinkNLRI, local_node_)>(
          reinterpret_cast<char*>(&local_node_),
          reinterpret_cast<char*>(&other->local_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsLinkNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsPrefixV4NLRI::InitAsDefaultInstance() {
  ::apipb::_LsPrefixV4NLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::apipb::LsNodeDescriptor*>(
      ::apipb::LsNodeDescriptor::internal_default_instance());
  ::apipb::_LsPrefixV4NLRI_default_instance_._instance.get_mutable()->prefix_descriptor_ = const_cast< ::apipb::LsPrefixDescriptor*>(
      ::apipb::LsPrefixDescriptor::internal_default_instance());
}
class LsPrefixV4NLRI::_Internal {
 public:
  static const ::apipb::LsNodeDescriptor& local_node(const LsPrefixV4NLRI* msg);
  static const ::apipb::LsPrefixDescriptor& prefix_descriptor(const LsPrefixV4NLRI* msg);
};

const ::apipb::LsNodeDescriptor&
LsPrefixV4NLRI::_Internal::local_node(const LsPrefixV4NLRI* msg) {
  return *msg->local_node_;
}
const ::apipb::LsPrefixDescriptor&
LsPrefixV4NLRI::_Internal::prefix_descriptor(const LsPrefixV4NLRI* msg) {
  return *msg->prefix_descriptor_;
}
LsPrefixV4NLRI::LsPrefixV4NLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsPrefixV4NLRI)
}
LsPrefixV4NLRI::LsPrefixV4NLRI(const LsPrefixV4NLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::apipb::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  if (from._internal_has_prefix_descriptor()) {
    prefix_descriptor_ = new ::apipb::LsPrefixDescriptor(*from.prefix_descriptor_);
  } else {
    prefix_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsPrefixV4NLRI)
}

void LsPrefixV4NLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsPrefixV4NLRI_attribute_2eproto.base);
  ::memset(&local_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_descriptor_) -
      reinterpret_cast<char*>(&local_node_)) + sizeof(prefix_descriptor_));
}

LsPrefixV4NLRI::~LsPrefixV4NLRI() {
  // @@protoc_insertion_point(destructor:apipb.LsPrefixV4NLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsPrefixV4NLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_node_;
  if (this != internal_default_instance()) delete prefix_descriptor_;
}

void LsPrefixV4NLRI::ArenaDtor(void* object) {
  LsPrefixV4NLRI* _this = reinterpret_cast< LsPrefixV4NLRI* >(object);
  (void)_this;
}
void LsPrefixV4NLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsPrefixV4NLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsPrefixV4NLRI& LsPrefixV4NLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsPrefixV4NLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsPrefixV4NLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsPrefixV4NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  if (GetArena() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsPrefixV4NLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsPrefixV4NLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsPrefixV4NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefix_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsPrefixV4NLRI)
  return target;
}

size_t LsPrefixV4NLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsPrefixV4NLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsPrefixV4NLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsPrefixV4NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsPrefixV4NLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsPrefixV4NLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsPrefixV4NLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsPrefixV4NLRI)
    MergeFrom(*source);
  }
}

void LsPrefixV4NLRI::MergeFrom(const LsPrefixV4NLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsPrefixV4NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::apipb::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
  if (from.has_prefix_descriptor()) {
    _internal_mutable_prefix_descriptor()->::apipb::LsPrefixDescriptor::MergeFrom(from._internal_prefix_descriptor());
  }
}

void LsPrefixV4NLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsPrefixV4NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsPrefixV4NLRI::CopyFrom(const LsPrefixV4NLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsPrefixV4NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsPrefixV4NLRI::IsInitialized() const {
  return true;
}

void LsPrefixV4NLRI::InternalSwap(LsPrefixV4NLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsPrefixV4NLRI, prefix_descriptor_)
      + sizeof(LsPrefixV4NLRI::prefix_descriptor_)
      - PROTOBUF_FIELD_OFFSET(LsPrefixV4NLRI, local_node_)>(
          reinterpret_cast<char*>(&local_node_),
          reinterpret_cast<char*>(&other->local_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsPrefixV4NLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsPrefixV6NLRI::InitAsDefaultInstance() {
  ::apipb::_LsPrefixV6NLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::apipb::LsNodeDescriptor*>(
      ::apipb::LsNodeDescriptor::internal_default_instance());
  ::apipb::_LsPrefixV6NLRI_default_instance_._instance.get_mutable()->prefix_descriptor_ = const_cast< ::apipb::LsPrefixDescriptor*>(
      ::apipb::LsPrefixDescriptor::internal_default_instance());
}
class LsPrefixV6NLRI::_Internal {
 public:
  static const ::apipb::LsNodeDescriptor& local_node(const LsPrefixV6NLRI* msg);
  static const ::apipb::LsPrefixDescriptor& prefix_descriptor(const LsPrefixV6NLRI* msg);
};

const ::apipb::LsNodeDescriptor&
LsPrefixV6NLRI::_Internal::local_node(const LsPrefixV6NLRI* msg) {
  return *msg->local_node_;
}
const ::apipb::LsPrefixDescriptor&
LsPrefixV6NLRI::_Internal::prefix_descriptor(const LsPrefixV6NLRI* msg) {
  return *msg->prefix_descriptor_;
}
LsPrefixV6NLRI::LsPrefixV6NLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsPrefixV6NLRI)
}
LsPrefixV6NLRI::LsPrefixV6NLRI(const LsPrefixV6NLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::apipb::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  if (from._internal_has_prefix_descriptor()) {
    prefix_descriptor_ = new ::apipb::LsPrefixDescriptor(*from.prefix_descriptor_);
  } else {
    prefix_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsPrefixV6NLRI)
}

void LsPrefixV6NLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsPrefixV6NLRI_attribute_2eproto.base);
  ::memset(&local_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_descriptor_) -
      reinterpret_cast<char*>(&local_node_)) + sizeof(prefix_descriptor_));
}

LsPrefixV6NLRI::~LsPrefixV6NLRI() {
  // @@protoc_insertion_point(destructor:apipb.LsPrefixV6NLRI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsPrefixV6NLRI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_node_;
  if (this != internal_default_instance()) delete prefix_descriptor_;
}

void LsPrefixV6NLRI::ArenaDtor(void* object) {
  LsPrefixV6NLRI* _this = reinterpret_cast< LsPrefixV6NLRI* >(object);
  (void)_this;
}
void LsPrefixV6NLRI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsPrefixV6NLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsPrefixV6NLRI& LsPrefixV6NLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsPrefixV6NLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsPrefixV6NLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsPrefixV6NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  if (GetArena() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsPrefixV6NLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsPrefixV6NLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsPrefixV6NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefix_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsPrefixV6NLRI)
  return target;
}

size_t LsPrefixV6NLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsPrefixV6NLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsPrefixV6NLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsPrefixV6NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsPrefixV6NLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsPrefixV6NLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsPrefixV6NLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsPrefixV6NLRI)
    MergeFrom(*source);
  }
}

void LsPrefixV6NLRI::MergeFrom(const LsPrefixV6NLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsPrefixV6NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::apipb::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
  if (from.has_prefix_descriptor()) {
    _internal_mutable_prefix_descriptor()->::apipb::LsPrefixDescriptor::MergeFrom(from._internal_prefix_descriptor());
  }
}

void LsPrefixV6NLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsPrefixV6NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsPrefixV6NLRI::CopyFrom(const LsPrefixV6NLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsPrefixV6NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsPrefixV6NLRI::IsInitialized() const {
  return true;
}

void LsPrefixV6NLRI::InternalSwap(LsPrefixV6NLRI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsPrefixV6NLRI, prefix_descriptor_)
      + sizeof(LsPrefixV6NLRI::prefix_descriptor_)
      - PROTOBUF_FIELD_OFFSET(LsPrefixV6NLRI, local_node_)>(
          reinterpret_cast<char*>(&local_node_),
          reinterpret_cast<char*>(&other->local_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsPrefixV6NLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAddrPrefix::InitAsDefaultInstance() {
  ::apipb::_LsAddrPrefix_default_instance_._instance.get_mutable()->nlri_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class LsAddrPrefix::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& nlri(const LsAddrPrefix* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
LsAddrPrefix::_Internal::nlri(const LsAddrPrefix* msg) {
  return *msg->nlri_;
}
void LsAddrPrefix::clear_nlri() {
  if (GetArena() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
}
LsAddrPrefix::LsAddrPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsAddrPrefix)
}
LsAddrPrefix::LsAddrPrefix(const LsAddrPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nlri()) {
    nlri_ = new PROTOBUF_NAMESPACE_ID::Any(*from.nlri_);
  } else {
    nlri_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(protocol_id_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsAddrPrefix)
}

void LsAddrPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAddrPrefix_attribute_2eproto.base);
  ::memset(&nlri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_id_) -
      reinterpret_cast<char*>(&nlri_)) + sizeof(protocol_id_));
}

LsAddrPrefix::~LsAddrPrefix() {
  // @@protoc_insertion_point(destructor:apipb.LsAddrPrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsAddrPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete nlri_;
}

void LsAddrPrefix::ArenaDtor(void* object) {
  LsAddrPrefix* _this = reinterpret_cast< LsAddrPrefix* >(object);
  (void)_this;
}
void LsAddrPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsAddrPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAddrPrefix& LsAddrPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAddrPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAddrPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsAddrPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(protocol_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsAddrPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsNLRIType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::LsNLRIType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any nlri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nlri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsProtocolID protocol_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol_id(static_cast<::apipb::LsProtocolID>(val));
        } else goto handle_unusual;
        continue;
      // uint64 identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAddrPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsAddrPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsNLRIType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any nlri = 2;
  if (this->has_nlri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nlri(this), target, stream);
  }

  // uint32 length = 3;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // .apipb.LsProtocolID protocol_id = 4;
  if (this->protocol_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_protocol_id(), target);
  }

  // uint64 identifier = 5;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsAddrPrefix)
  return target;
}

size_t LsAddrPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsAddrPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any nlri = 2;
  if (this->has_nlri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nlri_);
  }

  // .apipb.LsNLRIType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  // uint64 identifier = 5;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());
  }

  // .apipb.LsProtocolID protocol_id = 4;
  if (this->protocol_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAddrPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsAddrPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAddrPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAddrPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsAddrPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsAddrPrefix)
    MergeFrom(*source);
  }
}

void LsAddrPrefix::MergeFrom(const LsAddrPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsAddrPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nlri()) {
    _internal_mutable_nlri()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_nlri());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from.protocol_id() != 0) {
    _internal_set_protocol_id(from._internal_protocol_id());
  }
}

void LsAddrPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsAddrPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAddrPrefix::CopyFrom(const LsAddrPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsAddrPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAddrPrefix::IsInitialized() const {
  return true;
}

void LsAddrPrefix::InternalSwap(LsAddrPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsAddrPrefix, protocol_id_)
      + sizeof(LsAddrPrefix::protocol_id_)
      - PROTOBUF_FIELD_OFFSET(LsAddrPrefix, nlri_)>(
          reinterpret_cast<char*>(&nlri_),
          reinterpret_cast<char*>(&other->nlri_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAddrPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MUPInterworkSegmentDiscoveryRoute::InitAsDefaultInstance() {
  ::apipb::_MUPInterworkSegmentDiscoveryRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class MUPInterworkSegmentDiscoveryRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const MUPInterworkSegmentDiscoveryRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
MUPInterworkSegmentDiscoveryRoute::_Internal::rd(const MUPInterworkSegmentDiscoveryRoute* msg) {
  return *msg->rd_;
}
void MUPInterworkSegmentDiscoveryRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
MUPInterworkSegmentDiscoveryRoute::MUPInterworkSegmentDiscoveryRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MUPInterworkSegmentDiscoveryRoute)
}
MUPInterworkSegmentDiscoveryRoute::MUPInterworkSegmentDiscoveryRoute(const MUPInterworkSegmentDiscoveryRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.MUPInterworkSegmentDiscoveryRoute)
}

void MUPInterworkSegmentDiscoveryRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MUPInterworkSegmentDiscoveryRoute_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rd_ = nullptr;
}

MUPInterworkSegmentDiscoveryRoute::~MUPInterworkSegmentDiscoveryRoute() {
  // @@protoc_insertion_point(destructor:apipb.MUPInterworkSegmentDiscoveryRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MUPInterworkSegmentDiscoveryRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void MUPInterworkSegmentDiscoveryRoute::ArenaDtor(void* object) {
  MUPInterworkSegmentDiscoveryRoute* _this = reinterpret_cast< MUPInterworkSegmentDiscoveryRoute* >(object);
  (void)_this;
}
void MUPInterworkSegmentDiscoveryRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MUPInterworkSegmentDiscoveryRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MUPInterworkSegmentDiscoveryRoute& MUPInterworkSegmentDiscoveryRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MUPInterworkSegmentDiscoveryRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MUPInterworkSegmentDiscoveryRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MUPInterworkSegmentDiscoveryRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MUPInterworkSegmentDiscoveryRoute.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MUPInterworkSegmentDiscoveryRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MUPInterworkSegmentDiscoveryRoute.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MUPInterworkSegmentDiscoveryRoute)
  return target;
}

size_t MUPInterworkSegmentDiscoveryRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MUPInterworkSegmentDiscoveryRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MUPInterworkSegmentDiscoveryRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MUPInterworkSegmentDiscoveryRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MUPInterworkSegmentDiscoveryRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MUPInterworkSegmentDiscoveryRoute)
    MergeFrom(*source);
  }
}

void MUPInterworkSegmentDiscoveryRoute::MergeFrom(const MUPInterworkSegmentDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
}

void MUPInterworkSegmentDiscoveryRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MUPInterworkSegmentDiscoveryRoute::CopyFrom(const MUPInterworkSegmentDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MUPInterworkSegmentDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MUPInterworkSegmentDiscoveryRoute::IsInitialized() const {
  return true;
}

void MUPInterworkSegmentDiscoveryRoute::InternalSwap(MUPInterworkSegmentDiscoveryRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rd_, other->rd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MUPInterworkSegmentDiscoveryRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MUPDirectSegmentDiscoveryRoute::InitAsDefaultInstance() {
  ::apipb::_MUPDirectSegmentDiscoveryRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class MUPDirectSegmentDiscoveryRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const MUPDirectSegmentDiscoveryRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
MUPDirectSegmentDiscoveryRoute::_Internal::rd(const MUPDirectSegmentDiscoveryRoute* msg) {
  return *msg->rd_;
}
void MUPDirectSegmentDiscoveryRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
MUPDirectSegmentDiscoveryRoute::MUPDirectSegmentDiscoveryRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MUPDirectSegmentDiscoveryRoute)
}
MUPDirectSegmentDiscoveryRoute::MUPDirectSegmentDiscoveryRoute(const MUPDirectSegmentDiscoveryRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.MUPDirectSegmentDiscoveryRoute)
}

void MUPDirectSegmentDiscoveryRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MUPDirectSegmentDiscoveryRoute_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rd_ = nullptr;
}

MUPDirectSegmentDiscoveryRoute::~MUPDirectSegmentDiscoveryRoute() {
  // @@protoc_insertion_point(destructor:apipb.MUPDirectSegmentDiscoveryRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MUPDirectSegmentDiscoveryRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void MUPDirectSegmentDiscoveryRoute::ArenaDtor(void* object) {
  MUPDirectSegmentDiscoveryRoute* _this = reinterpret_cast< MUPDirectSegmentDiscoveryRoute* >(object);
  (void)_this;
}
void MUPDirectSegmentDiscoveryRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MUPDirectSegmentDiscoveryRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MUPDirectSegmentDiscoveryRoute& MUPDirectSegmentDiscoveryRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MUPDirectSegmentDiscoveryRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MUPDirectSegmentDiscoveryRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MUPDirectSegmentDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MUPDirectSegmentDiscoveryRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MUPDirectSegmentDiscoveryRoute.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MUPDirectSegmentDiscoveryRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MUPDirectSegmentDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MUPDirectSegmentDiscoveryRoute.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MUPDirectSegmentDiscoveryRoute)
  return target;
}

size_t MUPDirectSegmentDiscoveryRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MUPDirectSegmentDiscoveryRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MUPDirectSegmentDiscoveryRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MUPDirectSegmentDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MUPDirectSegmentDiscoveryRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MUPDirectSegmentDiscoveryRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MUPDirectSegmentDiscoveryRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MUPDirectSegmentDiscoveryRoute)
    MergeFrom(*source);
  }
}

void MUPDirectSegmentDiscoveryRoute::MergeFrom(const MUPDirectSegmentDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MUPDirectSegmentDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
}

void MUPDirectSegmentDiscoveryRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MUPDirectSegmentDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MUPDirectSegmentDiscoveryRoute::CopyFrom(const MUPDirectSegmentDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MUPDirectSegmentDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MUPDirectSegmentDiscoveryRoute::IsInitialized() const {
  return true;
}

void MUPDirectSegmentDiscoveryRoute::InternalSwap(MUPDirectSegmentDiscoveryRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rd_, other->rd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MUPDirectSegmentDiscoveryRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MUPType1SessionTransformedRoute::InitAsDefaultInstance() {
  ::apipb::_MUPType1SessionTransformedRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class MUPType1SessionTransformedRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const MUPType1SessionTransformedRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
MUPType1SessionTransformedRoute::_Internal::rd(const MUPType1SessionTransformedRoute* msg) {
  return *msg->rd_;
}
void MUPType1SessionTransformedRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
MUPType1SessionTransformedRoute::MUPType1SessionTransformedRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MUPType1SessionTransformedRoute)
}
MUPType1SessionTransformedRoute::MUPType1SessionTransformedRoute(const MUPType1SessionTransformedRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  endpoint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint_address().empty()) {
    endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  ::memcpy(&prefix_length_, &from.prefix_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&endpoint_address_length_) -
    reinterpret_cast<char*>(&prefix_length_)) + sizeof(endpoint_address_length_));
  // @@protoc_insertion_point(copy_constructor:apipb.MUPType1SessionTransformedRoute)
}

void MUPType1SessionTransformedRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MUPType1SessionTransformedRoute_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endpoint_address_length_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(endpoint_address_length_));
}

MUPType1SessionTransformedRoute::~MUPType1SessionTransformedRoute() {
  // @@protoc_insertion_point(destructor:apipb.MUPType1SessionTransformedRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MUPType1SessionTransformedRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void MUPType1SessionTransformedRoute::ArenaDtor(void* object) {
  MUPType1SessionTransformedRoute* _this = reinterpret_cast< MUPType1SessionTransformedRoute* >(object);
  (void)_this;
}
void MUPType1SessionTransformedRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MUPType1SessionTransformedRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MUPType1SessionTransformedRoute& MUPType1SessionTransformedRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MUPType1SessionTransformedRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MUPType1SessionTransformedRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MUPType1SessionTransformedRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  ::memset(&prefix_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endpoint_address_length_) -
      reinterpret_cast<char*>(&prefix_length_)) + sizeof(endpoint_address_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MUPType1SessionTransformedRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_length = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MUPType1SessionTransformedRoute.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 teid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qfi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          qfi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 endpoint_address_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          endpoint_address_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_endpoint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MUPType1SessionTransformedRoute.endpoint_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MUPType1SessionTransformedRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MUPType1SessionTransformedRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // uint32 prefix_length = 2 [deprecated = true];
  if (this->prefix_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefix_length(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MUPType1SessionTransformedRoute.prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // uint32 teid = 4;
  if (this->teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teid(), target);
  }

  // uint32 qfi = 5;
  if (this->qfi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_qfi(), target);
  }

  // uint32 endpoint_address_length = 6;
  if (this->endpoint_address_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_endpoint_address_length(), target);
  }

  // string endpoint_address = 7;
  if (this->endpoint_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint_address().data(), static_cast<int>(this->_internal_endpoint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MUPType1SessionTransformedRoute.endpoint_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_endpoint_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MUPType1SessionTransformedRoute)
  return target;
}

size_t MUPType1SessionTransformedRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MUPType1SessionTransformedRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string endpoint_address = 7;
  if (this->endpoint_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 prefix_length = 2 [deprecated = true];
  if (this->prefix_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_length());
  }

  // uint32 teid = 4;
  if (this->teid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teid());
  }

  // uint32 qfi = 5;
  if (this->qfi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qfi());
  }

  // uint32 endpoint_address_length = 6;
  if (this->endpoint_address_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endpoint_address_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MUPType1SessionTransformedRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MUPType1SessionTransformedRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MUPType1SessionTransformedRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MUPType1SessionTransformedRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MUPType1SessionTransformedRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MUPType1SessionTransformedRoute)
    MergeFrom(*source);
  }
}

void MUPType1SessionTransformedRoute::MergeFrom(const MUPType1SessionTransformedRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MUPType1SessionTransformedRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.endpoint_address().size() > 0) {
    _internal_set_endpoint_address(from._internal_endpoint_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.prefix_length() != 0) {
    _internal_set_prefix_length(from._internal_prefix_length());
  }
  if (from.teid() != 0) {
    _internal_set_teid(from._internal_teid());
  }
  if (from.qfi() != 0) {
    _internal_set_qfi(from._internal_qfi());
  }
  if (from.endpoint_address_length() != 0) {
    _internal_set_endpoint_address_length(from._internal_endpoint_address_length());
  }
}

void MUPType1SessionTransformedRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MUPType1SessionTransformedRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MUPType1SessionTransformedRoute::CopyFrom(const MUPType1SessionTransformedRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MUPType1SessionTransformedRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MUPType1SessionTransformedRoute::IsInitialized() const {
  return true;
}

void MUPType1SessionTransformedRoute::InternalSwap(MUPType1SessionTransformedRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_address_.Swap(&other->endpoint_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MUPType1SessionTransformedRoute, endpoint_address_length_)
      + sizeof(MUPType1SessionTransformedRoute::endpoint_address_length_)
      - PROTOBUF_FIELD_OFFSET(MUPType1SessionTransformedRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MUPType1SessionTransformedRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MUPType2SessionTransformedRoute::InitAsDefaultInstance() {
  ::apipb::_MUPType2SessionTransformedRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class MUPType2SessionTransformedRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const MUPType2SessionTransformedRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
MUPType2SessionTransformedRoute::_Internal::rd(const MUPType2SessionTransformedRoute* msg) {
  return *msg->rd_;
}
void MUPType2SessionTransformedRoute::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
MUPType2SessionTransformedRoute::MUPType2SessionTransformedRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MUPType2SessionTransformedRoute)
}
MUPType2SessionTransformedRoute::MUPType2SessionTransformedRoute(const MUPType2SessionTransformedRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  endpoint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint_address().empty()) {
    endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint_address(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  ::memcpy(&endpoint_address_length_, &from.endpoint_address_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&teid_) -
    reinterpret_cast<char*>(&endpoint_address_length_)) + sizeof(teid_));
  // @@protoc_insertion_point(copy_constructor:apipb.MUPType2SessionTransformedRoute)
}

void MUPType2SessionTransformedRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MUPType2SessionTransformedRoute_attribute_2eproto.base);
  endpoint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teid_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(teid_));
}

MUPType2SessionTransformedRoute::~MUPType2SessionTransformedRoute() {
  // @@protoc_insertion_point(destructor:apipb.MUPType2SessionTransformedRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MUPType2SessionTransformedRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  endpoint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void MUPType2SessionTransformedRoute::ArenaDtor(void* object) {
  MUPType2SessionTransformedRoute* _this = reinterpret_cast< MUPType2SessionTransformedRoute* >(object);
  (void)_this;
}
void MUPType2SessionTransformedRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MUPType2SessionTransformedRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MUPType2SessionTransformedRoute& MUPType2SessionTransformedRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MUPType2SessionTransformedRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MUPType2SessionTransformedRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MUPType2SessionTransformedRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  ::memset(&endpoint_address_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teid_) -
      reinterpret_cast<char*>(&endpoint_address_length_)) + sizeof(teid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MUPType2SessionTransformedRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 endpoint_address_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endpoint_address_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_endpoint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MUPType2SessionTransformedRoute.endpoint_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 teid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MUPType2SessionTransformedRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MUPType2SessionTransformedRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // uint32 endpoint_address_length = 2;
  if (this->endpoint_address_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_endpoint_address_length(), target);
  }

  // string endpoint_address = 3;
  if (this->endpoint_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint_address().data(), static_cast<int>(this->_internal_endpoint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MUPType2SessionTransformedRoute.endpoint_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_endpoint_address(), target);
  }

  // uint32 teid = 4;
  if (this->teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MUPType2SessionTransformedRoute)
  return target;
}

size_t MUPType2SessionTransformedRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MUPType2SessionTransformedRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string endpoint_address = 3;
  if (this->endpoint_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 endpoint_address_length = 2;
  if (this->endpoint_address_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endpoint_address_length());
  }

  // uint32 teid = 4;
  if (this->teid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MUPType2SessionTransformedRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MUPType2SessionTransformedRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MUPType2SessionTransformedRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MUPType2SessionTransformedRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MUPType2SessionTransformedRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MUPType2SessionTransformedRoute)
    MergeFrom(*source);
  }
}

void MUPType2SessionTransformedRoute::MergeFrom(const MUPType2SessionTransformedRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MUPType2SessionTransformedRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint_address().size() > 0) {
    _internal_set_endpoint_address(from._internal_endpoint_address());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.endpoint_address_length() != 0) {
    _internal_set_endpoint_address_length(from._internal_endpoint_address_length());
  }
  if (from.teid() != 0) {
    _internal_set_teid(from._internal_teid());
  }
}

void MUPType2SessionTransformedRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MUPType2SessionTransformedRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MUPType2SessionTransformedRoute::CopyFrom(const MUPType2SessionTransformedRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MUPType2SessionTransformedRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MUPType2SessionTransformedRoute::IsInitialized() const {
  return true;
}

void MUPType2SessionTransformedRoute::InternalSwap(MUPType2SessionTransformedRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  endpoint_address_.Swap(&other->endpoint_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MUPType2SessionTransformedRoute, teid_)
      + sizeof(MUPType2SessionTransformedRoute::teid_)
      - PROTOBUF_FIELD_OFFSET(MUPType2SessionTransformedRoute, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MUPType2SessionTransformedRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpReachNLRIAttribute::InitAsDefaultInstance() {
  ::apipb::_MpReachNLRIAttribute_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class MpReachNLRIAttribute::_Internal {
 public:
  static const ::apipb::Family& family(const MpReachNLRIAttribute* msg);
};

const ::apipb::Family&
MpReachNLRIAttribute::_Internal::family(const MpReachNLRIAttribute* msg) {
  return *msg->family_;
}
void MpReachNLRIAttribute::clear_family() {
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
void MpReachNLRIAttribute::clear_nlris() {
  nlris_.Clear();
}
MpReachNLRIAttribute::MpReachNLRIAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  next_hops_(arena),
  nlris_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MpReachNLRIAttribute)
}
MpReachNLRIAttribute::MpReachNLRIAttribute(const MpReachNLRIAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      next_hops_(from.next_hops_),
      nlris_(from.nlris_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.MpReachNLRIAttribute)
}

void MpReachNLRIAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpReachNLRIAttribute_attribute_2eproto.base);
  family_ = nullptr;
}

MpReachNLRIAttribute::~MpReachNLRIAttribute() {
  // @@protoc_insertion_point(destructor:apipb.MpReachNLRIAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MpReachNLRIAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void MpReachNLRIAttribute::ArenaDtor(void* object) {
  MpReachNLRIAttribute* _this = reinterpret_cast< MpReachNLRIAttribute* >(object);
  (void)_this;
}
void MpReachNLRIAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MpReachNLRIAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpReachNLRIAttribute& MpReachNLRIAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpReachNLRIAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MpReachNLRIAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MpReachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_hops_.Clear();
  nlris_.Clear();
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MpReachNLRIAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string next_hops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_next_hops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MpReachNLRIAttribute.next_hops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any nlris = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nlris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpReachNLRIAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MpReachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // repeated string next_hops = 2;
  for (int i = 0, n = this->_internal_next_hops_size(); i < n; i++) {
    const auto& s = this->_internal_next_hops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MpReachNLRIAttribute.next_hops");
    target = stream->WriteString(2, s, target);
  }

  // repeated .google.protobuf.Any nlris = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nlris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nlris(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MpReachNLRIAttribute)
  return target;
}

size_t MpReachNLRIAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MpReachNLRIAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string next_hops = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(next_hops_.size());
  for (int i = 0, n = next_hops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      next_hops_.Get(i));
  }

  // repeated .google.protobuf.Any nlris = 3;
  total_size += 1UL * this->_internal_nlris_size();
  for (const auto& msg : this->nlris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpReachNLRIAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MpReachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MpReachNLRIAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpReachNLRIAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MpReachNLRIAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MpReachNLRIAttribute)
    MergeFrom(*source);
  }
}

void MpReachNLRIAttribute::MergeFrom(const MpReachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MpReachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_hops_.MergeFrom(from.next_hops_);
  nlris_.MergeFrom(from.nlris_);
  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
}

void MpReachNLRIAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MpReachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpReachNLRIAttribute::CopyFrom(const MpReachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MpReachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpReachNLRIAttribute::IsInitialized() const {
  return true;
}

void MpReachNLRIAttribute::InternalSwap(MpReachNLRIAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_hops_.InternalSwap(&other->next_hops_);
  nlris_.InternalSwap(&other->nlris_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpReachNLRIAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpUnreachNLRIAttribute::InitAsDefaultInstance() {
  ::apipb::_MpUnreachNLRIAttribute_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class MpUnreachNLRIAttribute::_Internal {
 public:
  static const ::apipb::Family& family(const MpUnreachNLRIAttribute* msg);
};

const ::apipb::Family&
MpUnreachNLRIAttribute::_Internal::family(const MpUnreachNLRIAttribute* msg) {
  return *msg->family_;
}
void MpUnreachNLRIAttribute::clear_family() {
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
void MpUnreachNLRIAttribute::clear_nlris() {
  nlris_.Clear();
}
MpUnreachNLRIAttribute::MpUnreachNLRIAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nlris_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MpUnreachNLRIAttribute)
}
MpUnreachNLRIAttribute::MpUnreachNLRIAttribute(const MpUnreachNLRIAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nlris_(from.nlris_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.MpUnreachNLRIAttribute)
}

void MpUnreachNLRIAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpUnreachNLRIAttribute_attribute_2eproto.base);
  family_ = nullptr;
}

MpUnreachNLRIAttribute::~MpUnreachNLRIAttribute() {
  // @@protoc_insertion_point(destructor:apipb.MpUnreachNLRIAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MpUnreachNLRIAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void MpUnreachNLRIAttribute::ArenaDtor(void* object) {
  MpUnreachNLRIAttribute* _this = reinterpret_cast< MpUnreachNLRIAttribute* >(object);
  (void)_this;
}
void MpUnreachNLRIAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MpUnreachNLRIAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpUnreachNLRIAttribute& MpUnreachNLRIAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpUnreachNLRIAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MpUnreachNLRIAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MpUnreachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nlris_.Clear();
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MpUnreachNLRIAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any nlris = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nlris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpUnreachNLRIAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MpUnreachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // repeated .google.protobuf.Any nlris = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nlris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nlris(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MpUnreachNLRIAttribute)
  return target;
}

size_t MpUnreachNLRIAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MpUnreachNLRIAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any nlris = 3;
  total_size += 1UL * this->_internal_nlris_size();
  for (const auto& msg : this->nlris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpUnreachNLRIAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MpUnreachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MpUnreachNLRIAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpUnreachNLRIAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MpUnreachNLRIAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MpUnreachNLRIAttribute)
    MergeFrom(*source);
  }
}

void MpUnreachNLRIAttribute::MergeFrom(const MpUnreachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MpUnreachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nlris_.MergeFrom(from.nlris_);
  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
}

void MpUnreachNLRIAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MpUnreachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpUnreachNLRIAttribute::CopyFrom(const MpUnreachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MpUnreachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpUnreachNLRIAttribute::IsInitialized() const {
  return true;
}

void MpUnreachNLRIAttribute::InternalSwap(MpUnreachNLRIAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nlris_.InternalSwap(&other->nlris_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpUnreachNLRIAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TwoOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class TwoOctetAsSpecificExtended::_Internal {
 public:
};

TwoOctetAsSpecificExtended::TwoOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TwoOctetAsSpecificExtended)
}
TwoOctetAsSpecificExtended::TwoOctetAsSpecificExtended(const TwoOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:apipb.TwoOctetAsSpecificExtended)
}

void TwoOctetAsSpecificExtended::SharedCtor() {
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

TwoOctetAsSpecificExtended::~TwoOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.TwoOctetAsSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TwoOctetAsSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TwoOctetAsSpecificExtended::ArenaDtor(void* object) {
  TwoOctetAsSpecificExtended* _this = reinterpret_cast< TwoOctetAsSpecificExtended* >(object);
  (void)_this;
}
void TwoOctetAsSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwoOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwoOctetAsSpecificExtended& TwoOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwoOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TwoOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwoOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwoOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // uint32 asn = 3;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_asn(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TwoOctetAsSpecificExtended)
  return target;
}

size_t TwoOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TwoOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 asn = 3;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwoOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwoOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TwoOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TwoOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void TwoOctetAsSpecificExtended::MergeFrom(const TwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void TwoOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoOctetAsSpecificExtended::CopyFrom(const TwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void TwoOctetAsSpecificExtended::InternalSwap(TwoOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwoOctetAsSpecificExtended, local_admin_)
      + sizeof(TwoOctetAsSpecificExtended::local_admin_)
      - PROTOBUF_FIELD_OFFSET(TwoOctetAsSpecificExtended, is_transitive_)>(
          reinterpret_cast<char*>(&is_transitive_),
          reinterpret_cast<char*>(&other->is_transitive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPv4AddressSpecificExtended::InitAsDefaultInstance() {
}
class IPv4AddressSpecificExtended::_Internal {
 public:
};

IPv4AddressSpecificExtended::IPv4AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.IPv4AddressSpecificExtended)
}
IPv4AddressSpecificExtended::IPv4AddressSpecificExtended(const IPv4AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:apipb.IPv4AddressSpecificExtended)
}

void IPv4AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPv4AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

IPv4AddressSpecificExtended::~IPv4AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.IPv4AddressSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPv4AddressSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv4AddressSpecificExtended::ArenaDtor(void* object) {
  IPv4AddressSpecificExtended* _this = reinterpret_cast< IPv4AddressSpecificExtended* >(object);
  (void)_this;
}
void IPv4AddressSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv4AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPv4AddressSpecificExtended& IPv4AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPv4AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void IPv4AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.IPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv4AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.IPv4AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv4AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.IPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.IPv4AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.IPv4AddressSpecificExtended)
  return target;
}

size_t IPv4AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.IPv4AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv4AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.IPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv4AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPv4AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.IPv4AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.IPv4AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void IPv4AddressSpecificExtended::MergeFrom(const IPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.IPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void IPv4AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.IPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4AddressSpecificExtended::CopyFrom(const IPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.IPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4AddressSpecificExtended::IsInitialized() const {
  return true;
}

void IPv4AddressSpecificExtended::InternalSwap(IPv4AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPv4AddressSpecificExtended, local_admin_)
      + sizeof(IPv4AddressSpecificExtended::local_admin_)
      - PROTOBUF_FIELD_OFFSET(IPv4AddressSpecificExtended, is_transitive_)>(
          reinterpret_cast<char*>(&is_transitive_),
          reinterpret_cast<char*>(&other->is_transitive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv4AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FourOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class FourOctetAsSpecificExtended::_Internal {
 public:
};

FourOctetAsSpecificExtended::FourOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.FourOctetAsSpecificExtended)
}
FourOctetAsSpecificExtended::FourOctetAsSpecificExtended(const FourOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:apipb.FourOctetAsSpecificExtended)
}

void FourOctetAsSpecificExtended::SharedCtor() {
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

FourOctetAsSpecificExtended::~FourOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.FourOctetAsSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FourOctetAsSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FourOctetAsSpecificExtended::ArenaDtor(void* object) {
  FourOctetAsSpecificExtended* _this = reinterpret_cast< FourOctetAsSpecificExtended* >(object);
  (void)_this;
}
void FourOctetAsSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FourOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FourOctetAsSpecificExtended& FourOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FourOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void FourOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.FourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FourOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FourOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.FourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // uint32 asn = 3;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_asn(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.FourOctetAsSpecificExtended)
  return target;
}

size_t FourOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.FourOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 asn = 3;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FourOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.FourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const FourOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FourOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.FourOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.FourOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void FourOctetAsSpecificExtended::MergeFrom(const FourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.FourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void FourOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.FourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FourOctetAsSpecificExtended::CopyFrom(const FourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.FourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void FourOctetAsSpecificExtended::InternalSwap(FourOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FourOctetAsSpecificExtended, local_admin_)
      + sizeof(FourOctetAsSpecificExtended::local_admin_)
      - PROTOBUF_FIELD_OFFSET(FourOctetAsSpecificExtended, is_transitive_)>(
          reinterpret_cast<char*>(&is_transitive_),
          reinterpret_cast<char*>(&other->is_transitive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FourOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkBandwidthExtended::InitAsDefaultInstance() {
}
class LinkBandwidthExtended::_Internal {
 public:
};

LinkBandwidthExtended::LinkBandwidthExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LinkBandwidthExtended)
}
LinkBandwidthExtended::LinkBandwidthExtended(const LinkBandwidthExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&bandwidth_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(bandwidth_));
  // @@protoc_insertion_point(copy_constructor:apipb.LinkBandwidthExtended)
}

void LinkBandwidthExtended::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bandwidth_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(bandwidth_));
}

LinkBandwidthExtended::~LinkBandwidthExtended() {
  // @@protoc_insertion_point(destructor:apipb.LinkBandwidthExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkBandwidthExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinkBandwidthExtended::ArenaDtor(void* object) {
  LinkBandwidthExtended* _this = reinterpret_cast< LinkBandwidthExtended* >(object);
  (void)_this;
}
void LinkBandwidthExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkBandwidthExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkBandwidthExtended& LinkBandwidthExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkBandwidthExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void LinkBandwidthExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LinkBandwidthExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bandwidth_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(bandwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkBandwidthExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkBandwidthExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LinkBandwidthExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // float bandwidth = 2;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LinkBandwidthExtended)
  return target;
}

size_t LinkBandwidthExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LinkBandwidthExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // float bandwidth = 2;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkBandwidthExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LinkBandwidthExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkBandwidthExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkBandwidthExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LinkBandwidthExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LinkBandwidthExtended)
    MergeFrom(*source);
  }
}

void LinkBandwidthExtended::MergeFrom(const LinkBandwidthExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LinkBandwidthExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (!(from.bandwidth() <= 0 && from.bandwidth() >= 0)) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
}

void LinkBandwidthExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LinkBandwidthExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkBandwidthExtended::CopyFrom(const LinkBandwidthExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LinkBandwidthExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkBandwidthExtended::IsInitialized() const {
  return true;
}

void LinkBandwidthExtended::InternalSwap(LinkBandwidthExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkBandwidthExtended, bandwidth_)
      + sizeof(LinkBandwidthExtended::bandwidth_)
      - PROTOBUF_FIELD_OFFSET(LinkBandwidthExtended, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkBandwidthExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidationExtended::InitAsDefaultInstance() {
}
class ValidationExtended::_Internal {
 public:
};

ValidationExtended::ValidationExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ValidationExtended)
}
ValidationExtended::ValidationExtended(const ValidationExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:apipb.ValidationExtended)
}

void ValidationExtended::SharedCtor() {
  state_ = 0u;
}

ValidationExtended::~ValidationExtended() {
  // @@protoc_insertion_point(destructor:apipb.ValidationExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidationExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidationExtended::ArenaDtor(void* object) {
  ValidationExtended* _this = reinterpret_cast< ValidationExtended* >(object);
  (void)_this;
}
void ValidationExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidationExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationExtended& ValidationExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void ValidationExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ValidationExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidationExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ValidationExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ValidationExtended)
  return target;
}

size_t ValidationExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ValidationExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ValidationExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidationExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ValidationExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ValidationExtended)
    MergeFrom(*source);
  }
}

void ValidationExtended::MergeFrom(const ValidationExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ValidationExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ValidationExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ValidationExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationExtended::CopyFrom(const ValidationExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ValidationExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationExtended::IsInitialized() const {
  return true;
}

void ValidationExtended::InternalSwap(ValidationExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorExtended::InitAsDefaultInstance() {
}
class ColorExtended::_Internal {
 public:
};

ColorExtended::ColorExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ColorExtended)
}
ColorExtended::ColorExtended(const ColorExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:apipb.ColorExtended)
}

void ColorExtended::SharedCtor() {
  color_ = 0u;
}

ColorExtended::~ColorExtended() {
  // @@protoc_insertion_point(destructor:apipb.ColorExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColorExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ColorExtended::ArenaDtor(void* object) {
  ColorExtended* _this = reinterpret_cast< ColorExtended* >(object);
  (void)_this;
}
void ColorExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorExtended& ColorExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void ColorExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ColorExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ColorExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ColorExtended)
  return target;
}

size_t ColorExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ColorExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ColorExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ColorExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ColorExtended)
    MergeFrom(*source);
  }
}

void ColorExtended::MergeFrom(const ColorExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ColorExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void ColorExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ColorExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorExtended::CopyFrom(const ColorExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ColorExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorExtended::IsInitialized() const {
  return true;
}

void ColorExtended::InternalSwap(ColorExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncapExtended::InitAsDefaultInstance() {
}
class EncapExtended::_Internal {
 public:
};

EncapExtended::EncapExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EncapExtended)
}
EncapExtended::EncapExtended(const EncapExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tunnel_type_ = from.tunnel_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.EncapExtended)
}

void EncapExtended::SharedCtor() {
  tunnel_type_ = 0u;
}

EncapExtended::~EncapExtended() {
  // @@protoc_insertion_point(destructor:apipb.EncapExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncapExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EncapExtended::ArenaDtor(void* object) {
  EncapExtended* _this = reinterpret_cast< EncapExtended* >(object);
  (void)_this;
}
void EncapExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncapExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncapExtended& EncapExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncapExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void EncapExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EncapExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tunnel_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncapExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tunnel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tunnel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncapExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EncapExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tunnel_type = 1;
  if (this->tunnel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tunnel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EncapExtended)
  return target;
}

size_t EncapExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EncapExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tunnel_type = 1;
  if (this->tunnel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tunnel_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncapExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EncapExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const EncapExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncapExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EncapExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EncapExtended)
    MergeFrom(*source);
  }
}

void EncapExtended::MergeFrom(const EncapExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EncapExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tunnel_type() != 0) {
    _internal_set_tunnel_type(from._internal_tunnel_type());
  }
}

void EncapExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EncapExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncapExtended::CopyFrom(const EncapExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EncapExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncapExtended::IsInitialized() const {
  return true;
}

void EncapExtended::InternalSwap(EncapExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tunnel_type_, other->tunnel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncapExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultGatewayExtended::InitAsDefaultInstance() {
}
class DefaultGatewayExtended::_Internal {
 public:
};

DefaultGatewayExtended::DefaultGatewayExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DefaultGatewayExtended)
}
DefaultGatewayExtended::DefaultGatewayExtended(const DefaultGatewayExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.DefaultGatewayExtended)
}

void DefaultGatewayExtended::SharedCtor() {
}

DefaultGatewayExtended::~DefaultGatewayExtended() {
  // @@protoc_insertion_point(destructor:apipb.DefaultGatewayExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefaultGatewayExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DefaultGatewayExtended::ArenaDtor(void* object) {
  DefaultGatewayExtended* _this = reinterpret_cast< DefaultGatewayExtended* >(object);
  (void)_this;
}
void DefaultGatewayExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultGatewayExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultGatewayExtended& DefaultGatewayExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultGatewayExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void DefaultGatewayExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DefaultGatewayExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultGatewayExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultGatewayExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DefaultGatewayExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DefaultGatewayExtended)
  return target;
}

size_t DefaultGatewayExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DefaultGatewayExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultGatewayExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DefaultGatewayExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultGatewayExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultGatewayExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DefaultGatewayExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DefaultGatewayExtended)
    MergeFrom(*source);
  }
}

void DefaultGatewayExtended::MergeFrom(const DefaultGatewayExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DefaultGatewayExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DefaultGatewayExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DefaultGatewayExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultGatewayExtended::CopyFrom(const DefaultGatewayExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DefaultGatewayExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultGatewayExtended::IsInitialized() const {
  return true;
}

void DefaultGatewayExtended::InternalSwap(DefaultGatewayExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultGatewayExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpaqueExtended::InitAsDefaultInstance() {
}
class OpaqueExtended::_Internal {
 public:
};

OpaqueExtended::OpaqueExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.OpaqueExtended)
}
OpaqueExtended::OpaqueExtended(const OpaqueExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  is_transitive_ = from.is_transitive_;
  // @@protoc_insertion_point(copy_constructor:apipb.OpaqueExtended)
}

void OpaqueExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpaqueExtended_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_transitive_ = false;
}

OpaqueExtended::~OpaqueExtended() {
  // @@protoc_insertion_point(destructor:apipb.OpaqueExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpaqueExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpaqueExtended::ArenaDtor(void* object) {
  OpaqueExtended* _this = reinterpret_cast< OpaqueExtended* >(object);
  (void)_this;
}
void OpaqueExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpaqueExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpaqueExtended& OpaqueExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpaqueExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void OpaqueExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.OpaqueExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_transitive_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpaqueExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpaqueExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.OpaqueExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.OpaqueExtended)
  return target;
}

size_t OpaqueExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.OpaqueExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpaqueExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.OpaqueExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const OpaqueExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpaqueExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.OpaqueExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.OpaqueExtended)
    MergeFrom(*source);
  }
}

void OpaqueExtended::MergeFrom(const OpaqueExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.OpaqueExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
}

void OpaqueExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.OpaqueExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpaqueExtended::CopyFrom(const OpaqueExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.OpaqueExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpaqueExtended::IsInitialized() const {
  return true;
}

void OpaqueExtended::InternalSwap(OpaqueExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_transitive_, other->is_transitive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpaqueExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ESILabelExtended::InitAsDefaultInstance() {
}
class ESILabelExtended::_Internal {
 public:
};

ESILabelExtended::ESILabelExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ESILabelExtended)
}
ESILabelExtended::ESILabelExtended(const ESILabelExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_single_active_, &from.is_single_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&is_single_active_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:apipb.ESILabelExtended)
}

void ESILabelExtended::SharedCtor() {
  ::memset(&is_single_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&is_single_active_)) + sizeof(label_));
}

ESILabelExtended::~ESILabelExtended() {
  // @@protoc_insertion_point(destructor:apipb.ESILabelExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESILabelExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ESILabelExtended::ArenaDtor(void* object) {
  ESILabelExtended* _this = reinterpret_cast< ESILabelExtended* >(object);
  (void)_this;
}
void ESILabelExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESILabelExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESILabelExtended& ESILabelExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ESILabelExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void ESILabelExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ESILabelExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_single_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&is_single_active_)) + sizeof(label_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESILabelExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_single_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_single_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESILabelExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ESILabelExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_single_active = 1;
  if (this->is_single_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_single_active(), target);
  }

  // uint32 label = 2;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ESILabelExtended)
  return target;
}

size_t ESILabelExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ESILabelExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_single_active = 1;
  if (this->is_single_active() != 0) {
    total_size += 1 + 1;
  }

  // uint32 label = 2;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESILabelExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ESILabelExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const ESILabelExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESILabelExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ESILabelExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ESILabelExtended)
    MergeFrom(*source);
  }
}

void ESILabelExtended::MergeFrom(const ESILabelExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ESILabelExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_single_active() != 0) {
    _internal_set_is_single_active(from._internal_is_single_active());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void ESILabelExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ESILabelExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESILabelExtended::CopyFrom(const ESILabelExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ESILabelExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESILabelExtended::IsInitialized() const {
  return true;
}

void ESILabelExtended::InternalSwap(ESILabelExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESILabelExtended, label_)
      + sizeof(ESILabelExtended::label_)
      - PROTOBUF_FIELD_OFFSET(ESILabelExtended, is_single_active_)>(
          reinterpret_cast<char*>(&is_single_active_),
          reinterpret_cast<char*>(&other->is_single_active_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESILabelExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ESImportRouteTarget::InitAsDefaultInstance() {
}
class ESImportRouteTarget::_Internal {
 public:
};

ESImportRouteTarget::ESImportRouteTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ESImportRouteTarget)
}
ESImportRouteTarget::ESImportRouteTarget(const ESImportRouteTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  es_import_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_es_import().empty()) {
    es_import_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_es_import(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ESImportRouteTarget)
}

void ESImportRouteTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ESImportRouteTarget_attribute_2eproto.base);
  es_import_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ESImportRouteTarget::~ESImportRouteTarget() {
  // @@protoc_insertion_point(destructor:apipb.ESImportRouteTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESImportRouteTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  es_import_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ESImportRouteTarget::ArenaDtor(void* object) {
  ESImportRouteTarget* _this = reinterpret_cast< ESImportRouteTarget* >(object);
  (void)_this;
}
void ESImportRouteTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESImportRouteTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESImportRouteTarget& ESImportRouteTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ESImportRouteTarget_attribute_2eproto.base);
  return *internal_default_instance();
}


void ESImportRouteTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ESImportRouteTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  es_import_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESImportRouteTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string es_import = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_es_import();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ESImportRouteTarget.es_import"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESImportRouteTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ESImportRouteTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string es_import = 1;
  if (this->es_import().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_es_import().data(), static_cast<int>(this->_internal_es_import().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ESImportRouteTarget.es_import");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_es_import(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ESImportRouteTarget)
  return target;
}

size_t ESImportRouteTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ESImportRouteTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string es_import = 1;
  if (this->es_import().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_es_import());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESImportRouteTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ESImportRouteTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ESImportRouteTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESImportRouteTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ESImportRouteTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ESImportRouteTarget)
    MergeFrom(*source);
  }
}

void ESImportRouteTarget::MergeFrom(const ESImportRouteTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ESImportRouteTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.es_import().size() > 0) {
    _internal_set_es_import(from._internal_es_import());
  }
}

void ESImportRouteTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ESImportRouteTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESImportRouteTarget::CopyFrom(const ESImportRouteTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ESImportRouteTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESImportRouteTarget::IsInitialized() const {
  return true;
}

void ESImportRouteTarget::InternalSwap(ESImportRouteTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  es_import_.Swap(&other->es_import_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ESImportRouteTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MacMobilityExtended::InitAsDefaultInstance() {
}
class MacMobilityExtended::_Internal {
 public:
};

MacMobilityExtended::MacMobilityExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MacMobilityExtended)
}
MacMobilityExtended::MacMobilityExtended(const MacMobilityExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_sticky_, &from.is_sticky_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&is_sticky_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:apipb.MacMobilityExtended)
}

void MacMobilityExtended::SharedCtor() {
  ::memset(&is_sticky_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&is_sticky_)) + sizeof(sequence_num_));
}

MacMobilityExtended::~MacMobilityExtended() {
  // @@protoc_insertion_point(destructor:apipb.MacMobilityExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MacMobilityExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MacMobilityExtended::ArenaDtor(void* object) {
  MacMobilityExtended* _this = reinterpret_cast< MacMobilityExtended* >(object);
  (void)_this;
}
void MacMobilityExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MacMobilityExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MacMobilityExtended& MacMobilityExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MacMobilityExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void MacMobilityExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MacMobilityExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_sticky_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&is_sticky_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MacMobilityExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_sticky = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MacMobilityExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MacMobilityExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sticky = 1;
  if (this->is_sticky() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sticky(), target);
  }

  // uint32 sequence_num = 2;
  if (this->sequence_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MacMobilityExtended)
  return target;
}

size_t MacMobilityExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MacMobilityExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sticky = 1;
  if (this->is_sticky() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sequence_num = 2;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MacMobilityExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MacMobilityExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const MacMobilityExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MacMobilityExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MacMobilityExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MacMobilityExtended)
    MergeFrom(*source);
  }
}

void MacMobilityExtended::MergeFrom(const MacMobilityExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MacMobilityExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_sticky() != 0) {
    _internal_set_is_sticky(from._internal_is_sticky());
  }
  if (from.sequence_num() != 0) {
    _internal_set_sequence_num(from._internal_sequence_num());
  }
}

void MacMobilityExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MacMobilityExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacMobilityExtended::CopyFrom(const MacMobilityExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MacMobilityExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacMobilityExtended::IsInitialized() const {
  return true;
}

void MacMobilityExtended::InternalSwap(MacMobilityExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MacMobilityExtended, sequence_num_)
      + sizeof(MacMobilityExtended::sequence_num_)
      - PROTOBUF_FIELD_OFFSET(MacMobilityExtended, is_sticky_)>(
          reinterpret_cast<char*>(&is_sticky_),
          reinterpret_cast<char*>(&other->is_sticky_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MacMobilityExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouterMacExtended::InitAsDefaultInstance() {
}
class RouterMacExtended::_Internal {
 public:
};

RouterMacExtended::RouterMacExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouterMacExtended)
}
RouterMacExtended::RouterMacExtended(const RouterMacExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.RouterMacExtended)
}

void RouterMacExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouterMacExtended_attribute_2eproto.base);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RouterMacExtended::~RouterMacExtended() {
  // @@protoc_insertion_point(destructor:apipb.RouterMacExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouterMacExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouterMacExtended::ArenaDtor(void* object) {
  RouterMacExtended* _this = reinterpret_cast< RouterMacExtended* >(object);
  (void)_this;
}
void RouterMacExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouterMacExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouterMacExtended& RouterMacExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouterMacExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouterMacExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouterMacExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterMacExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mac = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.RouterMacExtended.mac"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouterMacExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouterMacExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac = 1;
  if (this->mac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.RouterMacExtended.mac");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouterMacExtended)
  return target;
}

size_t RouterMacExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouterMacExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac = 1;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouterMacExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouterMacExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RouterMacExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouterMacExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouterMacExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouterMacExtended)
    MergeFrom(*source);
  }
}

void RouterMacExtended::MergeFrom(const RouterMacExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouterMacExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac().size() > 0) {
    _internal_set_mac(from._internal_mac());
  }
}

void RouterMacExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouterMacExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterMacExtended::CopyFrom(const RouterMacExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouterMacExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterMacExtended::IsInitialized() const {
  return true;
}

void RouterMacExtended::InternalSwap(RouterMacExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterMacExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRateExtended::InitAsDefaultInstance() {
}
class TrafficRateExtended::_Internal {
 public:
};

TrafficRateExtended::TrafficRateExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TrafficRateExtended)
}
TrafficRateExtended::TrafficRateExtended(const TrafficRateExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:apipb.TrafficRateExtended)
}

void TrafficRateExtended::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(rate_));
}

TrafficRateExtended::~TrafficRateExtended() {
  // @@protoc_insertion_point(destructor:apipb.TrafficRateExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficRateExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrafficRateExtended::ArenaDtor(void* object) {
  TrafficRateExtended* _this = reinterpret_cast< TrafficRateExtended* >(object);
  (void)_this;
}
void TrafficRateExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficRateExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRateExtended& TrafficRateExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRateExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TrafficRateExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TrafficRateExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficRateExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRateExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TrafficRateExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // float rate = 2;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TrafficRateExtended)
  return target;
}

size_t TrafficRateExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TrafficRateExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // float rate = 2;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRateExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TrafficRateExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRateExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRateExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TrafficRateExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TrafficRateExtended)
    MergeFrom(*source);
  }
}

void TrafficRateExtended::MergeFrom(const TrafficRateExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TrafficRateExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
}

void TrafficRateExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TrafficRateExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRateExtended::CopyFrom(const TrafficRateExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TrafficRateExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRateExtended::IsInitialized() const {
  return true;
}

void TrafficRateExtended::InternalSwap(TrafficRateExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficRateExtended, rate_)
      + sizeof(TrafficRateExtended::rate_)
      - PROTOBUF_FIELD_OFFSET(TrafficRateExtended, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRateExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficActionExtended::InitAsDefaultInstance() {
}
class TrafficActionExtended::_Internal {
 public:
};

TrafficActionExtended::TrafficActionExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TrafficActionExtended)
}
TrafficActionExtended::TrafficActionExtended(const TrafficActionExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&terminal_, &from.terminal_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_) -
    reinterpret_cast<char*>(&terminal_)) + sizeof(sample_));
  // @@protoc_insertion_point(copy_constructor:apipb.TrafficActionExtended)
}

void TrafficActionExtended::SharedCtor() {
  ::memset(&terminal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_) -
      reinterpret_cast<char*>(&terminal_)) + sizeof(sample_));
}

TrafficActionExtended::~TrafficActionExtended() {
  // @@protoc_insertion_point(destructor:apipb.TrafficActionExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficActionExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrafficActionExtended::ArenaDtor(void* object) {
  TrafficActionExtended* _this = reinterpret_cast< TrafficActionExtended* >(object);
  (void)_this;
}
void TrafficActionExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficActionExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficActionExtended& TrafficActionExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficActionExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TrafficActionExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TrafficActionExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&terminal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_) -
      reinterpret_cast<char*>(&terminal_)) + sizeof(sample_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficActionExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool terminal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sample = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficActionExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TrafficActionExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool terminal = 1;
  if (this->terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_terminal(), target);
  }

  // bool sample = 2;
  if (this->sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TrafficActionExtended)
  return target;
}

size_t TrafficActionExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TrafficActionExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool terminal = 1;
  if (this->terminal() != 0) {
    total_size += 1 + 1;
  }

  // bool sample = 2;
  if (this->sample() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficActionExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TrafficActionExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficActionExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficActionExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TrafficActionExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TrafficActionExtended)
    MergeFrom(*source);
  }
}

void TrafficActionExtended::MergeFrom(const TrafficActionExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TrafficActionExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
  if (from.sample() != 0) {
    _internal_set_sample(from._internal_sample());
  }
}

void TrafficActionExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TrafficActionExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficActionExtended::CopyFrom(const TrafficActionExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TrafficActionExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficActionExtended::IsInitialized() const {
  return true;
}

void TrafficActionExtended::InternalSwap(TrafficActionExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficActionExtended, sample_)
      + sizeof(TrafficActionExtended::sample_)
      - PROTOBUF_FIELD_OFFSET(TrafficActionExtended, terminal_)>(
          reinterpret_cast<char*>(&terminal_),
          reinterpret_cast<char*>(&other->terminal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficActionExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectTwoOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class RedirectTwoOctetAsSpecificExtended::_Internal {
 public:
};

RedirectTwoOctetAsSpecificExtended::RedirectTwoOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RedirectTwoOctetAsSpecificExtended)
}
RedirectTwoOctetAsSpecificExtended::RedirectTwoOctetAsSpecificExtended(const RedirectTwoOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:apipb.RedirectTwoOctetAsSpecificExtended)
}

void RedirectTwoOctetAsSpecificExtended::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(local_admin_));
}

RedirectTwoOctetAsSpecificExtended::~RedirectTwoOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.RedirectTwoOctetAsSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedirectTwoOctetAsSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectTwoOctetAsSpecificExtended::ArenaDtor(void* object) {
  RedirectTwoOctetAsSpecificExtended* _this = reinterpret_cast< RedirectTwoOctetAsSpecificExtended* >(object);
  (void)_this;
}
void RedirectTwoOctetAsSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectTwoOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectTwoOctetAsSpecificExtended& RedirectTwoOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectTwoOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RedirectTwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(local_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedirectTwoOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectTwoOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RedirectTwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RedirectTwoOctetAsSpecificExtended)
  return target;
}

size_t RedirectTwoOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RedirectTwoOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectTwoOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RedirectTwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectTwoOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectTwoOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RedirectTwoOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RedirectTwoOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectTwoOctetAsSpecificExtended::MergeFrom(const RedirectTwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RedirectTwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectTwoOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RedirectTwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectTwoOctetAsSpecificExtended::CopyFrom(const RedirectTwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RedirectTwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectTwoOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectTwoOctetAsSpecificExtended::InternalSwap(RedirectTwoOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedirectTwoOctetAsSpecificExtended, local_admin_)
      + sizeof(RedirectTwoOctetAsSpecificExtended::local_admin_)
      - PROTOBUF_FIELD_OFFSET(RedirectTwoOctetAsSpecificExtended, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectTwoOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectIPv4AddressSpecificExtended::InitAsDefaultInstance() {
}
class RedirectIPv4AddressSpecificExtended::_Internal {
 public:
};

RedirectIPv4AddressSpecificExtended::RedirectIPv4AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RedirectIPv4AddressSpecificExtended)
}
RedirectIPv4AddressSpecificExtended::RedirectIPv4AddressSpecificExtended(const RedirectIPv4AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  local_admin_ = from.local_admin_;
  // @@protoc_insertion_point(copy_constructor:apipb.RedirectIPv4AddressSpecificExtended)
}

void RedirectIPv4AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_admin_ = 0u;
}

RedirectIPv4AddressSpecificExtended::~RedirectIPv4AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.RedirectIPv4AddressSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedirectIPv4AddressSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedirectIPv4AddressSpecificExtended::ArenaDtor(void* object) {
  RedirectIPv4AddressSpecificExtended* _this = reinterpret_cast< RedirectIPv4AddressSpecificExtended* >(object);
  (void)_this;
}
void RedirectIPv4AddressSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectIPv4AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectIPv4AddressSpecificExtended& RedirectIPv4AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectIPv4AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RedirectIPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_admin_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedirectIPv4AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.RedirectIPv4AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectIPv4AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RedirectIPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.RedirectIPv4AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RedirectIPv4AddressSpecificExtended)
  return target;
}

size_t RedirectIPv4AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RedirectIPv4AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectIPv4AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RedirectIPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectIPv4AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectIPv4AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RedirectIPv4AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RedirectIPv4AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectIPv4AddressSpecificExtended::MergeFrom(const RedirectIPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RedirectIPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectIPv4AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RedirectIPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectIPv4AddressSpecificExtended::CopyFrom(const RedirectIPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RedirectIPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectIPv4AddressSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectIPv4AddressSpecificExtended::InternalSwap(RedirectIPv4AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectIPv4AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectFourOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class RedirectFourOctetAsSpecificExtended::_Internal {
 public:
};

RedirectFourOctetAsSpecificExtended::RedirectFourOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RedirectFourOctetAsSpecificExtended)
}
RedirectFourOctetAsSpecificExtended::RedirectFourOctetAsSpecificExtended(const RedirectFourOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:apipb.RedirectFourOctetAsSpecificExtended)
}

void RedirectFourOctetAsSpecificExtended::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(local_admin_));
}

RedirectFourOctetAsSpecificExtended::~RedirectFourOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.RedirectFourOctetAsSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedirectFourOctetAsSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectFourOctetAsSpecificExtended::ArenaDtor(void* object) {
  RedirectFourOctetAsSpecificExtended* _this = reinterpret_cast< RedirectFourOctetAsSpecificExtended* >(object);
  (void)_this;
}
void RedirectFourOctetAsSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectFourOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectFourOctetAsSpecificExtended& RedirectFourOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectFourOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RedirectFourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(local_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedirectFourOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectFourOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RedirectFourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RedirectFourOctetAsSpecificExtended)
  return target;
}

size_t RedirectFourOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RedirectFourOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectFourOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RedirectFourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectFourOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectFourOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RedirectFourOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RedirectFourOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectFourOctetAsSpecificExtended::MergeFrom(const RedirectFourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RedirectFourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectFourOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RedirectFourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectFourOctetAsSpecificExtended::CopyFrom(const RedirectFourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RedirectFourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectFourOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectFourOctetAsSpecificExtended::InternalSwap(RedirectFourOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedirectFourOctetAsSpecificExtended, local_admin_)
      + sizeof(RedirectFourOctetAsSpecificExtended::local_admin_)
      - PROTOBUF_FIELD_OFFSET(RedirectFourOctetAsSpecificExtended, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectFourOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRemarkExtended::InitAsDefaultInstance() {
}
class TrafficRemarkExtended::_Internal {
 public:
};

TrafficRemarkExtended::TrafficRemarkExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TrafficRemarkExtended)
}
TrafficRemarkExtended::TrafficRemarkExtended(const TrafficRemarkExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dscp_ = from.dscp_;
  // @@protoc_insertion_point(copy_constructor:apipb.TrafficRemarkExtended)
}

void TrafficRemarkExtended::SharedCtor() {
  dscp_ = 0u;
}

TrafficRemarkExtended::~TrafficRemarkExtended() {
  // @@protoc_insertion_point(destructor:apipb.TrafficRemarkExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficRemarkExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrafficRemarkExtended::ArenaDtor(void* object) {
  TrafficRemarkExtended* _this = reinterpret_cast< TrafficRemarkExtended* >(object);
  (void)_this;
}
void TrafficRemarkExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficRemarkExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRemarkExtended& TrafficRemarkExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRemarkExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TrafficRemarkExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TrafficRemarkExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dscp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficRemarkExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 dscp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dscp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRemarkExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TrafficRemarkExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dscp = 1;
  if (this->dscp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dscp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TrafficRemarkExtended)
  return target;
}

size_t TrafficRemarkExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TrafficRemarkExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dscp = 1;
  if (this->dscp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dscp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRemarkExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TrafficRemarkExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRemarkExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRemarkExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TrafficRemarkExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TrafficRemarkExtended)
    MergeFrom(*source);
  }
}

void TrafficRemarkExtended::MergeFrom(const TrafficRemarkExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TrafficRemarkExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dscp() != 0) {
    _internal_set_dscp(from._internal_dscp());
  }
}

void TrafficRemarkExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TrafficRemarkExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRemarkExtended::CopyFrom(const TrafficRemarkExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TrafficRemarkExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRemarkExtended::IsInitialized() const {
  return true;
}

void TrafficRemarkExtended::InternalSwap(TrafficRemarkExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(dscp_, other->dscp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRemarkExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MUPExtended::InitAsDefaultInstance() {
}
class MUPExtended::_Internal {
 public:
};

MUPExtended::MUPExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MUPExtended)
}
MUPExtended::MUPExtended(const MUPExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sub_type_, &from.sub_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_id4_) -
    reinterpret_cast<char*>(&sub_type_)) + sizeof(segment_id4_));
  // @@protoc_insertion_point(copy_constructor:apipb.MUPExtended)
}

void MUPExtended::SharedCtor() {
  ::memset(&sub_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_id4_) -
      reinterpret_cast<char*>(&sub_type_)) + sizeof(segment_id4_));
}

MUPExtended::~MUPExtended() {
  // @@protoc_insertion_point(destructor:apipb.MUPExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MUPExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MUPExtended::ArenaDtor(void* object) {
  MUPExtended* _this = reinterpret_cast< MUPExtended* >(object);
  (void)_this;
}
void MUPExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MUPExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MUPExtended& MUPExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MUPExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void MUPExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MUPExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sub_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_id4_) -
      reinterpret_cast<char*>(&sub_type_)) + sizeof(segment_id4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MUPExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sub_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segment_id2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          segment_id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segment_id4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          segment_id4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MUPExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MUPExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_type = 1;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_type(), target);
  }

  // uint32 segment_id2 = 2;
  if (this->segment_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_segment_id2(), target);
  }

  // uint32 segment_id4 = 3;
  if (this->segment_id4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_segment_id4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MUPExtended)
  return target;
}

size_t MUPExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MUPExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sub_type = 1;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 segment_id2 = 2;
  if (this->segment_id2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_segment_id2());
  }

  // uint32 segment_id4 = 3;
  if (this->segment_id4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_segment_id4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MUPExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MUPExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const MUPExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MUPExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MUPExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MUPExtended)
    MergeFrom(*source);
  }
}

void MUPExtended::MergeFrom(const MUPExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MUPExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.segment_id2() != 0) {
    _internal_set_segment_id2(from._internal_segment_id2());
  }
  if (from.segment_id4() != 0) {
    _internal_set_segment_id4(from._internal_segment_id4());
  }
}

void MUPExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MUPExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MUPExtended::CopyFrom(const MUPExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MUPExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MUPExtended::IsInitialized() const {
  return true;
}

void MUPExtended::InternalSwap(MUPExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MUPExtended, segment_id4_)
      + sizeof(MUPExtended::segment_id4_)
      - PROTOBUF_FIELD_OFFSET(MUPExtended, sub_type_)>(
          reinterpret_cast<char*>(&sub_type_),
          reinterpret_cast<char*>(&other->sub_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MUPExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownExtended::InitAsDefaultInstance() {
}
class UnknownExtended::_Internal {
 public:
};

UnknownExtended::UnknownExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UnknownExtended)
}
UnknownExtended::UnknownExtended(const UnknownExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.UnknownExtended)
}

void UnknownExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnknownExtended_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

UnknownExtended::~UnknownExtended() {
  // @@protoc_insertion_point(destructor:apipb.UnknownExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnknownExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnknownExtended::ArenaDtor(void* object) {
  UnknownExtended* _this = reinterpret_cast< UnknownExtended* >(object);
  (void)_this;
}
void UnknownExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownExtended& UnknownExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void UnknownExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UnknownExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UnknownExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UnknownExtended)
  return target;
}

size_t UnknownExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UnknownExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UnknownExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UnknownExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UnknownExtended)
    MergeFrom(*source);
  }
}

void UnknownExtended::MergeFrom(const UnknownExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UnknownExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UnknownExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UnknownExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownExtended::CopyFrom(const UnknownExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UnknownExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownExtended::IsInitialized() const {
  return true;
}

void UnknownExtended::InternalSwap(UnknownExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtendedCommunitiesAttribute::InitAsDefaultInstance() {
}
class ExtendedCommunitiesAttribute::_Internal {
 public:
};

void ExtendedCommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
ExtendedCommunitiesAttribute::ExtendedCommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ExtendedCommunitiesAttribute)
}
ExtendedCommunitiesAttribute::ExtendedCommunitiesAttribute(const ExtendedCommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.ExtendedCommunitiesAttribute)
}

void ExtendedCommunitiesAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtendedCommunitiesAttribute_attribute_2eproto.base);
}

ExtendedCommunitiesAttribute::~ExtendedCommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:apipb.ExtendedCommunitiesAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtendedCommunitiesAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExtendedCommunitiesAttribute::ArenaDtor(void* object) {
  ExtendedCommunitiesAttribute* _this = reinterpret_cast< ExtendedCommunitiesAttribute* >(object);
  (void)_this;
}
void ExtendedCommunitiesAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtendedCommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtendedCommunitiesAttribute& ExtendedCommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtendedCommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void ExtendedCommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedCommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtendedCommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ExtendedCommunitiesAttribute)
  return target;
}

size_t ExtendedCommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ExtendedCommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtendedCommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendedCommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtendedCommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ExtendedCommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ExtendedCommunitiesAttribute)
    MergeFrom(*source);
  }
}

void ExtendedCommunitiesAttribute::MergeFrom(const ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void ExtendedCommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedCommunitiesAttribute::CopyFrom(const ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedCommunitiesAttribute::IsInitialized() const {
  return true;
}

void ExtendedCommunitiesAttribute::InternalSwap(ExtendedCommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedCommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void As4PathAttribute::InitAsDefaultInstance() {
}
class As4PathAttribute::_Internal {
 public:
};

As4PathAttribute::As4PathAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.As4PathAttribute)
}
As4PathAttribute::As4PathAttribute(const As4PathAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.As4PathAttribute)
}

void As4PathAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_As4PathAttribute_attribute_2eproto.base);
}

As4PathAttribute::~As4PathAttribute() {
  // @@protoc_insertion_point(destructor:apipb.As4PathAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void As4PathAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void As4PathAttribute::ArenaDtor(void* object) {
  As4PathAttribute* _this = reinterpret_cast< As4PathAttribute* >(object);
  (void)_this;
}
void As4PathAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void As4PathAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const As4PathAttribute& As4PathAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_As4PathAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void As4PathAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.As4PathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* As4PathAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.AsSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* As4PathAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.As4PathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.AsSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.As4PathAttribute)
  return target;
}

size_t As4PathAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.As4PathAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.AsSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void As4PathAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.As4PathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const As4PathAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<As4PathAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.As4PathAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.As4PathAttribute)
    MergeFrom(*source);
  }
}

void As4PathAttribute::MergeFrom(const As4PathAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.As4PathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void As4PathAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.As4PathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void As4PathAttribute::CopyFrom(const As4PathAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.As4PathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool As4PathAttribute::IsInitialized() const {
  return true;
}

void As4PathAttribute::InternalSwap(As4PathAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata As4PathAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void As4AggregatorAttribute::InitAsDefaultInstance() {
}
class As4AggregatorAttribute::_Internal {
 public:
};

As4AggregatorAttribute::As4AggregatorAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.As4AggregatorAttribute)
}
As4AggregatorAttribute::As4AggregatorAttribute(const As4AggregatorAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  asn_ = from.asn_;
  // @@protoc_insertion_point(copy_constructor:apipb.As4AggregatorAttribute)
}

void As4AggregatorAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_As4AggregatorAttribute_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_ = 0u;
}

As4AggregatorAttribute::~As4AggregatorAttribute() {
  // @@protoc_insertion_point(destructor:apipb.As4AggregatorAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void As4AggregatorAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void As4AggregatorAttribute::ArenaDtor(void* object) {
  As4AggregatorAttribute* _this = reinterpret_cast< As4AggregatorAttribute* >(object);
  (void)_this;
}
void As4AggregatorAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void As4AggregatorAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const As4AggregatorAttribute& As4AggregatorAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_As4AggregatorAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void As4AggregatorAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.As4AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* As4AggregatorAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.As4AggregatorAttribute.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* As4AggregatorAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.As4AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 2;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asn(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.As4AggregatorAttribute.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.As4AggregatorAttribute)
  return target;
}

size_t As4AggregatorAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.As4AggregatorAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 asn = 2;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void As4AggregatorAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.As4AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const As4AggregatorAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<As4AggregatorAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.As4AggregatorAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.As4AggregatorAttribute)
    MergeFrom(*source);
  }
}

void As4AggregatorAttribute::MergeFrom(const As4AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.As4AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
}

void As4AggregatorAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.As4AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void As4AggregatorAttribute::CopyFrom(const As4AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.As4AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool As4AggregatorAttribute::IsInitialized() const {
  return true;
}

void As4AggregatorAttribute::InternalSwap(As4AggregatorAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(asn_, other->asn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata As4AggregatorAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PmsiTunnelAttribute::InitAsDefaultInstance() {
}
class PmsiTunnelAttribute::_Internal {
 public:
};

PmsiTunnelAttribute::PmsiTunnelAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PmsiTunnelAttribute)
}
PmsiTunnelAttribute::PmsiTunnelAttribute(const PmsiTunnelAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:apipb.PmsiTunnelAttribute)
}

void PmsiTunnelAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PmsiTunnelAttribute_attribute_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(label_));
}

PmsiTunnelAttribute::~PmsiTunnelAttribute() {
  // @@protoc_insertion_point(destructor:apipb.PmsiTunnelAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PmsiTunnelAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PmsiTunnelAttribute::ArenaDtor(void* object) {
  PmsiTunnelAttribute* _this = reinterpret_cast< PmsiTunnelAttribute* >(object);
  (void)_this;
}
void PmsiTunnelAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PmsiTunnelAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PmsiTunnelAttribute& PmsiTunnelAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PmsiTunnelAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void PmsiTunnelAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PmsiTunnelAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(label_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PmsiTunnelAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmsiTunnelAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PmsiTunnelAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 label = 3;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_label(), target);
  }

  // bytes id = 4;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PmsiTunnelAttribute)
  return target;
}

size_t PmsiTunnelAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PmsiTunnelAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 label = 3;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmsiTunnelAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PmsiTunnelAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const PmsiTunnelAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmsiTunnelAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PmsiTunnelAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PmsiTunnelAttribute)
    MergeFrom(*source);
  }
}

void PmsiTunnelAttribute::MergeFrom(const PmsiTunnelAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PmsiTunnelAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void PmsiTunnelAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PmsiTunnelAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmsiTunnelAttribute::CopyFrom(const PmsiTunnelAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PmsiTunnelAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmsiTunnelAttribute::IsInitialized() const {
  return true;
}

void PmsiTunnelAttribute::InternalSwap(PmsiTunnelAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PmsiTunnelAttribute, label_)
      + sizeof(PmsiTunnelAttribute::label_)
      - PROTOBUF_FIELD_OFFSET(PmsiTunnelAttribute, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PmsiTunnelAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVEncapsulation::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVEncapsulation::_Internal {
 public:
};

TunnelEncapSubTLVEncapsulation::TunnelEncapSubTLVEncapsulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVEncapsulation)
}
TunnelEncapSubTLVEncapsulation::TunnelEncapSubTLVEncapsulation(const TunnelEncapSubTLVEncapsulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cookie().empty()) {
    cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cookie(),
      GetArena());
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVEncapsulation)
}

void TunnelEncapSubTLVEncapsulation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto.base);
  cookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

TunnelEncapSubTLVEncapsulation::~TunnelEncapSubTLVEncapsulation() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVEncapsulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVEncapsulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cookie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TunnelEncapSubTLVEncapsulation::ArenaDtor(void* object) {
  TunnelEncapSubTLVEncapsulation* _this = reinterpret_cast< TunnelEncapSubTLVEncapsulation* >(object);
  (void)_this;
}
void TunnelEncapSubTLVEncapsulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVEncapsulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVEncapsulation& TunnelEncapSubTLVEncapsulation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVEncapsulation::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVEncapsulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVEncapsulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cookie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVEncapsulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVEncapsulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // bytes cookie = 2;
  if (this->cookie().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVEncapsulation)
  return target;
}

size_t TunnelEncapSubTLVEncapsulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVEncapsulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cookie = 2;
  if (this->cookie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cookie());
  }

  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVEncapsulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVEncapsulation)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVEncapsulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVEncapsulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVEncapsulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVEncapsulation)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVEncapsulation::MergeFrom(const TunnelEncapSubTLVEncapsulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVEncapsulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cookie().size() > 0) {
    _internal_set_cookie(from._internal_cookie());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void TunnelEncapSubTLVEncapsulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVEncapsulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVEncapsulation::CopyFrom(const TunnelEncapSubTLVEncapsulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVEncapsulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVEncapsulation::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVEncapsulation::InternalSwap(TunnelEncapSubTLVEncapsulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cookie_.Swap(&other->cookie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVEncapsulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVProtocol::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVProtocol::_Internal {
 public:
};

TunnelEncapSubTLVProtocol::TunnelEncapSubTLVProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVProtocol)
}
TunnelEncapSubTLVProtocol::TunnelEncapSubTLVProtocol(const TunnelEncapSubTLVProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVProtocol)
}

void TunnelEncapSubTLVProtocol::SharedCtor() {
  protocol_ = 0u;
}

TunnelEncapSubTLVProtocol::~TunnelEncapSubTLVProtocol() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVProtocol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapSubTLVProtocol::ArenaDtor(void* object) {
  TunnelEncapSubTLVProtocol* _this = reinterpret_cast< TunnelEncapSubTLVProtocol* >(object);
  (void)_this;
}
void TunnelEncapSubTLVProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVProtocol& TunnelEncapSubTLVProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVProtocol_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocol = 1;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVProtocol)
  return target;
}

size_t TunnelEncapSubTLVProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVProtocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 protocol = 1;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVProtocol)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVProtocol::MergeFrom(const TunnelEncapSubTLVProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
}

void TunnelEncapSubTLVProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVProtocol::CopyFrom(const TunnelEncapSubTLVProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVProtocol::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVProtocol::InternalSwap(TunnelEncapSubTLVProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVColor::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVColor::_Internal {
 public:
};

TunnelEncapSubTLVColor::TunnelEncapSubTLVColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVColor)
}
TunnelEncapSubTLVColor::TunnelEncapSubTLVColor(const TunnelEncapSubTLVColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVColor)
}

void TunnelEncapSubTLVColor::SharedCtor() {
  color_ = 0u;
}

TunnelEncapSubTLVColor::~TunnelEncapSubTLVColor() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapSubTLVColor::ArenaDtor(void* object) {
  TunnelEncapSubTLVColor* _this = reinterpret_cast< TunnelEncapSubTLVColor* >(object);
  (void)_this;
}
void TunnelEncapSubTLVColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVColor& TunnelEncapSubTLVColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVColor_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVColor::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVColor)
  return target;
}

size_t TunnelEncapSubTLVColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVColor)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVColor)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVColor::MergeFrom(const TunnelEncapSubTLVColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void TunnelEncapSubTLVColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVColor::CopyFrom(const TunnelEncapSubTLVColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVColor::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVColor::InternalSwap(TunnelEncapSubTLVColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVSRPreference::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVSRPreference::_Internal {
 public:
};

TunnelEncapSubTLVSRPreference::TunnelEncapSubTLVSRPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVSRPreference)
}
TunnelEncapSubTLVSRPreference::TunnelEncapSubTLVSRPreference(const TunnelEncapSubTLVSRPreference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&preference_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(preference_));
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVSRPreference)
}

void TunnelEncapSubTLVSRPreference::SharedCtor() {
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preference_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(preference_));
}

TunnelEncapSubTLVSRPreference::~TunnelEncapSubTLVSRPreference() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVSRPreference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVSRPreference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapSubTLVSRPreference::ArenaDtor(void* object) {
  TunnelEncapSubTLVSRPreference* _this = reinterpret_cast< TunnelEncapSubTLVSRPreference* >(object);
  (void)_this;
}
void TunnelEncapSubTLVSRPreference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVSRPreference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVSRPreference& TunnelEncapSubTLVSRPreference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVSRPreference_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVSRPreference::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVSRPreference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preference_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(preference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVSRPreference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 preference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          preference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVSRPreference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVSRPreference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 preference = 2;
  if (this->preference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_preference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVSRPreference)
  return target;
}

size_t TunnelEncapSubTLVSRPreference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVSRPreference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 preference = 2;
  if (this->preference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVSRPreference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVSRPreference)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVSRPreference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVSRPreference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVSRPreference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVSRPreference)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVSRPreference::MergeFrom(const TunnelEncapSubTLVSRPreference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVSRPreference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.preference() != 0) {
    _internal_set_preference(from._internal_preference());
  }
}

void TunnelEncapSubTLVSRPreference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVSRPreference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVSRPreference::CopyFrom(const TunnelEncapSubTLVSRPreference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVSRPreference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVSRPreference::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVSRPreference::InternalSwap(TunnelEncapSubTLVSRPreference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelEncapSubTLVSRPreference, preference_)
      + sizeof(TunnelEncapSubTLVSRPreference::preference_)
      - PROTOBUF_FIELD_OFFSET(TunnelEncapSubTLVSRPreference, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVSRPreference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVSRCandidatePathName::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVSRCandidatePathName::_Internal {
 public:
};

TunnelEncapSubTLVSRCandidatePathName::TunnelEncapSubTLVSRCandidatePathName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVSRCandidatePathName)
}
TunnelEncapSubTLVSRCandidatePathName::TunnelEncapSubTLVSRCandidatePathName(const TunnelEncapSubTLVSRCandidatePathName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_path_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidate_path_name().empty()) {
    candidate_path_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_candidate_path_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVSRCandidatePathName)
}

void TunnelEncapSubTLVSRCandidatePathName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVSRCandidatePathName_attribute_2eproto.base);
  candidate_path_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TunnelEncapSubTLVSRCandidatePathName::~TunnelEncapSubTLVSRCandidatePathName() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVSRCandidatePathName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVSRCandidatePathName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidate_path_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TunnelEncapSubTLVSRCandidatePathName::ArenaDtor(void* object) {
  TunnelEncapSubTLVSRCandidatePathName* _this = reinterpret_cast< TunnelEncapSubTLVSRCandidatePathName* >(object);
  (void)_this;
}
void TunnelEncapSubTLVSRCandidatePathName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVSRCandidatePathName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVSRCandidatePathName& TunnelEncapSubTLVSRCandidatePathName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVSRCandidatePathName_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVSRCandidatePathName::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_path_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVSRCandidatePathName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string candidate_path_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candidate_path_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVSRCandidatePathName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate_path_name = 1;
  if (this->candidate_path_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate_path_name().data(), static_cast<int>(this->_internal_candidate_path_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidate_path_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVSRCandidatePathName)
  return target;
}

size_t TunnelEncapSubTLVSRCandidatePathName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate_path_name = 1;
  if (this->candidate_path_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate_path_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVSRCandidatePathName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVSRCandidatePathName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVSRCandidatePathName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVSRCandidatePathName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVSRCandidatePathName)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVSRCandidatePathName::MergeFrom(const TunnelEncapSubTLVSRCandidatePathName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidate_path_name().size() > 0) {
    _internal_set_candidate_path_name(from._internal_candidate_path_name());
  }
}

void TunnelEncapSubTLVSRCandidatePathName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVSRCandidatePathName::CopyFrom(const TunnelEncapSubTLVSRCandidatePathName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVSRCandidatePathName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVSRCandidatePathName::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVSRCandidatePathName::InternalSwap(TunnelEncapSubTLVSRCandidatePathName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candidate_path_name_.Swap(&other->candidate_path_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVSRCandidatePathName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVSRPriority::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVSRPriority::_Internal {
 public:
};

TunnelEncapSubTLVSRPriority::TunnelEncapSubTLVSRPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVSRPriority)
}
TunnelEncapSubTLVSRPriority::TunnelEncapSubTLVSRPriority(const TunnelEncapSubTLVSRPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVSRPriority)
}

void TunnelEncapSubTLVSRPriority::SharedCtor() {
  priority_ = 0u;
}

TunnelEncapSubTLVSRPriority::~TunnelEncapSubTLVSRPriority() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVSRPriority)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVSRPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapSubTLVSRPriority::ArenaDtor(void* object) {
  TunnelEncapSubTLVSRPriority* _this = reinterpret_cast< TunnelEncapSubTLVSRPriority* >(object);
  (void)_this;
}
void TunnelEncapSubTLVSRPriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVSRPriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVSRPriority& TunnelEncapSubTLVSRPriority::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVSRPriority_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVSRPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVSRPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVSRPriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVSRPriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVSRPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 priority = 1;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVSRPriority)
  return target;
}

size_t TunnelEncapSubTLVSRPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVSRPriority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVSRPriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVSRPriority)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVSRPriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVSRPriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVSRPriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVSRPriority)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVSRPriority::MergeFrom(const TunnelEncapSubTLVSRPriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVSRPriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void TunnelEncapSubTLVSRPriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVSRPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVSRPriority::CopyFrom(const TunnelEncapSubTLVSRPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVSRPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVSRPriority::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVSRPriority::InternalSwap(TunnelEncapSubTLVSRPriority* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVSRPriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVSRBindingSID::InitAsDefaultInstance() {
  ::apipb::_TunnelEncapSubTLVSRBindingSID_default_instance_._instance.get_mutable()->bsid_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class TunnelEncapSubTLVSRBindingSID::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& bsid(const TunnelEncapSubTLVSRBindingSID* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
TunnelEncapSubTLVSRBindingSID::_Internal::bsid(const TunnelEncapSubTLVSRBindingSID* msg) {
  return *msg->bsid_;
}
void TunnelEncapSubTLVSRBindingSID::clear_bsid() {
  if (GetArena() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
}
TunnelEncapSubTLVSRBindingSID::TunnelEncapSubTLVSRBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVSRBindingSID)
}
TunnelEncapSubTLVSRBindingSID::TunnelEncapSubTLVSRBindingSID(const TunnelEncapSubTLVSRBindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bsid()) {
    bsid_ = new PROTOBUF_NAMESPACE_ID::Any(*from.bsid_);
  } else {
    bsid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVSRBindingSID)
}

void TunnelEncapSubTLVSRBindingSID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVSRBindingSID_attribute_2eproto.base);
  bsid_ = nullptr;
}

TunnelEncapSubTLVSRBindingSID::~TunnelEncapSubTLVSRBindingSID() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVSRBindingSID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVSRBindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bsid_;
}

void TunnelEncapSubTLVSRBindingSID::ArenaDtor(void* object) {
  TunnelEncapSubTLVSRBindingSID* _this = reinterpret_cast< TunnelEncapSubTLVSRBindingSID* >(object);
  (void)_this;
}
void TunnelEncapSubTLVSRBindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVSRBindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVSRBindingSID& TunnelEncapSubTLVSRBindingSID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVSRBindingSID_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVSRBindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVSRBindingSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVSRBindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any bsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bsid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVSRBindingSID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVSRBindingSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any bsid = 1;
  if (this->has_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bsid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVSRBindingSID)
  return target;
}

size_t TunnelEncapSubTLVSRBindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVSRBindingSID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any bsid = 1;
  if (this->has_bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bsid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVSRBindingSID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVSRBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVSRBindingSID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVSRBindingSID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVSRBindingSID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVSRBindingSID)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVSRBindingSID::MergeFrom(const TunnelEncapSubTLVSRBindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVSRBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bsid()) {
    _internal_mutable_bsid()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_bsid());
  }
}

void TunnelEncapSubTLVSRBindingSID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVSRBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVSRBindingSID::CopyFrom(const TunnelEncapSubTLVSRBindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVSRBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVSRBindingSID::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVSRBindingSID::InternalSwap(TunnelEncapSubTLVSRBindingSID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(bsid_, other->bsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVSRBindingSID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRBindingSID::InitAsDefaultInstance() {
}
class SRBindingSID::_Internal {
 public:
};

SRBindingSID::SRBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRBindingSID)
}
SRBindingSID::SRBindingSID(const SRBindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sid().empty()) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sid(),
      GetArena());
  }
  ::memcpy(&s_flag_, &from.s_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&i_flag_) -
    reinterpret_cast<char*>(&s_flag_)) + sizeof(i_flag_));
  // @@protoc_insertion_point(copy_constructor:apipb.SRBindingSID)
}

void SRBindingSID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRBindingSID_attribute_2eproto.base);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&s_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_flag_) -
      reinterpret_cast<char*>(&s_flag_)) + sizeof(i_flag_));
}

SRBindingSID::~SRBindingSID() {
  // @@protoc_insertion_point(destructor:apipb.SRBindingSID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRBindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SRBindingSID::ArenaDtor(void* object) {
  SRBindingSID* _this = reinterpret_cast< SRBindingSID* >(object);
  (void)_this;
}
void SRBindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRBindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRBindingSID& SRBindingSID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRBindingSID_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRBindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRBindingSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&s_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_flag_) -
      reinterpret_cast<char*>(&s_flag_)) + sizeof(i_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRBindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool s_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool i_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          i_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRBindingSID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRBindingSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool s_flag = 1;
  if (this->s_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_s_flag(), target);
  }

  // bool i_flag = 2;
  if (this->i_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_i_flag(), target);
  }

  // bytes sid = 3;
  if (this->sid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRBindingSID)
  return target;
}

size_t SRBindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRBindingSID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sid = 3;
  if (this->sid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // bool s_flag = 1;
  if (this->s_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool i_flag = 2;
  if (this->i_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRBindingSID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  const SRBindingSID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRBindingSID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRBindingSID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRBindingSID)
    MergeFrom(*source);
  }
}

void SRBindingSID::MergeFrom(const SRBindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid().size() > 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.s_flag() != 0) {
    _internal_set_s_flag(from._internal_s_flag());
  }
  if (from.i_flag() != 0) {
    _internal_set_i_flag(from._internal_i_flag());
  }
}

void SRBindingSID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRBindingSID::CopyFrom(const SRBindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRBindingSID::IsInitialized() const {
  return true;
}

void SRBindingSID::InternalSwap(SRBindingSID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sid_.Swap(&other->sid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRBindingSID, i_flag_)
      + sizeof(SRBindingSID::i_flag_)
      - PROTOBUF_FIELD_OFFSET(SRBindingSID, s_flag_)>(
          reinterpret_cast<char*>(&s_flag_),
          reinterpret_cast<char*>(&other->s_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRBindingSID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRv6EndPointBehavior::InitAsDefaultInstance() {
}
class SRv6EndPointBehavior::_Internal {
 public:
};

SRv6EndPointBehavior::SRv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6EndPointBehavior)
}
SRv6EndPointBehavior::SRv6EndPointBehavior(const SRv6EndPointBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&behavior_, &from.behavior_,
    static_cast<size_t>(reinterpret_cast<char*>(&arg_len_) -
    reinterpret_cast<char*>(&behavior_)) + sizeof(arg_len_));
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6EndPointBehavior)
}

void SRv6EndPointBehavior::SharedCtor() {
  ::memset(&behavior_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arg_len_) -
      reinterpret_cast<char*>(&behavior_)) + sizeof(arg_len_));
}

SRv6EndPointBehavior::~SRv6EndPointBehavior() {
  // @@protoc_insertion_point(destructor:apipb.SRv6EndPointBehavior)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6EndPointBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRv6EndPointBehavior::ArenaDtor(void* object) {
  SRv6EndPointBehavior* _this = reinterpret_cast< SRv6EndPointBehavior* >(object);
  (void)_this;
}
void SRv6EndPointBehavior::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6EndPointBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6EndPointBehavior& SRv6EndPointBehavior::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6EndPointBehavior_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6EndPointBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6EndPointBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&behavior_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arg_len_) -
      reinterpret_cast<char*>(&behavior_)) + sizeof(arg_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6EndPointBehavior::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.SRv6Behavior behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::apipb::SRv6Behavior>(val));
        } else goto handle_unusual;
        continue;
      // uint32 block_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 node_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          node_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 func_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          func_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 arg_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          arg_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6EndPointBehavior::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6EndPointBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.SRv6Behavior behavior = 1;
  if (this->behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_behavior(), target);
  }

  // uint32 block_len = 2;
  if (this->block_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_len(), target);
  }

  // uint32 node_len = 3;
  if (this->node_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_node_len(), target);
  }

  // uint32 func_len = 4;
  if (this->func_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_func_len(), target);
  }

  // uint32 arg_len = 5;
  if (this->arg_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_arg_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6EndPointBehavior)
  return target;
}

size_t SRv6EndPointBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6EndPointBehavior)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.SRv6Behavior behavior = 1;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // uint32 block_len = 2;
  if (this->block_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_len());
  }

  // uint32 node_len = 3;
  if (this->node_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_len());
  }

  // uint32 func_len = 4;
  if (this->func_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_func_len());
  }

  // uint32 arg_len = 5;
  if (this->arg_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_arg_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6EndPointBehavior::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6EndPointBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6EndPointBehavior* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6EndPointBehavior>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6EndPointBehavior)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6EndPointBehavior)
    MergeFrom(*source);
  }
}

void SRv6EndPointBehavior::MergeFrom(const SRv6EndPointBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6EndPointBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  if (from.block_len() != 0) {
    _internal_set_block_len(from._internal_block_len());
  }
  if (from.node_len() != 0) {
    _internal_set_node_len(from._internal_node_len());
  }
  if (from.func_len() != 0) {
    _internal_set_func_len(from._internal_func_len());
  }
  if (from.arg_len() != 0) {
    _internal_set_arg_len(from._internal_arg_len());
  }
}

void SRv6EndPointBehavior::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6EndPointBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6EndPointBehavior::CopyFrom(const SRv6EndPointBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6EndPointBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6EndPointBehavior::IsInitialized() const {
  return true;
}

void SRv6EndPointBehavior::InternalSwap(SRv6EndPointBehavior* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRv6EndPointBehavior, arg_len_)
      + sizeof(SRv6EndPointBehavior::arg_len_)
      - PROTOBUF_FIELD_OFFSET(SRv6EndPointBehavior, behavior_)>(
          reinterpret_cast<char*>(&behavior_),
          reinterpret_cast<char*>(&other->behavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6EndPointBehavior::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRv6BindingSID::InitAsDefaultInstance() {
  ::apipb::_SRv6BindingSID_default_instance_._instance.get_mutable()->endpoint_behavior_structure_ = const_cast< ::apipb::SRv6EndPointBehavior*>(
      ::apipb::SRv6EndPointBehavior::internal_default_instance());
}
class SRv6BindingSID::_Internal {
 public:
  static const ::apipb::SRv6EndPointBehavior& endpoint_behavior_structure(const SRv6BindingSID* msg);
};

const ::apipb::SRv6EndPointBehavior&
SRv6BindingSID::_Internal::endpoint_behavior_structure(const SRv6BindingSID* msg) {
  return *msg->endpoint_behavior_structure_;
}
SRv6BindingSID::SRv6BindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6BindingSID)
}
SRv6BindingSID::SRv6BindingSID(const SRv6BindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sid().empty()) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sid(),
      GetArena());
  }
  if (from._internal_has_endpoint_behavior_structure()) {
    endpoint_behavior_structure_ = new ::apipb::SRv6EndPointBehavior(*from.endpoint_behavior_structure_);
  } else {
    endpoint_behavior_structure_ = nullptr;
  }
  ::memcpy(&s_flag_, &from.s_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_flag_) -
    reinterpret_cast<char*>(&s_flag_)) + sizeof(b_flag_));
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6BindingSID)
}

void SRv6BindingSID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRv6BindingSID_attribute_2eproto.base);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&endpoint_behavior_structure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_flag_) -
      reinterpret_cast<char*>(&endpoint_behavior_structure_)) + sizeof(b_flag_));
}

SRv6BindingSID::~SRv6BindingSID() {
  // @@protoc_insertion_point(destructor:apipb.SRv6BindingSID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6BindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete endpoint_behavior_structure_;
}

void SRv6BindingSID::ArenaDtor(void* object) {
  SRv6BindingSID* _this = reinterpret_cast< SRv6BindingSID* >(object);
  (void)_this;
}
void SRv6BindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6BindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6BindingSID& SRv6BindingSID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6BindingSID_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6BindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6BindingSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && endpoint_behavior_structure_ != nullptr) {
    delete endpoint_behavior_structure_;
  }
  endpoint_behavior_structure_ = nullptr;
  ::memset(&s_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_flag_) -
      reinterpret_cast<char*>(&s_flag_)) + sizeof(b_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6BindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool s_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool i_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          i_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint_behavior_structure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6BindingSID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6BindingSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool s_flag = 1;
  if (this->s_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_s_flag(), target);
  }

  // bool i_flag = 2;
  if (this->i_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_i_flag(), target);
  }

  // bool b_flag = 3;
  if (this->b_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_b_flag(), target);
  }

  // bytes sid = 4;
  if (this->sid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sid(), target);
  }

  // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 5;
  if (this->has_endpoint_behavior_structure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::endpoint_behavior_structure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6BindingSID)
  return target;
}

size_t SRv6BindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6BindingSID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sid = 4;
  if (this->sid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 5;
  if (this->has_endpoint_behavior_structure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoint_behavior_structure_);
  }

  // bool s_flag = 1;
  if (this->s_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool i_flag = 2;
  if (this->i_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool b_flag = 3;
  if (this->b_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6BindingSID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6BindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6BindingSID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6BindingSID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6BindingSID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6BindingSID)
    MergeFrom(*source);
  }
}

void SRv6BindingSID::MergeFrom(const SRv6BindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6BindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid().size() > 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.has_endpoint_behavior_structure()) {
    _internal_mutable_endpoint_behavior_structure()->::apipb::SRv6EndPointBehavior::MergeFrom(from._internal_endpoint_behavior_structure());
  }
  if (from.s_flag() != 0) {
    _internal_set_s_flag(from._internal_s_flag());
  }
  if (from.i_flag() != 0) {
    _internal_set_i_flag(from._internal_i_flag());
  }
  if (from.b_flag() != 0) {
    _internal_set_b_flag(from._internal_b_flag());
  }
}

void SRv6BindingSID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6BindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6BindingSID::CopyFrom(const SRv6BindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6BindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6BindingSID::IsInitialized() const {
  return true;
}

void SRv6BindingSID::InternalSwap(SRv6BindingSID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sid_.Swap(&other->sid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRv6BindingSID, b_flag_)
      + sizeof(SRv6BindingSID::b_flag_)
      - PROTOBUF_FIELD_OFFSET(SRv6BindingSID, endpoint_behavior_structure_)>(
          reinterpret_cast<char*>(&endpoint_behavior_structure_),
          reinterpret_cast<char*>(&other->endpoint_behavior_structure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6BindingSID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVSRENLP::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVSRENLP::_Internal {
 public:
};

TunnelEncapSubTLVSRENLP::TunnelEncapSubTLVSRENLP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVSRENLP)
}
TunnelEncapSubTLVSRENLP::TunnelEncapSubTLVSRENLP(const TunnelEncapSubTLVSRENLP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&enlp_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(enlp_));
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVSRENLP)
}

void TunnelEncapSubTLVSRENLP::SharedCtor() {
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enlp_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(enlp_));
}

TunnelEncapSubTLVSRENLP::~TunnelEncapSubTLVSRENLP() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVSRENLP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVSRENLP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapSubTLVSRENLP::ArenaDtor(void* object) {
  TunnelEncapSubTLVSRENLP* _this = reinterpret_cast< TunnelEncapSubTLVSRENLP* >(object);
  (void)_this;
}
void TunnelEncapSubTLVSRENLP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVSRENLP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVSRENLP& TunnelEncapSubTLVSRENLP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVSRENLP_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVSRENLP::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVSRENLP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enlp_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(enlp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVSRENLP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.ENLPType enlp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enlp(static_cast<::apipb::ENLPType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVSRENLP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVSRENLP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // .apipb.ENLPType enlp = 2;
  if (this->enlp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_enlp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVSRENLP)
  return target;
}

size_t TunnelEncapSubTLVSRENLP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVSRENLP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // .apipb.ENLPType enlp = 2;
  if (this->enlp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enlp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVSRENLP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVSRENLP)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVSRENLP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVSRENLP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVSRENLP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVSRENLP)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVSRENLP::MergeFrom(const TunnelEncapSubTLVSRENLP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVSRENLP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.enlp() != 0) {
    _internal_set_enlp(from._internal_enlp());
  }
}

void TunnelEncapSubTLVSRENLP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVSRENLP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVSRENLP::CopyFrom(const TunnelEncapSubTLVSRENLP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVSRENLP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVSRENLP::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVSRENLP::InternalSwap(TunnelEncapSubTLVSRENLP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelEncapSubTLVSRENLP, enlp_)
      + sizeof(TunnelEncapSubTLVSRENLP::enlp_)
      - PROTOBUF_FIELD_OFFSET(TunnelEncapSubTLVSRENLP, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVSRENLP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRWeight::InitAsDefaultInstance() {
}
class SRWeight::_Internal {
 public:
};

SRWeight::SRWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRWeight)
}
SRWeight::SRWeight(const SRWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:apipb.SRWeight)
}

void SRWeight::SharedCtor() {
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(weight_));
}

SRWeight::~SRWeight() {
  // @@protoc_insertion_point(destructor:apipb.SRWeight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRWeight::ArenaDtor(void* object) {
  SRWeight* _this = reinterpret_cast< SRWeight* >(object);
  (void)_this;
}
void SRWeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRWeight& SRWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRWeight_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 weight = 2;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRWeight)
  return target;
}

size_t SRWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const SRWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRWeight)
    MergeFrom(*source);
  }
}

void SRWeight::MergeFrom(const SRWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
}

void SRWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRWeight::CopyFrom(const SRWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRWeight::IsInitialized() const {
  return true;
}

void SRWeight::InternalSwap(SRWeight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRWeight, weight_)
      + sizeof(SRWeight::weight_)
      - PROTOBUF_FIELD_OFFSET(SRWeight, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentFlags::InitAsDefaultInstance() {
}
class SegmentFlags::_Internal {
 public:
};

SegmentFlags::SegmentFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SegmentFlags)
}
SegmentFlags::SegmentFlags(const SegmentFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&v_flag_, &from.v_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_flag_) -
    reinterpret_cast<char*>(&v_flag_)) + sizeof(b_flag_));
  // @@protoc_insertion_point(copy_constructor:apipb.SegmentFlags)
}

void SegmentFlags::SharedCtor() {
  ::memset(&v_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_flag_) -
      reinterpret_cast<char*>(&v_flag_)) + sizeof(b_flag_));
}

SegmentFlags::~SegmentFlags() {
  // @@protoc_insertion_point(destructor:apipb.SegmentFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SegmentFlags::ArenaDtor(void* object) {
  SegmentFlags* _this = reinterpret_cast< SegmentFlags* >(object);
  (void)_this;
}
void SegmentFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentFlags& SegmentFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void SegmentFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SegmentFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_flag_) -
      reinterpret_cast<char*>(&v_flag_)) + sizeof(b_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool v_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool a_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          a_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool s_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          b_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SegmentFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool v_flag = 1;
  if (this->v_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_v_flag(), target);
  }

  // bool a_flag = 2;
  if (this->a_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_a_flag(), target);
  }

  // bool s_flag = 3;
  if (this->s_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_s_flag(), target);
  }

  // bool b_flag = 4;
  if (this->b_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_b_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SegmentFlags)
  return target;
}

size_t SegmentFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SegmentFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool v_flag = 1;
  if (this->v_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool a_flag = 2;
  if (this->a_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool s_flag = 3;
  if (this->s_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool b_flag = 4;
  if (this->b_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SegmentFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SegmentFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SegmentFlags)
    MergeFrom(*source);
  }
}

void SegmentFlags::MergeFrom(const SegmentFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SegmentFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v_flag() != 0) {
    _internal_set_v_flag(from._internal_v_flag());
  }
  if (from.a_flag() != 0) {
    _internal_set_a_flag(from._internal_a_flag());
  }
  if (from.s_flag() != 0) {
    _internal_set_s_flag(from._internal_s_flag());
  }
  if (from.b_flag() != 0) {
    _internal_set_b_flag(from._internal_b_flag());
  }
}

void SegmentFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SegmentFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentFlags::CopyFrom(const SegmentFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SegmentFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentFlags::IsInitialized() const {
  return true;
}

void SegmentFlags::InternalSwap(SegmentFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentFlags, b_flag_)
      + sizeof(SegmentFlags::b_flag_)
      - PROTOBUF_FIELD_OFFSET(SegmentFlags, v_flag_)>(
          reinterpret_cast<char*>(&v_flag_),
          reinterpret_cast<char*>(&other->v_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentTypeA::InitAsDefaultInstance() {
  ::apipb::_SegmentTypeA_default_instance_._instance.get_mutable()->flags_ = const_cast< ::apipb::SegmentFlags*>(
      ::apipb::SegmentFlags::internal_default_instance());
}
class SegmentTypeA::_Internal {
 public:
  static const ::apipb::SegmentFlags& flags(const SegmentTypeA* msg);
};

const ::apipb::SegmentFlags&
SegmentTypeA::_Internal::flags(const SegmentTypeA* msg) {
  return *msg->flags_;
}
SegmentTypeA::SegmentTypeA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SegmentTypeA)
}
SegmentTypeA::SegmentTypeA(const SegmentTypeA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flags()) {
    flags_ = new ::apipb::SegmentFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  label_ = from.label_;
  // @@protoc_insertion_point(copy_constructor:apipb.SegmentTypeA)
}

void SegmentTypeA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentTypeA_attribute_2eproto.base);
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(label_));
}

SegmentTypeA::~SegmentTypeA() {
  // @@protoc_insertion_point(destructor:apipb.SegmentTypeA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentTypeA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flags_;
}

void SegmentTypeA::ArenaDtor(void* object) {
  SegmentTypeA* _this = reinterpret_cast< SegmentTypeA* >(object);
  (void)_this;
}
void SegmentTypeA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentTypeA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentTypeA& SegmentTypeA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentTypeA_attribute_2eproto.base);
  return *internal_default_instance();
}


void SegmentTypeA::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SegmentTypeA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  label_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentTypeA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.SegmentFlags flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentTypeA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SegmentTypeA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.SegmentFlags flags = 1;
  if (this->has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flags(this), target, stream);
  }

  // uint32 label = 2;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SegmentTypeA)
  return target;
}

size_t SegmentTypeA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SegmentTypeA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.SegmentFlags flags = 1;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // uint32 label = 2;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentTypeA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SegmentTypeA)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentTypeA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentTypeA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SegmentTypeA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SegmentTypeA)
    MergeFrom(*source);
  }
}

void SegmentTypeA::MergeFrom(const SegmentTypeA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SegmentTypeA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flags()) {
    _internal_mutable_flags()->::apipb::SegmentFlags::MergeFrom(from._internal_flags());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void SegmentTypeA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SegmentTypeA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTypeA::CopyFrom(const SegmentTypeA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SegmentTypeA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTypeA::IsInitialized() const {
  return true;
}

void SegmentTypeA::InternalSwap(SegmentTypeA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentTypeA, label_)
      + sizeof(SegmentTypeA::label_)
      - PROTOBUF_FIELD_OFFSET(SegmentTypeA, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentTypeA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentTypeB::InitAsDefaultInstance() {
  ::apipb::_SegmentTypeB_default_instance_._instance.get_mutable()->flags_ = const_cast< ::apipb::SegmentFlags*>(
      ::apipb::SegmentFlags::internal_default_instance());
  ::apipb::_SegmentTypeB_default_instance_._instance.get_mutable()->endpoint_behavior_structure_ = const_cast< ::apipb::SRv6EndPointBehavior*>(
      ::apipb::SRv6EndPointBehavior::internal_default_instance());
}
class SegmentTypeB::_Internal {
 public:
  static const ::apipb::SegmentFlags& flags(const SegmentTypeB* msg);
  static const ::apipb::SRv6EndPointBehavior& endpoint_behavior_structure(const SegmentTypeB* msg);
};

const ::apipb::SegmentFlags&
SegmentTypeB::_Internal::flags(const SegmentTypeB* msg) {
  return *msg->flags_;
}
const ::apipb::SRv6EndPointBehavior&
SegmentTypeB::_Internal::endpoint_behavior_structure(const SegmentTypeB* msg) {
  return *msg->endpoint_behavior_structure_;
}
SegmentTypeB::SegmentTypeB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SegmentTypeB)
}
SegmentTypeB::SegmentTypeB(const SegmentTypeB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sid().empty()) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sid(),
      GetArena());
  }
  if (from._internal_has_flags()) {
    flags_ = new ::apipb::SegmentFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from._internal_has_endpoint_behavior_structure()) {
    endpoint_behavior_structure_ = new ::apipb::SRv6EndPointBehavior(*from.endpoint_behavior_structure_);
  } else {
    endpoint_behavior_structure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.SegmentTypeB)
}

void SegmentTypeB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentTypeB_attribute_2eproto.base);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endpoint_behavior_structure_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(endpoint_behavior_structure_));
}

SegmentTypeB::~SegmentTypeB() {
  // @@protoc_insertion_point(destructor:apipb.SegmentTypeB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentTypeB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete endpoint_behavior_structure_;
}

void SegmentTypeB::ArenaDtor(void* object) {
  SegmentTypeB* _this = reinterpret_cast< SegmentTypeB* >(object);
  (void)_this;
}
void SegmentTypeB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentTypeB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentTypeB& SegmentTypeB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentTypeB_attribute_2eproto.base);
  return *internal_default_instance();
}


void SegmentTypeB::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SegmentTypeB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArena() == nullptr && endpoint_behavior_structure_ != nullptr) {
    delete endpoint_behavior_structure_;
  }
  endpoint_behavior_structure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentTypeB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.SegmentFlags flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint_behavior_structure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentTypeB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SegmentTypeB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.SegmentFlags flags = 1;
  if (this->has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flags(this), target, stream);
  }

  // bytes sid = 2;
  if (this->sid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sid(), target);
  }

  // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 3;
  if (this->has_endpoint_behavior_structure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::endpoint_behavior_structure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SegmentTypeB)
  return target;
}

size_t SegmentTypeB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SegmentTypeB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sid = 2;
  if (this->sid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // .apipb.SegmentFlags flags = 1;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 3;
  if (this->has_endpoint_behavior_structure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoint_behavior_structure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentTypeB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SegmentTypeB)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentTypeB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentTypeB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SegmentTypeB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SegmentTypeB)
    MergeFrom(*source);
  }
}

void SegmentTypeB::MergeFrom(const SegmentTypeB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SegmentTypeB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid().size() > 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.has_flags()) {
    _internal_mutable_flags()->::apipb::SegmentFlags::MergeFrom(from._internal_flags());
  }
  if (from.has_endpoint_behavior_structure()) {
    _internal_mutable_endpoint_behavior_structure()->::apipb::SRv6EndPointBehavior::MergeFrom(from._internal_endpoint_behavior_structure());
  }
}

void SegmentTypeB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SegmentTypeB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTypeB::CopyFrom(const SegmentTypeB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SegmentTypeB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTypeB::IsInitialized() const {
  return true;
}

void SegmentTypeB::InternalSwap(SegmentTypeB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sid_.Swap(&other->sid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentTypeB, endpoint_behavior_structure_)
      + sizeof(SegmentTypeB::endpoint_behavior_structure_)
      - PROTOBUF_FIELD_OFFSET(SegmentTypeB, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentTypeB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVSRSegmentList::InitAsDefaultInstance() {
  ::apipb::_TunnelEncapSubTLVSRSegmentList_default_instance_._instance.get_mutable()->weight_ = const_cast< ::apipb::SRWeight*>(
      ::apipb::SRWeight::internal_default_instance());
}
class TunnelEncapSubTLVSRSegmentList::_Internal {
 public:
  static const ::apipb::SRWeight& weight(const TunnelEncapSubTLVSRSegmentList* msg);
};

const ::apipb::SRWeight&
TunnelEncapSubTLVSRSegmentList::_Internal::weight(const TunnelEncapSubTLVSRSegmentList* msg) {
  return *msg->weight_;
}
void TunnelEncapSubTLVSRSegmentList::clear_segments() {
  segments_.Clear();
}
TunnelEncapSubTLVSRSegmentList::TunnelEncapSubTLVSRSegmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVSRSegmentList)
}
TunnelEncapSubTLVSRSegmentList::TunnelEncapSubTLVSRSegmentList(const TunnelEncapSubTLVSRSegmentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weight()) {
    weight_ = new ::apipb::SRWeight(*from.weight_);
  } else {
    weight_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVSRSegmentList)
}

void TunnelEncapSubTLVSRSegmentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVSRSegmentList_attribute_2eproto.base);
  weight_ = nullptr;
}

TunnelEncapSubTLVSRSegmentList::~TunnelEncapSubTLVSRSegmentList() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVSRSegmentList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVSRSegmentList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete weight_;
}

void TunnelEncapSubTLVSRSegmentList::ArenaDtor(void* object) {
  TunnelEncapSubTLVSRSegmentList* _this = reinterpret_cast< TunnelEncapSubTLVSRSegmentList* >(object);
  (void)_this;
}
void TunnelEncapSubTLVSRSegmentList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVSRSegmentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVSRSegmentList& TunnelEncapSubTLVSRSegmentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVSRSegmentList_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVSRSegmentList::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVSRSegmentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  if (GetArena() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVSRSegmentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.SRWeight weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVSRSegmentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVSRSegmentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.SRWeight weight = 1;
  if (this->has_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::weight(this), target, stream);
  }

  // repeated .google.protobuf.Any segments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVSRSegmentList)
  return target;
}

size_t TunnelEncapSubTLVSRSegmentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVSRSegmentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any segments = 2;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.SRWeight weight = 1;
  if (this->has_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVSRSegmentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVSRSegmentList)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVSRSegmentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVSRSegmentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVSRSegmentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVSRSegmentList)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVSRSegmentList::MergeFrom(const TunnelEncapSubTLVSRSegmentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVSRSegmentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from.has_weight()) {
    _internal_mutable_weight()->::apipb::SRWeight::MergeFrom(from._internal_weight());
  }
}

void TunnelEncapSubTLVSRSegmentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVSRSegmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVSRSegmentList::CopyFrom(const TunnelEncapSubTLVSRSegmentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVSRSegmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVSRSegmentList::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVSRSegmentList::InternalSwap(TunnelEncapSubTLVSRSegmentList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVSRSegmentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVEgressEndpoint::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVEgressEndpoint::_Internal {
 public:
};

TunnelEncapSubTLVEgressEndpoint::TunnelEncapSubTLVEgressEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVEgressEndpoint)
}
TunnelEncapSubTLVEgressEndpoint::TunnelEncapSubTLVEgressEndpoint(const TunnelEncapSubTLVEgressEndpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVEgressEndpoint)
}

void TunnelEncapSubTLVEgressEndpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVEgressEndpoint_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TunnelEncapSubTLVEgressEndpoint::~TunnelEncapSubTLVEgressEndpoint() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVEgressEndpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVEgressEndpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TunnelEncapSubTLVEgressEndpoint::ArenaDtor(void* object) {
  TunnelEncapSubTLVEgressEndpoint* _this = reinterpret_cast< TunnelEncapSubTLVEgressEndpoint* >(object);
  (void)_this;
}
void TunnelEncapSubTLVEgressEndpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVEgressEndpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVEgressEndpoint& TunnelEncapSubTLVEgressEndpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVEgressEndpoint_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVEgressEndpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVEgressEndpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.TunnelEncapSubTLVEgressEndpoint.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVEgressEndpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.TunnelEncapSubTLVEgressEndpoint.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVEgressEndpoint)
  return target;
}

size_t TunnelEncapSubTLVEgressEndpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVEgressEndpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVEgressEndpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVEgressEndpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVEgressEndpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVEgressEndpoint)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVEgressEndpoint::MergeFrom(const TunnelEncapSubTLVEgressEndpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void TunnelEncapSubTLVEgressEndpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVEgressEndpoint::CopyFrom(const TunnelEncapSubTLVEgressEndpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVEgressEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVEgressEndpoint::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVEgressEndpoint::InternalSwap(TunnelEncapSubTLVEgressEndpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVEgressEndpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVUDPDestPort::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVUDPDestPort::_Internal {
 public:
};

TunnelEncapSubTLVUDPDestPort::TunnelEncapSubTLVUDPDestPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVUDPDestPort)
}
TunnelEncapSubTLVUDPDestPort::TunnelEncapSubTLVUDPDestPort(const TunnelEncapSubTLVUDPDestPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVUDPDestPort)
}

void TunnelEncapSubTLVUDPDestPort::SharedCtor() {
  port_ = 0u;
}

TunnelEncapSubTLVUDPDestPort::~TunnelEncapSubTLVUDPDestPort() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVUDPDestPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVUDPDestPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapSubTLVUDPDestPort::ArenaDtor(void* object) {
  TunnelEncapSubTLVUDPDestPort* _this = reinterpret_cast< TunnelEncapSubTLVUDPDestPort* >(object);
  (void)_this;
}
void TunnelEncapSubTLVUDPDestPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVUDPDestPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVUDPDestPort& TunnelEncapSubTLVUDPDestPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVUDPDestPort_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVUDPDestPort::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVUDPDestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVUDPDestPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVUDPDestPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVUDPDestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVUDPDestPort)
  return target;
}

size_t TunnelEncapSubTLVUDPDestPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVUDPDestPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVUDPDestPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVUDPDestPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVUDPDestPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVUDPDestPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVUDPDestPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVUDPDestPort)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVUDPDestPort::MergeFrom(const TunnelEncapSubTLVUDPDestPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVUDPDestPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void TunnelEncapSubTLVUDPDestPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVUDPDestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVUDPDestPort::CopyFrom(const TunnelEncapSubTLVUDPDestPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVUDPDestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVUDPDestPort::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVUDPDestPort::InternalSwap(TunnelEncapSubTLVUDPDestPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVUDPDestPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVUnknown::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVUnknown::_Internal {
 public:
};

TunnelEncapSubTLVUnknown::TunnelEncapSubTLVUnknown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapSubTLVUnknown)
}
TunnelEncapSubTLVUnknown::TunnelEncapSubTLVUnknown(const TunnelEncapSubTLVUnknown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapSubTLVUnknown)
}

void TunnelEncapSubTLVUnknown::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

TunnelEncapSubTLVUnknown::~TunnelEncapSubTLVUnknown() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapSubTLVUnknown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapSubTLVUnknown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TunnelEncapSubTLVUnknown::ArenaDtor(void* object) {
  TunnelEncapSubTLVUnknown* _this = reinterpret_cast< TunnelEncapSubTLVUnknown* >(object);
  (void)_this;
}
void TunnelEncapSubTLVUnknown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapSubTLVUnknown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVUnknown& TunnelEncapSubTLVUnknown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVUnknown::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapSubTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapSubTLVUnknown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVUnknown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapSubTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapSubTLVUnknown)
  return target;
}

size_t TunnelEncapSubTLVUnknown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapSubTLVUnknown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVUnknown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapSubTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVUnknown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVUnknown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapSubTLVUnknown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapSubTLVUnknown)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVUnknown::MergeFrom(const TunnelEncapSubTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapSubTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TunnelEncapSubTLVUnknown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapSubTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVUnknown::CopyFrom(const TunnelEncapSubTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapSubTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVUnknown::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVUnknown::InternalSwap(TunnelEncapSubTLVUnknown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVUnknown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapTLV::InitAsDefaultInstance() {
}
class TunnelEncapTLV::_Internal {
 public:
};

void TunnelEncapTLV::clear_tlvs() {
  tlvs_.Clear();
}
TunnelEncapTLV::TunnelEncapTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapTLV)
}
TunnelEncapTLV::TunnelEncapTLV(const TunnelEncapTLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapTLV)
}

void TunnelEncapTLV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapTLV_attribute_2eproto.base);
  type_ = 0u;
}

TunnelEncapTLV::~TunnelEncapTLV() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapTLV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapTLV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapTLV::ArenaDtor(void* object) {
  TunnelEncapTLV* _this = reinterpret_cast< TunnelEncapTLV* >(object);
  (void)_this;
}
void TunnelEncapTLV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapTLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapTLV& TunnelEncapTLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapTLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapTLV::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapTLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any tlvs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapTLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .google.protobuf.Any tlvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapTLV)
  return target;
}

size_t TunnelEncapTLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapTLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 2;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapTLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapTLV)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapTLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapTLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapTLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapTLV)
    MergeFrom(*source);
  }
}

void TunnelEncapTLV::MergeFrom(const TunnelEncapTLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapTLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TunnelEncapTLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapTLV::CopyFrom(const TunnelEncapTLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapTLV::IsInitialized() const {
  return true;
}

void TunnelEncapTLV::InternalSwap(TunnelEncapTLV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapTLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapAttribute::InitAsDefaultInstance() {
}
class TunnelEncapAttribute::_Internal {
 public:
};

TunnelEncapAttribute::TunnelEncapAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TunnelEncapAttribute)
}
TunnelEncapAttribute::TunnelEncapAttribute(const TunnelEncapAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.TunnelEncapAttribute)
}

void TunnelEncapAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapAttribute_attribute_2eproto.base);
}

TunnelEncapAttribute::~TunnelEncapAttribute() {
  // @@protoc_insertion_point(destructor:apipb.TunnelEncapAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelEncapAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelEncapAttribute::ArenaDtor(void* object) {
  TunnelEncapAttribute* _this = reinterpret_cast< TunnelEncapAttribute* >(object);
  (void)_this;
}
void TunnelEncapAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelEncapAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapAttribute& TunnelEncapAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TunnelEncapAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelEncapAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.TunnelEncapTLV tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TunnelEncapAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.TunnelEncapTLV tlvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TunnelEncapAttribute)
  return target;
}

size_t TunnelEncapAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TunnelEncapAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.TunnelEncapTLV tlvs = 1;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TunnelEncapAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TunnelEncapAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TunnelEncapAttribute)
    MergeFrom(*source);
  }
}

void TunnelEncapAttribute::MergeFrom(const TunnelEncapAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TunnelEncapAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
}

void TunnelEncapAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TunnelEncapAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapAttribute::CopyFrom(const TunnelEncapAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TunnelEncapAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapAttribute::IsInitialized() const {
  return true;
}

void TunnelEncapAttribute::InternalSwap(TunnelEncapAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPv6AddressSpecificExtended::InitAsDefaultInstance() {
}
class IPv6AddressSpecificExtended::_Internal {
 public:
};

IPv6AddressSpecificExtended::IPv6AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.IPv6AddressSpecificExtended)
}
IPv6AddressSpecificExtended::IPv6AddressSpecificExtended(const IPv6AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:apipb.IPv6AddressSpecificExtended)
}

void IPv6AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPv6AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

IPv6AddressSpecificExtended::~IPv6AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.IPv6AddressSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPv6AddressSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv6AddressSpecificExtended::ArenaDtor(void* object) {
  IPv6AddressSpecificExtended* _this = reinterpret_cast< IPv6AddressSpecificExtended* >(object);
  (void)_this;
}
void IPv6AddressSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv6AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPv6AddressSpecificExtended& IPv6AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPv6AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void IPv6AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.IPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv6AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.IPv6AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv6AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.IPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.IPv6AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.IPv6AddressSpecificExtended)
  return target;
}

size_t IPv6AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.IPv6AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv6AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.IPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv6AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPv6AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.IPv6AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.IPv6AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void IPv6AddressSpecificExtended::MergeFrom(const IPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.IPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void IPv6AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.IPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv6AddressSpecificExtended::CopyFrom(const IPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.IPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv6AddressSpecificExtended::IsInitialized() const {
  return true;
}

void IPv6AddressSpecificExtended::InternalSwap(IPv6AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPv6AddressSpecificExtended, local_admin_)
      + sizeof(IPv6AddressSpecificExtended::local_admin_)
      - PROTOBUF_FIELD_OFFSET(IPv6AddressSpecificExtended, is_transitive_)>(
          reinterpret_cast<char*>(&is_transitive_),
          reinterpret_cast<char*>(&other->is_transitive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv6AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectIPv6AddressSpecificExtended::InitAsDefaultInstance() {
}
class RedirectIPv6AddressSpecificExtended::_Internal {
 public:
};

RedirectIPv6AddressSpecificExtended::RedirectIPv6AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RedirectIPv6AddressSpecificExtended)
}
RedirectIPv6AddressSpecificExtended::RedirectIPv6AddressSpecificExtended(const RedirectIPv6AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  local_admin_ = from.local_admin_;
  // @@protoc_insertion_point(copy_constructor:apipb.RedirectIPv6AddressSpecificExtended)
}

void RedirectIPv6AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_admin_ = 0u;
}

RedirectIPv6AddressSpecificExtended::~RedirectIPv6AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:apipb.RedirectIPv6AddressSpecificExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedirectIPv6AddressSpecificExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedirectIPv6AddressSpecificExtended::ArenaDtor(void* object) {
  RedirectIPv6AddressSpecificExtended* _this = reinterpret_cast< RedirectIPv6AddressSpecificExtended* >(object);
  (void)_this;
}
void RedirectIPv6AddressSpecificExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectIPv6AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectIPv6AddressSpecificExtended& RedirectIPv6AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectIPv6AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RedirectIPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_admin_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedirectIPv6AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.RedirectIPv6AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectIPv6AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RedirectIPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.RedirectIPv6AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RedirectIPv6AddressSpecificExtended)
  return target;
}

size_t RedirectIPv6AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RedirectIPv6AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectIPv6AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RedirectIPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectIPv6AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectIPv6AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RedirectIPv6AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RedirectIPv6AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectIPv6AddressSpecificExtended::MergeFrom(const RedirectIPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RedirectIPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectIPv6AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RedirectIPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectIPv6AddressSpecificExtended::CopyFrom(const RedirectIPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RedirectIPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectIPv6AddressSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectIPv6AddressSpecificExtended::InternalSwap(RedirectIPv6AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectIPv6AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IP6ExtendedCommunitiesAttribute::InitAsDefaultInstance() {
}
class IP6ExtendedCommunitiesAttribute::_Internal {
 public:
};

void IP6ExtendedCommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
IP6ExtendedCommunitiesAttribute::IP6ExtendedCommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.IP6ExtendedCommunitiesAttribute)
}
IP6ExtendedCommunitiesAttribute::IP6ExtendedCommunitiesAttribute(const IP6ExtendedCommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.IP6ExtendedCommunitiesAttribute)
}

void IP6ExtendedCommunitiesAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto.base);
}

IP6ExtendedCommunitiesAttribute::~IP6ExtendedCommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:apipb.IP6ExtendedCommunitiesAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IP6ExtendedCommunitiesAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IP6ExtendedCommunitiesAttribute::ArenaDtor(void* object) {
  IP6ExtendedCommunitiesAttribute* _this = reinterpret_cast< IP6ExtendedCommunitiesAttribute* >(object);
  (void)_this;
}
void IP6ExtendedCommunitiesAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IP6ExtendedCommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IP6ExtendedCommunitiesAttribute& IP6ExtendedCommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void IP6ExtendedCommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.IP6ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IP6ExtendedCommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IP6ExtendedCommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.IP6ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.IP6ExtendedCommunitiesAttribute)
  return target;
}

size_t IP6ExtendedCommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.IP6ExtendedCommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IP6ExtendedCommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.IP6ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const IP6ExtendedCommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IP6ExtendedCommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.IP6ExtendedCommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.IP6ExtendedCommunitiesAttribute)
    MergeFrom(*source);
  }
}

void IP6ExtendedCommunitiesAttribute::MergeFrom(const IP6ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.IP6ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void IP6ExtendedCommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.IP6ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IP6ExtendedCommunitiesAttribute::CopyFrom(const IP6ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.IP6ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IP6ExtendedCommunitiesAttribute::IsInitialized() const {
  return true;
}

void IP6ExtendedCommunitiesAttribute::InternalSwap(IP6ExtendedCommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IP6ExtendedCommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AigpTLVIGPMetric::InitAsDefaultInstance() {
}
class AigpTLVIGPMetric::_Internal {
 public:
};

AigpTLVIGPMetric::AigpTLVIGPMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AigpTLVIGPMetric)
}
AigpTLVIGPMetric::AigpTLVIGPMetric(const AigpTLVIGPMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:apipb.AigpTLVIGPMetric)
}

void AigpTLVIGPMetric::SharedCtor() {
  metric_ = PROTOBUF_ULONGLONG(0);
}

AigpTLVIGPMetric::~AigpTLVIGPMetric() {
  // @@protoc_insertion_point(destructor:apipb.AigpTLVIGPMetric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AigpTLVIGPMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AigpTLVIGPMetric::ArenaDtor(void* object) {
  AigpTLVIGPMetric* _this = reinterpret_cast< AigpTLVIGPMetric* >(object);
  (void)_this;
}
void AigpTLVIGPMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AigpTLVIGPMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AigpTLVIGPMetric& AigpTLVIGPMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AigpTLVIGPMetric_attribute_2eproto.base);
  return *internal_default_instance();
}


void AigpTLVIGPMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AigpTLVIGPMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AigpTLVIGPMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AigpTLVIGPMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AigpTLVIGPMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 metric = 1;
  if (this->metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AigpTLVIGPMetric)
  return target;
}

size_t AigpTLVIGPMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AigpTLVIGPMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 metric = 1;
  if (this->metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_metric());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AigpTLVIGPMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AigpTLVIGPMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const AigpTLVIGPMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AigpTLVIGPMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AigpTLVIGPMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AigpTLVIGPMetric)
    MergeFrom(*source);
  }
}

void AigpTLVIGPMetric::MergeFrom(const AigpTLVIGPMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AigpTLVIGPMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
}

void AigpTLVIGPMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AigpTLVIGPMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AigpTLVIGPMetric::CopyFrom(const AigpTLVIGPMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AigpTLVIGPMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AigpTLVIGPMetric::IsInitialized() const {
  return true;
}

void AigpTLVIGPMetric::InternalSwap(AigpTLVIGPMetric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(metric_, other->metric_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AigpTLVIGPMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AigpTLVUnknown::InitAsDefaultInstance() {
}
class AigpTLVUnknown::_Internal {
 public:
};

AigpTLVUnknown::AigpTLVUnknown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AigpTLVUnknown)
}
AigpTLVUnknown::AigpTLVUnknown(const AigpTLVUnknown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.AigpTLVUnknown)
}

void AigpTLVUnknown::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AigpTLVUnknown_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

AigpTLVUnknown::~AigpTLVUnknown() {
  // @@protoc_insertion_point(destructor:apipb.AigpTLVUnknown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AigpTLVUnknown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AigpTLVUnknown::ArenaDtor(void* object) {
  AigpTLVUnknown* _this = reinterpret_cast< AigpTLVUnknown* >(object);
  (void)_this;
}
void AigpTLVUnknown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AigpTLVUnknown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AigpTLVUnknown& AigpTLVUnknown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AigpTLVUnknown_attribute_2eproto.base);
  return *internal_default_instance();
}


void AigpTLVUnknown::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AigpTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AigpTLVUnknown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AigpTLVUnknown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AigpTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AigpTLVUnknown)
  return target;
}

size_t AigpTLVUnknown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AigpTLVUnknown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AigpTLVUnknown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AigpTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  const AigpTLVUnknown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AigpTLVUnknown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AigpTLVUnknown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AigpTLVUnknown)
    MergeFrom(*source);
  }
}

void AigpTLVUnknown::MergeFrom(const AigpTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AigpTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AigpTLVUnknown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AigpTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AigpTLVUnknown::CopyFrom(const AigpTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AigpTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AigpTLVUnknown::IsInitialized() const {
  return true;
}

void AigpTLVUnknown::InternalSwap(AigpTLVUnknown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AigpTLVUnknown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AigpAttribute::InitAsDefaultInstance() {
}
class AigpAttribute::_Internal {
 public:
};

void AigpAttribute::clear_tlvs() {
  tlvs_.Clear();
}
AigpAttribute::AigpAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AigpAttribute)
}
AigpAttribute::AigpAttribute(const AigpAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.AigpAttribute)
}

void AigpAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AigpAttribute_attribute_2eproto.base);
}

AigpAttribute::~AigpAttribute() {
  // @@protoc_insertion_point(destructor:apipb.AigpAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AigpAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AigpAttribute::ArenaDtor(void* object) {
  AigpAttribute* _this = reinterpret_cast< AigpAttribute* >(object);
  (void)_this;
}
void AigpAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AigpAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AigpAttribute& AigpAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AigpAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AigpAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AigpAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AigpAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AigpAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AigpAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AigpAttribute)
  return target;
}

size_t AigpAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AigpAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 1;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AigpAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AigpAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AigpAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AigpAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AigpAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AigpAttribute)
    MergeFrom(*source);
  }
}

void AigpAttribute::MergeFrom(const AigpAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AigpAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
}

void AigpAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AigpAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AigpAttribute::CopyFrom(const AigpAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AigpAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AigpAttribute::IsInitialized() const {
  return true;
}

void AigpAttribute::InternalSwap(AigpAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AigpAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LargeCommunity::InitAsDefaultInstance() {
}
class LargeCommunity::_Internal {
 public:
};

LargeCommunity::LargeCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LargeCommunity)
}
LargeCommunity::LargeCommunity(const LargeCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&global_admin_, &from.global_admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_data2_) -
    reinterpret_cast<char*>(&global_admin_)) + sizeof(local_data2_));
  // @@protoc_insertion_point(copy_constructor:apipb.LargeCommunity)
}

void LargeCommunity::SharedCtor() {
  ::memset(&global_admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_data2_) -
      reinterpret_cast<char*>(&global_admin_)) + sizeof(local_data2_));
}

LargeCommunity::~LargeCommunity() {
  // @@protoc_insertion_point(destructor:apipb.LargeCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LargeCommunity::ArenaDtor(void* object) {
  LargeCommunity* _this = reinterpret_cast< LargeCommunity* >(object);
  (void)_this;
}
void LargeCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LargeCommunity& LargeCommunity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LargeCommunity_attribute_2eproto.base);
  return *internal_default_instance();
}


void LargeCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LargeCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&global_admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_data2_) -
      reinterpret_cast<char*>(&global_admin_)) + sizeof(local_data2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 global_admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          global_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_data1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_data2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LargeCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 global_admin = 1;
  if (this->global_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_global_admin(), target);
  }

  // uint32 local_data1 = 2;
  if (this->local_data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_data1(), target);
  }

  // uint32 local_data2 = 3;
  if (this->local_data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_data2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LargeCommunity)
  return target;
}

size_t LargeCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LargeCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 global_admin = 1;
  if (this->global_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_global_admin());
  }

  // uint32 local_data1 = 2;
  if (this->local_data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_data1());
  }

  // uint32 local_data2 = 3;
  if (this->local_data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_data2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LargeCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LargeCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LargeCommunity)
    MergeFrom(*source);
  }
}

void LargeCommunity::MergeFrom(const LargeCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LargeCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.global_admin() != 0) {
    _internal_set_global_admin(from._internal_global_admin());
  }
  if (from.local_data1() != 0) {
    _internal_set_local_data1(from._internal_local_data1());
  }
  if (from.local_data2() != 0) {
    _internal_set_local_data2(from._internal_local_data2());
  }
}

void LargeCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LargeCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeCommunity::CopyFrom(const LargeCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LargeCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeCommunity::IsInitialized() const {
  return true;
}

void LargeCommunity::InternalSwap(LargeCommunity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LargeCommunity, local_data2_)
      + sizeof(LargeCommunity::local_data2_)
      - PROTOBUF_FIELD_OFFSET(LargeCommunity, global_admin_)>(
          reinterpret_cast<char*>(&global_admin_),
          reinterpret_cast<char*>(&other->global_admin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeCommunity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LargeCommunitiesAttribute::InitAsDefaultInstance() {
}
class LargeCommunitiesAttribute::_Internal {
 public:
};

LargeCommunitiesAttribute::LargeCommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LargeCommunitiesAttribute)
}
LargeCommunitiesAttribute::LargeCommunitiesAttribute(const LargeCommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.LargeCommunitiesAttribute)
}

void LargeCommunitiesAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LargeCommunitiesAttribute_attribute_2eproto.base);
}

LargeCommunitiesAttribute::~LargeCommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:apipb.LargeCommunitiesAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeCommunitiesAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LargeCommunitiesAttribute::ArenaDtor(void* object) {
  LargeCommunitiesAttribute* _this = reinterpret_cast< LargeCommunitiesAttribute* >(object);
  (void)_this;
}
void LargeCommunitiesAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeCommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LargeCommunitiesAttribute& LargeCommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LargeCommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void LargeCommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LargeCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeCommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.LargeCommunity communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeCommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LargeCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.LargeCommunity communities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LargeCommunitiesAttribute)
  return target;
}

size_t LargeCommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LargeCommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.LargeCommunity communities = 1;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeCommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LargeCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeCommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeCommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LargeCommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LargeCommunitiesAttribute)
    MergeFrom(*source);
  }
}

void LargeCommunitiesAttribute::MergeFrom(const LargeCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LargeCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void LargeCommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LargeCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeCommunitiesAttribute::CopyFrom(const LargeCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LargeCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeCommunitiesAttribute::IsInitialized() const {
  return true;
}

void LargeCommunitiesAttribute::InternalSwap(LargeCommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeCommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsNodeFlags::InitAsDefaultInstance() {
}
class LsNodeFlags::_Internal {
 public:
};

LsNodeFlags::LsNodeFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsNodeFlags)
}
LsNodeFlags::LsNodeFlags(const LsNodeFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&overload_, &from.overload_,
    static_cast<size_t>(reinterpret_cast<char*>(&v6_) -
    reinterpret_cast<char*>(&overload_)) + sizeof(v6_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsNodeFlags)
}

void LsNodeFlags::SharedCtor() {
  ::memset(&overload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v6_) -
      reinterpret_cast<char*>(&overload_)) + sizeof(v6_));
}

LsNodeFlags::~LsNodeFlags() {
  // @@protoc_insertion_point(destructor:apipb.LsNodeFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsNodeFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsNodeFlags::ArenaDtor(void* object) {
  LsNodeFlags* _this = reinterpret_cast< LsNodeFlags* >(object);
  (void)_this;
}
void LsNodeFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsNodeFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsNodeFlags& LsNodeFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsNodeFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsNodeFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsNodeFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&overload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v6_) -
      reinterpret_cast<char*>(&overload_)) + sizeof(v6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsNodeFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool overload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          overload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool attached = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool abr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          abr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool router = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          router_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool v6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          v6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsNodeFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsNodeFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool overload = 1;
  if (this->overload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overload(), target);
  }

  // bool attached = 2;
  if (this->attached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_attached(), target);
  }

  // bool external = 3;
  if (this->external() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_external(), target);
  }

  // bool abr = 4;
  if (this->abr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_abr(), target);
  }

  // bool router = 5;
  if (this->router() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_router(), target);
  }

  // bool v6 = 6;
  if (this->v6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_v6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsNodeFlags)
  return target;
}

size_t LsNodeFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsNodeFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool overload = 1;
  if (this->overload() != 0) {
    total_size += 1 + 1;
  }

  // bool attached = 2;
  if (this->attached() != 0) {
    total_size += 1 + 1;
  }

  // bool external = 3;
  if (this->external() != 0) {
    total_size += 1 + 1;
  }

  // bool abr = 4;
  if (this->abr() != 0) {
    total_size += 1 + 1;
  }

  // bool router = 5;
  if (this->router() != 0) {
    total_size += 1 + 1;
  }

  // bool v6 = 6;
  if (this->v6() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsNodeFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsNodeFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const LsNodeFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsNodeFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsNodeFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsNodeFlags)
    MergeFrom(*source);
  }
}

void LsNodeFlags::MergeFrom(const LsNodeFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsNodeFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.overload() != 0) {
    _internal_set_overload(from._internal_overload());
  }
  if (from.attached() != 0) {
    _internal_set_attached(from._internal_attached());
  }
  if (from.external() != 0) {
    _internal_set_external(from._internal_external());
  }
  if (from.abr() != 0) {
    _internal_set_abr(from._internal_abr());
  }
  if (from.router() != 0) {
    _internal_set_router(from._internal_router());
  }
  if (from.v6() != 0) {
    _internal_set_v6(from._internal_v6());
  }
}

void LsNodeFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsNodeFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsNodeFlags::CopyFrom(const LsNodeFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsNodeFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsNodeFlags::IsInitialized() const {
  return true;
}

void LsNodeFlags::InternalSwap(LsNodeFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsNodeFlags, v6_)
      + sizeof(LsNodeFlags::v6_)
      - PROTOBUF_FIELD_OFFSET(LsNodeFlags, overload_)>(
          reinterpret_cast<char*>(&overload_),
          reinterpret_cast<char*>(&other->overload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsNodeFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsIGPFlags::InitAsDefaultInstance() {
}
class LsIGPFlags::_Internal {
 public:
};

LsIGPFlags::LsIGPFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsIGPFlags)
}
LsIGPFlags::LsIGPFlags(const LsIGPFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&down_, &from.down_,
    static_cast<size_t>(reinterpret_cast<char*>(&propagate_nssa_) -
    reinterpret_cast<char*>(&down_)) + sizeof(propagate_nssa_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsIGPFlags)
}

void LsIGPFlags::SharedCtor() {
  ::memset(&down_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagate_nssa_) -
      reinterpret_cast<char*>(&down_)) + sizeof(propagate_nssa_));
}

LsIGPFlags::~LsIGPFlags() {
  // @@protoc_insertion_point(destructor:apipb.LsIGPFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsIGPFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsIGPFlags::ArenaDtor(void* object) {
  LsIGPFlags* _this = reinterpret_cast< LsIGPFlags* >(object);
  (void)_this;
}
void LsIGPFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsIGPFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsIGPFlags& LsIGPFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsIGPFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsIGPFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsIGPFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&down_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagate_nssa_) -
      reinterpret_cast<char*>(&down_)) + sizeof(propagate_nssa_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsIGPFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool down = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_unicast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          no_unicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool propagate_nssa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          propagate_nssa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsIGPFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsIGPFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool down = 1;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_down(), target);
  }

  // bool no_unicast = 2;
  if (this->no_unicast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_no_unicast(), target);
  }

  // bool local_address = 3;
  if (this->local_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_local_address(), target);
  }

  // bool propagate_nssa = 4;
  if (this->propagate_nssa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_propagate_nssa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsIGPFlags)
  return target;
}

size_t LsIGPFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsIGPFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool down = 1;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool no_unicast = 2;
  if (this->no_unicast() != 0) {
    total_size += 1 + 1;
  }

  // bool local_address = 3;
  if (this->local_address() != 0) {
    total_size += 1 + 1;
  }

  // bool propagate_nssa = 4;
  if (this->propagate_nssa() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsIGPFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsIGPFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const LsIGPFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsIGPFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsIGPFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsIGPFlags)
    MergeFrom(*source);
  }
}

void LsIGPFlags::MergeFrom(const LsIGPFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsIGPFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
  if (from.no_unicast() != 0) {
    _internal_set_no_unicast(from._internal_no_unicast());
  }
  if (from.local_address() != 0) {
    _internal_set_local_address(from._internal_local_address());
  }
  if (from.propagate_nssa() != 0) {
    _internal_set_propagate_nssa(from._internal_propagate_nssa());
  }
}

void LsIGPFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsIGPFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsIGPFlags::CopyFrom(const LsIGPFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsIGPFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsIGPFlags::IsInitialized() const {
  return true;
}

void LsIGPFlags::InternalSwap(LsIGPFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsIGPFlags, propagate_nssa_)
      + sizeof(LsIGPFlags::propagate_nssa_)
      - PROTOBUF_FIELD_OFFSET(LsIGPFlags, down_)>(
          reinterpret_cast<char*>(&down_),
          reinterpret_cast<char*>(&other->down_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsIGPFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsSrRange::InitAsDefaultInstance() {
}
class LsSrRange::_Internal {
 public:
};

LsSrRange::LsSrRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsSrRange)
}
LsSrRange::LsSrRange(const LsSrRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsSrRange)
}

void LsSrRange::SharedCtor() {
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

LsSrRange::~LsSrRange() {
  // @@protoc_insertion_point(destructor:apipb.LsSrRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsSrRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsSrRange::ArenaDtor(void* object) {
  LsSrRange* _this = reinterpret_cast< LsSrRange* >(object);
  (void)_this;
}
void LsSrRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsSrRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsSrRange& LsSrRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsSrRange_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsSrRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsSrRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsSrRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsSrRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsSrRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 begin = 1;
  if (this->begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_begin(), target);
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsSrRange)
  return target;
}

size_t LsSrRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsSrRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_begin());
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsSrRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsSrRange)
  GOOGLE_DCHECK_NE(&from, this);
  const LsSrRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsSrRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsSrRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsSrRange)
    MergeFrom(*source);
  }
}

void LsSrRange::MergeFrom(const LsSrRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsSrRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin() != 0) {
    _internal_set_begin(from._internal_begin());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void LsSrRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsSrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsSrRange::CopyFrom(const LsSrRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsSrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsSrRange::IsInitialized() const {
  return true;
}

void LsSrRange::InternalSwap(LsSrRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsSrRange, end_)
      + sizeof(LsSrRange::end_)
      - PROTOBUF_FIELD_OFFSET(LsSrRange, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsSrRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsSrCapabilities::InitAsDefaultInstance() {
}
class LsSrCapabilities::_Internal {
 public:
};

LsSrCapabilities::LsSrCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsSrCapabilities)
}
LsSrCapabilities::LsSrCapabilities(const LsSrCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ipv4_supported_, &from.ipv4_supported_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv6_supported_) -
    reinterpret_cast<char*>(&ipv4_supported_)) + sizeof(ipv6_supported_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsSrCapabilities)
}

void LsSrCapabilities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsSrCapabilities_attribute_2eproto.base);
  ::memset(&ipv4_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv6_supported_) -
      reinterpret_cast<char*>(&ipv4_supported_)) + sizeof(ipv6_supported_));
}

LsSrCapabilities::~LsSrCapabilities() {
  // @@protoc_insertion_point(destructor:apipb.LsSrCapabilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsSrCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsSrCapabilities::ArenaDtor(void* object) {
  LsSrCapabilities* _this = reinterpret_cast< LsSrCapabilities* >(object);
  (void)_this;
}
void LsSrCapabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsSrCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsSrCapabilities& LsSrCapabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsSrCapabilities_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsSrCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsSrCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  ::memset(&ipv4_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv6_supported_) -
      reinterpret_cast<char*>(&ipv4_supported_)) + sizeof(ipv6_supported_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsSrCapabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ipv4_supported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ipv4_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ipv6_supported = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ipv6_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.LsSrRange ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsSrCapabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsSrCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ipv4_supported = 1;
  if (this->ipv4_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ipv4_supported(), target);
  }

  // bool ipv6_supported = 2;
  if (this->ipv6_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ipv6_supported(), target);
  }

  // repeated .apipb.LsSrRange ranges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsSrCapabilities)
  return target;
}

size_t LsSrCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsSrCapabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.LsSrRange ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool ipv4_supported = 1;
  if (this->ipv4_supported() != 0) {
    total_size += 1 + 1;
  }

  // bool ipv6_supported = 2;
  if (this->ipv6_supported() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsSrCapabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsSrCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const LsSrCapabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsSrCapabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsSrCapabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsSrCapabilities)
    MergeFrom(*source);
  }
}

void LsSrCapabilities::MergeFrom(const LsSrCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsSrCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  if (from.ipv4_supported() != 0) {
    _internal_set_ipv4_supported(from._internal_ipv4_supported());
  }
  if (from.ipv6_supported() != 0) {
    _internal_set_ipv6_supported(from._internal_ipv6_supported());
  }
}

void LsSrCapabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsSrCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsSrCapabilities::CopyFrom(const LsSrCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsSrCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsSrCapabilities::IsInitialized() const {
  return true;
}

void LsSrCapabilities::InternalSwap(LsSrCapabilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsSrCapabilities, ipv6_supported_)
      + sizeof(LsSrCapabilities::ipv6_supported_)
      - PROTOBUF_FIELD_OFFSET(LsSrCapabilities, ipv4_supported_)>(
          reinterpret_cast<char*>(&ipv4_supported_),
          reinterpret_cast<char*>(&other->ipv4_supported_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsSrCapabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsSrLocalBlock::InitAsDefaultInstance() {
}
class LsSrLocalBlock::_Internal {
 public:
};

LsSrLocalBlock::LsSrLocalBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsSrLocalBlock)
}
LsSrLocalBlock::LsSrLocalBlock(const LsSrLocalBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.LsSrLocalBlock)
}

void LsSrLocalBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsSrLocalBlock_attribute_2eproto.base);
}

LsSrLocalBlock::~LsSrLocalBlock() {
  // @@protoc_insertion_point(destructor:apipb.LsSrLocalBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsSrLocalBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsSrLocalBlock::ArenaDtor(void* object) {
  LsSrLocalBlock* _this = reinterpret_cast< LsSrLocalBlock* >(object);
  (void)_this;
}
void LsSrLocalBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsSrLocalBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsSrLocalBlock& LsSrLocalBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsSrLocalBlock_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsSrLocalBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsSrLocalBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsSrLocalBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.LsSrRange ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsSrLocalBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsSrLocalBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.LsSrRange ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsSrLocalBlock)
  return target;
}

size_t LsSrLocalBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsSrLocalBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.LsSrRange ranges = 1;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsSrLocalBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsSrLocalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const LsSrLocalBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsSrLocalBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsSrLocalBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsSrLocalBlock)
    MergeFrom(*source);
  }
}

void LsSrLocalBlock::MergeFrom(const LsSrLocalBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsSrLocalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
}

void LsSrLocalBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsSrLocalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsSrLocalBlock::CopyFrom(const LsSrLocalBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsSrLocalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsSrLocalBlock::IsInitialized() const {
  return true;
}

void LsSrLocalBlock::InternalSwap(LsSrLocalBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsSrLocalBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributeNode::InitAsDefaultInstance() {
  ::apipb::_LsAttributeNode_default_instance_._instance.get_mutable()->flags_ = const_cast< ::apipb::LsNodeFlags*>(
      ::apipb::LsNodeFlags::internal_default_instance());
  ::apipb::_LsAttributeNode_default_instance_._instance.get_mutable()->sr_capabilities_ = const_cast< ::apipb::LsSrCapabilities*>(
      ::apipb::LsSrCapabilities::internal_default_instance());
  ::apipb::_LsAttributeNode_default_instance_._instance.get_mutable()->sr_local_block_ = const_cast< ::apipb::LsSrLocalBlock*>(
      ::apipb::LsSrLocalBlock::internal_default_instance());
}
class LsAttributeNode::_Internal {
 public:
  static const ::apipb::LsNodeFlags& flags(const LsAttributeNode* msg);
  static const ::apipb::LsSrCapabilities& sr_capabilities(const LsAttributeNode* msg);
  static const ::apipb::LsSrLocalBlock& sr_local_block(const LsAttributeNode* msg);
};

const ::apipb::LsNodeFlags&
LsAttributeNode::_Internal::flags(const LsAttributeNode* msg) {
  return *msg->flags_;
}
const ::apipb::LsSrCapabilities&
LsAttributeNode::_Internal::sr_capabilities(const LsAttributeNode* msg) {
  return *msg->sr_capabilities_;
}
const ::apipb::LsSrLocalBlock&
LsAttributeNode::_Internal::sr_local_block(const LsAttributeNode* msg) {
  return *msg->sr_local_block_;
}
LsAttributeNode::LsAttributeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsAttributeNode)
}
LsAttributeNode::LsAttributeNode(const LsAttributeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id().empty()) {
    local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_router_id(),
      GetArena());
  }
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id_v6().empty()) {
    local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_router_id_v6(),
      GetArena());
  }
  isis_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_isis_area().empty()) {
    isis_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_isis_area(),
      GetArena());
  }
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opaque().empty()) {
    opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opaque(),
      GetArena());
  }
  sr_algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sr_algorithms().empty()) {
    sr_algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sr_algorithms(),
      GetArena());
  }
  if (from._internal_has_flags()) {
    flags_ = new ::apipb::LsNodeFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from._internal_has_sr_capabilities()) {
    sr_capabilities_ = new ::apipb::LsSrCapabilities(*from.sr_capabilities_);
  } else {
    sr_capabilities_ = nullptr;
  }
  if (from._internal_has_sr_local_block()) {
    sr_local_block_ = new ::apipb::LsSrLocalBlock(*from.sr_local_block_);
  } else {
    sr_local_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsAttributeNode)
}

void LsAttributeNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributeNode_attribute_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isis_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sr_algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_local_block_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(sr_local_block_));
}

LsAttributeNode::~LsAttributeNode() {
  // @@protoc_insertion_point(destructor:apipb.LsAttributeNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsAttributeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isis_area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sr_algorithms_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete sr_capabilities_;
  if (this != internal_default_instance()) delete sr_local_block_;
}

void LsAttributeNode::ArenaDtor(void* object) {
  LsAttributeNode* _this = reinterpret_cast< LsAttributeNode* >(object);
  (void)_this;
}
void LsAttributeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsAttributeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributeNode& LsAttributeNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributeNode_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsAttributeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_v6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  isis_area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opaque_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sr_algorithms_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArena() == nullptr && sr_capabilities_ != nullptr) {
    delete sr_capabilities_;
  }
  sr_capabilities_ = nullptr;
  if (GetArena() == nullptr && sr_local_block_ != nullptr) {
    delete sr_local_block_;
  }
  sr_local_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsAttributeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeNode.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsNodeFlags flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeNode.local_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id_v6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_local_router_id_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeNode.local_router_id_v6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes isis_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_isis_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes opaque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_opaque();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsSrCapabilities sr_capabilities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sr_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sr_algorithms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sr_algorithms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsSrLocalBlock sr_local_block = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sr_local_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsAttributeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .apipb.LsNodeFlags flags = 2;
  if (this->has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flags(this), target, stream);
  }

  // string local_router_id = 3;
  if (this->local_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id().data(), static_cast<int>(this->_internal_local_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeNode.local_router_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_router_id(), target);
  }

  // string local_router_id_v6 = 4;
  if (this->local_router_id_v6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id_v6().data(), static_cast<int>(this->_internal_local_router_id_v6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeNode.local_router_id_v6");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_local_router_id_v6(), target);
  }

  // bytes isis_area = 5;
  if (this->isis_area().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_isis_area(), target);
  }

  // bytes opaque = 6;
  if (this->opaque().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_opaque(), target);
  }

  // .apipb.LsSrCapabilities sr_capabilities = 7;
  if (this->has_sr_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sr_capabilities(this), target, stream);
  }

  // bytes sr_algorithms = 8;
  if (this->sr_algorithms().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_sr_algorithms(), target);
  }

  // .apipb.LsSrLocalBlock sr_local_block = 9;
  if (this->has_sr_local_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sr_local_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsAttributeNode)
  return target;
}

size_t LsAttributeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsAttributeNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string local_router_id = 3;
  if (this->local_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id());
  }

  // string local_router_id_v6 = 4;
  if (this->local_router_id_v6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id_v6());
  }

  // bytes isis_area = 5;
  if (this->isis_area().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_isis_area());
  }

  // bytes opaque = 6;
  if (this->opaque().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque());
  }

  // bytes sr_algorithms = 8;
  if (this->sr_algorithms().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sr_algorithms());
  }

  // .apipb.LsNodeFlags flags = 2;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .apipb.LsSrCapabilities sr_capabilities = 7;
  if (this->has_sr_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sr_capabilities_);
  }

  // .apipb.LsSrLocalBlock sr_local_block = 9;
  if (this->has_sr_local_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sr_local_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributeNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsAttributeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributeNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsAttributeNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsAttributeNode)
    MergeFrom(*source);
  }
}

void LsAttributeNode::MergeFrom(const LsAttributeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsAttributeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.local_router_id().size() > 0) {
    _internal_set_local_router_id(from._internal_local_router_id());
  }
  if (from.local_router_id_v6().size() > 0) {
    _internal_set_local_router_id_v6(from._internal_local_router_id_v6());
  }
  if (from.isis_area().size() > 0) {
    _internal_set_isis_area(from._internal_isis_area());
  }
  if (from.opaque().size() > 0) {
    _internal_set_opaque(from._internal_opaque());
  }
  if (from.sr_algorithms().size() > 0) {
    _internal_set_sr_algorithms(from._internal_sr_algorithms());
  }
  if (from.has_flags()) {
    _internal_mutable_flags()->::apipb::LsNodeFlags::MergeFrom(from._internal_flags());
  }
  if (from.has_sr_capabilities()) {
    _internal_mutable_sr_capabilities()->::apipb::LsSrCapabilities::MergeFrom(from._internal_sr_capabilities());
  }
  if (from.has_sr_local_block()) {
    _internal_mutable_sr_local_block()->::apipb::LsSrLocalBlock::MergeFrom(from._internal_sr_local_block());
  }
}

void LsAttributeNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsAttributeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributeNode::CopyFrom(const LsAttributeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsAttributeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributeNode::IsInitialized() const {
  return true;
}

void LsAttributeNode::InternalSwap(LsAttributeNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_.Swap(&other->local_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_v6_.Swap(&other->local_router_id_v6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  isis_area_.Swap(&other->isis_area_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opaque_.Swap(&other->opaque_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sr_algorithms_.Swap(&other->sr_algorithms_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsAttributeNode, sr_local_block_)
      + sizeof(LsAttributeNode::sr_local_block_)
      - PROTOBUF_FIELD_OFFSET(LsAttributeNode, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributeNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributeLink::InitAsDefaultInstance() {
}
class LsAttributeLink::_Internal {
 public:
};

LsAttributeLink::LsAttributeLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unreserved_bandwidth_(arena),
  srlgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsAttributeLink)
}
LsAttributeLink::LsAttributeLink(const LsAttributeLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unreserved_bandwidth_(from.unreserved_bandwidth_),
      srlgs_(from.srlgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id().empty()) {
    local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_router_id(),
      GetArena());
  }
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id_v6().empty()) {
    local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_router_id_v6(),
      GetArena());
  }
  remote_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_router_id().empty()) {
    remote_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_router_id(),
      GetArena());
  }
  remote_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_router_id_v6().empty()) {
    remote_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_router_id_v6(),
      GetArena());
  }
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opaque().empty()) {
    opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opaque(),
      GetArena());
  }
  ::memcpy(&admin_group_, &from.admin_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&sr_adjacency_sid_) -
    reinterpret_cast<char*>(&admin_group_)) + sizeof(sr_adjacency_sid_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsAttributeLink)
}

void LsAttributeLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributeLink_attribute_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&admin_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_adjacency_sid_) -
      reinterpret_cast<char*>(&admin_group_)) + sizeof(sr_adjacency_sid_));
}

LsAttributeLink::~LsAttributeLink() {
  // @@protoc_insertion_point(destructor:apipb.LsAttributeLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsAttributeLink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsAttributeLink::ArenaDtor(void* object) {
  LsAttributeLink* _this = reinterpret_cast< LsAttributeLink* >(object);
  (void)_this;
}
void LsAttributeLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsAttributeLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributeLink& LsAttributeLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributeLink_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributeLink::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsAttributeLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unreserved_bandwidth_.Clear();
  srlgs_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_v6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_router_id_v6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opaque_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&admin_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_adjacency_sid_) -
      reinterpret_cast<char*>(&admin_group_)) + sizeof(sr_adjacency_sid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsAttributeLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeLink.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_local_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeLink.local_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id_v6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_router_id_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeLink.local_router_id_v6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_router_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_remote_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeLink.remote_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_router_id_v6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_remote_router_id_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.LsAttributeLink.remote_router_id_v6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          admin_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 default_te_metric = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          default_te_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 igp_metric = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          igp_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes opaque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_opaque();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reservable_bandwidth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          reservable_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float unreserved_bandwidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unreserved_bandwidth(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_unreserved_bandwidth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 sr_adjacency_sid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sr_adjacency_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 srlgs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srlgs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_srlgs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributeLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsAttributeLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeLink.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string local_router_id = 2;
  if (this->local_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id().data(), static_cast<int>(this->_internal_local_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeLink.local_router_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_router_id(), target);
  }

  // string local_router_id_v6 = 3;
  if (this->local_router_id_v6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id_v6().data(), static_cast<int>(this->_internal_local_router_id_v6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeLink.local_router_id_v6");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_router_id_v6(), target);
  }

  // string remote_router_id = 4;
  if (this->remote_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_router_id().data(), static_cast<int>(this->_internal_remote_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeLink.remote_router_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remote_router_id(), target);
  }

  // string remote_router_id_v6 = 5;
  if (this->remote_router_id_v6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_router_id_v6().data(), static_cast<int>(this->_internal_remote_router_id_v6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.LsAttributeLink.remote_router_id_v6");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_remote_router_id_v6(), target);
  }

  // uint32 admin_group = 6;
  if (this->admin_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_admin_group(), target);
  }

  // uint32 default_te_metric = 7;
  if (this->default_te_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_default_te_metric(), target);
  }

  // uint32 igp_metric = 8;
  if (this->igp_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_igp_metric(), target);
  }

  // bytes opaque = 9;
  if (this->opaque().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_opaque(), target);
  }

  // float bandwidth = 10;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_bandwidth(), target);
  }

  // float reservable_bandwidth = 11;
  if (!(this->reservable_bandwidth() <= 0 && this->reservable_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_reservable_bandwidth(), target);
  }

  // repeated float unreserved_bandwidth = 12;
  if (this->_internal_unreserved_bandwidth_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_unreserved_bandwidth(), target);
  }

  // uint32 sr_adjacency_sid = 13;
  if (this->sr_adjacency_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sr_adjacency_sid(), target);
  }

  // repeated uint32 srlgs = 14;
  {
    int byte_size = _srlgs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_srlgs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsAttributeLink)
  return target;
}

size_t LsAttributeLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsAttributeLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float unreserved_bandwidth = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unreserved_bandwidth_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unreserved_bandwidth_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 srlgs = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->srlgs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _srlgs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string local_router_id = 2;
  if (this->local_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id());
  }

  // string local_router_id_v6 = 3;
  if (this->local_router_id_v6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id_v6());
  }

  // string remote_router_id = 4;
  if (this->remote_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_router_id());
  }

  // string remote_router_id_v6 = 5;
  if (this->remote_router_id_v6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_router_id_v6());
  }

  // bytes opaque = 9;
  if (this->opaque().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque());
  }

  // uint32 admin_group = 6;
  if (this->admin_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin_group());
  }

  // uint32 default_te_metric = 7;
  if (this->default_te_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_te_metric());
  }

  // uint32 igp_metric = 8;
  if (this->igp_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_igp_metric());
  }

  // float bandwidth = 10;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    total_size += 1 + 4;
  }

  // float reservable_bandwidth = 11;
  if (!(this->reservable_bandwidth() <= 0 && this->reservable_bandwidth() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 sr_adjacency_sid = 13;
  if (this->sr_adjacency_sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sr_adjacency_sid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributeLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsAttributeLink)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributeLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributeLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsAttributeLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsAttributeLink)
    MergeFrom(*source);
  }
}

void LsAttributeLink::MergeFrom(const LsAttributeLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsAttributeLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unreserved_bandwidth_.MergeFrom(from.unreserved_bandwidth_);
  srlgs_.MergeFrom(from.srlgs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.local_router_id().size() > 0) {
    _internal_set_local_router_id(from._internal_local_router_id());
  }
  if (from.local_router_id_v6().size() > 0) {
    _internal_set_local_router_id_v6(from._internal_local_router_id_v6());
  }
  if (from.remote_router_id().size() > 0) {
    _internal_set_remote_router_id(from._internal_remote_router_id());
  }
  if (from.remote_router_id_v6().size() > 0) {
    _internal_set_remote_router_id_v6(from._internal_remote_router_id_v6());
  }
  if (from.opaque().size() > 0) {
    _internal_set_opaque(from._internal_opaque());
  }
  if (from.admin_group() != 0) {
    _internal_set_admin_group(from._internal_admin_group());
  }
  if (from.default_te_metric() != 0) {
    _internal_set_default_te_metric(from._internal_default_te_metric());
  }
  if (from.igp_metric() != 0) {
    _internal_set_igp_metric(from._internal_igp_metric());
  }
  if (!(from.bandwidth() <= 0 && from.bandwidth() >= 0)) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  if (!(from.reservable_bandwidth() <= 0 && from.reservable_bandwidth() >= 0)) {
    _internal_set_reservable_bandwidth(from._internal_reservable_bandwidth());
  }
  if (from.sr_adjacency_sid() != 0) {
    _internal_set_sr_adjacency_sid(from._internal_sr_adjacency_sid());
  }
}

void LsAttributeLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsAttributeLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributeLink::CopyFrom(const LsAttributeLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsAttributeLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributeLink::IsInitialized() const {
  return true;
}

void LsAttributeLink::InternalSwap(LsAttributeLink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unreserved_bandwidth_.InternalSwap(&other->unreserved_bandwidth_);
  srlgs_.InternalSwap(&other->srlgs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_.Swap(&other->local_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_router_id_v6_.Swap(&other->local_router_id_v6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_router_id_.Swap(&other->remote_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_router_id_v6_.Swap(&other->remote_router_id_v6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opaque_.Swap(&other->opaque_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsAttributeLink, sr_adjacency_sid_)
      + sizeof(LsAttributeLink::sr_adjacency_sid_)
      - PROTOBUF_FIELD_OFFSET(LsAttributeLink, admin_group_)>(
          reinterpret_cast<char*>(&admin_group_),
          reinterpret_cast<char*>(&other->admin_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributeLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributePrefix::InitAsDefaultInstance() {
  ::apipb::_LsAttributePrefix_default_instance_._instance.get_mutable()->igp_flags_ = const_cast< ::apipb::LsIGPFlags*>(
      ::apipb::LsIGPFlags::internal_default_instance());
}
class LsAttributePrefix::_Internal {
 public:
  static const ::apipb::LsIGPFlags& igp_flags(const LsAttributePrefix* msg);
};

const ::apipb::LsIGPFlags&
LsAttributePrefix::_Internal::igp_flags(const LsAttributePrefix* msg) {
  return *msg->igp_flags_;
}
LsAttributePrefix::LsAttributePrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsAttributePrefix)
}
LsAttributePrefix::LsAttributePrefix(const LsAttributePrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opaque().empty()) {
    opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opaque(),
      GetArena());
  }
  if (from._internal_has_igp_flags()) {
    igp_flags_ = new ::apipb::LsIGPFlags(*from.igp_flags_);
  } else {
    igp_flags_ = nullptr;
  }
  sr_prefix_sid_ = from.sr_prefix_sid_;
  // @@protoc_insertion_point(copy_constructor:apipb.LsAttributePrefix)
}

void LsAttributePrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributePrefix_attribute_2eproto.base);
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&igp_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_prefix_sid_) -
      reinterpret_cast<char*>(&igp_flags_)) + sizeof(sr_prefix_sid_));
}

LsAttributePrefix::~LsAttributePrefix() {
  // @@protoc_insertion_point(destructor:apipb.LsAttributePrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsAttributePrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  opaque_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete igp_flags_;
}

void LsAttributePrefix::ArenaDtor(void* object) {
  LsAttributePrefix* _this = reinterpret_cast< LsAttributePrefix* >(object);
  (void)_this;
}
void LsAttributePrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsAttributePrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributePrefix& LsAttributePrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributePrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsAttributePrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaque_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && igp_flags_ != nullptr) {
    delete igp_flags_;
  }
  igp_flags_ = nullptr;
  sr_prefix_sid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsAttributePrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsIGPFlags igp_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_igp_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes opaque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_opaque();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sr_prefix_sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sr_prefix_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributePrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsAttributePrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsIGPFlags igp_flags = 1;
  if (this->has_igp_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::igp_flags(this), target, stream);
  }

  // bytes opaque = 2;
  if (this->opaque().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_opaque(), target);
  }

  // uint32 sr_prefix_sid = 3;
  if (this->sr_prefix_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sr_prefix_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsAttributePrefix)
  return target;
}

size_t LsAttributePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsAttributePrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes opaque = 2;
  if (this->opaque().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque());
  }

  // .apipb.LsIGPFlags igp_flags = 1;
  if (this->has_igp_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *igp_flags_);
  }

  // uint32 sr_prefix_sid = 3;
  if (this->sr_prefix_sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sr_prefix_sid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributePrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsAttributePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributePrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributePrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsAttributePrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsAttributePrefix)
    MergeFrom(*source);
  }
}

void LsAttributePrefix::MergeFrom(const LsAttributePrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsAttributePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opaque().size() > 0) {
    _internal_set_opaque(from._internal_opaque());
  }
  if (from.has_igp_flags()) {
    _internal_mutable_igp_flags()->::apipb::LsIGPFlags::MergeFrom(from._internal_igp_flags());
  }
  if (from.sr_prefix_sid() != 0) {
    _internal_set_sr_prefix_sid(from._internal_sr_prefix_sid());
  }
}

void LsAttributePrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsAttributePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributePrefix::CopyFrom(const LsAttributePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsAttributePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributePrefix::IsInitialized() const {
  return true;
}

void LsAttributePrefix::InternalSwap(LsAttributePrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  opaque_.Swap(&other->opaque_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsAttributePrefix, sr_prefix_sid_)
      + sizeof(LsAttributePrefix::sr_prefix_sid_)
      - PROTOBUF_FIELD_OFFSET(LsAttributePrefix, igp_flags_)>(
          reinterpret_cast<char*>(&igp_flags_),
          reinterpret_cast<char*>(&other->igp_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributePrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsBgpPeerSegmentSIDFlags::InitAsDefaultInstance() {
}
class LsBgpPeerSegmentSIDFlags::_Internal {
 public:
};

LsBgpPeerSegmentSIDFlags::LsBgpPeerSegmentSIDFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsBgpPeerSegmentSIDFlags)
}
LsBgpPeerSegmentSIDFlags::LsBgpPeerSegmentSIDFlags(const LsBgpPeerSegmentSIDFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
    reinterpret_cast<char*>(&value_)) + sizeof(persistent_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsBgpPeerSegmentSIDFlags)
}

void LsBgpPeerSegmentSIDFlags::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&value_)) + sizeof(persistent_));
}

LsBgpPeerSegmentSIDFlags::~LsBgpPeerSegmentSIDFlags() {
  // @@protoc_insertion_point(destructor:apipb.LsBgpPeerSegmentSIDFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsBgpPeerSegmentSIDFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LsBgpPeerSegmentSIDFlags::ArenaDtor(void* object) {
  LsBgpPeerSegmentSIDFlags* _this = reinterpret_cast< LsBgpPeerSegmentSIDFlags* >(object);
  (void)_this;
}
void LsBgpPeerSegmentSIDFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsBgpPeerSegmentSIDFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsBgpPeerSegmentSIDFlags& LsBgpPeerSegmentSIDFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsBgpPeerSegmentSIDFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsBgpPeerSegmentSIDFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsBgpPeerSegmentSIDFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&value_)) + sizeof(persistent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsBgpPeerSegmentSIDFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool backup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool persistent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsBgpPeerSegmentSIDFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsBgpPeerSegmentSIDFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  // bool local = 2;
  if (this->local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_local(), target);
  }

  // bool backup = 3;
  if (this->backup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_backup(), target);
  }

  // bool persistent = 4;
  if (this->persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsBgpPeerSegmentSIDFlags)
  return target;
}

size_t LsBgpPeerSegmentSIDFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsBgpPeerSegmentSIDFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  // bool local = 2;
  if (this->local() != 0) {
    total_size += 1 + 1;
  }

  // bool backup = 3;
  if (this->backup() != 0) {
    total_size += 1 + 1;
  }

  // bool persistent = 4;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsBgpPeerSegmentSIDFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsBgpPeerSegmentSIDFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const LsBgpPeerSegmentSIDFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsBgpPeerSegmentSIDFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsBgpPeerSegmentSIDFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsBgpPeerSegmentSIDFlags)
    MergeFrom(*source);
  }
}

void LsBgpPeerSegmentSIDFlags::MergeFrom(const LsBgpPeerSegmentSIDFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsBgpPeerSegmentSIDFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.local() != 0) {
    _internal_set_local(from._internal_local());
  }
  if (from.backup() != 0) {
    _internal_set_backup(from._internal_backup());
  }
  if (from.persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
}

void LsBgpPeerSegmentSIDFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsBgpPeerSegmentSIDFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsBgpPeerSegmentSIDFlags::CopyFrom(const LsBgpPeerSegmentSIDFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsBgpPeerSegmentSIDFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsBgpPeerSegmentSIDFlags::IsInitialized() const {
  return true;
}

void LsBgpPeerSegmentSIDFlags::InternalSwap(LsBgpPeerSegmentSIDFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsBgpPeerSegmentSIDFlags, persistent_)
      + sizeof(LsBgpPeerSegmentSIDFlags::persistent_)
      - PROTOBUF_FIELD_OFFSET(LsBgpPeerSegmentSIDFlags, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsBgpPeerSegmentSIDFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsBgpPeerSegmentSID::InitAsDefaultInstance() {
  ::apipb::_LsBgpPeerSegmentSID_default_instance_._instance.get_mutable()->flags_ = const_cast< ::apipb::LsBgpPeerSegmentSIDFlags*>(
      ::apipb::LsBgpPeerSegmentSIDFlags::internal_default_instance());
}
class LsBgpPeerSegmentSID::_Internal {
 public:
  static const ::apipb::LsBgpPeerSegmentSIDFlags& flags(const LsBgpPeerSegmentSID* msg);
};

const ::apipb::LsBgpPeerSegmentSIDFlags&
LsBgpPeerSegmentSID::_Internal::flags(const LsBgpPeerSegmentSID* msg) {
  return *msg->flags_;
}
LsBgpPeerSegmentSID::LsBgpPeerSegmentSID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsBgpPeerSegmentSID)
}
LsBgpPeerSegmentSID::LsBgpPeerSegmentSID(const LsBgpPeerSegmentSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flags()) {
    flags_ = new ::apipb::LsBgpPeerSegmentSIDFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&sid_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(sid_));
  // @@protoc_insertion_point(copy_constructor:apipb.LsBgpPeerSegmentSID)
}

void LsBgpPeerSegmentSID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsBgpPeerSegmentSID_attribute_2eproto.base);
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(sid_));
}

LsBgpPeerSegmentSID::~LsBgpPeerSegmentSID() {
  // @@protoc_insertion_point(destructor:apipb.LsBgpPeerSegmentSID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsBgpPeerSegmentSID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flags_;
}

void LsBgpPeerSegmentSID::ArenaDtor(void* object) {
  LsBgpPeerSegmentSID* _this = reinterpret_cast< LsBgpPeerSegmentSID* >(object);
  (void)_this;
}
void LsBgpPeerSegmentSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsBgpPeerSegmentSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsBgpPeerSegmentSID& LsBgpPeerSegmentSID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsBgpPeerSegmentSID_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsBgpPeerSegmentSID::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsBgpPeerSegmentSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sid_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(sid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsBgpPeerSegmentSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsBgpPeerSegmentSIDFlags flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsBgpPeerSegmentSID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsBgpPeerSegmentSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsBgpPeerSegmentSIDFlags flags = 1;
  if (this->has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flags(this), target, stream);
  }

  // uint32 weight = 2;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weight(), target);
  }

  // uint32 sid = 3;
  if (this->sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsBgpPeerSegmentSID)
  return target;
}

size_t LsBgpPeerSegmentSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsBgpPeerSegmentSID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsBgpPeerSegmentSIDFlags flags = 1;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // uint32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());
  }

  // uint32 sid = 3;
  if (this->sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsBgpPeerSegmentSID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsBgpPeerSegmentSID)
  GOOGLE_DCHECK_NE(&from, this);
  const LsBgpPeerSegmentSID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsBgpPeerSegmentSID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsBgpPeerSegmentSID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsBgpPeerSegmentSID)
    MergeFrom(*source);
  }
}

void LsBgpPeerSegmentSID::MergeFrom(const LsBgpPeerSegmentSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsBgpPeerSegmentSID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flags()) {
    _internal_mutable_flags()->::apipb::LsBgpPeerSegmentSIDFlags::MergeFrom(from._internal_flags());
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from.sid() != 0) {
    _internal_set_sid(from._internal_sid());
  }
}

void LsBgpPeerSegmentSID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsBgpPeerSegmentSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsBgpPeerSegmentSID::CopyFrom(const LsBgpPeerSegmentSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsBgpPeerSegmentSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsBgpPeerSegmentSID::IsInitialized() const {
  return true;
}

void LsBgpPeerSegmentSID::InternalSwap(LsBgpPeerSegmentSID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsBgpPeerSegmentSID, sid_)
      + sizeof(LsBgpPeerSegmentSID::sid_)
      - PROTOBUF_FIELD_OFFSET(LsBgpPeerSegmentSID, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsBgpPeerSegmentSID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributeBgpPeerSegment::InitAsDefaultInstance() {
  ::apipb::_LsAttributeBgpPeerSegment_default_instance_._instance.get_mutable()->bgp_peer_node_sid_ = const_cast< ::apipb::LsBgpPeerSegmentSID*>(
      ::apipb::LsBgpPeerSegmentSID::internal_default_instance());
  ::apipb::_LsAttributeBgpPeerSegment_default_instance_._instance.get_mutable()->bgp_peer_adjacency_sid_ = const_cast< ::apipb::LsBgpPeerSegmentSID*>(
      ::apipb::LsBgpPeerSegmentSID::internal_default_instance());
  ::apipb::_LsAttributeBgpPeerSegment_default_instance_._instance.get_mutable()->bgp_peer_set_sid_ = const_cast< ::apipb::LsBgpPeerSegmentSID*>(
      ::apipb::LsBgpPeerSegmentSID::internal_default_instance());
}
class LsAttributeBgpPeerSegment::_Internal {
 public:
  static const ::apipb::LsBgpPeerSegmentSID& bgp_peer_node_sid(const LsAttributeBgpPeerSegment* msg);
  static const ::apipb::LsBgpPeerSegmentSID& bgp_peer_adjacency_sid(const LsAttributeBgpPeerSegment* msg);
  static const ::apipb::LsBgpPeerSegmentSID& bgp_peer_set_sid(const LsAttributeBgpPeerSegment* msg);
};

const ::apipb::LsBgpPeerSegmentSID&
LsAttributeBgpPeerSegment::_Internal::bgp_peer_node_sid(const LsAttributeBgpPeerSegment* msg) {
  return *msg->bgp_peer_node_sid_;
}
const ::apipb::LsBgpPeerSegmentSID&
LsAttributeBgpPeerSegment::_Internal::bgp_peer_adjacency_sid(const LsAttributeBgpPeerSegment* msg) {
  return *msg->bgp_peer_adjacency_sid_;
}
const ::apipb::LsBgpPeerSegmentSID&
LsAttributeBgpPeerSegment::_Internal::bgp_peer_set_sid(const LsAttributeBgpPeerSegment* msg) {
  return *msg->bgp_peer_set_sid_;
}
LsAttributeBgpPeerSegment::LsAttributeBgpPeerSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsAttributeBgpPeerSegment)
}
LsAttributeBgpPeerSegment::LsAttributeBgpPeerSegment(const LsAttributeBgpPeerSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bgp_peer_node_sid()) {
    bgp_peer_node_sid_ = new ::apipb::LsBgpPeerSegmentSID(*from.bgp_peer_node_sid_);
  } else {
    bgp_peer_node_sid_ = nullptr;
  }
  if (from._internal_has_bgp_peer_adjacency_sid()) {
    bgp_peer_adjacency_sid_ = new ::apipb::LsBgpPeerSegmentSID(*from.bgp_peer_adjacency_sid_);
  } else {
    bgp_peer_adjacency_sid_ = nullptr;
  }
  if (from._internal_has_bgp_peer_set_sid()) {
    bgp_peer_set_sid_ = new ::apipb::LsBgpPeerSegmentSID(*from.bgp_peer_set_sid_);
  } else {
    bgp_peer_set_sid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsAttributeBgpPeerSegment)
}

void LsAttributeBgpPeerSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributeBgpPeerSegment_attribute_2eproto.base);
  ::memset(&bgp_peer_node_sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgp_peer_set_sid_) -
      reinterpret_cast<char*>(&bgp_peer_node_sid_)) + sizeof(bgp_peer_set_sid_));
}

LsAttributeBgpPeerSegment::~LsAttributeBgpPeerSegment() {
  // @@protoc_insertion_point(destructor:apipb.LsAttributeBgpPeerSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsAttributeBgpPeerSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bgp_peer_node_sid_;
  if (this != internal_default_instance()) delete bgp_peer_adjacency_sid_;
  if (this != internal_default_instance()) delete bgp_peer_set_sid_;
}

void LsAttributeBgpPeerSegment::ArenaDtor(void* object) {
  LsAttributeBgpPeerSegment* _this = reinterpret_cast< LsAttributeBgpPeerSegment* >(object);
  (void)_this;
}
void LsAttributeBgpPeerSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsAttributeBgpPeerSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributeBgpPeerSegment& LsAttributeBgpPeerSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributeBgpPeerSegment_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributeBgpPeerSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsAttributeBgpPeerSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bgp_peer_node_sid_ != nullptr) {
    delete bgp_peer_node_sid_;
  }
  bgp_peer_node_sid_ = nullptr;
  if (GetArena() == nullptr && bgp_peer_adjacency_sid_ != nullptr) {
    delete bgp_peer_adjacency_sid_;
  }
  bgp_peer_adjacency_sid_ = nullptr;
  if (GetArena() == nullptr && bgp_peer_set_sid_ != nullptr) {
    delete bgp_peer_set_sid_;
  }
  bgp_peer_set_sid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsAttributeBgpPeerSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsBgpPeerSegmentSID bgp_peer_node_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgp_peer_node_sid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsBgpPeerSegmentSID bgp_peer_adjacency_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgp_peer_adjacency_sid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsBgpPeerSegmentSID bgp_peer_set_sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgp_peer_set_sid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributeBgpPeerSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsAttributeBgpPeerSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsBgpPeerSegmentSID bgp_peer_node_sid = 1;
  if (this->has_bgp_peer_node_sid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bgp_peer_node_sid(this), target, stream);
  }

  // .apipb.LsBgpPeerSegmentSID bgp_peer_adjacency_sid = 2;
  if (this->has_bgp_peer_adjacency_sid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bgp_peer_adjacency_sid(this), target, stream);
  }

  // .apipb.LsBgpPeerSegmentSID bgp_peer_set_sid = 3;
  if (this->has_bgp_peer_set_sid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bgp_peer_set_sid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsAttributeBgpPeerSegment)
  return target;
}

size_t LsAttributeBgpPeerSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsAttributeBgpPeerSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsBgpPeerSegmentSID bgp_peer_node_sid = 1;
  if (this->has_bgp_peer_node_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgp_peer_node_sid_);
  }

  // .apipb.LsBgpPeerSegmentSID bgp_peer_adjacency_sid = 2;
  if (this->has_bgp_peer_adjacency_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgp_peer_adjacency_sid_);
  }

  // .apipb.LsBgpPeerSegmentSID bgp_peer_set_sid = 3;
  if (this->has_bgp_peer_set_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgp_peer_set_sid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributeBgpPeerSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsAttributeBgpPeerSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributeBgpPeerSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributeBgpPeerSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsAttributeBgpPeerSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsAttributeBgpPeerSegment)
    MergeFrom(*source);
  }
}

void LsAttributeBgpPeerSegment::MergeFrom(const LsAttributeBgpPeerSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsAttributeBgpPeerSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bgp_peer_node_sid()) {
    _internal_mutable_bgp_peer_node_sid()->::apipb::LsBgpPeerSegmentSID::MergeFrom(from._internal_bgp_peer_node_sid());
  }
  if (from.has_bgp_peer_adjacency_sid()) {
    _internal_mutable_bgp_peer_adjacency_sid()->::apipb::LsBgpPeerSegmentSID::MergeFrom(from._internal_bgp_peer_adjacency_sid());
  }
  if (from.has_bgp_peer_set_sid()) {
    _internal_mutable_bgp_peer_set_sid()->::apipb::LsBgpPeerSegmentSID::MergeFrom(from._internal_bgp_peer_set_sid());
  }
}

void LsAttributeBgpPeerSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsAttributeBgpPeerSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributeBgpPeerSegment::CopyFrom(const LsAttributeBgpPeerSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsAttributeBgpPeerSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributeBgpPeerSegment::IsInitialized() const {
  return true;
}

void LsAttributeBgpPeerSegment::InternalSwap(LsAttributeBgpPeerSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsAttributeBgpPeerSegment, bgp_peer_set_sid_)
      + sizeof(LsAttributeBgpPeerSegment::bgp_peer_set_sid_)
      - PROTOBUF_FIELD_OFFSET(LsAttributeBgpPeerSegment, bgp_peer_node_sid_)>(
          reinterpret_cast<char*>(&bgp_peer_node_sid_),
          reinterpret_cast<char*>(&other->bgp_peer_node_sid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributeBgpPeerSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttribute::InitAsDefaultInstance() {
  ::apipb::_LsAttribute_default_instance_._instance.get_mutable()->node_ = const_cast< ::apipb::LsAttributeNode*>(
      ::apipb::LsAttributeNode::internal_default_instance());
  ::apipb::_LsAttribute_default_instance_._instance.get_mutable()->link_ = const_cast< ::apipb::LsAttributeLink*>(
      ::apipb::LsAttributeLink::internal_default_instance());
  ::apipb::_LsAttribute_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::apipb::LsAttributePrefix*>(
      ::apipb::LsAttributePrefix::internal_default_instance());
  ::apipb::_LsAttribute_default_instance_._instance.get_mutable()->bgp_peer_segment_ = const_cast< ::apipb::LsAttributeBgpPeerSegment*>(
      ::apipb::LsAttributeBgpPeerSegment::internal_default_instance());
}
class LsAttribute::_Internal {
 public:
  static const ::apipb::LsAttributeNode& node(const LsAttribute* msg);
  static const ::apipb::LsAttributeLink& link(const LsAttribute* msg);
  static const ::apipb::LsAttributePrefix& prefix(const LsAttribute* msg);
  static const ::apipb::LsAttributeBgpPeerSegment& bgp_peer_segment(const LsAttribute* msg);
};

const ::apipb::LsAttributeNode&
LsAttribute::_Internal::node(const LsAttribute* msg) {
  return *msg->node_;
}
const ::apipb::LsAttributeLink&
LsAttribute::_Internal::link(const LsAttribute* msg) {
  return *msg->link_;
}
const ::apipb::LsAttributePrefix&
LsAttribute::_Internal::prefix(const LsAttribute* msg) {
  return *msg->prefix_;
}
const ::apipb::LsAttributeBgpPeerSegment&
LsAttribute::_Internal::bgp_peer_segment(const LsAttribute* msg) {
  return *msg->bgp_peer_segment_;
}
LsAttribute::LsAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LsAttribute)
}
LsAttribute::LsAttribute(const LsAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::apipb::LsAttributeNode(*from.node_);
  } else {
    node_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::apipb::LsAttributeLink(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_prefix()) {
    prefix_ = new ::apipb::LsAttributePrefix(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_bgp_peer_segment()) {
    bgp_peer_segment_ = new ::apipb::LsAttributeBgpPeerSegment(*from.bgp_peer_segment_);
  } else {
    bgp_peer_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LsAttribute)
}

void LsAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttribute_attribute_2eproto.base);
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgp_peer_segment_) -
      reinterpret_cast<char*>(&node_)) + sizeof(bgp_peer_segment_));
}

LsAttribute::~LsAttribute() {
  // @@protoc_insertion_point(destructor:apipb.LsAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LsAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete bgp_peer_segment_;
}

void LsAttribute::ArenaDtor(void* object) {
  LsAttribute* _this = reinterpret_cast< LsAttribute* >(object);
  (void)_this;
}
void LsAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LsAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttribute& LsAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LsAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArena() == nullptr && bgp_peer_segment_ != nullptr) {
    delete bgp_peer_segment_;
  }
  bgp_peer_segment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LsAttributeNode node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsAttributeLink link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsAttributePrefix prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LsAttributeBgpPeerSegment bgp_peer_segment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgp_peer_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LsAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LsAttributeNode node = 1;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  // .apipb.LsAttributeLink link = 2;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link(this), target, stream);
  }

  // .apipb.LsAttributePrefix prefix = 3;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prefix(this), target, stream);
  }

  // .apipb.LsAttributeBgpPeerSegment bgp_peer_segment = 4;
  if (this->has_bgp_peer_segment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bgp_peer_segment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LsAttribute)
  return target;
}

size_t LsAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LsAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LsAttributeNode node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // .apipb.LsAttributeLink link = 2;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .apipb.LsAttributePrefix prefix = 3;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .apipb.LsAttributeBgpPeerSegment bgp_peer_segment = 4;
  if (this->has_bgp_peer_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgp_peer_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LsAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LsAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LsAttribute)
    MergeFrom(*source);
  }
}

void LsAttribute::MergeFrom(const LsAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LsAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    _internal_mutable_node()->::apipb::LsAttributeNode::MergeFrom(from._internal_node());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::apipb::LsAttributeLink::MergeFrom(from._internal_link());
  }
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::apipb::LsAttributePrefix::MergeFrom(from._internal_prefix());
  }
  if (from.has_bgp_peer_segment()) {
    _internal_mutable_bgp_peer_segment()->::apipb::LsAttributeBgpPeerSegment::MergeFrom(from._internal_bgp_peer_segment());
  }
}

void LsAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LsAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttribute::CopyFrom(const LsAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LsAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttribute::IsInitialized() const {
  return true;
}

void LsAttribute::InternalSwap(LsAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LsAttribute, bgp_peer_segment_)
      + sizeof(LsAttribute::bgp_peer_segment_)
      - PROTOBUF_FIELD_OFFSET(LsAttribute, node_)>(
          reinterpret_cast<char*>(&node_),
          reinterpret_cast<char*>(&other->node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownAttribute::InitAsDefaultInstance() {
}
class UnknownAttribute::_Internal {
 public:
};

UnknownAttribute::UnknownAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UnknownAttribute)
}
UnknownAttribute::UnknownAttribute(const UnknownAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apipb.UnknownAttribute)
}

void UnknownAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnknownAttribute_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(type_));
}

UnknownAttribute::~UnknownAttribute() {
  // @@protoc_insertion_point(destructor:apipb.UnknownAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnknownAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnknownAttribute::ArenaDtor(void* object) {
  UnknownAttribute* _this = reinterpret_cast< UnknownAttribute* >(object);
  (void)_this;
}
void UnknownAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownAttribute& UnknownAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void UnknownAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UnknownAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UnknownAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UnknownAttribute)
  return target;
}

size_t UnknownAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UnknownAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UnknownAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UnknownAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UnknownAttribute)
    MergeFrom(*source);
  }
}

void UnknownAttribute::MergeFrom(const UnknownAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UnknownAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UnknownAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UnknownAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownAttribute::CopyFrom(const UnknownAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UnknownAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAttribute::IsInitialized() const {
  return true;
}

void UnknownAttribute::InternalSwap(UnknownAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnknownAttribute, type_)
      + sizeof(UnknownAttribute::type_)
      - PROTOBUF_FIELD_OFFSET(UnknownAttribute, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRv6StructureSubSubTLV::InitAsDefaultInstance() {
}
class SRv6StructureSubSubTLV::_Internal {
 public:
};

SRv6StructureSubSubTLV::SRv6StructureSubSubTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6StructureSubSubTLV)
}
SRv6StructureSubSubTLV::SRv6StructureSubSubTLV(const SRv6StructureSubSubTLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&locator_block_length_, &from.locator_block_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&transposition_offset_) -
    reinterpret_cast<char*>(&locator_block_length_)) + sizeof(transposition_offset_));
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6StructureSubSubTLV)
}

void SRv6StructureSubSubTLV::SharedCtor() {
  ::memset(&locator_block_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transposition_offset_) -
      reinterpret_cast<char*>(&locator_block_length_)) + sizeof(transposition_offset_));
}

SRv6StructureSubSubTLV::~SRv6StructureSubSubTLV() {
  // @@protoc_insertion_point(destructor:apipb.SRv6StructureSubSubTLV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6StructureSubSubTLV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRv6StructureSubSubTLV::ArenaDtor(void* object) {
  SRv6StructureSubSubTLV* _this = reinterpret_cast< SRv6StructureSubSubTLV* >(object);
  (void)_this;
}
void SRv6StructureSubSubTLV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6StructureSubSubTLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6StructureSubSubTLV& SRv6StructureSubSubTLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6StructureSubSubTLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6StructureSubSubTLV::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6StructureSubSubTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&locator_block_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transposition_offset_) -
      reinterpret_cast<char*>(&locator_block_length_)) + sizeof(transposition_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6StructureSubSubTLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 locator_block_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          locator_block_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 locator_node_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locator_node_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 function_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          function_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 argument_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          argument_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 transposition_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          transposition_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 transposition_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          transposition_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6StructureSubSubTLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6StructureSubSubTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 locator_block_length = 1;
  if (this->locator_block_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_locator_block_length(), target);
  }

  // uint32 locator_node_length = 2;
  if (this->locator_node_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locator_node_length(), target);
  }

  // uint32 function_length = 3;
  if (this->function_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_function_length(), target);
  }

  // uint32 argument_length = 4;
  if (this->argument_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_argument_length(), target);
  }

  // uint32 transposition_length = 5;
  if (this->transposition_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transposition_length(), target);
  }

  // uint32 transposition_offset = 6;
  if (this->transposition_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_transposition_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6StructureSubSubTLV)
  return target;
}

size_t SRv6StructureSubSubTLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6StructureSubSubTLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 locator_block_length = 1;
  if (this->locator_block_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_locator_block_length());
  }

  // uint32 locator_node_length = 2;
  if (this->locator_node_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_locator_node_length());
  }

  // uint32 function_length = 3;
  if (this->function_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_length());
  }

  // uint32 argument_length = 4;
  if (this->argument_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_argument_length());
  }

  // uint32 transposition_length = 5;
  if (this->transposition_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transposition_length());
  }

  // uint32 transposition_offset = 6;
  if (this->transposition_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transposition_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6StructureSubSubTLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6StructureSubSubTLV)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6StructureSubSubTLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6StructureSubSubTLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6StructureSubSubTLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6StructureSubSubTLV)
    MergeFrom(*source);
  }
}

void SRv6StructureSubSubTLV::MergeFrom(const SRv6StructureSubSubTLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6StructureSubSubTLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.locator_block_length() != 0) {
    _internal_set_locator_block_length(from._internal_locator_block_length());
  }
  if (from.locator_node_length() != 0) {
    _internal_set_locator_node_length(from._internal_locator_node_length());
  }
  if (from.function_length() != 0) {
    _internal_set_function_length(from._internal_function_length());
  }
  if (from.argument_length() != 0) {
    _internal_set_argument_length(from._internal_argument_length());
  }
  if (from.transposition_length() != 0) {
    _internal_set_transposition_length(from._internal_transposition_length());
  }
  if (from.transposition_offset() != 0) {
    _internal_set_transposition_offset(from._internal_transposition_offset());
  }
}

void SRv6StructureSubSubTLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6StructureSubSubTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6StructureSubSubTLV::CopyFrom(const SRv6StructureSubSubTLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6StructureSubSubTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6StructureSubSubTLV::IsInitialized() const {
  return true;
}

void SRv6StructureSubSubTLV::InternalSwap(SRv6StructureSubSubTLV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRv6StructureSubSubTLV, transposition_offset_)
      + sizeof(SRv6StructureSubSubTLV::transposition_offset_)
      - PROTOBUF_FIELD_OFFSET(SRv6StructureSubSubTLV, locator_block_length_)>(
          reinterpret_cast<char*>(&locator_block_length_),
          reinterpret_cast<char*>(&other->locator_block_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6StructureSubSubTLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRv6SIDFlags::InitAsDefaultInstance() {
}
class SRv6SIDFlags::_Internal {
 public:
};

SRv6SIDFlags::SRv6SIDFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6SIDFlags)
}
SRv6SIDFlags::SRv6SIDFlags(const SRv6SIDFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_1_ = from.flag_1_;
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6SIDFlags)
}

void SRv6SIDFlags::SharedCtor() {
  flag_1_ = false;
}

SRv6SIDFlags::~SRv6SIDFlags() {
  // @@protoc_insertion_point(destructor:apipb.SRv6SIDFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6SIDFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRv6SIDFlags::ArenaDtor(void* object) {
  SRv6SIDFlags* _this = reinterpret_cast< SRv6SIDFlags* >(object);
  (void)_this;
}
void SRv6SIDFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6SIDFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6SIDFlags& SRv6SIDFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6SIDFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6SIDFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6SIDFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_1_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6SIDFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool flag_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6SIDFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6SIDFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool flag_1 = 1;
  if (this->flag_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6SIDFlags)
  return target;
}

size_t SRv6SIDFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6SIDFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool flag_1 = 1;
  if (this->flag_1() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6SIDFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6SIDFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6SIDFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6SIDFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6SIDFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6SIDFlags)
    MergeFrom(*source);
  }
}

void SRv6SIDFlags::MergeFrom(const SRv6SIDFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6SIDFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flag_1() != 0) {
    _internal_set_flag_1(from._internal_flag_1());
  }
}

void SRv6SIDFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6SIDFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6SIDFlags::CopyFrom(const SRv6SIDFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6SIDFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6SIDFlags::IsInitialized() const {
  return true;
}

void SRv6SIDFlags::InternalSwap(SRv6SIDFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flag_1_, other->flag_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6SIDFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRv6TLV::InitAsDefaultInstance() {
}
class SRv6TLV::_Internal {
 public:
};

void SRv6TLV::clear_tlv() {
  tlv_.Clear();
}
SRv6TLV::SRv6TLV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlv_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6TLV)
}
SRv6TLV::SRv6TLV(const SRv6TLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlv_(from.tlv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6TLV)
}

void SRv6TLV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRv6TLV_attribute_2eproto.base);
}

SRv6TLV::~SRv6TLV() {
  // @@protoc_insertion_point(destructor:apipb.SRv6TLV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6TLV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRv6TLV::ArenaDtor(void* object) {
  SRv6TLV* _this = reinterpret_cast< SRv6TLV* >(object);
  (void)_this;
}
void SRv6TLV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6TLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6TLV& SRv6TLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6TLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6TLV::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6TLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlv_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6TLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any tlv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6TLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6TLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlv = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tlv(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6TLV)
  return target;
}

size_t SRv6TLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6TLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlv = 1;
  total_size += 1UL * this->_internal_tlv_size();
  for (const auto& msg : this->tlv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6TLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6TLV)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6TLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6TLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6TLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6TLV)
    MergeFrom(*source);
  }
}

void SRv6TLV::MergeFrom(const SRv6TLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6TLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlv_.MergeFrom(from.tlv_);
}

void SRv6TLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6TLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6TLV::CopyFrom(const SRv6TLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6TLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6TLV::IsInitialized() const {
  return true;
}

void SRv6TLV::InternalSwap(SRv6TLV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlv_.InternalSwap(&other->tlv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6TLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse() {}
SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::MergeFrom(const SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SRv6InformationSubTLV::InitAsDefaultInstance() {
  ::apipb::_SRv6InformationSubTLV_default_instance_._instance.get_mutable()->flags_ = const_cast< ::apipb::SRv6SIDFlags*>(
      ::apipb::SRv6SIDFlags::internal_default_instance());
}
class SRv6InformationSubTLV::_Internal {
 public:
  static const ::apipb::SRv6SIDFlags& flags(const SRv6InformationSubTLV* msg);
};

const ::apipb::SRv6SIDFlags&
SRv6InformationSubTLV::_Internal::flags(const SRv6InformationSubTLV* msg) {
  return *msg->flags_;
}
SRv6InformationSubTLV::SRv6InformationSubTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_sub_tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6InformationSubTLV)
}
SRv6InformationSubTLV::SRv6InformationSubTLV(const SRv6InformationSubTLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sub_sub_tlvs_.MergeFrom(from.sub_sub_tlvs_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sid().empty()) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sid(),
      GetArena());
  }
  if (from._internal_has_flags()) {
    flags_ = new ::apipb::SRv6SIDFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  endpoint_behavior_ = from.endpoint_behavior_;
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6InformationSubTLV)
}

void SRv6InformationSubTLV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRv6InformationSubTLV_attribute_2eproto.base);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endpoint_behavior_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(endpoint_behavior_));
}

SRv6InformationSubTLV::~SRv6InformationSubTLV() {
  // @@protoc_insertion_point(destructor:apipb.SRv6InformationSubTLV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6InformationSubTLV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flags_;
}

void SRv6InformationSubTLV::ArenaDtor(void* object) {
  SRv6InformationSubTLV* _this = reinterpret_cast< SRv6InformationSubTLV* >(object);
  (void)_this;
}
void SRv6InformationSubTLV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6InformationSubTLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6InformationSubTLV& SRv6InformationSubTLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6InformationSubTLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6InformationSubTLV::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6InformationSubTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_sub_tlvs_.Clear();
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  endpoint_behavior_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6InformationSubTLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.SRv6SIDFlags flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 endpoint_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endpoint_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .apipb.SRv6TLV> sub_sub_tlvs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sub_sub_tlvs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6InformationSubTLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6InformationSubTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sid = 1;
  if (this->sid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // .apipb.SRv6SIDFlags flags = 2;
  if (this->has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flags(this), target, stream);
  }

  // uint32 endpoint_behavior = 3;
  if (this->endpoint_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_endpoint_behavior(), target);
  }

  // map<uint32, .apipb.SRv6TLV> sub_sub_tlvs = 4;
  if (!this->_internal_sub_sub_tlvs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sub_sub_tlvs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sub_sub_tlvs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
          it = this->_internal_sub_sub_tlvs().begin();
          it != this->_internal_sub_sub_tlvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
          it = this->_internal_sub_sub_tlvs().begin();
          it != this->_internal_sub_sub_tlvs().end(); ++it) {
        target = SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6InformationSubTLV)
  return target;
}

size_t SRv6InformationSubTLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6InformationSubTLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .apipb.SRv6TLV> sub_sub_tlvs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sub_sub_tlvs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
      it = this->_internal_sub_sub_tlvs().begin();
      it != this->_internal_sub_sub_tlvs().end(); ++it) {
    total_size += SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes sid = 1;
  if (this->sid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // .apipb.SRv6SIDFlags flags = 2;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // uint32 endpoint_behavior = 3;
  if (this->endpoint_behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endpoint_behavior());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6InformationSubTLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6InformationSubTLV)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6InformationSubTLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6InformationSubTLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6InformationSubTLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6InformationSubTLV)
    MergeFrom(*source);
  }
}

void SRv6InformationSubTLV::MergeFrom(const SRv6InformationSubTLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6InformationSubTLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_sub_tlvs_.MergeFrom(from.sub_sub_tlvs_);
  if (from.sid().size() > 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.has_flags()) {
    _internal_mutable_flags()->::apipb::SRv6SIDFlags::MergeFrom(from._internal_flags());
  }
  if (from.endpoint_behavior() != 0) {
    _internal_set_endpoint_behavior(from._internal_endpoint_behavior());
  }
}

void SRv6InformationSubTLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6InformationSubTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6InformationSubTLV::CopyFrom(const SRv6InformationSubTLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6InformationSubTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6InformationSubTLV::IsInitialized() const {
  return true;
}

void SRv6InformationSubTLV::InternalSwap(SRv6InformationSubTLV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sub_sub_tlvs_.Swap(&other->sub_sub_tlvs_);
  sid_.Swap(&other->sid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRv6InformationSubTLV, endpoint_behavior_)
      + sizeof(SRv6InformationSubTLV::endpoint_behavior_)
      - PROTOBUF_FIELD_OFFSET(SRv6InformationSubTLV, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6InformationSubTLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse() {}
SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::MergeFrom(const SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SRv6L3ServiceTLV::InitAsDefaultInstance() {
}
class SRv6L3ServiceTLV::_Internal {
 public:
};

SRv6L3ServiceTLV::SRv6L3ServiceTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6L3ServiceTLV)
}
SRv6L3ServiceTLV::SRv6L3ServiceTLV(const SRv6L3ServiceTLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sub_tlvs_.MergeFrom(from.sub_tlvs_);
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6L3ServiceTLV)
}

void SRv6L3ServiceTLV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRv6L3ServiceTLV_attribute_2eproto.base);
}

SRv6L3ServiceTLV::~SRv6L3ServiceTLV() {
  // @@protoc_insertion_point(destructor:apipb.SRv6L3ServiceTLV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6L3ServiceTLV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRv6L3ServiceTLV::ArenaDtor(void* object) {
  SRv6L3ServiceTLV* _this = reinterpret_cast< SRv6L3ServiceTLV* >(object);
  (void)_this;
}
void SRv6L3ServiceTLV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6L3ServiceTLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6L3ServiceTLV& SRv6L3ServiceTLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6L3ServiceTLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6L3ServiceTLV::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6L3ServiceTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_tlvs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6L3ServiceTLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sub_tlvs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6L3ServiceTLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6L3ServiceTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
  if (!this->_internal_sub_tlvs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sub_tlvs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sub_tlvs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
          it = this->_internal_sub_tlvs().begin();
          it != this->_internal_sub_tlvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
          it = this->_internal_sub_tlvs().begin();
          it != this->_internal_sub_tlvs().end(); ++it) {
        target = SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6L3ServiceTLV)
  return target;
}

size_t SRv6L3ServiceTLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6L3ServiceTLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sub_tlvs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
      it = this->_internal_sub_tlvs().begin();
      it != this->_internal_sub_tlvs().end(); ++it) {
    total_size += SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6L3ServiceTLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6L3ServiceTLV)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6L3ServiceTLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6L3ServiceTLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6L3ServiceTLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6L3ServiceTLV)
    MergeFrom(*source);
  }
}

void SRv6L3ServiceTLV::MergeFrom(const SRv6L3ServiceTLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6L3ServiceTLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_tlvs_.MergeFrom(from.sub_tlvs_);
}

void SRv6L3ServiceTLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6L3ServiceTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6L3ServiceTLV::CopyFrom(const SRv6L3ServiceTLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6L3ServiceTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6L3ServiceTLV::IsInitialized() const {
  return true;
}

void SRv6L3ServiceTLV::InternalSwap(SRv6L3ServiceTLV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sub_tlvs_.Swap(&other->sub_tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6L3ServiceTLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse() {}
SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::MergeFrom(const SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SRv6L2ServiceTLV::InitAsDefaultInstance() {
}
class SRv6L2ServiceTLV::_Internal {
 public:
};

SRv6L2ServiceTLV::SRv6L2ServiceTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SRv6L2ServiceTLV)
}
SRv6L2ServiceTLV::SRv6L2ServiceTLV(const SRv6L2ServiceTLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sub_tlvs_.MergeFrom(from.sub_tlvs_);
  // @@protoc_insertion_point(copy_constructor:apipb.SRv6L2ServiceTLV)
}

void SRv6L2ServiceTLV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRv6L2ServiceTLV_attribute_2eproto.base);
}

SRv6L2ServiceTLV::~SRv6L2ServiceTLV() {
  // @@protoc_insertion_point(destructor:apipb.SRv6L2ServiceTLV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRv6L2ServiceTLV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRv6L2ServiceTLV::ArenaDtor(void* object) {
  SRv6L2ServiceTLV* _this = reinterpret_cast< SRv6L2ServiceTLV* >(object);
  (void)_this;
}
void SRv6L2ServiceTLV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRv6L2ServiceTLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRv6L2ServiceTLV& SRv6L2ServiceTLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRv6L2ServiceTLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void SRv6L2ServiceTLV::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SRv6L2ServiceTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_tlvs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRv6L2ServiceTLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sub_tlvs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRv6L2ServiceTLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SRv6L2ServiceTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
  if (!this->_internal_sub_tlvs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sub_tlvs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sub_tlvs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
          it = this->_internal_sub_tlvs().begin();
          it != this->_internal_sub_tlvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
          it = this->_internal_sub_tlvs().begin();
          it != this->_internal_sub_tlvs().end(); ++it) {
        target = SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SRv6L2ServiceTLV)
  return target;
}

size_t SRv6L2ServiceTLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SRv6L2ServiceTLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sub_tlvs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >::const_iterator
      it = this->_internal_sub_tlvs().begin();
      it != this->_internal_sub_tlvs().end(); ++it) {
    total_size += SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRv6L2ServiceTLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SRv6L2ServiceTLV)
  GOOGLE_DCHECK_NE(&from, this);
  const SRv6L2ServiceTLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRv6L2ServiceTLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SRv6L2ServiceTLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SRv6L2ServiceTLV)
    MergeFrom(*source);
  }
}

void SRv6L2ServiceTLV::MergeFrom(const SRv6L2ServiceTLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SRv6L2ServiceTLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_tlvs_.MergeFrom(from.sub_tlvs_);
}

void SRv6L2ServiceTLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SRv6L2ServiceTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRv6L2ServiceTLV::CopyFrom(const SRv6L2ServiceTLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SRv6L2ServiceTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRv6L2ServiceTLV::IsInitialized() const {
  return true;
}

void SRv6L2ServiceTLV::InternalSwap(SRv6L2ServiceTLV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sub_tlvs_.Swap(&other->sub_tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRv6L2ServiceTLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrefixSID::InitAsDefaultInstance() {
}
class PrefixSID::_Internal {
 public:
};

void PrefixSID::clear_tlvs() {
  tlvs_.Clear();
}
PrefixSID::PrefixSID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PrefixSID)
}
PrefixSID::PrefixSID(const PrefixSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.PrefixSID)
}

void PrefixSID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrefixSID_attribute_2eproto.base);
}

PrefixSID::~PrefixSID() {
  // @@protoc_insertion_point(destructor:apipb.PrefixSID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrefixSID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrefixSID::ArenaDtor(void* object) {
  PrefixSID* _this = reinterpret_cast< PrefixSID* >(object);
  (void)_this;
}
void PrefixSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrefixSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrefixSID& PrefixSID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrefixSID_attribute_2eproto.base);
  return *internal_default_instance();
}


void PrefixSID::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PrefixSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefixSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefixSID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PrefixSID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PrefixSID)
  return target;
}

size_t PrefixSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PrefixSID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 1;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefixSID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PrefixSID)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefixSID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefixSID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PrefixSID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PrefixSID)
    MergeFrom(*source);
  }
}

void PrefixSID::MergeFrom(const PrefixSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PrefixSID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
}

void PrefixSID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PrefixSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefixSID::CopyFrom(const PrefixSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PrefixSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixSID::IsInitialized() const {
  return true;
}

void PrefixSID::InternalSwap(PrefixSID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefixSID::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace apipb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apipb::OriginAttribute* Arena::CreateMaybeMessage< ::apipb::OriginAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::OriginAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AsSegment* Arena::CreateMaybeMessage< ::apipb::AsSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AsSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AsPathAttribute* Arena::CreateMaybeMessage< ::apipb::AsPathAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AsPathAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::NextHopAttribute* Arena::CreateMaybeMessage< ::apipb::NextHopAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::NextHopAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MultiExitDiscAttribute* Arena::CreateMaybeMessage< ::apipb::MultiExitDiscAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MultiExitDiscAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LocalPrefAttribute* Arena::CreateMaybeMessage< ::apipb::LocalPrefAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LocalPrefAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AtomicAggregateAttribute* Arena::CreateMaybeMessage< ::apipb::AtomicAggregateAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AtomicAggregateAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AggregatorAttribute* Arena::CreateMaybeMessage< ::apipb::AggregatorAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AggregatorAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::CommunitiesAttribute* Arena::CreateMaybeMessage< ::apipb::CommunitiesAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::CommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::OriginatorIdAttribute* Arena::CreateMaybeMessage< ::apipb::OriginatorIdAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::OriginatorIdAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ClusterListAttribute* Arena::CreateMaybeMessage< ::apipb::ClusterListAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ClusterListAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::IPAddressPrefix* Arena::CreateMaybeMessage< ::apipb::IPAddressPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::IPAddressPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LabeledIPAddressPrefix* Arena::CreateMaybeMessage< ::apipb::LabeledIPAddressPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LabeledIPAddressPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EncapsulationNLRI* Arena::CreateMaybeMessage< ::apipb::EncapsulationNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EncapsulationNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteDistinguisherTwoOctetASN* Arena::CreateMaybeMessage< ::apipb::RouteDistinguisherTwoOctetASN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteDistinguisherTwoOctetASN >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteDistinguisherIPAddress* Arena::CreateMaybeMessage< ::apipb::RouteDistinguisherIPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteDistinguisherIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteDistinguisherFourOctetASN* Arena::CreateMaybeMessage< ::apipb::RouteDistinguisherFourOctetASN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteDistinguisherFourOctetASN >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EthernetSegmentIdentifier* Arena::CreateMaybeMessage< ::apipb::EthernetSegmentIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EthernetSegmentIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EVPNEthernetAutoDiscoveryRoute* Arena::CreateMaybeMessage< ::apipb::EVPNEthernetAutoDiscoveryRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EVPNEthernetAutoDiscoveryRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EVPNMACIPAdvertisementRoute* Arena::CreateMaybeMessage< ::apipb::EVPNMACIPAdvertisementRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EVPNMACIPAdvertisementRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EVPNInclusiveMulticastEthernetTagRoute* Arena::CreateMaybeMessage< ::apipb::EVPNInclusiveMulticastEthernetTagRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EVPNInclusiveMulticastEthernetTagRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EVPNEthernetSegmentRoute* Arena::CreateMaybeMessage< ::apipb::EVPNEthernetSegmentRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EVPNEthernetSegmentRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EVPNIPPrefixRoute* Arena::CreateMaybeMessage< ::apipb::EVPNIPPrefixRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EVPNIPPrefixRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EVPNIPMSIRoute* Arena::CreateMaybeMessage< ::apipb::EVPNIPMSIRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EVPNIPMSIRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRPolicyNLRI* Arena::CreateMaybeMessage< ::apipb::SRPolicyNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRPolicyNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LabeledVPNIPAddressPrefix* Arena::CreateMaybeMessage< ::apipb::LabeledVPNIPAddressPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LabeledVPNIPAddressPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteTargetMembershipNLRI* Arena::CreateMaybeMessage< ::apipb::RouteTargetMembershipNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteTargetMembershipNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::FlowSpecIPPrefix* Arena::CreateMaybeMessage< ::apipb::FlowSpecIPPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::FlowSpecIPPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::FlowSpecMAC* Arena::CreateMaybeMessage< ::apipb::FlowSpecMAC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::FlowSpecMAC >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::FlowSpecComponentItem* Arena::CreateMaybeMessage< ::apipb::FlowSpecComponentItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::FlowSpecComponentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::FlowSpecComponent* Arena::CreateMaybeMessage< ::apipb::FlowSpecComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::FlowSpecComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::FlowSpecNLRI* Arena::CreateMaybeMessage< ::apipb::FlowSpecNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::FlowSpecNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::VPNFlowSpecNLRI* Arena::CreateMaybeMessage< ::apipb::VPNFlowSpecNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::VPNFlowSpecNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::OpaqueNLRI* Arena::CreateMaybeMessage< ::apipb::OpaqueNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::OpaqueNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsNodeDescriptor* Arena::CreateMaybeMessage< ::apipb::LsNodeDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsNodeDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsLinkDescriptor* Arena::CreateMaybeMessage< ::apipb::LsLinkDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsLinkDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsPrefixDescriptor* Arena::CreateMaybeMessage< ::apipb::LsPrefixDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsPrefixDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsNodeNLRI* Arena::CreateMaybeMessage< ::apipb::LsNodeNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsNodeNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsLinkNLRI* Arena::CreateMaybeMessage< ::apipb::LsLinkNLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsLinkNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsPrefixV4NLRI* Arena::CreateMaybeMessage< ::apipb::LsPrefixV4NLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsPrefixV4NLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsPrefixV6NLRI* Arena::CreateMaybeMessage< ::apipb::LsPrefixV6NLRI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsPrefixV6NLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsAddrPrefix* Arena::CreateMaybeMessage< ::apipb::LsAddrPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsAddrPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MUPInterworkSegmentDiscoveryRoute* Arena::CreateMaybeMessage< ::apipb::MUPInterworkSegmentDiscoveryRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MUPInterworkSegmentDiscoveryRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MUPDirectSegmentDiscoveryRoute* Arena::CreateMaybeMessage< ::apipb::MUPDirectSegmentDiscoveryRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MUPDirectSegmentDiscoveryRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MUPType1SessionTransformedRoute* Arena::CreateMaybeMessage< ::apipb::MUPType1SessionTransformedRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MUPType1SessionTransformedRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MUPType2SessionTransformedRoute* Arena::CreateMaybeMessage< ::apipb::MUPType2SessionTransformedRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MUPType2SessionTransformedRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MpReachNLRIAttribute* Arena::CreateMaybeMessage< ::apipb::MpReachNLRIAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MpReachNLRIAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MpUnreachNLRIAttribute* Arena::CreateMaybeMessage< ::apipb::MpUnreachNLRIAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MpUnreachNLRIAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TwoOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::apipb::TwoOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TwoOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::IPv4AddressSpecificExtended* Arena::CreateMaybeMessage< ::apipb::IPv4AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::IPv4AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::FourOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::apipb::FourOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::FourOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LinkBandwidthExtended* Arena::CreateMaybeMessage< ::apipb::LinkBandwidthExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LinkBandwidthExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ValidationExtended* Arena::CreateMaybeMessage< ::apipb::ValidationExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ValidationExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ColorExtended* Arena::CreateMaybeMessage< ::apipb::ColorExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ColorExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EncapExtended* Arena::CreateMaybeMessage< ::apipb::EncapExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EncapExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DefaultGatewayExtended* Arena::CreateMaybeMessage< ::apipb::DefaultGatewayExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DefaultGatewayExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::OpaqueExtended* Arena::CreateMaybeMessage< ::apipb::OpaqueExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::OpaqueExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ESILabelExtended* Arena::CreateMaybeMessage< ::apipb::ESILabelExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ESILabelExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ESImportRouteTarget* Arena::CreateMaybeMessage< ::apipb::ESImportRouteTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ESImportRouteTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MacMobilityExtended* Arena::CreateMaybeMessage< ::apipb::MacMobilityExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MacMobilityExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouterMacExtended* Arena::CreateMaybeMessage< ::apipb::RouterMacExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouterMacExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TrafficRateExtended* Arena::CreateMaybeMessage< ::apipb::TrafficRateExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TrafficRateExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TrafficActionExtended* Arena::CreateMaybeMessage< ::apipb::TrafficActionExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TrafficActionExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RedirectTwoOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::apipb::RedirectTwoOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RedirectTwoOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RedirectIPv4AddressSpecificExtended* Arena::CreateMaybeMessage< ::apipb::RedirectIPv4AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RedirectIPv4AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RedirectFourOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::apipb::RedirectFourOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RedirectFourOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TrafficRemarkExtended* Arena::CreateMaybeMessage< ::apipb::TrafficRemarkExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TrafficRemarkExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MUPExtended* Arena::CreateMaybeMessage< ::apipb::MUPExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MUPExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UnknownExtended* Arena::CreateMaybeMessage< ::apipb::UnknownExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UnknownExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage< ::apipb::ExtendedCommunitiesAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ExtendedCommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::As4PathAttribute* Arena::CreateMaybeMessage< ::apipb::As4PathAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::As4PathAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::As4AggregatorAttribute* Arena::CreateMaybeMessage< ::apipb::As4AggregatorAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::As4AggregatorAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PmsiTunnelAttribute* Arena::CreateMaybeMessage< ::apipb::PmsiTunnelAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PmsiTunnelAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVEncapsulation* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVEncapsulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVEncapsulation >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVProtocol* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVColor* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVColor >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVSRPreference* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVSRPreference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVSRPreference >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVSRCandidatePathName* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVSRCandidatePathName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVSRCandidatePathName >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVSRPriority* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVSRPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVSRPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVSRBindingSID* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVSRBindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVSRBindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRBindingSID* Arena::CreateMaybeMessage< ::apipb::SRBindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRBindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6EndPointBehavior* Arena::CreateMaybeMessage< ::apipb::SRv6EndPointBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6EndPointBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6BindingSID* Arena::CreateMaybeMessage< ::apipb::SRv6BindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6BindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVSRENLP* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVSRENLP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVSRENLP >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRWeight* Arena::CreateMaybeMessage< ::apipb::SRWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SegmentFlags* Arena::CreateMaybeMessage< ::apipb::SegmentFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SegmentFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SegmentTypeA* Arena::CreateMaybeMessage< ::apipb::SegmentTypeA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SegmentTypeA >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SegmentTypeB* Arena::CreateMaybeMessage< ::apipb::SegmentTypeB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SegmentTypeB >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVSRSegmentList* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVSRSegmentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVSRSegmentList >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVEgressEndpoint* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVEgressEndpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVEgressEndpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVUDPDestPort* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVUDPDestPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVUDPDestPort >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapSubTLVUnknown* Arena::CreateMaybeMessage< ::apipb::TunnelEncapSubTLVUnknown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapSubTLVUnknown >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapTLV* Arena::CreateMaybeMessage< ::apipb::TunnelEncapTLV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapTLV >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TunnelEncapAttribute* Arena::CreateMaybeMessage< ::apipb::TunnelEncapAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TunnelEncapAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::IPv6AddressSpecificExtended* Arena::CreateMaybeMessage< ::apipb::IPv6AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::IPv6AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RedirectIPv6AddressSpecificExtended* Arena::CreateMaybeMessage< ::apipb::RedirectIPv6AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RedirectIPv6AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::IP6ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage< ::apipb::IP6ExtendedCommunitiesAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::IP6ExtendedCommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AigpTLVIGPMetric* Arena::CreateMaybeMessage< ::apipb::AigpTLVIGPMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AigpTLVIGPMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AigpTLVUnknown* Arena::CreateMaybeMessage< ::apipb::AigpTLVUnknown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AigpTLVUnknown >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AigpAttribute* Arena::CreateMaybeMessage< ::apipb::AigpAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AigpAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LargeCommunity* Arena::CreateMaybeMessage< ::apipb::LargeCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LargeCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LargeCommunitiesAttribute* Arena::CreateMaybeMessage< ::apipb::LargeCommunitiesAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LargeCommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsNodeFlags* Arena::CreateMaybeMessage< ::apipb::LsNodeFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsNodeFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsIGPFlags* Arena::CreateMaybeMessage< ::apipb::LsIGPFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsIGPFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsSrRange* Arena::CreateMaybeMessage< ::apipb::LsSrRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsSrRange >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsSrCapabilities* Arena::CreateMaybeMessage< ::apipb::LsSrCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsSrCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsSrLocalBlock* Arena::CreateMaybeMessage< ::apipb::LsSrLocalBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsSrLocalBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsAttributeNode* Arena::CreateMaybeMessage< ::apipb::LsAttributeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsAttributeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsAttributeLink* Arena::CreateMaybeMessage< ::apipb::LsAttributeLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsAttributeLink >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsAttributePrefix* Arena::CreateMaybeMessage< ::apipb::LsAttributePrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsAttributePrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsBgpPeerSegmentSIDFlags* Arena::CreateMaybeMessage< ::apipb::LsBgpPeerSegmentSIDFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsBgpPeerSegmentSIDFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsBgpPeerSegmentSID* Arena::CreateMaybeMessage< ::apipb::LsBgpPeerSegmentSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsBgpPeerSegmentSID >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsAttributeBgpPeerSegment* Arena::CreateMaybeMessage< ::apipb::LsAttributeBgpPeerSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsAttributeBgpPeerSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LsAttribute* Arena::CreateMaybeMessage< ::apipb::LsAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LsAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UnknownAttribute* Arena::CreateMaybeMessage< ::apipb::UnknownAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UnknownAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6StructureSubSubTLV* Arena::CreateMaybeMessage< ::apipb::SRv6StructureSubSubTLV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6StructureSubSubTLV >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6SIDFlags* Arena::CreateMaybeMessage< ::apipb::SRv6SIDFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6SIDFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6TLV* Arena::CreateMaybeMessage< ::apipb::SRv6TLV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6TLV >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6InformationSubTLV* Arena::CreateMaybeMessage< ::apipb::SRv6InformationSubTLV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6InformationSubTLV >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6L3ServiceTLV* Arena::CreateMaybeMessage< ::apipb::SRv6L3ServiceTLV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6L3ServiceTLV >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SRv6L2ServiceTLV* Arena::CreateMaybeMessage< ::apipb::SRv6L2ServiceTLV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SRv6L2ServiceTLV >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PrefixSID* Arena::CreateMaybeMessage< ::apipb::PrefixSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PrefixSID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
