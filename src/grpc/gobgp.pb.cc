// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp.proto

#include "gobgp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Actions_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddPaths_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AfiSafi_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyPolicy_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPathLength_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPrependAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunityAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Conditions_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Confederation_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultRouteDistance_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefinedSet_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Destination_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicNeighbor_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ebgp_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpMultihop_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Family_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Global_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GracefulRestart_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ibgp_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListBmpResponse_BmpStation_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPrefAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LongLivedGracefulRestart_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSet_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Messages_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpGracefulRestart_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NexthopAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Path_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Peer_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_PeerGroup_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupConf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Policy_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyAssignment_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prefix_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrefixLimit_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Queues_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPKIConf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPKIState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roa_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteReflector_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteSelectionOptions_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteServer_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteTargetMembership_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rpki_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Statement_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableLookupPrefix_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Timers_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimersConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimersState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transport_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TtlSecurity_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UseMultiplePaths_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Validation_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vrf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchEventRequest_Peer_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WatchEventRequest_Table_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchEventRequest_Table_Filter_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WatchEventResponse_PeerEvent_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WatchEventResponse_TableEvent_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace apipb {
class StartBgpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartBgpRequest> _instance;
} _StartBgpRequest_default_instance_;
class StopBgpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopBgpRequest> _instance;
} _StopBgpRequest_default_instance_;
class GetBgpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBgpRequest> _instance;
} _GetBgpRequest_default_instance_;
class GetBgpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBgpResponse> _instance;
} _GetBgpResponse_default_instance_;
class WatchEventRequest_PeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventRequest_Peer> _instance;
} _WatchEventRequest_Peer_default_instance_;
class WatchEventRequest_Table_FilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventRequest_Table_Filter> _instance;
} _WatchEventRequest_Table_Filter_default_instance_;
class WatchEventRequest_TableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventRequest_Table> _instance;
} _WatchEventRequest_Table_default_instance_;
class WatchEventRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventRequest> _instance;
} _WatchEventRequest_default_instance_;
class WatchEventResponse_PeerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventResponse_PeerEvent> _instance;
} _WatchEventResponse_PeerEvent_default_instance_;
class WatchEventResponse_TableEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventResponse_TableEvent> _instance;
} _WatchEventResponse_TableEvent_default_instance_;
class WatchEventResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchEventResponse> _instance;
  const ::apipb::WatchEventResponse_PeerEvent* peer_;
  const ::apipb::WatchEventResponse_TableEvent* table_;
} _WatchEventResponse_default_instance_;
class AddPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPeerRequest> _instance;
} _AddPeerRequest_default_instance_;
class DeletePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePeerRequest> _instance;
} _DeletePeerRequest_default_instance_;
class ListPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeerRequest> _instance;
} _ListPeerRequest_default_instance_;
class ListPeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeerResponse> _instance;
} _ListPeerResponse_default_instance_;
class UpdatePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerRequest> _instance;
} _UpdatePeerRequest_default_instance_;
class UpdatePeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerResponse> _instance;
} _UpdatePeerResponse_default_instance_;
class ResetPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetPeerRequest> _instance;
} _ResetPeerRequest_default_instance_;
class ShutdownPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownPeerRequest> _instance;
} _ShutdownPeerRequest_default_instance_;
class EnablePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnablePeerRequest> _instance;
} _EnablePeerRequest_default_instance_;
class DisablePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisablePeerRequest> _instance;
} _DisablePeerRequest_default_instance_;
class AddPeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPeerGroupRequest> _instance;
} _AddPeerGroupRequest_default_instance_;
class DeletePeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePeerGroupRequest> _instance;
} _DeletePeerGroupRequest_default_instance_;
class UpdatePeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerGroupRequest> _instance;
} _UpdatePeerGroupRequest_default_instance_;
class UpdatePeerGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerGroupResponse> _instance;
} _UpdatePeerGroupResponse_default_instance_;
class ListPeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeerGroupRequest> _instance;
} _ListPeerGroupRequest_default_instance_;
class ListPeerGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeerGroupResponse> _instance;
} _ListPeerGroupResponse_default_instance_;
class AddDynamicNeighborRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDynamicNeighborRequest> _instance;
} _AddDynamicNeighborRequest_default_instance_;
class DeleteDynamicNeighborRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDynamicNeighborRequest> _instance;
} _DeleteDynamicNeighborRequest_default_instance_;
class ListDynamicNeighborRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDynamicNeighborRequest> _instance;
} _ListDynamicNeighborRequest_default_instance_;
class ListDynamicNeighborResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDynamicNeighborResponse> _instance;
} _ListDynamicNeighborResponse_default_instance_;
class AddPathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathRequest> _instance;
} _AddPathRequest_default_instance_;
class AddPathResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathResponse> _instance;
} _AddPathResponse_default_instance_;
class DeletePathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePathRequest> _instance;
} _DeletePathRequest_default_instance_;
class TableLookupPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableLookupPrefix> _instance;
} _TableLookupPrefix_default_instance_;
class ListPathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPathRequest> _instance;
} _ListPathRequest_default_instance_;
class ListPathResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPathResponse> _instance;
} _ListPathResponse_default_instance_;
class AddPathStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathStreamRequest> _instance;
} _AddPathStreamRequest_default_instance_;
class GetTableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTableRequest> _instance;
} _GetTableRequest_default_instance_;
class GetTableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTableResponse> _instance;
} _GetTableResponse_default_instance_;
class AddVrfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddVrfRequest> _instance;
} _AddVrfRequest_default_instance_;
class DeleteVrfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVrfRequest> _instance;
} _DeleteVrfRequest_default_instance_;
class ListVrfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVrfRequest> _instance;
} _ListVrfRequest_default_instance_;
class ListVrfResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVrfResponse> _instance;
} _ListVrfResponse_default_instance_;
class AddPolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPolicyRequest> _instance;
} _AddPolicyRequest_default_instance_;
class DeletePolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePolicyRequest> _instance;
} _DeletePolicyRequest_default_instance_;
class ListPolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyRequest> _instance;
} _ListPolicyRequest_default_instance_;
class ListPolicyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyResponse> _instance;
} _ListPolicyResponse_default_instance_;
class SetPoliciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPoliciesRequest> _instance;
} _SetPoliciesRequest_default_instance_;
class AddDefinedSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDefinedSetRequest> _instance;
} _AddDefinedSetRequest_default_instance_;
class DeleteDefinedSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDefinedSetRequest> _instance;
} _DeleteDefinedSetRequest_default_instance_;
class ListDefinedSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDefinedSetRequest> _instance;
} _ListDefinedSetRequest_default_instance_;
class ListDefinedSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDefinedSetResponse> _instance;
} _ListDefinedSetResponse_default_instance_;
class AddStatementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddStatementRequest> _instance;
} _AddStatementRequest_default_instance_;
class DeleteStatementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStatementRequest> _instance;
} _DeleteStatementRequest_default_instance_;
class ListStatementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStatementRequest> _instance;
} _ListStatementRequest_default_instance_;
class ListStatementResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStatementResponse> _instance;
} _ListStatementResponse_default_instance_;
class AddPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPolicyAssignmentRequest> _instance;
} _AddPolicyAssignmentRequest_default_instance_;
class DeletePolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePolicyAssignmentRequest> _instance;
} _DeletePolicyAssignmentRequest_default_instance_;
class ListPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyAssignmentRequest> _instance;
} _ListPolicyAssignmentRequest_default_instance_;
class ListPolicyAssignmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyAssignmentResponse> _instance;
} _ListPolicyAssignmentResponse_default_instance_;
class SetPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPolicyAssignmentRequest> _instance;
} _SetPolicyAssignmentRequest_default_instance_;
class AddRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRpkiRequest> _instance;
} _AddRpkiRequest_default_instance_;
class DeleteRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRpkiRequest> _instance;
} _DeleteRpkiRequest_default_instance_;
class ListRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiRequest> _instance;
} _ListRpkiRequest_default_instance_;
class ListRpkiResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiResponse> _instance;
} _ListRpkiResponse_default_instance_;
class EnableRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableRpkiRequest> _instance;
} _EnableRpkiRequest_default_instance_;
class DisableRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableRpkiRequest> _instance;
} _DisableRpkiRequest_default_instance_;
class ResetRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetRpkiRequest> _instance;
} _ResetRpkiRequest_default_instance_;
class ListRpkiTableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiTableRequest> _instance;
} _ListRpkiTableRequest_default_instance_;
class ListRpkiTableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiTableResponse> _instance;
} _ListRpkiTableResponse_default_instance_;
class EnableZebraRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableZebraRequest> _instance;
} _EnableZebraRequest_default_instance_;
class EnableMrtRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableMrtRequest> _instance;
} _EnableMrtRequest_default_instance_;
class DisableMrtRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableMrtRequest> _instance;
} _DisableMrtRequest_default_instance_;
class AddBmpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddBmpRequest> _instance;
} _AddBmpRequest_default_instance_;
class DeleteBmpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBmpRequest> _instance;
} _DeleteBmpRequest_default_instance_;
class ListBmpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBmpRequest> _instance;
} _ListBmpRequest_default_instance_;
class ListBmpResponse_BmpStation_ConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBmpResponse_BmpStation_Conf> _instance;
} _ListBmpResponse_BmpStation_Conf_default_instance_;
class ListBmpResponse_BmpStation_StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBmpResponse_BmpStation_State> _instance;
} _ListBmpResponse_BmpStation_State_default_instance_;
class ListBmpResponse_BmpStationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBmpResponse_BmpStation> _instance;
} _ListBmpResponse_BmpStation_default_instance_;
class ListBmpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBmpResponse> _instance;
} _ListBmpResponse_default_instance_;
class FamilyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Family> _instance;
} _Family_default_instance_;
class ValidationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Validation> _instance;
} _Validation_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class DestinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Destination> _instance;
} _Destination_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Peer> _instance;
} _Peer_default_instance_;
class PeerGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerGroup> _instance;
} _PeerGroup_default_instance_;
class DynamicNeighborDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicNeighbor> _instance;
} _DynamicNeighbor_default_instance_;
class ApplyPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyPolicy> _instance;
} _ApplyPolicy_default_instance_;
class PrefixLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrefixLimit> _instance;
} _PrefixLimit_default_instance_;
class PeerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerConf> _instance;
} _PeerConf_default_instance_;
class PeerGroupConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerGroupConf> _instance;
} _PeerGroupConf_default_instance_;
class PeerGroupStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerGroupState> _instance;
} _PeerGroupState_default_instance_;
class TtlSecurityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TtlSecurity> _instance;
} _TtlSecurity_default_instance_;
class EbgpMultihopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EbgpMultihop> _instance;
} _EbgpMultihop_default_instance_;
class RouteReflectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteReflector> _instance;
} _RouteReflector_default_instance_;
class PeerStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerState> _instance;
} _PeerState_default_instance_;
class MessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Messages> _instance;
} _Messages_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class QueuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Queues> _instance;
} _Queues_default_instance_;
class TimersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timers> _instance;
} _Timers_default_instance_;
class TimersConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimersConfig> _instance;
} _TimersConfig_default_instance_;
class TimersStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimersState> _instance;
} _TimersState_default_instance_;
class TransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transport> _instance;
} _Transport_default_instance_;
class RouteServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteServer> _instance;
} _RouteServer_default_instance_;
class GracefulRestartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GracefulRestart> _instance;
} _GracefulRestart_default_instance_;
class MpGracefulRestartConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpGracefulRestartConfig> _instance;
} _MpGracefulRestartConfig_default_instance_;
class MpGracefulRestartStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpGracefulRestartState> _instance;
} _MpGracefulRestartState_default_instance_;
class MpGracefulRestartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpGracefulRestart> _instance;
} _MpGracefulRestart_default_instance_;
class AfiSafiConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfiSafiConfig> _instance;
} _AfiSafiConfig_default_instance_;
class AfiSafiStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfiSafiState> _instance;
} _AfiSafiState_default_instance_;
class RouteSelectionOptionsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSelectionOptionsConfig> _instance;
} _RouteSelectionOptionsConfig_default_instance_;
class RouteSelectionOptionsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSelectionOptionsState> _instance;
} _RouteSelectionOptionsState_default_instance_;
class RouteSelectionOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSelectionOptions> _instance;
} _RouteSelectionOptions_default_instance_;
class UseMultiplePathsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMultiplePathsConfig> _instance;
} _UseMultiplePathsConfig_default_instance_;
class UseMultiplePathsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMultiplePathsState> _instance;
} _UseMultiplePathsState_default_instance_;
class EbgpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EbgpConfig> _instance;
} _EbgpConfig_default_instance_;
class EbgpStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EbgpState> _instance;
} _EbgpState_default_instance_;
class EbgpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ebgp> _instance;
} _Ebgp_default_instance_;
class IbgpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IbgpConfig> _instance;
} _IbgpConfig_default_instance_;
class IbgpStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IbgpState> _instance;
} _IbgpState_default_instance_;
class IbgpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ibgp> _instance;
} _Ibgp_default_instance_;
class UseMultiplePathsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMultiplePaths> _instance;
} _UseMultiplePaths_default_instance_;
class RouteTargetMembershipConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembershipConfig> _instance;
} _RouteTargetMembershipConfig_default_instance_;
class RouteTargetMembershipStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembershipState> _instance;
} _RouteTargetMembershipState_default_instance_;
class RouteTargetMembershipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembership> _instance;
} _RouteTargetMembership_default_instance_;
class LongLivedGracefulRestartConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongLivedGracefulRestartConfig> _instance;
} _LongLivedGracefulRestartConfig_default_instance_;
class LongLivedGracefulRestartStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongLivedGracefulRestartState> _instance;
} _LongLivedGracefulRestartState_default_instance_;
class LongLivedGracefulRestartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongLivedGracefulRestart> _instance;
} _LongLivedGracefulRestart_default_instance_;
class AfiSafiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfiSafi> _instance;
} _AfiSafi_default_instance_;
class AddPathsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathsConfig> _instance;
} _AddPathsConfig_default_instance_;
class AddPathsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathsState> _instance;
} _AddPathsState_default_instance_;
class AddPathsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPaths> _instance;
} _AddPaths_default_instance_;
class PrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prefix> _instance;
} _Prefix_default_instance_;
class DefinedSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefinedSet> _instance;
} _DefinedSet_default_instance_;
class MatchSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchSet> _instance;
} _MatchSet_default_instance_;
class AsPathLengthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsPathLength> _instance;
} _AsPathLength_default_instance_;
class ConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conditions> _instance;
} _Conditions_default_instance_;
class CommunityActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunityAction> _instance;
} _CommunityAction_default_instance_;
class MedActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedAction> _instance;
} _MedAction_default_instance_;
class AsPrependActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsPrependAction> _instance;
} _AsPrependAction_default_instance_;
class NexthopActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NexthopAction> _instance;
} _NexthopAction_default_instance_;
class LocalPrefActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPrefAction> _instance;
} _LocalPrefAction_default_instance_;
class ActionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Actions> _instance;
} _Actions_default_instance_;
class StatementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statement> _instance;
} _Statement_default_instance_;
class PolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Policy> _instance;
} _Policy_default_instance_;
class PolicyAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyAssignment> _instance;
} _PolicyAssignment_default_instance_;
class RoutingPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingPolicy> _instance;
} _RoutingPolicy_default_instance_;
class RoaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roa> _instance;
} _Roa_default_instance_;
class VrfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vrf> _instance;
} _Vrf_default_instance_;
class DefaultRouteDistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultRouteDistance> _instance;
} _DefaultRouteDistance_default_instance_;
class GlobalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Global> _instance;
} _Global_default_instance_;
class ConfederationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Confederation> _instance;
} _Confederation_default_instance_;
class RPKIConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPKIConf> _instance;
} _RPKIConf_default_instance_;
class RPKIStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPKIState> _instance;
} _RPKIState_default_instance_;
class RpkiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rpki> _instance;
} _Rpki_default_instance_;
class SetLogLevelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLogLevelRequest> _instance;
} _SetLogLevelRequest_default_instance_;
}  // namespace apipb
static void InitDefaultsscc_info_Actions_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Actions_default_instance_;
    new (ptr) ::apipb::Actions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Actions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Actions_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Actions_gobgp_2eproto}, {
      &scc_info_CommunityAction_gobgp_2eproto.base,
      &scc_info_MedAction_gobgp_2eproto.base,
      &scc_info_AsPrependAction_gobgp_2eproto.base,
      &scc_info_NexthopAction_gobgp_2eproto.base,
      &scc_info_LocalPrefAction_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddBmpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddBmpRequest_default_instance_;
    new (ptr) ::apipb::AddBmpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddBmpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddBmpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddBmpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddDefinedSetRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddDefinedSetRequest_default_instance_;
    new (ptr) ::apipb::AddDefinedSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddDefinedSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDefinedSetRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddDefinedSetRequest_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddDynamicNeighborRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddDynamicNeighborRequest_default_instance_;
    new (ptr) ::apipb::AddDynamicNeighborRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddDynamicNeighborRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDynamicNeighborRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddDynamicNeighborRequest_gobgp_2eproto}, {
      &scc_info_DynamicNeighbor_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPathRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPathRequest_default_instance_;
    new (ptr) ::apipb::AddPathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPathRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPathRequest_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPathResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPathResponse_default_instance_;
    new (ptr) ::apipb::AddPathResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPathResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddPathResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddPathStreamRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPathStreamRequest_default_instance_;
    new (ptr) ::apipb::AddPathStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPathStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPathStreamRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPathStreamRequest_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPaths_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPaths_default_instance_;
    new (ptr) ::apipb::AddPaths();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPaths::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddPaths_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddPaths_gobgp_2eproto}, {
      &scc_info_AddPathsConfig_gobgp_2eproto.base,
      &scc_info_AddPathsState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPathsConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPathsConfig_default_instance_;
    new (ptr) ::apipb::AddPathsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPathsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddPathsConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddPathsState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPathsState_default_instance_;
    new (ptr) ::apipb::AddPathsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPathsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddPathsState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddPeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPeerGroupRequest_default_instance_;
    new (ptr) ::apipb::AddPeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPeerGroupRequest_gobgp_2eproto}, {
      &scc_info_PeerGroup_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPeerRequest_default_instance_;
    new (ptr) ::apipb::AddPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPeerRequest_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPolicyAssignmentRequest_default_instance_;
    new (ptr) ::apipb::AddPolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPolicyAssignmentRequest_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPolicyRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddPolicyRequest_default_instance_;
    new (ptr) ::apipb::AddPolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddPolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPolicyRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPolicyRequest_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddRpkiRequest_default_instance_;
    new (ptr) ::apipb::AddRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddStatementRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddStatementRequest_default_instance_;
    new (ptr) ::apipb::AddStatementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddStatementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddStatementRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddStatementRequest_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddVrfRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AddVrfRequest_default_instance_;
    new (ptr) ::apipb::AddVrfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AddVrfRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddVrfRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddVrfRequest_gobgp_2eproto}, {
      &scc_info_Vrf_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AfiSafi_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AfiSafi_default_instance_;
    new (ptr) ::apipb::AfiSafi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AfiSafi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AfiSafi_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_AfiSafi_gobgp_2eproto}, {
      &scc_info_MpGracefulRestart_gobgp_2eproto.base,
      &scc_info_AfiSafiConfig_gobgp_2eproto.base,
      &scc_info_AfiSafiState_gobgp_2eproto.base,
      &scc_info_ApplyPolicy_gobgp_2eproto.base,
      &scc_info_RouteSelectionOptions_gobgp_2eproto.base,
      &scc_info_UseMultiplePaths_gobgp_2eproto.base,
      &scc_info_PrefixLimit_gobgp_2eproto.base,
      &scc_info_RouteTargetMembership_gobgp_2eproto.base,
      &scc_info_LongLivedGracefulRestart_gobgp_2eproto.base,
      &scc_info_AddPaths_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AfiSafiConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AfiSafiConfig_default_instance_;
    new (ptr) ::apipb::AfiSafiConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AfiSafiConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AfiSafiConfig_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AfiSafiState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AfiSafiState_default_instance_;
    new (ptr) ::apipb::AfiSafiState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AfiSafiState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AfiSafiState_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ApplyPolicy_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ApplyPolicy_default_instance_;
    new (ptr) ::apipb::ApplyPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ApplyPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyPolicy_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplyPolicy_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AsPathLength_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AsPathLength_default_instance_;
    new (ptr) ::apipb::AsPathLength();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AsPathLength::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPathLength_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsPathLength_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AsPrependAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_AsPrependAction_default_instance_;
    new (ptr) ::apipb::AsPrependAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::AsPrependAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPrependAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsPrependAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_CommunityAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_CommunityAction_default_instance_;
    new (ptr) ::apipb::CommunityAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::CommunityAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunityAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunityAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Conditions_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Conditions_default_instance_;
    new (ptr) ::apipb::Conditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Conditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Conditions_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Conditions_gobgp_2eproto}, {
      &scc_info_MatchSet_gobgp_2eproto.base,
      &scc_info_AsPathLength_gobgp_2eproto.base,
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Confederation_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Confederation_default_instance_;
    new (ptr) ::apipb::Confederation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Confederation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Confederation_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Confederation_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DefaultRouteDistance_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DefaultRouteDistance_default_instance_;
    new (ptr) ::apipb::DefaultRouteDistance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DefaultRouteDistance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultRouteDistance_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultRouteDistance_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DefinedSet_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DefinedSet_default_instance_;
    new (ptr) ::apipb::DefinedSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DefinedSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefinedSet_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DefinedSet_gobgp_2eproto}, {
      &scc_info_Prefix_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteBmpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeleteBmpRequest_default_instance_;
    new (ptr) ::apipb::DeleteBmpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeleteBmpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteBmpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteBmpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDefinedSetRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeleteDefinedSetRequest_default_instance_;
    new (ptr) ::apipb::DeleteDefinedSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeleteDefinedSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteDefinedSetRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteDefinedSetRequest_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteDynamicNeighborRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeleteDynamicNeighborRequest_default_instance_;
    new (ptr) ::apipb::DeleteDynamicNeighborRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeleteDynamicNeighborRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDynamicNeighborRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDynamicNeighborRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePathRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeletePathRequest_default_instance_;
    new (ptr) ::apipb::DeletePathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeletePathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeletePathRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeletePathRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeletePeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeletePeerGroupRequest_default_instance_;
    new (ptr) ::apipb::DeletePeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeletePeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePeerGroupRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeletePeerRequest_default_instance_;
    new (ptr) ::apipb::DeletePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeletePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeletePolicyAssignmentRequest_default_instance_;
    new (ptr) ::apipb::DeletePolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeletePolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeletePolicyAssignmentRequest_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeletePolicyRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeletePolicyRequest_default_instance_;
    new (ptr) ::apipb::DeletePolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeletePolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletePolicyRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeletePolicyRequest_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeleteRpkiRequest_default_instance_;
    new (ptr) ::apipb::DeleteRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeleteRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStatementRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeleteStatementRequest_default_instance_;
    new (ptr) ::apipb::DeleteStatementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeleteStatementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteStatementRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteStatementRequest_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteVrfRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DeleteVrfRequest_default_instance_;
    new (ptr) ::apipb::DeleteVrfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DeleteVrfRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteVrfRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteVrfRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Destination_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Destination_default_instance_;
    new (ptr) ::apipb::Destination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Destination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Destination_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Destination_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DisableMrtRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DisableMrtRequest_default_instance_;
    new (ptr) ::apipb::DisableMrtRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DisableMrtRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableMrtRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableMrtRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DisablePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DisablePeerRequest_default_instance_;
    new (ptr) ::apipb::DisablePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DisablePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisablePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisablePeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DisableRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DisableRpkiRequest_default_instance_;
    new (ptr) ::apipb::DisableRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DisableRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DynamicNeighbor_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_DynamicNeighbor_default_instance_;
    new (ptr) ::apipb::DynamicNeighbor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::DynamicNeighbor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicNeighbor_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynamicNeighbor_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Ebgp_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Ebgp_default_instance_;
    new (ptr) ::apipb::Ebgp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Ebgp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ebgp_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Ebgp_gobgp_2eproto}, {
      &scc_info_EbgpConfig_gobgp_2eproto.base,
      &scc_info_EbgpState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_EbgpConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EbgpConfig_default_instance_;
    new (ptr) ::apipb::EbgpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EbgpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EbgpConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EbgpMultihop_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EbgpMultihop_default_instance_;
    new (ptr) ::apipb::EbgpMultihop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EbgpMultihop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpMultihop_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EbgpMultihop_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EbgpState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EbgpState_default_instance_;
    new (ptr) ::apipb::EbgpState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EbgpState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EbgpState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnableMrtRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EnableMrtRequest_default_instance_;
    new (ptr) ::apipb::EnableMrtRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EnableMrtRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableMrtRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableMrtRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnablePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EnablePeerRequest_default_instance_;
    new (ptr) ::apipb::EnablePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EnablePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnablePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnablePeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnableRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EnableRpkiRequest_default_instance_;
    new (ptr) ::apipb::EnableRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EnableRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnableZebraRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_EnableZebraRequest_default_instance_;
    new (ptr) ::apipb::EnableZebraRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::EnableZebraRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableZebraRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableZebraRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Family_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Family_default_instance_;
    new (ptr) ::apipb::Family();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Family::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Family_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Family_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_GetBgpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_GetBgpRequest_default_instance_;
    new (ptr) ::apipb::GetBgpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::GetBgpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBgpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBgpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_GetBgpResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_GetBgpResponse_default_instance_;
    new (ptr) ::apipb::GetBgpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::GetBgpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBgpResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBgpResponse_gobgp_2eproto}, {
      &scc_info_Global_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_GetTableRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_GetTableRequest_default_instance_;
    new (ptr) ::apipb::GetTableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::GetTableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTableRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTableRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_GetTableResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_GetTableResponse_default_instance_;
    new (ptr) ::apipb::GetTableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::GetTableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTableResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTableResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Global_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Global_default_instance_;
    new (ptr) ::apipb::Global();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Global::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Global_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Global_gobgp_2eproto}, {
      &scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base,
      &scc_info_DefaultRouteDistance_gobgp_2eproto.base,
      &scc_info_Confederation_gobgp_2eproto.base,
      &scc_info_GracefulRestart_gobgp_2eproto.base,
      &scc_info_ApplyPolicy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_GracefulRestart_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_GracefulRestart_default_instance_;
    new (ptr) ::apipb::GracefulRestart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::GracefulRestart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GracefulRestart_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GracefulRestart_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Ibgp_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Ibgp_default_instance_;
    new (ptr) ::apipb::Ibgp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Ibgp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ibgp_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Ibgp_gobgp_2eproto}, {
      &scc_info_IbgpConfig_gobgp_2eproto.base,
      &scc_info_IbgpState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_IbgpConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_IbgpConfig_default_instance_;
    new (ptr) ::apipb::IbgpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::IbgpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IbgpConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_IbgpState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_IbgpState_default_instance_;
    new (ptr) ::apipb::IbgpState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::IbgpState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IbgpState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListBmpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListBmpRequest_default_instance_;
    new (ptr) ::apipb::ListBmpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListBmpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListBmpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListBmpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListBmpResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListBmpResponse_default_instance_;
    new (ptr) ::apipb::ListBmpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListBmpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListBmpResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListBmpResponse_gobgp_2eproto}, {
      &scc_info_ListBmpResponse_BmpStation_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListBmpResponse_BmpStation_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListBmpResponse_BmpStation_default_instance_;
    new (ptr) ::apipb::ListBmpResponse_BmpStation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListBmpResponse_BmpStation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListBmpResponse_BmpStation_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListBmpResponse_BmpStation_gobgp_2eproto}, {
      &scc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto.base,
      &scc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListBmpResponse_BmpStation_Conf_default_instance_;
    new (ptr) ::apipb::ListBmpResponse_BmpStation_Conf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListBmpResponse_BmpStation_Conf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListBmpResponse_BmpStation_State_default_instance_;
    new (ptr) ::apipb::ListBmpResponse_BmpStation_State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListBmpResponse_BmpStation_State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ListDefinedSetRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListDefinedSetRequest_default_instance_;
    new (ptr) ::apipb::ListDefinedSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListDefinedSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDefinedSetRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListDefinedSetRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListDefinedSetResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListDefinedSetResponse_default_instance_;
    new (ptr) ::apipb::ListDefinedSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListDefinedSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDefinedSetResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDefinedSetResponse_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListDynamicNeighborRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListDynamicNeighborRequest_default_instance_;
    new (ptr) ::apipb::ListDynamicNeighborRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListDynamicNeighborRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDynamicNeighborRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListDynamicNeighborRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListDynamicNeighborResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListDynamicNeighborResponse_default_instance_;
    new (ptr) ::apipb::ListDynamicNeighborResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListDynamicNeighborResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDynamicNeighborResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDynamicNeighborResponse_gobgp_2eproto}, {
      &scc_info_DynamicNeighbor_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPathRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPathRequest_default_instance_;
    new (ptr) ::apipb::ListPathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListPathRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListPathRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_TableLookupPrefix_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPathResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPathResponse_default_instance_;
    new (ptr) ::apipb::ListPathResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPathResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPathResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPathResponse_gobgp_2eproto}, {
      &scc_info_Destination_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPeerGroupRequest_default_instance_;
    new (ptr) ::apipb::ListPeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPeerGroupRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPeerGroupResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPeerGroupResponse_default_instance_;
    new (ptr) ::apipb::ListPeerGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPeerGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPeerGroupResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPeerGroupResponse_gobgp_2eproto}, {
      &scc_info_PeerGroup_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPeerRequest_default_instance_;
    new (ptr) ::apipb::ListPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPeerResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPeerResponse_default_instance_;
    new (ptr) ::apipb::ListPeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPeerResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPeerResponse_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPolicyAssignmentRequest_default_instance_;
    new (ptr) ::apipb::ListPolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPolicyAssignmentRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPolicyAssignmentResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPolicyAssignmentResponse_default_instance_;
    new (ptr) ::apipb::ListPolicyAssignmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPolicyAssignmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPolicyAssignmentResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPolicyAssignmentResponse_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPolicyRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPolicyRequest_default_instance_;
    new (ptr) ::apipb::ListPolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPolicyRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPolicyRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPolicyResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListPolicyResponse_default_instance_;
    new (ptr) ::apipb::ListPolicyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListPolicyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPolicyResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPolicyResponse_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListRpkiRequest_default_instance_;
    new (ptr) ::apipb::ListRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListRpkiResponse_default_instance_;
    new (ptr) ::apipb::ListRpkiResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListRpkiResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiResponse_gobgp_2eproto}, {
      &scc_info_Rpki_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiTableRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListRpkiTableRequest_default_instance_;
    new (ptr) ::apipb::ListRpkiTableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListRpkiTableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiTableRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiTableRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiTableResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListRpkiTableResponse_default_instance_;
    new (ptr) ::apipb::ListRpkiTableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListRpkiTableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiTableResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiTableResponse_gobgp_2eproto}, {
      &scc_info_Roa_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListStatementRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListStatementRequest_default_instance_;
    new (ptr) ::apipb::ListStatementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListStatementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListStatementRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListStatementRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListStatementResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListStatementResponse_default_instance_;
    new (ptr) ::apipb::ListStatementResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListStatementResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListStatementResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListStatementResponse_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListVrfRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListVrfRequest_default_instance_;
    new (ptr) ::apipb::ListVrfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListVrfRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVrfRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListVrfRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListVrfResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ListVrfResponse_default_instance_;
    new (ptr) ::apipb::ListVrfResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ListVrfResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVrfResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVrfResponse_gobgp_2eproto}, {
      &scc_info_Vrf_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_LocalPrefAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LocalPrefAction_default_instance_;
    new (ptr) ::apipb::LocalPrefAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LocalPrefAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPrefAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalPrefAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_LongLivedGracefulRestart_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LongLivedGracefulRestart_default_instance_;
    new (ptr) ::apipb::LongLivedGracefulRestart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LongLivedGracefulRestart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LongLivedGracefulRestart_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LongLivedGracefulRestart_gobgp_2eproto}, {
      &scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto.base,
      &scc_info_LongLivedGracefulRestartState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_LongLivedGracefulRestartConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LongLivedGracefulRestartConfig_default_instance_;
    new (ptr) ::apipb::LongLivedGracefulRestartConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LongLivedGracefulRestartConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongLivedGracefulRestartConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_LongLivedGracefulRestartState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_LongLivedGracefulRestartState_default_instance_;
    new (ptr) ::apipb::LongLivedGracefulRestartState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::LongLivedGracefulRestartState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongLivedGracefulRestartState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MatchSet_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MatchSet_default_instance_;
    new (ptr) ::apipb::MatchSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MatchSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSet_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchSet_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MedAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MedAction_default_instance_;
    new (ptr) ::apipb::MedAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MedAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MedAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Message_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Message_default_instance_;
    new (ptr) ::apipb::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Messages_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Messages_default_instance_;
    new (ptr) ::apipb::Messages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Messages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Messages_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Messages_gobgp_2eproto}, {
      &scc_info_Message_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MpGracefulRestart_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MpGracefulRestart_default_instance_;
    new (ptr) ::apipb::MpGracefulRestart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MpGracefulRestart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpGracefulRestart_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpGracefulRestart_gobgp_2eproto}, {
      &scc_info_MpGracefulRestartConfig_gobgp_2eproto.base,
      &scc_info_MpGracefulRestartState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MpGracefulRestartConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MpGracefulRestartConfig_default_instance_;
    new (ptr) ::apipb::MpGracefulRestartConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MpGracefulRestartConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MpGracefulRestartConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MpGracefulRestartState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_MpGracefulRestartState_default_instance_;
    new (ptr) ::apipb::MpGracefulRestartState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::MpGracefulRestartState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MpGracefulRestartState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_NexthopAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_NexthopAction_default_instance_;
    new (ptr) ::apipb::NexthopAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::NexthopAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NexthopAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NexthopAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Path_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Path_default_instance_;
    new (ptr) ::apipb::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Path_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Path_gobgp_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Validation_gobgp_2eproto.base,
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Peer_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Peer_default_instance_;
    new (ptr) ::apipb::Peer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Peer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Peer_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Peer_gobgp_2eproto}, {
      &scc_info_ApplyPolicy_gobgp_2eproto.base,
      &scc_info_PeerConf_gobgp_2eproto.base,
      &scc_info_EbgpMultihop_gobgp_2eproto.base,
      &scc_info_RouteReflector_gobgp_2eproto.base,
      &scc_info_PeerState_gobgp_2eproto.base,
      &scc_info_Timers_gobgp_2eproto.base,
      &scc_info_Transport_gobgp_2eproto.base,
      &scc_info_RouteServer_gobgp_2eproto.base,
      &scc_info_GracefulRestart_gobgp_2eproto.base,
      &scc_info_AfiSafi_gobgp_2eproto.base,
      &scc_info_TtlSecurity_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_PeerConf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PeerConf_default_instance_;
    new (ptr) ::apipb::PeerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PeerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerConf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PeerGroup_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PeerGroup_default_instance_;
    new (ptr) ::apipb::PeerGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PeerGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_PeerGroup_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_PeerGroup_gobgp_2eproto}, {
      &scc_info_ApplyPolicy_gobgp_2eproto.base,
      &scc_info_PeerGroupConf_gobgp_2eproto.base,
      &scc_info_EbgpMultihop_gobgp_2eproto.base,
      &scc_info_RouteReflector_gobgp_2eproto.base,
      &scc_info_PeerGroupState_gobgp_2eproto.base,
      &scc_info_Timers_gobgp_2eproto.base,
      &scc_info_Transport_gobgp_2eproto.base,
      &scc_info_RouteServer_gobgp_2eproto.base,
      &scc_info_GracefulRestart_gobgp_2eproto.base,
      &scc_info_AfiSafi_gobgp_2eproto.base,
      &scc_info_TtlSecurity_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_PeerGroupConf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PeerGroupConf_default_instance_;
    new (ptr) ::apipb::PeerGroupConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PeerGroupConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupConf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerGroupConf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PeerGroupState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PeerGroupState_default_instance_;
    new (ptr) ::apipb::PeerGroupState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PeerGroupState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerGroupState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PeerState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PeerState_default_instance_;
    new (ptr) ::apipb::PeerState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PeerState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PeerState_gobgp_2eproto}, {
      &scc_info_Messages_gobgp_2eproto.base,
      &scc_info_Queues_gobgp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Policy_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Policy_default_instance_;
    new (ptr) ::apipb::Policy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Policy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Policy_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Policy_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_PolicyAssignment_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PolicyAssignment_default_instance_;
    new (ptr) ::apipb::PolicyAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PolicyAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyAssignment_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PolicyAssignment_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Prefix_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Prefix_default_instance_;
    new (ptr) ::apipb::Prefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Prefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prefix_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prefix_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PrefixLimit_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_PrefixLimit_default_instance_;
    new (ptr) ::apipb::PrefixLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::PrefixLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrefixLimit_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrefixLimit_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Queues_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Queues_default_instance_;
    new (ptr) ::apipb::Queues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Queues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Queues_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Queues_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RPKIConf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RPKIConf_default_instance_;
    new (ptr) ::apipb::RPKIConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RPKIConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPKIConf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPKIConf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RPKIState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RPKIState_default_instance_;
    new (ptr) ::apipb::RPKIState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RPKIState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPKIState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RPKIState_gobgp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ResetPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ResetPeerRequest_default_instance_;
    new (ptr) ::apipb::ResetPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ResetPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ResetRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ResetRpkiRequest_default_instance_;
    new (ptr) ::apipb::ResetRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ResetRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Roa_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Roa_default_instance_;
    new (ptr) ::apipb::Roa();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Roa::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roa_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roa_gobgp_2eproto}, {
      &scc_info_RPKIConf_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_RouteReflector_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteReflector_default_instance_;
    new (ptr) ::apipb::RouteReflector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteReflector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteReflector_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteReflector_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteSelectionOptions_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteSelectionOptions_default_instance_;
    new (ptr) ::apipb::RouteSelectionOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteSelectionOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteSelectionOptions_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RouteSelectionOptions_gobgp_2eproto}, {
      &scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base,
      &scc_info_RouteSelectionOptionsState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_RouteSelectionOptionsConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteSelectionOptionsConfig_default_instance_;
    new (ptr) ::apipb::RouteSelectionOptionsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteSelectionOptionsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteSelectionOptionsConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteSelectionOptionsState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteSelectionOptionsState_default_instance_;
    new (ptr) ::apipb::RouteSelectionOptionsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteSelectionOptionsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteSelectionOptionsState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteServer_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteServer_default_instance_;
    new (ptr) ::apipb::RouteServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteServer_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteServer_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteTargetMembership_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteTargetMembership_default_instance_;
    new (ptr) ::apipb::RouteTargetMembership();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteTargetMembership::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteTargetMembership_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RouteTargetMembership_gobgp_2eproto}, {
      &scc_info_RouteTargetMembershipConfig_gobgp_2eproto.base,
      &scc_info_RouteTargetMembershipState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_RouteTargetMembershipConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteTargetMembershipConfig_default_instance_;
    new (ptr) ::apipb::RouteTargetMembershipConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteTargetMembershipConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteTargetMembershipConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteTargetMembershipState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RouteTargetMembershipState_default_instance_;
    new (ptr) ::apipb::RouteTargetMembershipState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RouteTargetMembershipState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteTargetMembershipState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RoutingPolicy_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_RoutingPolicy_default_instance_;
    new (ptr) ::apipb::RoutingPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::RoutingPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoutingPolicy_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoutingPolicy_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Rpki_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Rpki_default_instance_;
    new (ptr) ::apipb::Rpki();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Rpki::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rpki_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Rpki_gobgp_2eproto}, {
      &scc_info_RPKIConf_gobgp_2eproto.base,
      &scc_info_RPKIState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_SetLogLevelRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SetLogLevelRequest_default_instance_;
    new (ptr) ::apipb::SetLogLevelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SetLogLevelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLogLevelRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetLogLevelRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_SetPoliciesRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SetPoliciesRequest_default_instance_;
    new (ptr) ::apipb::SetPoliciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SetPoliciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetPoliciesRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SetPoliciesRequest_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,
      &scc_info_Policy_gobgp_2eproto.base,
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_SetPolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_SetPolicyAssignmentRequest_default_instance_;
    new (ptr) ::apipb::SetPolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::SetPolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPolicyAssignmentRequest_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ShutdownPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_ShutdownPeerRequest_default_instance_;
    new (ptr) ::apipb::ShutdownPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::ShutdownPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutdownPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_StartBgpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_StartBgpRequest_default_instance_;
    new (ptr) ::apipb::StartBgpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::StartBgpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartBgpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartBgpRequest_gobgp_2eproto}, {
      &scc_info_Global_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Statement_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Statement_default_instance_;
    new (ptr) ::apipb::Statement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Statement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Statement_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Statement_gobgp_2eproto}, {
      &scc_info_Conditions_gobgp_2eproto.base,
      &scc_info_Actions_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_StopBgpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_StopBgpRequest_default_instance_;
    new (ptr) ::apipb::StopBgpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::StopBgpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopBgpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopBgpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_TableLookupPrefix_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TableLookupPrefix_default_instance_;
    new (ptr) ::apipb::TableLookupPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TableLookupPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableLookupPrefix_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableLookupPrefix_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Timers_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Timers_default_instance_;
    new (ptr) ::apipb::Timers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Timers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Timers_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Timers_gobgp_2eproto}, {
      &scc_info_TimersConfig_gobgp_2eproto.base,
      &scc_info_TimersState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_TimersConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TimersConfig_default_instance_;
    new (ptr) ::apipb::TimersConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TimersConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimersConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimersConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_TimersState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TimersState_default_instance_;
    new (ptr) ::apipb::TimersState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TimersState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimersState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimersState_gobgp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Transport_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Transport_default_instance_;
    new (ptr) ::apipb::Transport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Transport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transport_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transport_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_TtlSecurity_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_TtlSecurity_default_instance_;
    new (ptr) ::apipb::TtlSecurity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::TtlSecurity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TtlSecurity_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TtlSecurity_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UpdatePeerGroupRequest_default_instance_;
    new (ptr) ::apipb::UpdatePeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UpdatePeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePeerGroupRequest_gobgp_2eproto}, {
      &scc_info_PeerGroup_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePeerGroupResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UpdatePeerGroupResponse_default_instance_;
    new (ptr) ::apipb::UpdatePeerGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UpdatePeerGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePeerGroupResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePeerGroupResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UpdatePeerRequest_default_instance_;
    new (ptr) ::apipb::UpdatePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UpdatePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePeerRequest_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePeerResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UpdatePeerResponse_default_instance_;
    new (ptr) ::apipb::UpdatePeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UpdatePeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePeerResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePeerResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UseMultiplePaths_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UseMultiplePaths_default_instance_;
    new (ptr) ::apipb::UseMultiplePaths();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UseMultiplePaths::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UseMultiplePaths_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UseMultiplePaths_gobgp_2eproto}, {
      &scc_info_UseMultiplePathsConfig_gobgp_2eproto.base,
      &scc_info_UseMultiplePathsState_gobgp_2eproto.base,
      &scc_info_Ebgp_gobgp_2eproto.base,
      &scc_info_Ibgp_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_UseMultiplePathsConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UseMultiplePathsConfig_default_instance_;
    new (ptr) ::apipb::UseMultiplePathsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UseMultiplePathsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseMultiplePathsConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UseMultiplePathsState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_UseMultiplePathsState_default_instance_;
    new (ptr) ::apipb::UseMultiplePathsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::UseMultiplePathsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseMultiplePathsState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Validation_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Validation_default_instance_;
    new (ptr) ::apipb::Validation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Validation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Validation_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Validation_gobgp_2eproto}, {
      &scc_info_Roa_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Vrf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_Vrf_default_instance_;
    new (ptr) ::apipb::Vrf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::Vrf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vrf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vrf_gobgp_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_WatchEventRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventRequest_default_instance_;
    new (ptr) ::apipb::WatchEventRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WatchEventRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WatchEventRequest_gobgp_2eproto}, {
      &scc_info_WatchEventRequest_Peer_gobgp_2eproto.base,
      &scc_info_WatchEventRequest_Table_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_WatchEventRequest_Peer_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventRequest_Peer_default_instance_;
    new (ptr) ::apipb::WatchEventRequest_Peer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventRequest_Peer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchEventRequest_Peer_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchEventRequest_Peer_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_WatchEventRequest_Table_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventRequest_Table_default_instance_;
    new (ptr) ::apipb::WatchEventRequest_Table();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventRequest_Table::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WatchEventRequest_Table_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WatchEventRequest_Table_gobgp_2eproto}, {
      &scc_info_WatchEventRequest_Table_Filter_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_WatchEventRequest_Table_Filter_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventRequest_Table_Filter_default_instance_;
    new (ptr) ::apipb::WatchEventRequest_Table_Filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventRequest_Table_Filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchEventRequest_Table_Filter_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchEventRequest_Table_Filter_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_WatchEventResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventResponse_default_instance_;
    new (ptr) ::apipb::WatchEventResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WatchEventResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WatchEventResponse_gobgp_2eproto}, {
      &scc_info_WatchEventResponse_PeerEvent_gobgp_2eproto.base,
      &scc_info_WatchEventResponse_TableEvent_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_WatchEventResponse_PeerEvent_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventResponse_PeerEvent_default_instance_;
    new (ptr) ::apipb::WatchEventResponse_PeerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventResponse_PeerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WatchEventResponse_PeerEvent_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WatchEventResponse_PeerEvent_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_WatchEventResponse_TableEvent_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apipb::_WatchEventResponse_TableEvent_default_instance_;
    new (ptr) ::apipb::WatchEventResponse_TableEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apipb::WatchEventResponse_TableEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WatchEventResponse_TableEvent_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WatchEventResponse_TableEvent_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gobgp_2eproto[157];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gobgp_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gobgp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gobgp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::StartBgpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::StartBgpRequest, global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::StopBgpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::GetBgpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::GetBgpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::GetBgpResponse, global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest_Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest_Table_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest_Table_Filter, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest_Table_Filter, init_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest_Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest_Table, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest, peer_),
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventRequest, table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse_PeerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse_PeerEvent, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse_PeerEvent, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse_TableEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse_TableEvent, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::apipb::WatchEventResponseDefaultTypeInternal, peer_),
  offsetof(::apipb::WatchEventResponseDefaultTypeInternal, table_),
  PROTOBUF_FIELD_OFFSET(::apipb::WatchEventResponse, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPeerRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePeerRequest, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerRequest, enableadvertised_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerResponse, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerRequest, peer_),
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerRequest, do_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerResponse, needs_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ResetPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ResetPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::ResetPeerRequest, communication_),
  PROTOBUF_FIELD_OFFSET(::apipb::ResetPeerRequest, soft_),
  PROTOBUF_FIELD_OFFSET(::apipb::ResetPeerRequest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ShutdownPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ShutdownPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::ShutdownPeerRequest, communication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EnablePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EnablePeerRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DisablePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DisablePeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::DisablePeerRequest, communication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPeerGroupRequest, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePeerGroupRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerGroupRequest, peer_group_),
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerGroupRequest, do_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UpdatePeerGroupResponse, needs_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerGroupRequest, peer_group_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPeerGroupResponse, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddDynamicNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddDynamicNeighborRequest, dynamic_neighbor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteDynamicNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteDynamicNeighborRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteDynamicNeighborRequest, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDynamicNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDynamicNeighborRequest, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDynamicNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDynamicNeighborResponse, dynamic_neighbor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathRequest, vrf_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathResponse, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePathRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePathRequest, vrf_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePathRequest, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePathRequest, path_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePathRequest, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TableLookupPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TableLookupPrefix, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::TableLookupPrefix, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, prefixes_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, sort_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, enable_filtered_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, enable_nlri_binary_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, enable_attribute_binary_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathRequest, enable_only_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPathResponse, destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathStreamRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathStreamRequest, vrf_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathStreamRequest, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableRequest, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableResponse, num_destination_),
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableResponse, num_path_),
  PROTOBUF_FIELD_OFFSET(::apipb::GetTableResponse, num_accepted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddVrfRequest, vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteVrfRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListVrfRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListVrfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListVrfResponse, vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPolicyRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPolicyRequest, refer_existing_statements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyRequest, preserve_statements_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyResponse, policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SetPoliciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SetPoliciesRequest, defined_sets_),
  PROTOBUF_FIELD_OFFSET(::apipb::SetPoliciesRequest, policies_),
  PROTOBUF_FIELD_OFFSET(::apipb::SetPoliciesRequest, assignments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddDefinedSetRequest, defined_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteDefinedSetRequest, defined_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteDefinedSetRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDefinedSetRequest, defined_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListDefinedSetRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDefinedSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListDefinedSetResponse, defined_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddStatementRequest, statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteStatementRequest, statement_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteStatementRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListStatementRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListStatementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListStatementResponse, statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyAssignmentRequest, assignment_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeletePolicyAssignmentRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyAssignmentRequest, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyAssignmentRequest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListPolicyAssignmentResponse, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SetPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SetPolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddRpkiRequest, port_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddRpkiRequest, lifetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteRpkiRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiRequest, family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiResponse, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EnableRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EnableRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableRpkiRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DisableRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DisableRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::DisableRpkiRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ResetRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ResetRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::ResetRpkiRequest, port_),
  PROTOBUF_FIELD_OFFSET(::apipb::ResetRpkiRequest, soft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiTableRequest, family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListRpkiTableResponse, roa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, url_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, route_types_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, version_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, nexthop_trigger_enable_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, nexthop_trigger_delay_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, mpls_label_range_size_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableZebraRequest, software_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EnableMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EnableMrtRequest, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableMrtRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableMrtRequest, dump_interval_),
  PROTOBUF_FIELD_OFFSET(::apipb::EnableMrtRequest, rotation_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DisableMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DisableMrtRequest, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, port_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, statisticstimeout_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, sysname_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddBmpRequest, sysdescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteBmpRequest, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::DeleteBmpRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation_Conf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation_Conf, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation_Conf, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation_State, uptime_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation_State, downtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation, conf_),
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse_BmpStation, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ListBmpResponse, station_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Family, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Family, afi_),
  PROTOBUF_FIELD_OFFSET(::apipb::Family, safi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Validation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Validation, state_),
  PROTOBUF_FIELD_OFFSET(::apipb::Validation, reason_),
  PROTOBUF_FIELD_OFFSET(::apipb::Validation, matched_),
  PROTOBUF_FIELD_OFFSET(::apipb::Validation, unmatched_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::Validation, unmatched_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Path, nlri_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, pattrs_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, age_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, best_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, is_withdraw_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, validation_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, no_implicit_withdraw_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, source_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, source_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, filtered_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, stale_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, is_from_external_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, neighbor_ip_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, uuid_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, is_nexthop_invalid_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, identifier_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, local_identifier_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, nlri_binary_),
  PROTOBUF_FIELD_OFFSET(::apipb::Path, pattrs_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Destination, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::Destination, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, conf_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, ebgp_multihop_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, route_reflector_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, state_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, timers_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, transport_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, route_server_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, afi_safis_),
  PROTOBUF_FIELD_OFFSET(::apipb::Peer, ttl_security_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, conf_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, ebgp_multihop_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, route_reflector_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, info_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, timers_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, transport_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, route_server_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, afi_safis_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroup, ttl_security_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DynamicNeighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DynamicNeighbor, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::DynamicNeighbor, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::ApplyPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::ApplyPolicy, in_policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::ApplyPolicy, export_policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::ApplyPolicy, import_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PrefixLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PrefixLimit, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::PrefixLimit, max_prefixes_),
  PROTOBUF_FIELD_OFFSET(::apipb::PrefixLimit, shutdown_threshold_pct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, auth_password_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, description_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, local_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, neighbor_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, peer_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, peer_group_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, remove_private_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, send_community_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, neighbor_interface_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, vrf_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, allow_own_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, replace_peer_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, admin_down_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerConf, send_software_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, auth_password_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, description_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, local_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, peer_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, peer_group_name_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, remove_private_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupConf, send_community_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, auth_password_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, description_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, local_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, peer_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, peer_group_name_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, remove_private_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, send_community_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, total_paths_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerGroupState, total_prefixes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TtlSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TtlSecurity, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::TtlSecurity, ttl_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpMultihop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpMultihop, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpMultihop, multihop_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteReflector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteReflector, route_reflector_client_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteReflector, route_reflector_cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, auth_password_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, description_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, local_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, messages_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, neighbor_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, peer_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, peer_group_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, queues_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, remove_private_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, send_community_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, session_state_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, admin_state_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, out_q_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, flops_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, remote_cap_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, local_cap_),
  PROTOBUF_FIELD_OFFSET(::apipb::PeerState, router_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Messages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Messages, received_),
  PROTOBUF_FIELD_OFFSET(::apipb::Messages, sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Message, notification_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, update_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, open_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, keepalive_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, refresh_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, discarded_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, total_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, withdraw_update_),
  PROTOBUF_FIELD_OFFSET(::apipb::Message, withdraw_prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Queues, input_),
  PROTOBUF_FIELD_OFFSET(::apipb::Queues, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Timers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Timers, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::Timers, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TimersConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TimersConfig, connect_retry_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersConfig, hold_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersConfig, keepalive_interval_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersConfig, minimum_advertisement_interval_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersConfig, idle_hold_time_after_reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, connect_retry_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, hold_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, keepalive_interval_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, minimum_advertisement_interval_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, negotiated_hold_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, uptime_),
  PROTOBUF_FIELD_OFFSET(::apipb::TimersState, downtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, local_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, local_port_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, mtu_discovery_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, passive_mode_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, remote_address_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, remote_port_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, tcp_mss_),
  PROTOBUF_FIELD_OFFSET(::apipb::Transport, bind_interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteServer, route_server_client_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteServer, secondary_route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, restart_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, helper_only_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, deferral_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, notification_enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, longlived_enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, stale_routes_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, peer_restart_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, peer_restarting_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, local_restarting_),
  PROTOBUF_FIELD_OFFSET(::apipb::GracefulRestart, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartState, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartState, received_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartState, advertised_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartState, end_of_rib_received_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestartState, end_of_rib_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestart, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::MpGracefulRestart, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiConfig, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiState, family_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiState, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiState, received_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiState, accepted_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafiState, advertised_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, always_compare_med_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, ignore_as_path_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, external_compare_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, advertise_inactive_routes_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, enable_aigp_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, ignore_next_hop_igp_metric_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsConfig, disable_best_path_selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, always_compare_med_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, ignore_as_path_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, external_compare_router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, advertise_inactive_routes_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, enable_aigp_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, ignore_next_hop_igp_metric_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptionsState, disable_best_path_selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptions, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteSelectionOptions, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePathsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePathsConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePathsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePathsState, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpConfig, allow_multiple_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpConfig, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpState, allow_multiple_asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::EbgpState, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Ebgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Ebgp, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::Ebgp, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::IbgpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::IbgpConfig, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::IbgpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::IbgpState, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Ibgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Ibgp, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::Ibgp, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePaths, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePaths, state_),
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePaths, ebgp_),
  PROTOBUF_FIELD_OFFSET(::apipb::UseMultiplePaths, ibgp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipConfig, deferral_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembershipState, deferral_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembership, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::RouteTargetMembership, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartConfig, restart_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartState, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartState, received_),
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartState, advertised_),
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartState, peer_restart_time_),
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestartState, peer_restart_timer_expired_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestart, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::LongLivedGracefulRestart, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, mp_graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, state_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, route_selection_options_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, use_multiple_paths_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, prefix_limits_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, route_target_membership_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, long_lived_graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::apipb::AfiSafi, add_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathsConfig, receive_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathsConfig, send_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathsState, receive_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPathsState, send_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AddPaths, config_),
  PROTOBUF_FIELD_OFFSET(::apipb::AddPaths, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Prefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Prefix, ip_prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::Prefix, mask_length_min_),
  PROTOBUF_FIELD_OFFSET(::apipb::Prefix, mask_length_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DefinedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DefinedSet, defined_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::DefinedSet, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::DefinedSet, list_),
  PROTOBUF_FIELD_OFFSET(::apipb::DefinedSet, prefixes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MatchSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MatchSet, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::MatchSet, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AsPathLength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AsPathLength, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::AsPathLength, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, prefix_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, neighbor_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, as_path_length_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, as_path_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, community_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, ext_community_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, rpki_result_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, route_type_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, large_community_set_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, next_hop_in_list_),
  PROTOBUF_FIELD_OFFSET(::apipb::Conditions, afi_safi_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::CommunityAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::CommunityAction, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::CommunityAction, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::MedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::MedAction, type_),
  PROTOBUF_FIELD_OFFSET(::apipb::MedAction, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::AsPrependAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::AsPrependAction, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::AsPrependAction, repeat_),
  PROTOBUF_FIELD_OFFSET(::apipb::AsPrependAction, use_left_most_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::NexthopAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::NexthopAction, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::NexthopAction, self_),
  PROTOBUF_FIELD_OFFSET(::apipb::NexthopAction, unchanged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::LocalPrefAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::LocalPrefAction, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, route_action_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, community_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, med_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, as_prepend_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, ext_community_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, nexthop_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, local_pref_),
  PROTOBUF_FIELD_OFFSET(::apipb::Actions, large_community_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Statement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Statement, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::Statement, conditions_),
  PROTOBUF_FIELD_OFFSET(::apipb::Statement, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Policy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Policy, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::Policy, statements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::PolicyAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::PolicyAssignment, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::PolicyAssignment, direction_),
  PROTOBUF_FIELD_OFFSET(::apipb::PolicyAssignment, policies_),
  PROTOBUF_FIELD_OFFSET(::apipb::PolicyAssignment, default_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RoutingPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RoutingPolicy, defined_sets_),
  PROTOBUF_FIELD_OFFSET(::apipb::RoutingPolicy, policies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Roa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Roa, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::Roa, prefixlen_),
  PROTOBUF_FIELD_OFFSET(::apipb::Roa, maxlen_),
  PROTOBUF_FIELD_OFFSET(::apipb::Roa, prefix_),
  PROTOBUF_FIELD_OFFSET(::apipb::Roa, conf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Vrf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Vrf, name_),
  PROTOBUF_FIELD_OFFSET(::apipb::Vrf, rd_),
  PROTOBUF_FIELD_OFFSET(::apipb::Vrf, import_rt_),
  PROTOBUF_FIELD_OFFSET(::apipb::Vrf, export_rt_),
  PROTOBUF_FIELD_OFFSET(::apipb::Vrf, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::DefaultRouteDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::DefaultRouteDistance, external_route_distance_),
  PROTOBUF_FIELD_OFFSET(::apipb::DefaultRouteDistance, internal_route_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Global, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Global, asn_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, router_id_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, listen_port_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, listen_addresses_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, families_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, use_multiple_paths_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, route_selection_options_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, default_route_distance_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, confederation_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::apipb::Global, bind_to_device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Confederation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Confederation, enabled_),
  PROTOBUF_FIELD_OFFSET(::apipb::Confederation, identifier_),
  PROTOBUF_FIELD_OFFSET(::apipb::Confederation, member_as_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIConf, address_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIConf, remote_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, uptime_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, downtime_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, up_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, record_ipv4_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, record_ipv6_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, prefix_ipv4_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, prefix_ipv6_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, serial_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, received_ipv4_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, received_ipv6_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, serial_notify_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, cache_reset_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, cache_response_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, end_of_data_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, error_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, serial_query_),
  PROTOBUF_FIELD_OFFSET(::apipb::RPKIState, reset_query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::Rpki, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::Rpki, conf_),
  PROTOBUF_FIELD_OFFSET(::apipb::Rpki, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apipb::SetLogLevelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apipb::SetLogLevelRequest, level_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apipb::StartBgpRequest)},
  { 6, -1, sizeof(::apipb::StopBgpRequest)},
  { 11, -1, sizeof(::apipb::GetBgpRequest)},
  { 16, -1, sizeof(::apipb::GetBgpResponse)},
  { 22, -1, sizeof(::apipb::WatchEventRequest_Peer)},
  { 27, -1, sizeof(::apipb::WatchEventRequest_Table_Filter)},
  { 34, -1, sizeof(::apipb::WatchEventRequest_Table)},
  { 40, -1, sizeof(::apipb::WatchEventRequest)},
  { 47, -1, sizeof(::apipb::WatchEventResponse_PeerEvent)},
  { 54, -1, sizeof(::apipb::WatchEventResponse_TableEvent)},
  { 60, -1, sizeof(::apipb::WatchEventResponse)},
  { 68, -1, sizeof(::apipb::AddPeerRequest)},
  { 74, -1, sizeof(::apipb::DeletePeerRequest)},
  { 81, -1, sizeof(::apipb::ListPeerRequest)},
  { 88, -1, sizeof(::apipb::ListPeerResponse)},
  { 94, -1, sizeof(::apipb::UpdatePeerRequest)},
  { 101, -1, sizeof(::apipb::UpdatePeerResponse)},
  { 107, -1, sizeof(::apipb::ResetPeerRequest)},
  { 116, -1, sizeof(::apipb::ShutdownPeerRequest)},
  { 123, -1, sizeof(::apipb::EnablePeerRequest)},
  { 129, -1, sizeof(::apipb::DisablePeerRequest)},
  { 136, -1, sizeof(::apipb::AddPeerGroupRequest)},
  { 142, -1, sizeof(::apipb::DeletePeerGroupRequest)},
  { 148, -1, sizeof(::apipb::UpdatePeerGroupRequest)},
  { 155, -1, sizeof(::apipb::UpdatePeerGroupResponse)},
  { 161, -1, sizeof(::apipb::ListPeerGroupRequest)},
  { 167, -1, sizeof(::apipb::ListPeerGroupResponse)},
  { 173, -1, sizeof(::apipb::AddDynamicNeighborRequest)},
  { 179, -1, sizeof(::apipb::DeleteDynamicNeighborRequest)},
  { 186, -1, sizeof(::apipb::ListDynamicNeighborRequest)},
  { 192, -1, sizeof(::apipb::ListDynamicNeighborResponse)},
  { 198, -1, sizeof(::apipb::AddPathRequest)},
  { 206, -1, sizeof(::apipb::AddPathResponse)},
  { 212, -1, sizeof(::apipb::DeletePathRequest)},
  { 222, -1, sizeof(::apipb::TableLookupPrefix)},
  { 229, -1, sizeof(::apipb::ListPathRequest)},
  { 243, -1, sizeof(::apipb::ListPathResponse)},
  { 249, -1, sizeof(::apipb::AddPathStreamRequest)},
  { 257, -1, sizeof(::apipb::GetTableRequest)},
  { 265, -1, sizeof(::apipb::GetTableResponse)},
  { 273, -1, sizeof(::apipb::AddVrfRequest)},
  { 279, -1, sizeof(::apipb::DeleteVrfRequest)},
  { 285, -1, sizeof(::apipb::ListVrfRequest)},
  { 291, -1, sizeof(::apipb::ListVrfResponse)},
  { 297, -1, sizeof(::apipb::AddPolicyRequest)},
  { 304, -1, sizeof(::apipb::DeletePolicyRequest)},
  { 312, -1, sizeof(::apipb::ListPolicyRequest)},
  { 318, -1, sizeof(::apipb::ListPolicyResponse)},
  { 324, -1, sizeof(::apipb::SetPoliciesRequest)},
  { 332, -1, sizeof(::apipb::AddDefinedSetRequest)},
  { 338, -1, sizeof(::apipb::DeleteDefinedSetRequest)},
  { 345, -1, sizeof(::apipb::ListDefinedSetRequest)},
  { 352, -1, sizeof(::apipb::ListDefinedSetResponse)},
  { 358, -1, sizeof(::apipb::AddStatementRequest)},
  { 364, -1, sizeof(::apipb::DeleteStatementRequest)},
  { 371, -1, sizeof(::apipb::ListStatementRequest)},
  { 377, -1, sizeof(::apipb::ListStatementResponse)},
  { 383, -1, sizeof(::apipb::AddPolicyAssignmentRequest)},
  { 389, -1, sizeof(::apipb::DeletePolicyAssignmentRequest)},
  { 396, -1, sizeof(::apipb::ListPolicyAssignmentRequest)},
  { 403, -1, sizeof(::apipb::ListPolicyAssignmentResponse)},
  { 409, -1, sizeof(::apipb::SetPolicyAssignmentRequest)},
  { 415, -1, sizeof(::apipb::AddRpkiRequest)},
  { 423, -1, sizeof(::apipb::DeleteRpkiRequest)},
  { 430, -1, sizeof(::apipb::ListRpkiRequest)},
  { 436, -1, sizeof(::apipb::ListRpkiResponse)},
  { 442, -1, sizeof(::apipb::EnableRpkiRequest)},
  { 449, -1, sizeof(::apipb::DisableRpkiRequest)},
  { 456, -1, sizeof(::apipb::ResetRpkiRequest)},
  { 464, -1, sizeof(::apipb::ListRpkiTableRequest)},
  { 470, -1, sizeof(::apipb::ListRpkiTableResponse)},
  { 476, -1, sizeof(::apipb::EnableZebraRequest)},
  { 488, -1, sizeof(::apipb::EnableMrtRequest)},
  { 497, -1, sizeof(::apipb::DisableMrtRequest)},
  { 503, -1, sizeof(::apipb::AddBmpRequest)},
  { 514, -1, sizeof(::apipb::DeleteBmpRequest)},
  { 521, -1, sizeof(::apipb::ListBmpRequest)},
  { 526, -1, sizeof(::apipb::ListBmpResponse_BmpStation_Conf)},
  { 533, -1, sizeof(::apipb::ListBmpResponse_BmpStation_State)},
  { 540, -1, sizeof(::apipb::ListBmpResponse_BmpStation)},
  { 547, -1, sizeof(::apipb::ListBmpResponse)},
  { 553, -1, sizeof(::apipb::Family)},
  { 560, -1, sizeof(::apipb::Validation)},
  { 570, -1, sizeof(::apipb::Path)},
  { 595, -1, sizeof(::apipb::Destination)},
  { 602, -1, sizeof(::apipb::Peer)},
  { 618, -1, sizeof(::apipb::PeerGroup)},
  { 634, -1, sizeof(::apipb::DynamicNeighbor)},
  { 641, -1, sizeof(::apipb::ApplyPolicy)},
  { 649, -1, sizeof(::apipb::PrefixLimit)},
  { 657, -1, sizeof(::apipb::PeerConf)},
  { 678, -1, sizeof(::apipb::PeerGroupConf)},
  { 692, -1, sizeof(::apipb::PeerGroupState)},
  { 708, -1, sizeof(::apipb::TtlSecurity)},
  { 715, -1, sizeof(::apipb::EbgpMultihop)},
  { 722, -1, sizeof(::apipb::RouteReflector)},
  { 729, -1, sizeof(::apipb::PeerState)},
  { 753, -1, sizeof(::apipb::Messages)},
  { 760, -1, sizeof(::apipb::Message)},
  { 774, -1, sizeof(::apipb::Queues)},
  { 781, -1, sizeof(::apipb::Timers)},
  { 788, -1, sizeof(::apipb::TimersConfig)},
  { 798, -1, sizeof(::apipb::TimersState)},
  { 810, -1, sizeof(::apipb::Transport)},
  { 823, -1, sizeof(::apipb::RouteServer)},
  { 830, -1, sizeof(::apipb::GracefulRestart)},
  { 846, -1, sizeof(::apipb::MpGracefulRestartConfig)},
  { 852, -1, sizeof(::apipb::MpGracefulRestartState)},
  { 862, -1, sizeof(::apipb::MpGracefulRestart)},
  { 869, -1, sizeof(::apipb::AfiSafiConfig)},
  { 876, -1, sizeof(::apipb::AfiSafiState)},
  { 886, -1, sizeof(::apipb::RouteSelectionOptionsConfig)},
  { 898, -1, sizeof(::apipb::RouteSelectionOptionsState)},
  { 910, -1, sizeof(::apipb::RouteSelectionOptions)},
  { 917, -1, sizeof(::apipb::UseMultiplePathsConfig)},
  { 923, -1, sizeof(::apipb::UseMultiplePathsState)},
  { 929, -1, sizeof(::apipb::EbgpConfig)},
  { 936, -1, sizeof(::apipb::EbgpState)},
  { 943, -1, sizeof(::apipb::Ebgp)},
  { 950, -1, sizeof(::apipb::IbgpConfig)},
  { 956, -1, sizeof(::apipb::IbgpState)},
  { 962, -1, sizeof(::apipb::Ibgp)},
  { 969, -1, sizeof(::apipb::UseMultiplePaths)},
  { 978, -1, sizeof(::apipb::RouteTargetMembershipConfig)},
  { 984, -1, sizeof(::apipb::RouteTargetMembershipState)},
  { 990, -1, sizeof(::apipb::RouteTargetMembership)},
  { 997, -1, sizeof(::apipb::LongLivedGracefulRestartConfig)},
  { 1004, -1, sizeof(::apipb::LongLivedGracefulRestartState)},
  { 1014, -1, sizeof(::apipb::LongLivedGracefulRestart)},
  { 1021, -1, sizeof(::apipb::AfiSafi)},
  { 1036, -1, sizeof(::apipb::AddPathsConfig)},
  { 1043, -1, sizeof(::apipb::AddPathsState)},
  { 1050, -1, sizeof(::apipb::AddPaths)},
  { 1057, -1, sizeof(::apipb::Prefix)},
  { 1065, -1, sizeof(::apipb::DefinedSet)},
  { 1074, -1, sizeof(::apipb::MatchSet)},
  { 1081, -1, sizeof(::apipb::AsPathLength)},
  { 1088, -1, sizeof(::apipb::Conditions)},
  { 1104, -1, sizeof(::apipb::CommunityAction)},
  { 1111, -1, sizeof(::apipb::MedAction)},
  { 1118, -1, sizeof(::apipb::AsPrependAction)},
  { 1126, -1, sizeof(::apipb::NexthopAction)},
  { 1134, -1, sizeof(::apipb::LocalPrefAction)},
  { 1140, -1, sizeof(::apipb::Actions)},
  { 1153, -1, sizeof(::apipb::Statement)},
  { 1161, -1, sizeof(::apipb::Policy)},
  { 1168, -1, sizeof(::apipb::PolicyAssignment)},
  { 1177, -1, sizeof(::apipb::RoutingPolicy)},
  { 1184, -1, sizeof(::apipb::Roa)},
  { 1194, -1, sizeof(::apipb::Vrf)},
  { 1204, -1, sizeof(::apipb::DefaultRouteDistance)},
  { 1211, -1, sizeof(::apipb::Global)},
  { 1228, -1, sizeof(::apipb::Confederation)},
  { 1236, -1, sizeof(::apipb::RPKIConf)},
  { 1243, -1, sizeof(::apipb::RPKIState)},
  { 1265, -1, sizeof(::apipb::Rpki)},
  { 1272, -1, sizeof(::apipb::SetLogLevelRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_StartBgpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_StopBgpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_GetBgpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_GetBgpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventRequest_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventRequest_Table_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventRequest_Table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventResponse_PeerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventResponse_TableEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_WatchEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeletePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UpdatePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UpdatePeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ResetPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ShutdownPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EnablePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DisablePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeletePeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UpdatePeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UpdatePeerGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPeerGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddDynamicNeighborRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeleteDynamicNeighborRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListDynamicNeighborRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListDynamicNeighborResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeletePathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TableLookupPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPathStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_GetTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_GetTableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeleteVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListVrfResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeletePolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPolicyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SetPoliciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeleteDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListDefinedSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddStatementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeleteStatementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListStatementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListStatementResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeletePolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListPolicyAssignmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SetPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeleteRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListRpkiResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EnableRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DisableRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ResetRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListRpkiTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListRpkiTableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EnableZebraRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EnableMrtRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DisableMrtRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddBmpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DeleteBmpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListBmpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListBmpResponse_BmpStation_Conf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListBmpResponse_BmpStation_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListBmpResponse_BmpStation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ListBmpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Family_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Validation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Destination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PeerGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DynamicNeighbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_ApplyPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PrefixLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PeerConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PeerGroupConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PeerGroupState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TtlSecurity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EbgpMultihop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteReflector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PeerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Messages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Queues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Timers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TimersConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_TimersState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Transport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_GracefulRestart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MpGracefulRestartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MpGracefulRestartState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MpGracefulRestart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AfiSafiConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AfiSafiState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteSelectionOptionsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteSelectionOptionsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteSelectionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UseMultiplePathsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UseMultiplePathsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EbgpConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_EbgpState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Ebgp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_IbgpConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_IbgpState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Ibgp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_UseMultiplePaths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteTargetMembershipConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteTargetMembershipState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RouteTargetMembership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LongLivedGracefulRestartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LongLivedGracefulRestartState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LongLivedGracefulRestart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AfiSafi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPathsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPathsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AddPaths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Prefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DefinedSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MatchSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AsPathLength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Conditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_CommunityAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_MedAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_AsPrependAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_NexthopAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_LocalPrefAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Actions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Statement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Policy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_PolicyAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RoutingPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Roa_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Vrf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_DefaultRouteDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Global_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Confederation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RPKIConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_RPKIState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_Rpki_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apipb::_SetLogLevelRequest_default_instance_),
};

const char descriptor_table_protodef_gobgp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013gobgp.proto\022\005apipb\032\031google/protobuf/an"
  "y.proto\032\033google/protobuf/empty.proto\032\037go"
  "ogle/protobuf/timestamp.proto\"0\n\017StartBg"
  "pRequest\022\035\n\006global\030\001 \001(\0132\r.apipb.Global\""
  "\020\n\016StopBgpRequest\"\017\n\rGetBgpRequest\"/\n\016Ge"
  "tBgpResponse\022\035\n\006global\030\001 \001(\0132\r.apipb.Glo"
  "bal\"\271\002\n\021WatchEventRequest\022+\n\004peer\030\001 \001(\0132"
  "\035.apipb.WatchEventRequest.Peer\022-\n\005table\030"
  "\002 \001(\0132\036.apipb.WatchEventRequest.Table\032\006\n"
  "\004Peer\032\277\001\n\005Table\0226\n\007filters\030\001 \003(\0132%.apipb"
  ".WatchEventRequest.Table.Filter\032~\n\006Filte"
  "r\0228\n\004type\030\001 \001(\0162*.apipb.WatchEventReques"
  "t.Table.Filter.Type\022\014\n\004init\030\002 \001(\010\",\n\004Typ"
  "e\022\010\n\004BEST\020\000\022\t\n\005ADJIN\020\001\022\017\n\013POST_POLICY\020\002\""
  "\317\002\n\022WatchEventResponse\0223\n\004peer\030\002 \001(\0132#.a"
  "pipb.WatchEventResponse.PeerEventH\000\0225\n\005t"
  "able\030\003 \001(\0132$.apipb.WatchEventResponse.Ta"
  "bleEventH\000\032\231\001\n\tPeerEvent\0226\n\004type\030\001 \001(\0162("
  ".apipb.WatchEventResponse.PeerEvent.Type"
  "\022\031\n\004peer\030\002 \001(\0132\013.apipb.Peer\"9\n\004Type\022\013\n\007U"
  "NKNOWN\020\000\022\010\n\004INIT\020\001\022\017\n\013END_OF_INIT\020\002\022\t\n\005S"
  "TATE\020\003\032(\n\nTableEvent\022\032\n\005paths\030\002 \003(\0132\013.ap"
  "ipb.PathB\007\n\005event\"+\n\016AddPeerRequest\022\031\n\004p"
  "eer\030\001 \001(\0132\013.apipb.Peer\"7\n\021DeletePeerRequ"
  "est\022\017\n\007address\030\001 \001(\t\022\021\n\tinterface\030\002 \001(\t\""
  "<\n\017ListPeerRequest\022\017\n\007address\030\001 \001(\t\022\030\n\020e"
  "nableAdvertised\030\002 \001(\010\"-\n\020ListPeerRespons"
  "e\022\031\n\004peer\030\001 \001(\0132\013.apipb.Peer\"H\n\021UpdatePe"
  "erRequest\022\031\n\004peer\030\001 \001(\0132\013.apipb.Peer\022\030\n\020"
  "do_soft_reset_in\030\002 \001(\010\"1\n\022UpdatePeerResp"
  "onse\022\033\n\023needs_soft_reset_in\030\001 \001(\010\"\270\001\n\020Re"
  "setPeerRequest\022\017\n\007address\030\001 \001(\t\022\025\n\rcommu"
  "nication\030\002 \001(\t\022\014\n\004soft\030\003 \001(\010\022=\n\tdirectio"
  "n\030\004 \001(\0162*.apipb.ResetPeerRequest.SoftRes"
  "etDirection\"/\n\022SoftResetDirection\022\006\n\002IN\020"
  "\000\022\007\n\003OUT\020\001\022\010\n\004BOTH\020\002\"=\n\023ShutdownPeerRequ"
  "est\022\017\n\007address\030\001 \001(\t\022\025\n\rcommunication\030\002 "
  "\001(\t\"$\n\021EnablePeerRequest\022\017\n\007address\030\001 \001("
  "\t\"<\n\022DisablePeerRequest\022\017\n\007address\030\001 \001(\t"
  "\022\025\n\rcommunication\030\002 \001(\t\";\n\023AddPeerGroupR"
  "equest\022$\n\npeer_group\030\001 \001(\0132\020.apipb.PeerG"
  "roup\"&\n\026DeletePeerGroupRequest\022\014\n\004name\030\001"
  " \001(\t\"X\n\026UpdatePeerGroupRequest\022$\n\npeer_g"
  "roup\030\001 \001(\0132\020.apipb.PeerGroup\022\030\n\020do_soft_"
  "reset_in\030\002 \001(\010\"6\n\027UpdatePeerGroupRespons"
  "e\022\033\n\023needs_soft_reset_in\030\001 \001(\010\"/\n\024ListPe"
  "erGroupRequest\022\027\n\017peer_group_name\030\001 \001(\t\""
  "=\n\025ListPeerGroupResponse\022$\n\npeer_group\030\001"
  " \001(\0132\020.apipb.PeerGroup\"M\n\031AddDynamicNeig"
  "hborRequest\0220\n\020dynamic_neighbor\030\001 \001(\0132\026."
  "apipb.DynamicNeighbor\"B\n\034DeleteDynamicNe"
  "ighborRequest\022\016\n\006prefix\030\001 \001(\t\022\022\n\npeer_gr"
  "oup\030\002 \001(\t\"0\n\032ListDynamicNeighborRequest\022"
  "\022\n\npeer_group\030\001 \001(\t\"O\n\033ListDynamicNeighb"
  "orResponse\0220\n\020dynamic_neighbor\030\001 \001(\0132\026.a"
  "pipb.DynamicNeighbor\"a\n\016AddPathRequest\022$"
  "\n\ntable_type\030\001 \001(\0162\020.apipb.TableType\022\016\n\006"
  "vrf_id\030\002 \001(\t\022\031\n\004path\030\003 \001(\0132\013.apipb.Path\""
  "\037\n\017AddPathResponse\022\014\n\004uuid\030\001 \001(\014\"\221\001\n\021Del"
  "etePathRequest\022$\n\ntable_type\030\001 \001(\0162\020.api"
  "pb.TableType\022\016\n\006vrf_id\030\002 \001(\t\022\035\n\006family\030\003"
  " \001(\0132\r.apipb.Family\022\031\n\004path\030\004 \001(\0132\013.apip"
  "b.Path\022\014\n\004uuid\030\005 \001(\014\"|\n\021TableLookupPrefi"
  "x\022\016\n\006prefix\030\001 \001(\t\022+\n\004type\030\002 \001(\0162\035.apipb."
  "TableLookupPrefix.Type\"*\n\004Type\022\t\n\005EXACT\020"
  "\000\022\n\n\006LONGER\020\001\022\013\n\007SHORTER\020\002\"\330\002\n\017ListPathR"
  "equest\022$\n\ntable_type\030\001 \001(\0162\020.apipb.Table"
  "Type\022\014\n\004name\030\002 \001(\t\022\035\n\006family\030\003 \001(\0132\r.api"
  "pb.Family\022*\n\010prefixes\030\004 \003(\0132\030.apipb.Tabl"
  "eLookupPrefix\0222\n\tsort_type\030\005 \001(\0162\037.apipb"
  ".ListPathRequest.SortType\022\027\n\017enable_filt"
  "ered\030\006 \001(\010\022\032\n\022enable_nlri_binary\030\007 \001(\010\022\037"
  "\n\027enable_attribute_binary\030\010 \001(\010\022\032\n\022enabl"
  "e_only_binary\030\t \001(\010\" \n\010SortType\022\010\n\004NONE\020"
  "\000\022\n\n\006PREFIX\020\001\";\n\020ListPathResponse\022\'\n\013des"
  "tination\030\001 \001(\0132\022.apipb.Destination\"h\n\024Ad"
  "dPathStreamRequest\022$\n\ntable_type\030\001 \001(\0162\020"
  ".apipb.TableType\022\016\n\006vrf_id\030\002 \001(\t\022\032\n\005path"
  "s\030\003 \003(\0132\013.apipb.Path\"d\n\017GetTableRequest\022"
  "$\n\ntable_type\030\001 \001(\0162\020.apipb.TableType\022\035\n"
  "\006family\030\002 \001(\0132\r.apipb.Family\022\014\n\004name\030\003 \001"
  "(\t\"S\n\020GetTableResponse\022\027\n\017num_destinatio"
  "n\030\001 \001(\004\022\020\n\010num_path\030\002 \001(\004\022\024\n\014num_accepte"
  "d\030\003 \001(\004\"(\n\rAddVrfRequest\022\027\n\003vrf\030\001 \001(\0132\n."
  "apipb.Vrf\" \n\020DeleteVrfRequest\022\014\n\004name\030\001 "
  "\001(\t\"\036\n\016ListVrfRequest\022\014\n\004name\030\001 \001(\t\"*\n\017L"
  "istVrfResponse\022\027\n\003vrf\030\001 \001(\0132\n.apipb.Vrf\""
  "T\n\020AddPolicyRequest\022\035\n\006policy\030\001 \001(\0132\r.ap"
  "ipb.Policy\022!\n\031refer_existing_statements\030"
  "\002 \001(\010\"^\n\023DeletePolicyRequest\022\035\n\006policy\030\001"
  " \001(\0132\r.apipb.Policy\022\033\n\023preserve_statemen"
  "ts\030\002 \001(\010\022\013\n\003all\030\003 \001(\010\"!\n\021ListPolicyReque"
  "st\022\014\n\004name\030\001 \001(\t\"3\n\022ListPolicyResponse\022\035"
  "\n\006policy\030\001 \001(\0132\r.apipb.Policy\"\214\001\n\022SetPol"
  "iciesRequest\022\'\n\014defined_sets\030\001 \003(\0132\021.api"
  "pb.DefinedSet\022\037\n\010policies\030\002 \003(\0132\r.apipb."
  "Policy\022,\n\013assignments\030\003 \003(\0132\027.apipb.Poli"
  "cyAssignment\">\n\024AddDefinedSetRequest\022&\n\013"
  "defined_set\030\001 \001(\0132\021.apipb.DefinedSet\"N\n\027"
  "DeleteDefinedSetRequest\022&\n\013defined_set\030\001"
  " \001(\0132\021.apipb.DefinedSet\022\013\n\003all\030\002 \001(\010\"O\n\025"
  "ListDefinedSetRequest\022(\n\014defined_type\030\001 "
  "\001(\0162\022.apipb.DefinedType\022\014\n\004name\030\002 \001(\t\"@\n"
  "\026ListDefinedSetResponse\022&\n\013defined_set\030\001"
  " \001(\0132\021.apipb.DefinedSet\":\n\023AddStatementR"
  "equest\022#\n\tstatement\030\001 \001(\0132\020.apipb.Statem"
  "ent\"J\n\026DeleteStatementRequest\022#\n\tstateme"
  "nt\030\001 \001(\0132\020.apipb.Statement\022\013\n\003all\030\002 \001(\010\""
  "$\n\024ListStatementRequest\022\014\n\004name\030\001 \001(\t\"<\n"
  "\025ListStatementResponse\022#\n\tstatement\030\001 \001("
  "\0132\020.apipb.Statement\"I\n\032AddPolicyAssignme"
  "ntRequest\022+\n\nassignment\030\001 \001(\0132\027.apipb.Po"
  "licyAssignment\"Y\n\035DeletePolicyAssignment"
  "Request\022+\n\nassignment\030\001 \001(\0132\027.apipb.Poli"
  "cyAssignment\022\013\n\003all\030\002 \001(\010\"V\n\033ListPolicyA"
  "ssignmentRequest\022\014\n\004name\030\001 \001(\t\022)\n\tdirect"
  "ion\030\002 \001(\0162\026.apipb.PolicyDirection\"K\n\034Lis"
  "tPolicyAssignmentResponse\022+\n\nassignment\030"
  "\001 \001(\0132\027.apipb.PolicyAssignment\"I\n\032SetPol"
  "icyAssignmentRequest\022+\n\nassignment\030\001 \001(\013"
  "2\027.apipb.PolicyAssignment\"A\n\016AddRpkiRequ"
  "est\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\020\n\010li"
  "fetime\030\003 \001(\003\"2\n\021DeleteRpkiRequest\022\017\n\007add"
  "ress\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"0\n\017ListRpkiRequ"
  "est\022\035\n\006family\030\001 \001(\0132\r.apipb.Family\"/\n\020Li"
  "stRpkiResponse\022\033\n\006server\030\001 \001(\0132\013.apipb.R"
  "pki\"2\n\021EnableRpkiRequest\022\017\n\007address\030\001 \001("
  "\t\022\014\n\004port\030\002 \001(\r\"3\n\022DisableRpkiRequest\022\017\n"
  "\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"\?\n\020ResetRpk"
  "iRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022"
  "\014\n\004soft\030\003 \001(\010\"5\n\024ListRpkiTableRequest\022\035\n"
  "\006family\030\001 \001(\0132\r.apipb.Family\"0\n\025ListRpki"
  "TableResponse\022\027\n\003roa\030\001 \001(\0132\n.apipb.Roa\"\274"
  "\001\n\022EnableZebraRequest\022\013\n\003url\030\001 \001(\t\022\023\n\013ro"
  "ute_types\030\002 \003(\t\022\017\n\007version\030\003 \001(\r\022\036\n\026next"
  "hop_trigger_enable\030\004 \001(\010\022\035\n\025nexthop_trig"
  "ger_delay\030\005 \001(\r\022\035\n\025mpls_label_range_size"
  "\030\006 \001(\r\022\025\n\rsoftware_name\030\007 \001(\t\"\252\001\n\020Enable"
  "MrtRequest\022.\n\004type\030\001 \001(\0162 .apipb.EnableM"
  "rtRequest.DumpType\022\020\n\010filename\030\002 \001(\t\022\025\n\r"
  "dump_interval\030\003 \001(\004\022\031\n\021rotation_interval"
  "\030\004 \001(\004\"\"\n\010DumpType\022\013\n\007UPDATES\020\000\022\t\n\005TABLE"
  "\020\001\"%\n\021DisableMrtRequest\022\020\n\010filename\030\001 \001("
  "\t\"\350\001\n\rAddBmpRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004"
  "port\030\002 \001(\r\0225\n\006policy\030\003 \001(\0162%.apipb.AddBm"
  "pRequest.MonitoringPolicy\022\031\n\021StatisticsT"
  "imeout\030\004 \001(\005\022\017\n\007SysName\030\005 \001(\t\022\020\n\010SysDesc"
  "r\030\006 \001(\t\"C\n\020MonitoringPolicy\022\007\n\003PRE\020\000\022\010\n\004"
  "POST\020\001\022\010\n\004BOTH\020\002\022\t\n\005LOCAL\020\003\022\007\n\003ALL\020\004\"1\n\020"
  "DeleteBmpRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004por"
  "t\030\002 \001(\r\"\020\n\016ListBmpRequest\"\314\002\n\017ListBmpRes"
  "ponse\0222\n\007station\030\001 \001(\0132!.apipb.ListBmpRe"
  "sponse.BmpStation\032\204\002\n\nBmpStation\0224\n\004conf"
  "\030\001 \001(\0132&.apipb.ListBmpResponse.BmpStatio"
  "n.Conf\0226\n\005state\030\002 \001(\0132\'.apipb.ListBmpRes"
  "ponse.BmpStation.State\032%\n\004Conf\022\017\n\007addres"
  "s\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\032a\n\005State\022*\n\006uptime"
  "\030\001 \001(\0132\032.google.protobuf.Timestamp\022,\n\010do"
  "wntime\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\"\206\004\n\006Family\022\036\n\003afi\030\001 \001(\0162\021.apipb.Family."
  "Afi\022 \n\004safi\030\002 \001(\0162\022.apipb.Family.Safi\"^\n"
  "\003Afi\022\017\n\013AFI_UNKNOWN\020\000\022\n\n\006AFI_IP\020\001\022\013\n\007AFI"
  "_IP6\020\002\022\r\n\tAFI_L2VPN\020\031\022\014\n\006AFI_LS\020\204\200\001\022\020\n\nA"
  "FI_OPAQUE\020\215\200\001\"\331\002\n\004Safi\022\020\n\014SAFI_UNKNOWN\020\000"
  "\022\020\n\014SAFI_UNICAST\020\001\022\022\n\016SAFI_MULTICAST\020\002\022\023"
  "\n\017SAFI_MPLS_LABEL\020\004\022\026\n\022SAFI_ENCAPSULATIO"
  "N\020\007\022\r\n\tSAFI_VPLS\020A\022\r\n\tSAFI_EVPN\020F\022\013\n\007SAF"
  "I_LS\020G\022\022\n\016SAFI_SR_POLICY\020I\022\014\n\010SAFI_MUP\020U"
  "\022\022\n\rSAFI_MPLS_VPN\020\200\001\022\034\n\027SAFI_MPLS_VPN_MU"
  "LTICAST\020\201\001\022\"\n\035SAFI_ROUTE_TARGET_CONSTRAI"
  "NTS\020\204\001\022\033\n\026SAFI_FLOW_SPEC_UNICAST\020\205\001\022\027\n\022S"
  "AFI_FLOW_SPEC_VPN\020\206\001\022\023\n\016SAFI_KEY_VALUE\020\361"
  "\001\"\324\002\n\nValidation\022&\n\005state\030\001 \001(\0162\027.apipb."
  "Validation.State\022(\n\006reason\030\002 \001(\0162\030.apipb"
  ".Validation.Reason\022\033\n\007matched\030\003 \003(\0132\n.ap"
  "ipb.Roa\022!\n\runmatched_asn\030\004 \003(\0132\n.apipb.R"
  "oa\022$\n\020unmatched_length\030\005 \003(\0132\n.apipb.Roa"
  "\"P\n\005State\022\016\n\nSTATE_NONE\020\000\022\023\n\017STATE_NOT_F"
  "OUND\020\001\022\017\n\013STATE_VALID\020\002\022\021\n\rSTATE_INVALID"
  "\020\003\"<\n\006Reason\022\017\n\013REASON_NONE\020\000\022\016\n\nREASON_"
  "ASN\020\001\022\021\n\rREASON_LENGTH\020\002\"\373\003\n\004Path\022\"\n\004nlr"
  "i\030\001 \001(\0132\024.google.protobuf.Any\022$\n\006pattrs\030"
  "\002 \003(\0132\024.google.protobuf.Any\022\'\n\003age\030\003 \001(\013"
  "2\032.google.protobuf.Timestamp\022\014\n\004best\030\004 \001"
  "(\010\022\023\n\013is_withdraw\030\005 \001(\010\022%\n\nvalidation\030\007 "
  "\001(\0132\021.apipb.Validation\022\034\n\024no_implicit_wi"
  "thdraw\030\010 \001(\010\022\035\n\006family\030\t \001(\0132\r.apipb.Fam"
  "ily\022\022\n\nsource_asn\030\n \001(\r\022\021\n\tsource_id\030\013 \001"
  "(\t\022\020\n\010filtered\030\014 \001(\010\022\r\n\005stale\030\r \001(\010\022\030\n\020i"
  "s_from_external\030\016 \001(\010\022\023\n\013neighbor_ip\030\017 \001"
  "(\t\022\014\n\004uuid\030\020 \001(\014\022\032\n\022is_nexthop_invalid\030\021"
  " \001(\010\022\022\n\nidentifier\030\022 \001(\r\022\030\n\020local_identi"
  "fier\030\023 \001(\r\022\023\n\013nlri_binary\030\024 \001(\014\022\025\n\rpattr"
  "s_binary\030\025 \003(\014\"9\n\013Destination\022\016\n\006prefix\030"
  "\001 \001(\t\022\032\n\005paths\030\002 \003(\0132\013.apipb.Path\"\271\003\n\004Pe"
  "er\022(\n\014apply_policy\030\001 \001(\0132\022.apipb.ApplyPo"
  "licy\022\035\n\004conf\030\002 \001(\0132\017.apipb.PeerConf\022*\n\re"
  "bgp_multihop\030\003 \001(\0132\023.apipb.EbgpMultihop\022"
  ".\n\017route_reflector\030\004 \001(\0132\025.apipb.RouteRe"
  "flector\022\037\n\005state\030\005 \001(\0132\020.apipb.PeerState"
  "\022\035\n\006timers\030\006 \001(\0132\r.apipb.Timers\022#\n\ttrans"
  "port\030\007 \001(\0132\020.apipb.Transport\022(\n\014route_se"
  "rver\030\010 \001(\0132\022.apipb.RouteServer\0220\n\020gracef"
  "ul_restart\030\t \001(\0132\026.apipb.GracefulRestart"
  "\022!\n\tafi_safis\030\n \003(\0132\016.apipb.AfiSafi\022(\n\014t"
  "tl_security\030\013 \001(\0132\022.apipb.TtlSecurity\"\307\003"
  "\n\tPeerGroup\022(\n\014apply_policy\030\001 \001(\0132\022.apip"
  "b.ApplyPolicy\022\"\n\004conf\030\002 \001(\0132\024.apipb.Peer"
  "GroupConf\022*\n\rebgp_multihop\030\003 \001(\0132\023.apipb"
  ".EbgpMultihop\022.\n\017route_reflector\030\004 \001(\0132\025"
  ".apipb.RouteReflector\022#\n\004info\030\005 \001(\0132\025.ap"
  "ipb.PeerGroupState\022\035\n\006timers\030\006 \001(\0132\r.api"
  "pb.Timers\022#\n\ttransport\030\007 \001(\0132\020.apipb.Tra"
  "nsport\022(\n\014route_server\030\010 \001(\0132\022.apipb.Rou"
  "teServer\0220\n\020graceful_restart\030\t \001(\0132\026.api"
  "pb.GracefulRestart\022!\n\tafi_safis\030\n \003(\0132\016."
  "apipb.AfiSafi\022(\n\014ttl_security\030\013 \001(\0132\022.ap"
  "ipb.TtlSecurity\"5\n\017DynamicNeighbor\022\016\n\006pr"
  "efix\030\001 \001(\t\022\022\n\npeer_group\030\002 \001(\t\"\231\001\n\013Apply"
  "Policy\022*\n\tin_policy\030\001 \001(\0132\027.apipb.Policy"
  "Assignment\022.\n\rexport_policy\030\002 \001(\0132\027.apip"
  "b.PolicyAssignment\022.\n\rimport_policy\030\003 \001("
  "\0132\027.apipb.PolicyAssignment\"b\n\013PrefixLimi"
  "t\022\035\n\006family\030\001 \001(\0132\r.apipb.Family\022\024\n\014max_"
  "prefixes\030\002 \001(\r\022\036\n\026shutdown_threshold_pct"
  "\030\003 \001(\r\"\227\003\n\010PeerConf\022\025\n\rauth_password\030\001 \001"
  "(\t\022\023\n\013description\030\002 \001(\t\022\021\n\tlocal_asn\030\003 \001"
  "(\r\022\030\n\020neighbor_address\030\004 \001(\t\022\020\n\010peer_asn"
  "\030\005 \001(\r\022\022\n\npeer_group\030\006 \001(\t\022\035\n\004type\030\007 \001(\016"
  "2\017.apipb.PeerType\022,\n\016remove_private\030\010 \001("
  "\0162\024.apipb.RemovePrivate\022\032\n\022route_flap_da"
  "mping\030\t \001(\010\022\026\n\016send_community\030\n \001(\r\022\032\n\022n"
  "eighbor_interface\030\013 \001(\t\022\013\n\003vrf\030\014 \001(\t\022\025\n\r"
  "allow_own_asn\030\r \001(\r\022\030\n\020replace_peer_asn\030"
  "\016 \001(\010\022\022\n\nadmin_down\030\017 \001(\010\022\035\n\025send_softwa"
  "re_version\030\020 \001(\010\"\372\001\n\rPeerGroupConf\022\025\n\rau"
  "th_password\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\021"
  "\n\tlocal_asn\030\003 \001(\r\022\020\n\010peer_asn\030\004 \001(\r\022\027\n\017p"
  "eer_group_name\030\005 \001(\t\022\035\n\004type\030\006 \001(\0162\017.api"
  "pb.PeerType\022,\n\016remove_private\030\007 \001(\0162\024.ap"
  "ipb.RemovePrivate\022\032\n\022route_flap_damping\030"
  "\010 \001(\010\022\026\n\016send_community\030\t \001(\r\"\250\002\n\016PeerGr"
  "oupState\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013descr"
  "iption\030\002 \001(\t\022\021\n\tlocal_asn\030\003 \001(\r\022\020\n\010peer_"
  "asn\030\004 \001(\r\022\027\n\017peer_group_name\030\005 \001(\t\022\035\n\004ty"
  "pe\030\006 \001(\0162\017.apipb.PeerType\022,\n\016remove_priv"
  "ate\030\007 \001(\0162\024.apipb.RemovePrivate\022\032\n\022route"
  "_flap_damping\030\010 \001(\010\022\026\n\016send_community\030\t "
  "\001(\r\022\023\n\013total_paths\030\n \001(\r\022\026\n\016total_prefix"
  "es\030\013 \001(\r\"/\n\013TtlSecurity\022\017\n\007enabled\030\001 \001(\010"
  "\022\017\n\007ttl_min\030\002 \001(\r\"5\n\014EbgpMultihop\022\017\n\007ena"
  "bled\030\001 \001(\010\022\024\n\014multihop_ttl\030\002 \001(\r\"T\n\016Rout"
  "eReflector\022\036\n\026route_reflector_client\030\001 \001"
  "(\010\022\"\n\032route_reflector_cluster_id\030\002 \001(\t\"\325"
  "\005\n\tPeerState\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013d"
  "escription\030\002 \001(\t\022\021\n\tlocal_asn\030\003 \001(\r\022!\n\010m"
  "essages\030\004 \001(\0132\017.apipb.Messages\022\030\n\020neighb"
  "or_address\030\005 \001(\t\022\020\n\010peer_asn\030\006 \001(\r\022\022\n\npe"
  "er_group\030\007 \001(\t\022\035\n\004type\030\010 \001(\0162\017.apipb.Pee"
  "rType\022\035\n\006queues\030\t \001(\0132\r.apipb.Queues\022,\n\016"
  "remove_private\030\n \001(\0162\024.apipb.RemovePriva"
  "te\022\032\n\022route_flap_damping\030\013 \001(\010\022\026\n\016send_c"
  "ommunity\030\014 \001(\r\0224\n\rsession_state\030\r \001(\0162\035."
  "apipb.PeerState.SessionState\0220\n\013admin_st"
  "ate\030\017 \001(\0162\033.apipb.PeerState.AdminState\022\r"
  "\n\005out_q\030\020 \001(\r\022\r\n\005flops\030\021 \001(\r\022(\n\nremote_c"
  "ap\030\022 \003(\0132\024.google.protobuf.Any\022\'\n\tlocal_"
  "cap\030\023 \003(\0132\024.google.protobuf.Any\022\021\n\troute"
  "r_id\030\024 \001(\t\"n\n\014SessionState\022\013\n\007UNKNOWN\020\000\022"
  "\010\n\004IDLE\020\001\022\013\n\007CONNECT\020\002\022\n\n\006ACTIVE\020\003\022\014\n\010OP"
  "ENSENT\020\004\022\017\n\013OPENCONFIRM\020\005\022\017\n\013ESTABLISHED"
  "\020\006\"*\n\nAdminState\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\n\n\006PF"
  "X_CT\020\002\"J\n\010Messages\022 \n\010received\030\001 \001(\0132\016.a"
  "pipb.Message\022\034\n\004sent\030\002 \001(\0132\016.apipb.Messa"
  "ge\"\265\001\n\007Message\022\024\n\014notification\030\001 \001(\004\022\016\n\006"
  "update\030\002 \001(\004\022\014\n\004open\030\003 \001(\004\022\021\n\tkeepalive\030"
  "\004 \001(\004\022\017\n\007refresh\030\005 \001(\004\022\021\n\tdiscarded\030\006 \001("
  "\004\022\r\n\005total\030\007 \001(\004\022\027\n\017withdraw_update\030\010 \001("
  "\004\022\027\n\017withdraw_prefix\030\t \001(\004\"\'\n\006Queues\022\r\n\005"
  "input\030\001 \001(\r\022\016\n\006output\030\002 \001(\r\"P\n\006Timers\022#\n"
  "\006config\030\001 \001(\0132\023.apipb.TimersConfig\022!\n\005st"
  "ate\030\002 \001(\0132\022.apipb.TimersState\"\240\001\n\014Timers"
  "Config\022\025\n\rconnect_retry\030\001 \001(\004\022\021\n\thold_ti"
  "me\030\002 \001(\004\022\032\n\022keepalive_interval\030\003 \001(\004\022&\n\036"
  "minimum_advertisement_interval\030\004 \001(\004\022\"\n\032"
  "idle_hold_time_after_reset\030\005 \001(\004\"\363\001\n\013Tim"
  "ersState\022\025\n\rconnect_retry\030\001 \001(\004\022\021\n\thold_"
  "time\030\002 \001(\004\022\032\n\022keepalive_interval\030\003 \001(\004\022&"
  "\n\036minimum_advertisement_interval\030\004 \001(\004\022\034"
  "\n\024negotiated_hold_time\030\005 \001(\004\022*\n\006uptime\030\006"
  " \001(\0132\032.google.protobuf.Timestamp\022,\n\010down"
  "time\030\007 \001(\0132\032.google.protobuf.Timestamp\"\271"
  "\001\n\tTransport\022\025\n\rlocal_address\030\001 \001(\t\022\022\n\nl"
  "ocal_port\030\002 \001(\r\022\025\n\rmtu_discovery\030\003 \001(\010\022\024"
  "\n\014passive_mode\030\004 \001(\010\022\026\n\016remote_address\030\005"
  " \001(\t\022\023\n\013remote_port\030\006 \001(\r\022\017\n\007tcp_mss\030\007 \001"
  "(\r\022\026\n\016bind_interface\030\010 \001(\t\"C\n\013RouteServe"
  "r\022\033\n\023route_server_client\030\001 \001(\010\022\027\n\017second"
  "ary_route\030\002 \001(\010\"\224\002\n\017GracefulRestart\022\017\n\007e"
  "nabled\030\001 \001(\010\022\024\n\014restart_time\030\002 \001(\r\022\023\n\013he"
  "lper_only\030\003 \001(\010\022\025\n\rdeferral_time\030\004 \001(\r\022\034"
  "\n\024notification_enabled\030\005 \001(\010\022\031\n\021longlive"
  "d_enabled\030\006 \001(\010\022\031\n\021stale_routes_time\030\007 \001"
  "(\r\022\031\n\021peer_restart_time\030\010 \001(\r\022\027\n\017peer_re"
  "starting\030\t \001(\010\022\030\n\020local_restarting\030\n \001(\010"
  "\022\014\n\004mode\030\013 \001(\t\"*\n\027MpGracefulRestartConfi"
  "g\022\017\n\007enabled\030\001 \001(\010\"\205\001\n\026MpGracefulRestart"
  "State\022\017\n\007enabled\030\001 \001(\010\022\020\n\010received\030\002 \001(\010"
  "\022\022\n\nadvertised\030\003 \001(\010\022\033\n\023end_of_rib_recei"
  "ved\030\004 \001(\010\022\027\n\017end_of_rib_sent\030\005 \001(\010\"q\n\021Mp"
  "GracefulRestart\022.\n\006config\030\001 \001(\0132\036.apipb."
  "MpGracefulRestartConfig\022,\n\005state\030\002 \001(\0132\035"
  ".apipb.MpGracefulRestartState\"\?\n\rAfiSafi"
  "Config\022\035\n\006family\030\001 \001(\0132\r.apipb.Family\022\017\n"
  "\007enabled\030\002 \001(\010\"v\n\014AfiSafiState\022\035\n\006family"
  "\030\001 \001(\0132\r.apipb.Family\022\017\n\007enabled\030\002 \001(\010\022\020"
  "\n\010received\030\003 \001(\004\022\020\n\010accepted\030\004 \001(\004\022\022\n\nad"
  "vertised\030\005 \001(\004\"\375\001\n\033RouteSelectionOptions"
  "Config\022\032\n\022always_compare_med\030\001 \001(\010\022\035\n\025ig"
  "nore_as_path_length\030\002 \001(\010\022\"\n\032external_co"
  "mpare_router_id\030\003 \001(\010\022!\n\031advertise_inact"
  "ive_routes\030\004 \001(\010\022\023\n\013enable_aigp\030\005 \001(\010\022\"\n"
  "\032ignore_next_hop_igp_metric\030\006 \001(\010\022#\n\033dis"
  "able_best_path_selection\030\007 \001(\010\"\374\001\n\032Route"
  "SelectionOptionsState\022\032\n\022always_compare_"
  "med\030\001 \001(\010\022\035\n\025ignore_as_path_length\030\002 \001(\010"
  "\022\"\n\032external_compare_router_id\030\003 \001(\010\022!\n\031"
  "advertise_inactive_routes\030\004 \001(\010\022\023\n\013enabl"
  "e_aigp\030\005 \001(\010\022\"\n\032ignore_next_hop_igp_metr"
  "ic\030\006 \001(\010\022#\n\033disable_best_path_selection\030"
  "\007 \001(\010\"}\n\025RouteSelectionOptions\0222\n\006config"
  "\030\001 \001(\0132\".apipb.RouteSelectionOptionsConf"
  "ig\0220\n\005state\030\002 \001(\0132!.apipb.RouteSelection"
  "OptionsState\")\n\026UseMultiplePathsConfig\022\017"
  "\n\007enabled\030\001 \001(\010\"(\n\025UseMultiplePathsState"
  "\022\017\n\007enabled\030\001 \001(\010\"\?\n\nEbgpConfig\022\032\n\022allow"
  "_multiple_asn\030\001 \001(\010\022\025\n\rmaximum_paths\030\002 \001"
  "(\r\">\n\tEbgpState\022\032\n\022allow_multiple_asn\030\001 "
  "\001(\010\022\025\n\rmaximum_paths\030\002 \001(\r\"J\n\004Ebgp\022!\n\006co"
  "nfig\030\001 \001(\0132\021.apipb.EbgpConfig\022\037\n\005state\030\002"
  " \001(\0132\020.apipb.EbgpState\"#\n\nIbgpConfig\022\025\n\r"
  "maximum_paths\030\001 \001(\r\"\"\n\tIbgpState\022\025\n\rmaxi"
  "mum_paths\030\001 \001(\r\"J\n\004Ibgp\022!\n\006config\030\001 \001(\0132"
  "\021.apipb.IbgpConfig\022\037\n\005state\030\002 \001(\0132\020.apip"
  "b.IbgpState\"\244\001\n\020UseMultiplePaths\022-\n\006conf"
  "ig\030\001 \001(\0132\035.apipb.UseMultiplePathsConfig\022"
  "+\n\005state\030\002 \001(\0132\034.apipb.UseMultiplePathsS"
  "tate\022\031\n\004ebgp\030\003 \001(\0132\013.apipb.Ebgp\022\031\n\004ibgp\030"
  "\004 \001(\0132\013.apipb.Ibgp\"4\n\033RouteTargetMembers"
  "hipConfig\022\025\n\rdeferral_time\030\001 \001(\r\"3\n\032Rout"
  "eTargetMembershipState\022\025\n\rdeferral_time\030"
  "\001 \001(\r\"}\n\025RouteTargetMembership\0222\n\006config"
  "\030\001 \001(\0132\".apipb.RouteTargetMembershipConf"
  "ig\0220\n\005state\030\002 \001(\0132!.apipb.RouteTargetMem"
  "bershipState\"G\n\036LongLivedGracefulRestart"
  "Config\022\017\n\007enabled\030\001 \001(\010\022\024\n\014restart_time\030"
  "\002 \001(\r\"\225\001\n\035LongLivedGracefulRestartState\022"
  "\017\n\007enabled\030\001 \001(\010\022\020\n\010received\030\002 \001(\010\022\022\n\nad"
  "vertised\030\003 \001(\010\022\031\n\021peer_restart_time\030\004 \001("
  "\r\022\"\n\032peer_restart_timer_expired\030\005 \001(\010\"\206\001"
  "\n\030LongLivedGracefulRestart\0225\n\006config\030\001 \001"
  "(\0132%.apipb.LongLivedGracefulRestartConfi"
  "g\0223\n\005state\030\002 \001(\0132$.apipb.LongLivedGracef"
  "ulRestartState\"\374\003\n\007AfiSafi\0225\n\023mp_gracefu"
  "l_restart\030\001 \001(\0132\030.apipb.MpGracefulRestar"
  "t\022$\n\006config\030\002 \001(\0132\024.apipb.AfiSafiConfig\022"
  "\"\n\005state\030\003 \001(\0132\023.apipb.AfiSafiState\022(\n\014a"
  "pply_policy\030\004 \001(\0132\022.apipb.ApplyPolicy\022=\n"
  "\027route_selection_options\030\005 \001(\0132\034.apipb.R"
  "outeSelectionOptions\0223\n\022use_multiple_pat"
  "hs\030\006 \001(\0132\027.apipb.UseMultiplePaths\022)\n\rpre"
  "fix_limits\030\007 \001(\0132\022.apipb.PrefixLimit\022=\n\027"
  "route_target_membership\030\010 \001(\0132\034.apipb.Ro"
  "uteTargetMembership\022D\n\033long_lived_gracef"
  "ul_restart\030\t \001(\0132\037.apipb.LongLivedGracef"
  "ulRestart\022\"\n\tadd_paths\030\n \001(\0132\017.apipb.Add"
  "Paths\"3\n\016AddPathsConfig\022\017\n\007receive\030\001 \001(\010"
  "\022\020\n\010send_max\030\002 \001(\r\"2\n\rAddPathsState\022\017\n\007r"
  "eceive\030\001 \001(\010\022\020\n\010send_max\030\002 \001(\r\"V\n\010AddPat"
  "hs\022%\n\006config\030\001 \001(\0132\025.apipb.AddPathsConfi"
  "g\022#\n\005state\030\002 \001(\0132\024.apipb.AddPathsState\"M"
  "\n\006Prefix\022\021\n\tip_prefix\030\001 \001(\t\022\027\n\017mask_leng"
  "th_min\030\002 \001(\r\022\027\n\017mask_length_max\030\003 \001(\r\"s\n"
  "\nDefinedSet\022(\n\014defined_type\030\001 \001(\0162\022.apip"
  "b.DefinedType\022\014\n\004name\030\002 \001(\t\022\014\n\004list\030\003 \003("
  "\t\022\037\n\010prefixes\030\004 \003(\0132\r.apipb.Prefix\"b\n\010Ma"
  "tchSet\022\"\n\004type\030\001 \001(\0162\024.apipb.MatchSet.Ty"
  "pe\022\014\n\004name\030\002 \001(\t\"$\n\004Type\022\007\n\003ANY\020\000\022\007\n\003ALL"
  "\020\001\022\n\n\006INVERT\020\002\"f\n\014AsPathLength\022&\n\004type\030\001"
  " \001(\0162\030.apipb.AsPathLength.Type\022\016\n\006length"
  "\030\002 \001(\r\"\036\n\004Type\022\006\n\002EQ\020\000\022\006\n\002GE\020\001\022\006\n\002LE\020\002\"\233"
  "\004\n\nConditions\022#\n\nprefix_set\030\001 \001(\0132\017.apip"
  "b.MatchSet\022%\n\014neighbor_set\030\002 \001(\0132\017.apipb"
  ".MatchSet\022+\n\016as_path_length\030\003 \001(\0132\023.apip"
  "b.AsPathLength\022$\n\013as_path_set\030\004 \001(\0132\017.ap"
  "ipb.MatchSet\022&\n\rcommunity_set\030\005 \001(\0132\017.ap"
  "ipb.MatchSet\022*\n\021ext_community_set\030\006 \001(\0132"
  "\017.apipb.MatchSet\022\023\n\013rpki_result\030\007 \001(\005\022/\n"
  "\nroute_type\030\010 \001(\0162\033.apipb.Conditions.Rou"
  "teType\022,\n\023large_community_set\030\t \001(\0132\017.ap"
  "ipb.MatchSet\022\030\n\020next_hop_in_list\030\n \003(\t\022\""
  "\n\013afi_safi_in\030\013 \003(\0132\r.apipb.Family\"h\n\tRo"
  "uteType\022\023\n\017ROUTE_TYPE_NONE\020\000\022\027\n\023ROUTE_TY"
  "PE_INTERNAL\020\001\022\027\n\023ROUTE_TYPE_EXTERNAL\020\002\022\024"
  "\n\020ROUTE_TYPE_LOCAL\020\003\"{\n\017CommunityAction\022"
  ")\n\004type\030\001 \001(\0162\033.apipb.CommunityAction.Ty"
  "pe\022\023\n\013communities\030\002 \003(\t\"(\n\004Type\022\007\n\003ADD\020\000"
  "\022\n\n\006REMOVE\020\001\022\013\n\007REPLACE\020\002\"]\n\tMedAction\022#"
  "\n\004type\030\001 \001(\0162\025.apipb.MedAction.Type\022\r\n\005v"
  "alue\030\002 \001(\003\"\034\n\004Type\022\007\n\003MOD\020\000\022\013\n\007REPLACE\020\001"
  "\"E\n\017AsPrependAction\022\013\n\003asn\030\001 \001(\r\022\016\n\006repe"
  "at\030\002 \001(\r\022\025\n\ruse_left_most\030\003 \001(\010\"A\n\rNexth"
  "opAction\022\017\n\007address\030\001 \001(\t\022\014\n\004self\030\002 \001(\010\022"
  "\021\n\tunchanged\030\003 \001(\010\" \n\017LocalPrefAction\022\r\n"
  "\005value\030\001 \001(\r\"\334\002\n\007Actions\022(\n\014route_action"
  "\030\001 \001(\0162\022.apipb.RouteAction\022)\n\tcommunity\030"
  "\002 \001(\0132\026.apipb.CommunityAction\022\035\n\003med\030\003 \001"
  "(\0132\020.apipb.MedAction\022*\n\nas_prepend\030\004 \001(\013"
  "2\026.apipb.AsPrependAction\022-\n\rext_communit"
  "y\030\005 \001(\0132\026.apipb.CommunityAction\022%\n\007nexth"
  "op\030\006 \001(\0132\024.apipb.NexthopAction\022*\n\nlocal_"
  "pref\030\007 \001(\0132\026.apipb.LocalPrefAction\022/\n\017la"
  "rge_community\030\010 \001(\0132\026.apipb.CommunityAct"
  "ion\"a\n\tStatement\022\014\n\004name\030\001 \001(\t\022%\n\ncondit"
  "ions\030\002 \001(\0132\021.apipb.Conditions\022\037\n\007actions"
  "\030\003 \001(\0132\016.apipb.Actions\"<\n\006Policy\022\014\n\004name"
  "\030\001 \001(\t\022$\n\nstatements\030\002 \003(\0132\020.apipb.State"
  "ment\"\230\001\n\020PolicyAssignment\022\014\n\004name\030\001 \001(\t\022"
  ")\n\tdirection\030\002 \001(\0162\026.apipb.PolicyDirecti"
  "on\022\037\n\010policies\030\004 \003(\0132\r.apipb.Policy\022*\n\016d"
  "efault_action\030\005 \001(\0162\022.apipb.RouteAction\""
  "Y\n\rRoutingPolicy\022\'\n\014defined_sets\030\001 \003(\0132\021"
  ".apipb.DefinedSet\022\037\n\010policies\030\002 \003(\0132\r.ap"
  "ipb.Policy\"d\n\003Roa\022\013\n\003asn\030\001 \001(\r\022\021\n\tprefix"
  "len\030\002 \001(\r\022\016\n\006maxlen\030\003 \001(\r\022\016\n\006prefix\030\004 \001("
  "\t\022\035\n\004conf\030\005 \001(\0132\017.apipb.RPKIConf\"\223\001\n\003Vrf"
  "\022\014\n\004name\030\001 \001(\t\022 \n\002rd\030\002 \001(\0132\024.google.prot"
  "obuf.Any\022\'\n\timport_rt\030\003 \003(\0132\024.google.pro"
  "tobuf.Any\022\'\n\texport_rt\030\004 \003(\0132\024.google.pr"
  "otobuf.Any\022\n\n\002id\030\005 \001(\r\"X\n\024DefaultRouteDi"
  "stance\022\037\n\027external_route_distance\030\001 \001(\r\022"
  "\037\n\027internal_route_distance\030\002 \001(\r\"\250\003\n\006Glo"
  "bal\022\013\n\003asn\030\001 \001(\r\022\021\n\trouter_id\030\002 \001(\t\022\023\n\013l"
  "isten_port\030\003 \001(\005\022\030\n\020listen_addresses\030\004 \003"
  "(\t\022\020\n\010families\030\005 \003(\r\022\032\n\022use_multiple_pat"
  "hs\030\006 \001(\010\022C\n\027route_selection_options\030\007 \001("
  "\0132\".apipb.RouteSelectionOptionsConfig\022;\n"
  "\026default_route_distance\030\010 \001(\0132\033.apipb.De"
  "faultRouteDistance\022+\n\rconfederation\030\t \001("
  "\0132\024.apipb.Confederation\0220\n\020graceful_rest"
  "art\030\n \001(\0132\026.apipb.GracefulRestart\022(\n\014app"
  "ly_policy\030\013 \001(\0132\022.apipb.ApplyPolicy\022\026\n\016b"
  "ind_to_device\030\014 \001(\t\"L\n\rConfederation\022\017\n\007"
  "enabled\030\001 \001(\010\022\022\n\nidentifier\030\002 \001(\r\022\026\n\016mem"
  "ber_as_list\030\003 \003(\r\"0\n\010RPKIConf\022\017\n\007address"
  "\030\001 \001(\t\022\023\n\013remote_port\030\002 \001(\r\"\226\003\n\tRPKIStat"
  "e\022*\n\006uptime\030\001 \001(\0132\032.google.protobuf.Time"
  "stamp\022,\n\010downtime\030\002 \001(\0132\032.google.protobu"
  "f.Timestamp\022\n\n\002up\030\003 \001(\010\022\023\n\013record_ipv4\030\004"
  " \001(\r\022\023\n\013record_ipv6\030\005 \001(\r\022\023\n\013prefix_ipv4"
  "\030\006 \001(\r\022\023\n\013prefix_ipv6\030\007 \001(\r\022\016\n\006serial\030\010 "
  "\001(\r\022\025\n\rreceived_ipv4\030\t \001(\003\022\025\n\rreceived_i"
  "pv6\030\n \001(\003\022\025\n\rserial_notify\030\013 \001(\003\022\023\n\013cach"
  "e_reset\030\014 \001(\003\022\026\n\016cache_response\030\r \001(\003\022\023\n"
  "\013end_of_data\030\016 \001(\003\022\r\n\005error\030\017 \001(\003\022\024\n\014ser"
  "ial_query\030\020 \001(\003\022\023\n\013reset_query\030\021 \001(\003\"F\n\004"
  "Rpki\022\035\n\004conf\030\001 \001(\0132\017.apipb.RPKIConf\022\037\n\005s"
  "tate\030\002 \001(\0132\020.apipb.RPKIState\"\230\001\n\022SetLogL"
  "evelRequest\022.\n\005level\030\001 \001(\0162\037.apipb.SetLo"
  "gLevelRequest.Level\"R\n\005Level\022\t\n\005PANIC\020\000\022"
  "\t\n\005FATAL\020\001\022\t\n\005ERROR\020\002\022\010\n\004WARN\020\003\022\010\n\004INFO\020"
  "\004\022\t\n\005DEBUG\020\005\022\t\n\005TRACE\020\006*D\n\tTableType\022\n\n\006"
  "GLOBAL\020\000\022\t\n\005LOCAL\020\001\022\n\n\006ADJ_IN\020\002\022\013\n\007ADJ_O"
  "UT\020\003\022\007\n\003VRF\020\004*&\n\010PeerType\022\014\n\010INTERNAL\020\000\022"
  "\014\n\010EXTERNAL\020\001*=\n\rRemovePrivate\022\017\n\013REMOVE"
  "_NONE\020\000\022\016\n\nREMOVE_ALL\020\001\022\013\n\007REPLACE\020\002*\202\001\n"
  "\013DefinedType\022\n\n\006PREFIX\020\000\022\014\n\010NEIGHBOR\020\001\022\007"
  "\n\003TAG\020\002\022\013\n\007AS_PATH\020\003\022\r\n\tCOMMUNITY\020\004\022\021\n\rE"
  "XT_COMMUNITY\020\005\022\023\n\017LARGE_COMMUNITY\020\006\022\014\n\010N"
  "EXT_HOP\020\007*/\n\013RouteAction\022\010\n\004NONE\020\000\022\n\n\006AC"
  "CEPT\020\001\022\n\n\006REJECT\020\002*6\n\017PolicyDirection\022\013\n"
  "\007UNKNOWN\020\000\022\n\n\006IMPORT\020\001\022\n\n\006EXPORT\020\0022\302\035\n\010G"
  "obgpApi\022:\n\010StartBgp\022\026.apipb.StartBgpRequ"
  "est\032\026.google.protobuf.Empty\0228\n\007StopBgp\022\025"
  ".apipb.StopBgpRequest\032\026.google.protobuf."
  "Empty\0225\n\006GetBgp\022\024.apipb.GetBgpRequest\032\025."
  "apipb.GetBgpResponse\022C\n\nWatchEvent\022\030.api"
  "pb.WatchEventRequest\032\031.apipb.WatchEventR"
  "esponse0\001\0228\n\007AddPeer\022\025.apipb.AddPeerRequ"
  "est\032\026.google.protobuf.Empty\022>\n\nDeletePee"
  "r\022\030.apipb.DeletePeerRequest\032\026.google.pro"
  "tobuf.Empty\022=\n\010ListPeer\022\026.apipb.ListPeer"
  "Request\032\027.apipb.ListPeerResponse0\001\022A\n\nUp"
  "datePeer\022\030.apipb.UpdatePeerRequest\032\031.api"
  "pb.UpdatePeerResponse\022<\n\tResetPeer\022\027.api"
  "pb.ResetPeerRequest\032\026.google.protobuf.Em"
  "pty\022B\n\014ShutdownPeer\022\032.apipb.ShutdownPeer"
  "Request\032\026.google.protobuf.Empty\022>\n\nEnabl"
  "ePeer\022\030.apipb.EnablePeerRequest\032\026.google"
  ".protobuf.Empty\022@\n\013DisablePeer\022\031.apipb.D"
  "isablePeerRequest\032\026.google.protobuf.Empt"
  "y\022B\n\014AddPeerGroup\022\032.apipb.AddPeerGroupRe"
  "quest\032\026.google.protobuf.Empty\022H\n\017DeleteP"
  "eerGroup\022\035.apipb.DeletePeerGroupRequest\032"
  "\026.google.protobuf.Empty\022L\n\rListPeerGroup"
  "\022\033.apipb.ListPeerGroupRequest\032\034.apipb.Li"
  "stPeerGroupResponse0\001\022P\n\017UpdatePeerGroup"
  "\022\035.apipb.UpdatePeerGroupRequest\032\036.apipb."
  "UpdatePeerGroupResponse\022N\n\022AddDynamicNei"
  "ghbor\022 .apipb.AddDynamicNeighborRequest\032"
  "\026.google.protobuf.Empty\022^\n\023ListDynamicNe"
  "ighbor\022!.apipb.ListDynamicNeighborReques"
  "t\032\".apipb.ListDynamicNeighborResponse0\001\022"
  "T\n\025DeleteDynamicNeighbor\022#.apipb.DeleteD"
  "ynamicNeighborRequest\032\026.google.protobuf."
  "Empty\0228\n\007AddPath\022\025.apipb.AddPathRequest\032"
  "\026.apipb.AddPathResponse\022>\n\nDeletePath\022\030."
  "apipb.DeletePathRequest\032\026.google.protobu"
  "f.Empty\022=\n\010ListPath\022\026.apipb.ListPathRequ"
  "est\032\027.apipb.ListPathResponse0\001\022F\n\rAddPat"
  "hStream\022\033.apipb.AddPathStreamRequest\032\026.g"
  "oogle.protobuf.Empty(\001\022;\n\010GetTable\022\026.api"
  "pb.GetTableRequest\032\027.apipb.GetTableRespo"
  "nse\0226\n\006AddVrf\022\024.apipb.AddVrfRequest\032\026.go"
  "ogle.protobuf.Empty\022<\n\tDeleteVrf\022\027.apipb"
  ".DeleteVrfRequest\032\026.google.protobuf.Empt"
  "y\022:\n\007ListVrf\022\025.apipb.ListVrfRequest\032\026.ap"
  "ipb.ListVrfResponse0\001\022<\n\tAddPolicy\022\027.api"
  "pb.AddPolicyRequest\032\026.google.protobuf.Em"
  "pty\022B\n\014DeletePolicy\022\032.apipb.DeletePolicy"
  "Request\032\026.google.protobuf.Empty\022C\n\nListP"
  "olicy\022\030.apipb.ListPolicyRequest\032\031.apipb."
  "ListPolicyResponse0\001\022@\n\013SetPolicies\022\031.ap"
  "ipb.SetPoliciesRequest\032\026.google.protobuf"
  ".Empty\022D\n\rAddDefinedSet\022\033.apipb.AddDefin"
  "edSetRequest\032\026.google.protobuf.Empty\022J\n\020"
  "DeleteDefinedSet\022\036.apipb.DeleteDefinedSe"
  "tRequest\032\026.google.protobuf.Empty\022O\n\016List"
  "DefinedSet\022\034.apipb.ListDefinedSetRequest"
  "\032\035.apipb.ListDefinedSetResponse0\001\022B\n\014Add"
  "Statement\022\032.apipb.AddStatementRequest\032\026."
  "google.protobuf.Empty\022H\n\017DeleteStatement"
  "\022\035.apipb.DeleteStatementRequest\032\026.google"
  ".protobuf.Empty\022L\n\rListStatement\022\033.apipb"
  ".ListStatementRequest\032\034.apipb.ListStatem"
  "entResponse0\001\022P\n\023AddPolicyAssignment\022!.a"
  "pipb.AddPolicyAssignmentRequest\032\026.google"
  ".protobuf.Empty\022V\n\026DeletePolicyAssignmen"
  "t\022$.apipb.DeletePolicyAssignmentRequest\032"
  "\026.google.protobuf.Empty\022a\n\024ListPolicyAss"
  "ignment\022\".apipb.ListPolicyAssignmentRequ"
  "est\032#.apipb.ListPolicyAssignmentResponse"
  "0\001\022P\n\023SetPolicyAssignment\022!.apipb.SetPol"
  "icyAssignmentRequest\032\026.google.protobuf.E"
  "mpty\0228\n\007AddRpki\022\025.apipb.AddRpkiRequest\032\026"
  ".google.protobuf.Empty\022>\n\nDeleteRpki\022\030.a"
  "pipb.DeleteRpkiRequest\032\026.google.protobuf"
  ".Empty\022=\n\010ListRpki\022\026.apipb.ListRpkiReque"
  "st\032\027.apipb.ListRpkiResponse0\001\022>\n\nEnableR"
  "pki\022\030.apipb.EnableRpkiRequest\032\026.google.p"
  "rotobuf.Empty\022@\n\013DisableRpki\022\031.apipb.Dis"
  "ableRpkiRequest\032\026.google.protobuf.Empty\022"
  "<\n\tResetRpki\022\027.apipb.ResetRpkiRequest\032\026."
  "google.protobuf.Empty\022L\n\rListRpkiTable\022\033"
  ".apipb.ListRpkiTableRequest\032\034.apipb.List"
  "RpkiTableResponse0\001\022@\n\013EnableZebra\022\031.api"
  "pb.EnableZebraRequest\032\026.google.protobuf."
  "Empty\022<\n\tEnableMrt\022\027.apipb.EnableMrtRequ"
  "est\032\026.google.protobuf.Empty\022>\n\nDisableMr"
  "t\022\030.apipb.DisableMrtRequest\032\026.google.pro"
  "tobuf.Empty\0226\n\006AddBmp\022\024.apipb.AddBmpRequ"
  "est\032\026.google.protobuf.Empty\022<\n\tDeleteBmp"
  "\022\027.apipb.DeleteBmpRequest\032\026.google.proto"
  "buf.Empty\022:\n\007ListBmp\022\025.apipb.ListBmpRequ"
  "est\032\026.apipb.ListBmpResponse0\001\022@\n\013SetLogL"
  "evel\022\031.apipb.SetLogLevelRequest\032\026.google"
  ".protobuf.EmptyB$Z\"github.com/osrg/gobgp"
  "/v3/api;apipbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gobgp_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gobgp_2eproto_sccs[157] = {
  &scc_info_Actions_gobgp_2eproto.base,
  &scc_info_AddBmpRequest_gobgp_2eproto.base,
  &scc_info_AddDefinedSetRequest_gobgp_2eproto.base,
  &scc_info_AddDynamicNeighborRequest_gobgp_2eproto.base,
  &scc_info_AddPathRequest_gobgp_2eproto.base,
  &scc_info_AddPathResponse_gobgp_2eproto.base,
  &scc_info_AddPathStreamRequest_gobgp_2eproto.base,
  &scc_info_AddPaths_gobgp_2eproto.base,
  &scc_info_AddPathsConfig_gobgp_2eproto.base,
  &scc_info_AddPathsState_gobgp_2eproto.base,
  &scc_info_AddPeerGroupRequest_gobgp_2eproto.base,
  &scc_info_AddPeerRequest_gobgp_2eproto.base,
  &scc_info_AddPolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_AddPolicyRequest_gobgp_2eproto.base,
  &scc_info_AddRpkiRequest_gobgp_2eproto.base,
  &scc_info_AddStatementRequest_gobgp_2eproto.base,
  &scc_info_AddVrfRequest_gobgp_2eproto.base,
  &scc_info_AfiSafi_gobgp_2eproto.base,
  &scc_info_AfiSafiConfig_gobgp_2eproto.base,
  &scc_info_AfiSafiState_gobgp_2eproto.base,
  &scc_info_ApplyPolicy_gobgp_2eproto.base,
  &scc_info_AsPathLength_gobgp_2eproto.base,
  &scc_info_AsPrependAction_gobgp_2eproto.base,
  &scc_info_CommunityAction_gobgp_2eproto.base,
  &scc_info_Conditions_gobgp_2eproto.base,
  &scc_info_Confederation_gobgp_2eproto.base,
  &scc_info_DefaultRouteDistance_gobgp_2eproto.base,
  &scc_info_DefinedSet_gobgp_2eproto.base,
  &scc_info_DeleteBmpRequest_gobgp_2eproto.base,
  &scc_info_DeleteDefinedSetRequest_gobgp_2eproto.base,
  &scc_info_DeleteDynamicNeighborRequest_gobgp_2eproto.base,
  &scc_info_DeletePathRequest_gobgp_2eproto.base,
  &scc_info_DeletePeerGroupRequest_gobgp_2eproto.base,
  &scc_info_DeletePeerRequest_gobgp_2eproto.base,
  &scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_DeletePolicyRequest_gobgp_2eproto.base,
  &scc_info_DeleteRpkiRequest_gobgp_2eproto.base,
  &scc_info_DeleteStatementRequest_gobgp_2eproto.base,
  &scc_info_DeleteVrfRequest_gobgp_2eproto.base,
  &scc_info_Destination_gobgp_2eproto.base,
  &scc_info_DisableMrtRequest_gobgp_2eproto.base,
  &scc_info_DisablePeerRequest_gobgp_2eproto.base,
  &scc_info_DisableRpkiRequest_gobgp_2eproto.base,
  &scc_info_DynamicNeighbor_gobgp_2eproto.base,
  &scc_info_Ebgp_gobgp_2eproto.base,
  &scc_info_EbgpConfig_gobgp_2eproto.base,
  &scc_info_EbgpMultihop_gobgp_2eproto.base,
  &scc_info_EbgpState_gobgp_2eproto.base,
  &scc_info_EnableMrtRequest_gobgp_2eproto.base,
  &scc_info_EnablePeerRequest_gobgp_2eproto.base,
  &scc_info_EnableRpkiRequest_gobgp_2eproto.base,
  &scc_info_EnableZebraRequest_gobgp_2eproto.base,
  &scc_info_Family_gobgp_2eproto.base,
  &scc_info_GetBgpRequest_gobgp_2eproto.base,
  &scc_info_GetBgpResponse_gobgp_2eproto.base,
  &scc_info_GetTableRequest_gobgp_2eproto.base,
  &scc_info_GetTableResponse_gobgp_2eproto.base,
  &scc_info_Global_gobgp_2eproto.base,
  &scc_info_GracefulRestart_gobgp_2eproto.base,
  &scc_info_Ibgp_gobgp_2eproto.base,
  &scc_info_IbgpConfig_gobgp_2eproto.base,
  &scc_info_IbgpState_gobgp_2eproto.base,
  &scc_info_ListBmpRequest_gobgp_2eproto.base,
  &scc_info_ListBmpResponse_gobgp_2eproto.base,
  &scc_info_ListBmpResponse_BmpStation_gobgp_2eproto.base,
  &scc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto.base,
  &scc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto.base,
  &scc_info_ListDefinedSetRequest_gobgp_2eproto.base,
  &scc_info_ListDefinedSetResponse_gobgp_2eproto.base,
  &scc_info_ListDynamicNeighborRequest_gobgp_2eproto.base,
  &scc_info_ListDynamicNeighborResponse_gobgp_2eproto.base,
  &scc_info_ListPathRequest_gobgp_2eproto.base,
  &scc_info_ListPathResponse_gobgp_2eproto.base,
  &scc_info_ListPeerGroupRequest_gobgp_2eproto.base,
  &scc_info_ListPeerGroupResponse_gobgp_2eproto.base,
  &scc_info_ListPeerRequest_gobgp_2eproto.base,
  &scc_info_ListPeerResponse_gobgp_2eproto.base,
  &scc_info_ListPolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_ListPolicyAssignmentResponse_gobgp_2eproto.base,
  &scc_info_ListPolicyRequest_gobgp_2eproto.base,
  &scc_info_ListPolicyResponse_gobgp_2eproto.base,
  &scc_info_ListRpkiRequest_gobgp_2eproto.base,
  &scc_info_ListRpkiResponse_gobgp_2eproto.base,
  &scc_info_ListRpkiTableRequest_gobgp_2eproto.base,
  &scc_info_ListRpkiTableResponse_gobgp_2eproto.base,
  &scc_info_ListStatementRequest_gobgp_2eproto.base,
  &scc_info_ListStatementResponse_gobgp_2eproto.base,
  &scc_info_ListVrfRequest_gobgp_2eproto.base,
  &scc_info_ListVrfResponse_gobgp_2eproto.base,
  &scc_info_LocalPrefAction_gobgp_2eproto.base,
  &scc_info_LongLivedGracefulRestart_gobgp_2eproto.base,
  &scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto.base,
  &scc_info_LongLivedGracefulRestartState_gobgp_2eproto.base,
  &scc_info_MatchSet_gobgp_2eproto.base,
  &scc_info_MedAction_gobgp_2eproto.base,
  &scc_info_Message_gobgp_2eproto.base,
  &scc_info_Messages_gobgp_2eproto.base,
  &scc_info_MpGracefulRestart_gobgp_2eproto.base,
  &scc_info_MpGracefulRestartConfig_gobgp_2eproto.base,
  &scc_info_MpGracefulRestartState_gobgp_2eproto.base,
  &scc_info_NexthopAction_gobgp_2eproto.base,
  &scc_info_Path_gobgp_2eproto.base,
  &scc_info_Peer_gobgp_2eproto.base,
  &scc_info_PeerConf_gobgp_2eproto.base,
  &scc_info_PeerGroup_gobgp_2eproto.base,
  &scc_info_PeerGroupConf_gobgp_2eproto.base,
  &scc_info_PeerGroupState_gobgp_2eproto.base,
  &scc_info_PeerState_gobgp_2eproto.base,
  &scc_info_Policy_gobgp_2eproto.base,
  &scc_info_PolicyAssignment_gobgp_2eproto.base,
  &scc_info_Prefix_gobgp_2eproto.base,
  &scc_info_PrefixLimit_gobgp_2eproto.base,
  &scc_info_Queues_gobgp_2eproto.base,
  &scc_info_RPKIConf_gobgp_2eproto.base,
  &scc_info_RPKIState_gobgp_2eproto.base,
  &scc_info_ResetPeerRequest_gobgp_2eproto.base,
  &scc_info_ResetRpkiRequest_gobgp_2eproto.base,
  &scc_info_Roa_gobgp_2eproto.base,
  &scc_info_RouteReflector_gobgp_2eproto.base,
  &scc_info_RouteSelectionOptions_gobgp_2eproto.base,
  &scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base,
  &scc_info_RouteSelectionOptionsState_gobgp_2eproto.base,
  &scc_info_RouteServer_gobgp_2eproto.base,
  &scc_info_RouteTargetMembership_gobgp_2eproto.base,
  &scc_info_RouteTargetMembershipConfig_gobgp_2eproto.base,
  &scc_info_RouteTargetMembershipState_gobgp_2eproto.base,
  &scc_info_RoutingPolicy_gobgp_2eproto.base,
  &scc_info_Rpki_gobgp_2eproto.base,
  &scc_info_SetLogLevelRequest_gobgp_2eproto.base,
  &scc_info_SetPoliciesRequest_gobgp_2eproto.base,
  &scc_info_SetPolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_ShutdownPeerRequest_gobgp_2eproto.base,
  &scc_info_StartBgpRequest_gobgp_2eproto.base,
  &scc_info_Statement_gobgp_2eproto.base,
  &scc_info_StopBgpRequest_gobgp_2eproto.base,
  &scc_info_TableLookupPrefix_gobgp_2eproto.base,
  &scc_info_Timers_gobgp_2eproto.base,
  &scc_info_TimersConfig_gobgp_2eproto.base,
  &scc_info_TimersState_gobgp_2eproto.base,
  &scc_info_Transport_gobgp_2eproto.base,
  &scc_info_TtlSecurity_gobgp_2eproto.base,
  &scc_info_UpdatePeerGroupRequest_gobgp_2eproto.base,
  &scc_info_UpdatePeerGroupResponse_gobgp_2eproto.base,
  &scc_info_UpdatePeerRequest_gobgp_2eproto.base,
  &scc_info_UpdatePeerResponse_gobgp_2eproto.base,
  &scc_info_UseMultiplePaths_gobgp_2eproto.base,
  &scc_info_UseMultiplePathsConfig_gobgp_2eproto.base,
  &scc_info_UseMultiplePathsState_gobgp_2eproto.base,
  &scc_info_Validation_gobgp_2eproto.base,
  &scc_info_Vrf_gobgp_2eproto.base,
  &scc_info_WatchEventRequest_gobgp_2eproto.base,
  &scc_info_WatchEventRequest_Peer_gobgp_2eproto.base,
  &scc_info_WatchEventRequest_Table_gobgp_2eproto.base,
  &scc_info_WatchEventRequest_Table_Filter_gobgp_2eproto.base,
  &scc_info_WatchEventResponse_gobgp_2eproto.base,
  &scc_info_WatchEventResponse_PeerEvent_gobgp_2eproto.base,
  &scc_info_WatchEventResponse_TableEvent_gobgp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gobgp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gobgp_2eproto = {
  false, false, descriptor_table_protodef_gobgp_2eproto, "gobgp.proto", 23101,
  &descriptor_table_gobgp_2eproto_once, descriptor_table_gobgp_2eproto_sccs, descriptor_table_gobgp_2eproto_deps, 157, 3,
  schemas, file_default_instances, TableStruct_gobgp_2eproto::offsets,
  file_level_metadata_gobgp_2eproto, 157, file_level_enum_descriptors_gobgp_2eproto, file_level_service_descriptors_gobgp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gobgp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gobgp_2eproto)), true);
namespace apipb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchEventRequest_Table_Filter_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[0];
}
bool WatchEventRequest_Table_Filter_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WatchEventRequest_Table_Filter_Type WatchEventRequest_Table_Filter::BEST;
constexpr WatchEventRequest_Table_Filter_Type WatchEventRequest_Table_Filter::ADJIN;
constexpr WatchEventRequest_Table_Filter_Type WatchEventRequest_Table_Filter::POST_POLICY;
constexpr WatchEventRequest_Table_Filter_Type WatchEventRequest_Table_Filter::Type_MIN;
constexpr WatchEventRequest_Table_Filter_Type WatchEventRequest_Table_Filter::Type_MAX;
constexpr int WatchEventRequest_Table_Filter::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchEventResponse_PeerEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[1];
}
bool WatchEventResponse_PeerEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WatchEventResponse_PeerEvent_Type WatchEventResponse_PeerEvent::UNKNOWN;
constexpr WatchEventResponse_PeerEvent_Type WatchEventResponse_PeerEvent::INIT;
constexpr WatchEventResponse_PeerEvent_Type WatchEventResponse_PeerEvent::END_OF_INIT;
constexpr WatchEventResponse_PeerEvent_Type WatchEventResponse_PeerEvent::STATE;
constexpr WatchEventResponse_PeerEvent_Type WatchEventResponse_PeerEvent::Type_MIN;
constexpr WatchEventResponse_PeerEvent_Type WatchEventResponse_PeerEvent::Type_MAX;
constexpr int WatchEventResponse_PeerEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetPeerRequest_SoftResetDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[2];
}
bool ResetPeerRequest_SoftResetDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::IN;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::OUT;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::BOTH;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::SoftResetDirection_MIN;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::SoftResetDirection_MAX;
constexpr int ResetPeerRequest::SoftResetDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableLookupPrefix_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[3];
}
bool TableLookupPrefix_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableLookupPrefix_Type TableLookupPrefix::EXACT;
constexpr TableLookupPrefix_Type TableLookupPrefix::LONGER;
constexpr TableLookupPrefix_Type TableLookupPrefix::SHORTER;
constexpr TableLookupPrefix_Type TableLookupPrefix::Type_MIN;
constexpr TableLookupPrefix_Type TableLookupPrefix::Type_MAX;
constexpr int TableLookupPrefix::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListPathRequest_SortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[4];
}
bool ListPathRequest_SortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ListPathRequest_SortType ListPathRequest::NONE;
constexpr ListPathRequest_SortType ListPathRequest::PREFIX;
constexpr ListPathRequest_SortType ListPathRequest::SortType_MIN;
constexpr ListPathRequest_SortType ListPathRequest::SortType_MAX;
constexpr int ListPathRequest::SortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnableMrtRequest_DumpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[5];
}
bool EnableMrtRequest_DumpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnableMrtRequest_DumpType EnableMrtRequest::UPDATES;
constexpr EnableMrtRequest_DumpType EnableMrtRequest::TABLE;
constexpr EnableMrtRequest_DumpType EnableMrtRequest::DumpType_MIN;
constexpr EnableMrtRequest_DumpType EnableMrtRequest::DumpType_MAX;
constexpr int EnableMrtRequest::DumpType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddBmpRequest_MonitoringPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[6];
}
bool AddBmpRequest_MonitoringPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::PRE;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::POST;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::BOTH;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::LOCAL;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::ALL;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::MonitoringPolicy_MIN;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::MonitoringPolicy_MAX;
constexpr int AddBmpRequest::MonitoringPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_Afi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[7];
}
bool Family_Afi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 25:
    case 16388:
    case 16397:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Family_Afi Family::AFI_UNKNOWN;
constexpr Family_Afi Family::AFI_IP;
constexpr Family_Afi Family::AFI_IP6;
constexpr Family_Afi Family::AFI_L2VPN;
constexpr Family_Afi Family::AFI_LS;
constexpr Family_Afi Family::AFI_OPAQUE;
constexpr Family_Afi Family::Afi_MIN;
constexpr Family_Afi Family::Afi_MAX;
constexpr int Family::Afi_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_Safi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[8];
}
bool Family_Safi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
    case 65:
    case 70:
    case 71:
    case 73:
    case 85:
    case 128:
    case 129:
    case 132:
    case 133:
    case 134:
    case 241:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Family_Safi Family::SAFI_UNKNOWN;
constexpr Family_Safi Family::SAFI_UNICAST;
constexpr Family_Safi Family::SAFI_MULTICAST;
constexpr Family_Safi Family::SAFI_MPLS_LABEL;
constexpr Family_Safi Family::SAFI_ENCAPSULATION;
constexpr Family_Safi Family::SAFI_VPLS;
constexpr Family_Safi Family::SAFI_EVPN;
constexpr Family_Safi Family::SAFI_LS;
constexpr Family_Safi Family::SAFI_SR_POLICY;
constexpr Family_Safi Family::SAFI_MUP;
constexpr Family_Safi Family::SAFI_MPLS_VPN;
constexpr Family_Safi Family::SAFI_MPLS_VPN_MULTICAST;
constexpr Family_Safi Family::SAFI_ROUTE_TARGET_CONSTRAINTS;
constexpr Family_Safi Family::SAFI_FLOW_SPEC_UNICAST;
constexpr Family_Safi Family::SAFI_FLOW_SPEC_VPN;
constexpr Family_Safi Family::SAFI_KEY_VALUE;
constexpr Family_Safi Family::Safi_MIN;
constexpr Family_Safi Family::Safi_MAX;
constexpr int Family::Safi_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Validation_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[9];
}
bool Validation_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Validation_State Validation::STATE_NONE;
constexpr Validation_State Validation::STATE_NOT_FOUND;
constexpr Validation_State Validation::STATE_VALID;
constexpr Validation_State Validation::STATE_INVALID;
constexpr Validation_State Validation::State_MIN;
constexpr Validation_State Validation::State_MAX;
constexpr int Validation::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Validation_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[10];
}
bool Validation_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Validation_Reason Validation::REASON_NONE;
constexpr Validation_Reason Validation::REASON_ASN;
constexpr Validation_Reason Validation::REASON_LENGTH;
constexpr Validation_Reason Validation::Reason_MIN;
constexpr Validation_Reason Validation::Reason_MAX;
constexpr int Validation::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_SessionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[11];
}
bool PeerState_SessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerState_SessionState PeerState::UNKNOWN;
constexpr PeerState_SessionState PeerState::IDLE;
constexpr PeerState_SessionState PeerState::CONNECT;
constexpr PeerState_SessionState PeerState::ACTIVE;
constexpr PeerState_SessionState PeerState::OPENSENT;
constexpr PeerState_SessionState PeerState::OPENCONFIRM;
constexpr PeerState_SessionState PeerState::ESTABLISHED;
constexpr PeerState_SessionState PeerState::SessionState_MIN;
constexpr PeerState_SessionState PeerState::SessionState_MAX;
constexpr int PeerState::SessionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_AdminState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[12];
}
bool PeerState_AdminState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerState_AdminState PeerState::UP;
constexpr PeerState_AdminState PeerState::DOWN;
constexpr PeerState_AdminState PeerState::PFX_CT;
constexpr PeerState_AdminState PeerState::AdminState_MIN;
constexpr PeerState_AdminState PeerState::AdminState_MAX;
constexpr int PeerState::AdminState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchSet_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[13];
}
bool MatchSet_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MatchSet_Type MatchSet::ANY;
constexpr MatchSet_Type MatchSet::ALL;
constexpr MatchSet_Type MatchSet::INVERT;
constexpr MatchSet_Type MatchSet::Type_MIN;
constexpr MatchSet_Type MatchSet::Type_MAX;
constexpr int MatchSet::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsPathLength_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[14];
}
bool AsPathLength_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AsPathLength_Type AsPathLength::EQ;
constexpr AsPathLength_Type AsPathLength::GE;
constexpr AsPathLength_Type AsPathLength::LE;
constexpr AsPathLength_Type AsPathLength::Type_MIN;
constexpr AsPathLength_Type AsPathLength::Type_MAX;
constexpr int AsPathLength::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Conditions_RouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[15];
}
bool Conditions_RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_NONE;
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_INTERNAL;
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_EXTERNAL;
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_LOCAL;
constexpr Conditions_RouteType Conditions::RouteType_MIN;
constexpr Conditions_RouteType Conditions::RouteType_MAX;
constexpr int Conditions::RouteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunityAction_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[16];
}
bool CommunityAction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommunityAction_Type CommunityAction::ADD;
constexpr CommunityAction_Type CommunityAction::REMOVE;
constexpr CommunityAction_Type CommunityAction::REPLACE;
constexpr CommunityAction_Type CommunityAction::Type_MIN;
constexpr CommunityAction_Type CommunityAction::Type_MAX;
constexpr int CommunityAction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MedAction_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[17];
}
bool MedAction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MedAction_Type MedAction::MOD;
constexpr MedAction_Type MedAction::REPLACE;
constexpr MedAction_Type MedAction::Type_MIN;
constexpr MedAction_Type MedAction::Type_MAX;
constexpr int MedAction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetLogLevelRequest_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[18];
}
bool SetLogLevelRequest_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetLogLevelRequest_Level SetLogLevelRequest::PANIC;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::FATAL;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::ERROR;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::WARN;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::INFO;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::DEBUG;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::TRACE;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::Level_MIN;
constexpr SetLogLevelRequest_Level SetLogLevelRequest::Level_MAX;
constexpr int SetLogLevelRequest::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[19];
}
bool TableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[20];
}
bool PeerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemovePrivate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[21];
}
bool RemovePrivate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DefinedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[22];
}
bool DefinedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[23];
}
bool RouteAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[24];
}
bool PolicyDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StartBgpRequest::InitAsDefaultInstance() {
  ::apipb::_StartBgpRequest_default_instance_._instance.get_mutable()->global_ = const_cast< ::apipb::Global*>(
      ::apipb::Global::internal_default_instance());
}
class StartBgpRequest::_Internal {
 public:
  static const ::apipb::Global& global(const StartBgpRequest* msg);
};

const ::apipb::Global&
StartBgpRequest::_Internal::global(const StartBgpRequest* msg) {
  return *msg->global_;
}
StartBgpRequest::StartBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.StartBgpRequest)
}
StartBgpRequest::StartBgpRequest(const StartBgpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_global()) {
    global_ = new ::apipb::Global(*from.global_);
  } else {
    global_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.StartBgpRequest)
}

void StartBgpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartBgpRequest_gobgp_2eproto.base);
  global_ = nullptr;
}

StartBgpRequest::~StartBgpRequest() {
  // @@protoc_insertion_point(destructor:apipb.StartBgpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartBgpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete global_;
}

void StartBgpRequest::ArenaDtor(void* object) {
  StartBgpRequest* _this = reinterpret_cast< StartBgpRequest* >(object);
  (void)_this;
}
void StartBgpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartBgpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartBgpRequest& StartBgpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartBgpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void StartBgpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.StartBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartBgpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Global global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartBgpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.StartBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Global global = 1;
  if (this->has_global()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::global(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.StartBgpRequest)
  return target;
}

size_t StartBgpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.StartBgpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Global global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartBgpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.StartBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartBgpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartBgpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.StartBgpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.StartBgpRequest)
    MergeFrom(*source);
  }
}

void StartBgpRequest::MergeFrom(const StartBgpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.StartBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global()) {
    _internal_mutable_global()->::apipb::Global::MergeFrom(from._internal_global());
  }
}

void StartBgpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.StartBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartBgpRequest::CopyFrom(const StartBgpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.StartBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBgpRequest::IsInitialized() const {
  return true;
}

void StartBgpRequest::InternalSwap(StartBgpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(global_, other->global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartBgpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopBgpRequest::InitAsDefaultInstance() {
}
class StopBgpRequest::_Internal {
 public:
};

StopBgpRequest::StopBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.StopBgpRequest)
}
StopBgpRequest::StopBgpRequest(const StopBgpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.StopBgpRequest)
}

void StopBgpRequest::SharedCtor() {
}

StopBgpRequest::~StopBgpRequest() {
  // @@protoc_insertion_point(destructor:apipb.StopBgpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopBgpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopBgpRequest::ArenaDtor(void* object) {
  StopBgpRequest* _this = reinterpret_cast< StopBgpRequest* >(object);
  (void)_this;
}
void StopBgpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopBgpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopBgpRequest& StopBgpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopBgpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void StopBgpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.StopBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopBgpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopBgpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.StopBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.StopBgpRequest)
  return target;
}

size_t StopBgpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.StopBgpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopBgpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.StopBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopBgpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopBgpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.StopBgpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.StopBgpRequest)
    MergeFrom(*source);
  }
}

void StopBgpRequest::MergeFrom(const StopBgpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.StopBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopBgpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.StopBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopBgpRequest::CopyFrom(const StopBgpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.StopBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopBgpRequest::IsInitialized() const {
  return true;
}

void StopBgpRequest::InternalSwap(StopBgpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopBgpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBgpRequest::InitAsDefaultInstance() {
}
class GetBgpRequest::_Internal {
 public:
};

GetBgpRequest::GetBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.GetBgpRequest)
}
GetBgpRequest::GetBgpRequest(const GetBgpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.GetBgpRequest)
}

void GetBgpRequest::SharedCtor() {
}

GetBgpRequest::~GetBgpRequest() {
  // @@protoc_insertion_point(destructor:apipb.GetBgpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBgpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBgpRequest::ArenaDtor(void* object) {
  GetBgpRequest* _this = reinterpret_cast< GetBgpRequest* >(object);
  (void)_this;
}
void GetBgpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBgpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBgpRequest& GetBgpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBgpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetBgpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.GetBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBgpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBgpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.GetBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.GetBgpRequest)
  return target;
}

size_t GetBgpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.GetBgpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBgpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.GetBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBgpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBgpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.GetBgpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.GetBgpRequest)
    MergeFrom(*source);
  }
}

void GetBgpRequest::MergeFrom(const GetBgpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.GetBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetBgpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.GetBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBgpRequest::CopyFrom(const GetBgpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.GetBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBgpRequest::IsInitialized() const {
  return true;
}

void GetBgpRequest::InternalSwap(GetBgpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBgpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBgpResponse::InitAsDefaultInstance() {
  ::apipb::_GetBgpResponse_default_instance_._instance.get_mutable()->global_ = const_cast< ::apipb::Global*>(
      ::apipb::Global::internal_default_instance());
}
class GetBgpResponse::_Internal {
 public:
  static const ::apipb::Global& global(const GetBgpResponse* msg);
};

const ::apipb::Global&
GetBgpResponse::_Internal::global(const GetBgpResponse* msg) {
  return *msg->global_;
}
GetBgpResponse::GetBgpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.GetBgpResponse)
}
GetBgpResponse::GetBgpResponse(const GetBgpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_global()) {
    global_ = new ::apipb::Global(*from.global_);
  } else {
    global_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.GetBgpResponse)
}

void GetBgpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBgpResponse_gobgp_2eproto.base);
  global_ = nullptr;
}

GetBgpResponse::~GetBgpResponse() {
  // @@protoc_insertion_point(destructor:apipb.GetBgpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBgpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete global_;
}

void GetBgpResponse::ArenaDtor(void* object) {
  GetBgpResponse* _this = reinterpret_cast< GetBgpResponse* >(object);
  (void)_this;
}
void GetBgpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBgpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBgpResponse& GetBgpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBgpResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetBgpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.GetBgpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBgpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Global global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBgpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.GetBgpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Global global = 1;
  if (this->has_global()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::global(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.GetBgpResponse)
  return target;
}

size_t GetBgpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.GetBgpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Global global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBgpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.GetBgpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBgpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBgpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.GetBgpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.GetBgpResponse)
    MergeFrom(*source);
  }
}

void GetBgpResponse::MergeFrom(const GetBgpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.GetBgpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global()) {
    _internal_mutable_global()->::apipb::Global::MergeFrom(from._internal_global());
  }
}

void GetBgpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.GetBgpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBgpResponse::CopyFrom(const GetBgpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.GetBgpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBgpResponse::IsInitialized() const {
  return true;
}

void GetBgpResponse::InternalSwap(GetBgpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(global_, other->global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBgpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventRequest_Peer::InitAsDefaultInstance() {
}
class WatchEventRequest_Peer::_Internal {
 public:
};

WatchEventRequest_Peer::WatchEventRequest_Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventRequest.Peer)
}
WatchEventRequest_Peer::WatchEventRequest_Peer(const WatchEventRequest_Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventRequest.Peer)
}

void WatchEventRequest_Peer::SharedCtor() {
}

WatchEventRequest_Peer::~WatchEventRequest_Peer() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventRequest.Peer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventRequest_Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchEventRequest_Peer::ArenaDtor(void* object) {
  WatchEventRequest_Peer* _this = reinterpret_cast< WatchEventRequest_Peer* >(object);
  (void)_this;
}
void WatchEventRequest_Peer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventRequest_Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventRequest_Peer& WatchEventRequest_Peer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventRequest_Peer_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventRequest_Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventRequest.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventRequest_Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventRequest_Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventRequest.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventRequest.Peer)
  return target;
}

size_t WatchEventRequest_Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventRequest.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventRequest_Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventRequest.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventRequest_Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventRequest_Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventRequest.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventRequest.Peer)
    MergeFrom(*source);
  }
}

void WatchEventRequest_Peer::MergeFrom(const WatchEventRequest_Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventRequest.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchEventRequest_Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventRequest.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventRequest_Peer::CopyFrom(const WatchEventRequest_Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventRequest.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventRequest_Peer::IsInitialized() const {
  return true;
}

void WatchEventRequest_Peer::InternalSwap(WatchEventRequest_Peer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventRequest_Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventRequest_Table_Filter::InitAsDefaultInstance() {
}
class WatchEventRequest_Table_Filter::_Internal {
 public:
};

WatchEventRequest_Table_Filter::WatchEventRequest_Table_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventRequest.Table.Filter)
}
WatchEventRequest_Table_Filter::WatchEventRequest_Table_Filter(const WatchEventRequest_Table_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_) -
    reinterpret_cast<char*>(&type_)) + sizeof(init_));
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventRequest.Table.Filter)
}

void WatchEventRequest_Table_Filter::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_) -
      reinterpret_cast<char*>(&type_)) + sizeof(init_));
}

WatchEventRequest_Table_Filter::~WatchEventRequest_Table_Filter() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventRequest.Table.Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventRequest_Table_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchEventRequest_Table_Filter::ArenaDtor(void* object) {
  WatchEventRequest_Table_Filter* _this = reinterpret_cast< WatchEventRequest_Table_Filter* >(object);
  (void)_this;
}
void WatchEventRequest_Table_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventRequest_Table_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventRequest_Table_Filter& WatchEventRequest_Table_Filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventRequest_Table_Filter_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventRequest_Table_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventRequest.Table.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_) -
      reinterpret_cast<char*>(&type_)) + sizeof(init_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventRequest_Table_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.WatchEventRequest.Table.Filter.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::WatchEventRequest_Table_Filter_Type>(val));
        } else goto handle_unusual;
        continue;
      // bool init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventRequest_Table_Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventRequest.Table.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.WatchEventRequest.Table.Filter.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bool init = 2;
  if (this->init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_init(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventRequest.Table.Filter)
  return target;
}

size_t WatchEventRequest_Table_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventRequest.Table.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.WatchEventRequest.Table.Filter.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool init = 2;
  if (this->init() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventRequest_Table_Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventRequest.Table.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventRequest_Table_Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventRequest_Table_Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventRequest.Table.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventRequest.Table.Filter)
    MergeFrom(*source);
  }
}

void WatchEventRequest_Table_Filter::MergeFrom(const WatchEventRequest_Table_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventRequest.Table.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.init() != 0) {
    _internal_set_init(from._internal_init());
  }
}

void WatchEventRequest_Table_Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventRequest.Table.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventRequest_Table_Filter::CopyFrom(const WatchEventRequest_Table_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventRequest.Table.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventRequest_Table_Filter::IsInitialized() const {
  return true;
}

void WatchEventRequest_Table_Filter::InternalSwap(WatchEventRequest_Table_Filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchEventRequest_Table_Filter, init_)
      + sizeof(WatchEventRequest_Table_Filter::init_)
      - PROTOBUF_FIELD_OFFSET(WatchEventRequest_Table_Filter, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventRequest_Table_Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventRequest_Table::InitAsDefaultInstance() {
}
class WatchEventRequest_Table::_Internal {
 public:
};

WatchEventRequest_Table::WatchEventRequest_Table(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventRequest.Table)
}
WatchEventRequest_Table::WatchEventRequest_Table(const WatchEventRequest_Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventRequest.Table)
}

void WatchEventRequest_Table::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchEventRequest_Table_gobgp_2eproto.base);
}

WatchEventRequest_Table::~WatchEventRequest_Table() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventRequest.Table)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventRequest_Table::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchEventRequest_Table::ArenaDtor(void* object) {
  WatchEventRequest_Table* _this = reinterpret_cast< WatchEventRequest_Table* >(object);
  (void)_this;
}
void WatchEventRequest_Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventRequest_Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventRequest_Table& WatchEventRequest_Table::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventRequest_Table_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventRequest_Table::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventRequest.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventRequest_Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.WatchEventRequest.Table.Filter filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventRequest_Table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventRequest.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.WatchEventRequest.Table.Filter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventRequest.Table)
  return target;
}

size_t WatchEventRequest_Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventRequest.Table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.WatchEventRequest.Table.Filter filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventRequest_Table::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventRequest.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventRequest_Table* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventRequest_Table>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventRequest.Table)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventRequest.Table)
    MergeFrom(*source);
  }
}

void WatchEventRequest_Table::MergeFrom(const WatchEventRequest_Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventRequest.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void WatchEventRequest_Table::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventRequest.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventRequest_Table::CopyFrom(const WatchEventRequest_Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventRequest.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventRequest_Table::IsInitialized() const {
  return true;
}

void WatchEventRequest_Table::InternalSwap(WatchEventRequest_Table* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventRequest_Table::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventRequest::InitAsDefaultInstance() {
  ::apipb::_WatchEventRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::apipb::WatchEventRequest_Peer*>(
      ::apipb::WatchEventRequest_Peer::internal_default_instance());
  ::apipb::_WatchEventRequest_default_instance_._instance.get_mutable()->table_ = const_cast< ::apipb::WatchEventRequest_Table*>(
      ::apipb::WatchEventRequest_Table::internal_default_instance());
}
class WatchEventRequest::_Internal {
 public:
  static const ::apipb::WatchEventRequest_Peer& peer(const WatchEventRequest* msg);
  static const ::apipb::WatchEventRequest_Table& table(const WatchEventRequest* msg);
};

const ::apipb::WatchEventRequest_Peer&
WatchEventRequest::_Internal::peer(const WatchEventRequest* msg) {
  return *msg->peer_;
}
const ::apipb::WatchEventRequest_Table&
WatchEventRequest::_Internal::table(const WatchEventRequest* msg) {
  return *msg->table_;
}
WatchEventRequest::WatchEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventRequest)
}
WatchEventRequest::WatchEventRequest(const WatchEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::apipb::WatchEventRequest_Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  if (from._internal_has_table()) {
    table_ = new ::apipb::WatchEventRequest_Table(*from.table_);
  } else {
    table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventRequest)
}

void WatchEventRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchEventRequest_gobgp_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(table_));
}

WatchEventRequest::~WatchEventRequest() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete table_;
}

void WatchEventRequest::ArenaDtor(void* object) {
  WatchEventRequest* _this = reinterpret_cast< WatchEventRequest* >(object);
  (void)_this;
}
void WatchEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventRequest& WatchEventRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  if (GetArena() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.WatchEventRequest.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.WatchEventRequest.Table table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.WatchEventRequest.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  // .apipb.WatchEventRequest.Table table = 2;
  if (this->has_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventRequest)
  return target;
}

size_t WatchEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.WatchEventRequest.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .apipb.WatchEventRequest.Table table = 2;
  if (this->has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventRequest)
    MergeFrom(*source);
  }
}

void WatchEventRequest::MergeFrom(const WatchEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::apipb::WatchEventRequest_Peer::MergeFrom(from._internal_peer());
  }
  if (from.has_table()) {
    _internal_mutable_table()->::apipb::WatchEventRequest_Table::MergeFrom(from._internal_table());
  }
}

void WatchEventRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventRequest::CopyFrom(const WatchEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventRequest::IsInitialized() const {
  return true;
}

void WatchEventRequest::InternalSwap(WatchEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchEventRequest, table_)
      + sizeof(WatchEventRequest::table_)
      - PROTOBUF_FIELD_OFFSET(WatchEventRequest, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventResponse_PeerEvent::InitAsDefaultInstance() {
  ::apipb::_WatchEventResponse_PeerEvent_default_instance_._instance.get_mutable()->peer_ = const_cast< ::apipb::Peer*>(
      ::apipb::Peer::internal_default_instance());
}
class WatchEventResponse_PeerEvent::_Internal {
 public:
  static const ::apipb::Peer& peer(const WatchEventResponse_PeerEvent* msg);
};

const ::apipb::Peer&
WatchEventResponse_PeerEvent::_Internal::peer(const WatchEventResponse_PeerEvent* msg) {
  return *msg->peer_;
}
WatchEventResponse_PeerEvent::WatchEventResponse_PeerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventResponse.PeerEvent)
}
WatchEventResponse_PeerEvent::WatchEventResponse_PeerEvent(const WatchEventResponse_PeerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::apipb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventResponse.PeerEvent)
}

void WatchEventResponse_PeerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchEventResponse_PeerEvent_gobgp_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(type_));
}

WatchEventResponse_PeerEvent::~WatchEventResponse_PeerEvent() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventResponse.PeerEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventResponse_PeerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void WatchEventResponse_PeerEvent::ArenaDtor(void* object) {
  WatchEventResponse_PeerEvent* _this = reinterpret_cast< WatchEventResponse_PeerEvent* >(object);
  (void)_this;
}
void WatchEventResponse_PeerEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventResponse_PeerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventResponse_PeerEvent& WatchEventResponse_PeerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventResponse_PeerEvent_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventResponse_PeerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventResponse.PeerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventResponse_PeerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.WatchEventResponse.PeerEvent.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::WatchEventResponse_PeerEvent_Type>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.Peer peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventResponse_PeerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventResponse.PeerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.WatchEventResponse.PeerEvent.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .apipb.Peer peer = 2;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventResponse.PeerEvent)
  return target;
}

size_t WatchEventResponse_PeerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventResponse.PeerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .apipb.WatchEventResponse.PeerEvent.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventResponse_PeerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventResponse.PeerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventResponse_PeerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventResponse_PeerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventResponse.PeerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventResponse.PeerEvent)
    MergeFrom(*source);
  }
}

void WatchEventResponse_PeerEvent::MergeFrom(const WatchEventResponse_PeerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventResponse.PeerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::apipb::Peer::MergeFrom(from._internal_peer());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void WatchEventResponse_PeerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventResponse.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventResponse_PeerEvent::CopyFrom(const WatchEventResponse_PeerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventResponse.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventResponse_PeerEvent::IsInitialized() const {
  return true;
}

void WatchEventResponse_PeerEvent::InternalSwap(WatchEventResponse_PeerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchEventResponse_PeerEvent, type_)
      + sizeof(WatchEventResponse_PeerEvent::type_)
      - PROTOBUF_FIELD_OFFSET(WatchEventResponse_PeerEvent, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventResponse_PeerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventResponse_TableEvent::InitAsDefaultInstance() {
}
class WatchEventResponse_TableEvent::_Internal {
 public:
};

WatchEventResponse_TableEvent::WatchEventResponse_TableEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventResponse.TableEvent)
}
WatchEventResponse_TableEvent::WatchEventResponse_TableEvent(const WatchEventResponse_TableEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventResponse.TableEvent)
}

void WatchEventResponse_TableEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchEventResponse_TableEvent_gobgp_2eproto.base);
}

WatchEventResponse_TableEvent::~WatchEventResponse_TableEvent() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventResponse.TableEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventResponse_TableEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchEventResponse_TableEvent::ArenaDtor(void* object) {
  WatchEventResponse_TableEvent* _this = reinterpret_cast< WatchEventResponse_TableEvent* >(object);
  (void)_this;
}
void WatchEventResponse_TableEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventResponse_TableEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventResponse_TableEvent& WatchEventResponse_TableEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventResponse_TableEvent_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventResponse_TableEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventResponse.TableEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventResponse_TableEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.Path paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventResponse_TableEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventResponse.TableEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.Path paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventResponse.TableEvent)
  return target;
}

size_t WatchEventResponse_TableEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventResponse.TableEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.Path paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventResponse_TableEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventResponse.TableEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventResponse_TableEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventResponse_TableEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventResponse.TableEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventResponse.TableEvent)
    MergeFrom(*source);
  }
}

void WatchEventResponse_TableEvent::MergeFrom(const WatchEventResponse_TableEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventResponse.TableEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
}

void WatchEventResponse_TableEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventResponse.TableEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventResponse_TableEvent::CopyFrom(const WatchEventResponse_TableEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventResponse.TableEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventResponse_TableEvent::IsInitialized() const {
  return true;
}

void WatchEventResponse_TableEvent::InternalSwap(WatchEventResponse_TableEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventResponse_TableEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchEventResponse::InitAsDefaultInstance() {
  ::apipb::_WatchEventResponse_default_instance_.peer_ = const_cast< ::apipb::WatchEventResponse_PeerEvent*>(
      ::apipb::WatchEventResponse_PeerEvent::internal_default_instance());
  ::apipb::_WatchEventResponse_default_instance_.table_ = const_cast< ::apipb::WatchEventResponse_TableEvent*>(
      ::apipb::WatchEventResponse_TableEvent::internal_default_instance());
}
class WatchEventResponse::_Internal {
 public:
  static const ::apipb::WatchEventResponse_PeerEvent& peer(const WatchEventResponse* msg);
  static const ::apipb::WatchEventResponse_TableEvent& table(const WatchEventResponse* msg);
};

const ::apipb::WatchEventResponse_PeerEvent&
WatchEventResponse::_Internal::peer(const WatchEventResponse* msg) {
  return *msg->event_.peer_;
}
const ::apipb::WatchEventResponse_TableEvent&
WatchEventResponse::_Internal::table(const WatchEventResponse* msg) {
  return *msg->event_.table_;
}
void WatchEventResponse::set_allocated_peer(::apipb::WatchEventResponse_PeerEvent* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peer);
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    set_has_peer();
    event_.peer_ = peer;
  }
  // @@protoc_insertion_point(field_set_allocated:apipb.WatchEventResponse.peer)
}
void WatchEventResponse::set_allocated_table(::apipb::WatchEventResponse_TableEvent* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    event_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:apipb.WatchEventResponse.table)
}
WatchEventResponse::WatchEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.WatchEventResponse)
}
WatchEventResponse::WatchEventResponse(const WatchEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kPeer: {
      _internal_mutable_peer()->::apipb::WatchEventResponse_PeerEvent::MergeFrom(from._internal_peer());
      break;
    }
    case kTable: {
      _internal_mutable_table()->::apipb::WatchEventResponse_TableEvent::MergeFrom(from._internal_table());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apipb.WatchEventResponse)
}

void WatchEventResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchEventResponse_gobgp_2eproto.base);
  clear_has_event();
}

WatchEventResponse::~WatchEventResponse() {
  // @@protoc_insertion_point(destructor:apipb.WatchEventResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void WatchEventResponse::ArenaDtor(void* object) {
  WatchEventResponse* _this = reinterpret_cast< WatchEventResponse* >(object);
  (void)_this;
}
void WatchEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchEventResponse& WatchEventResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchEventResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void WatchEventResponse::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:apipb.WatchEventResponse)
  switch (event_case()) {
    case kPeer: {
      if (GetArena() == nullptr) {
        delete event_.peer_;
      }
      break;
    }
    case kTable: {
      if (GetArena() == nullptr) {
        delete event_.table_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void WatchEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.WatchEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.WatchEventResponse.PeerEvent peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.WatchEventResponse.TableEvent table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.WatchEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.WatchEventResponse.PeerEvent peer = 2;
  if (_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peer(this), target, stream);
  }

  // .apipb.WatchEventResponse.TableEvent table = 3;
  if (_internal_has_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.WatchEventResponse)
  return target;
}

size_t WatchEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.WatchEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .apipb.WatchEventResponse.PeerEvent peer = 2;
    case kPeer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.peer_);
      break;
    }
    // .apipb.WatchEventResponse.TableEvent table = 3;
    case kTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.table_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchEventResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.WatchEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchEventResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.WatchEventResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.WatchEventResponse)
    MergeFrom(*source);
  }
}

void WatchEventResponse::MergeFrom(const WatchEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.WatchEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kPeer: {
      _internal_mutable_peer()->::apipb::WatchEventResponse_PeerEvent::MergeFrom(from._internal_peer());
      break;
    }
    case kTable: {
      _internal_mutable_table()->::apipb::WatchEventResponse_TableEvent::MergeFrom(from._internal_table());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void WatchEventResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.WatchEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchEventResponse::CopyFrom(const WatchEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.WatchEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchEventResponse::IsInitialized() const {
  return true;
}

void WatchEventResponse::InternalSwap(WatchEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchEventResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPeerRequest::InitAsDefaultInstance() {
  ::apipb::_AddPeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::apipb::Peer*>(
      ::apipb::Peer::internal_default_instance());
}
class AddPeerRequest::_Internal {
 public:
  static const ::apipb::Peer& peer(const AddPeerRequest* msg);
};

const ::apipb::Peer&
AddPeerRequest::_Internal::peer(const AddPeerRequest* msg) {
  return *msg->peer_;
}
AddPeerRequest::AddPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPeerRequest)
}
AddPeerRequest::AddPeerRequest(const AddPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::apipb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddPeerRequest)
}

void AddPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPeerRequest_gobgp_2eproto.base);
  peer_ = nullptr;
}

AddPeerRequest::~AddPeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddPeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void AddPeerRequest::ArenaDtor(void* object) {
  AddPeerRequest* _this = reinterpret_cast< AddPeerRequest* >(object);
  (void)_this;
}
void AddPeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPeerRequest& AddPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPeerRequest)
  return target;
}

size_t AddPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPeerRequest)
    MergeFrom(*source);
  }
}

void AddPeerRequest::MergeFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::apipb::Peer::MergeFrom(from._internal_peer());
  }
}

void AddPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerRequest::CopyFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerRequest::IsInitialized() const {
  return true;
}

void AddPeerRequest::InternalSwap(AddPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePeerRequest::InitAsDefaultInstance() {
}
class DeletePeerRequest::_Internal {
 public:
};

DeletePeerRequest::DeletePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeletePeerRequest)
}
DeletePeerRequest::DeletePeerRequest(const DeletePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface().empty()) {
    interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DeletePeerRequest)
}

void DeletePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePeerRequest::~DeletePeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeletePeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePeerRequest::ArenaDtor(void* object) {
  DeletePeerRequest* _this = reinterpret_cast< DeletePeerRequest* >(object);
  (void)_this;
}
void DeletePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePeerRequest& DeletePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeletePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeletePeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeletePeerRequest.interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeletePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeletePeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string interface = 2;
  if (this->interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface().data(), static_cast<int>(this->_internal_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeletePeerRequest.interface");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeletePeerRequest)
  return target;
}

size_t DeletePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeletePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string interface = 2;
  if (this->interface().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeletePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeletePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeletePeerRequest)
    MergeFrom(*source);
  }
}

void DeletePeerRequest::MergeFrom(const DeletePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeletePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.interface().size() > 0) {
    _internal_set_interface(from._internal_interface());
  }
}

void DeletePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeletePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePeerRequest::CopyFrom(const DeletePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeletePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePeerRequest::IsInitialized() const {
  return true;
}

void DeletePeerRequest::InternalSwap(DeletePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_.Swap(&other->interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeerRequest::InitAsDefaultInstance() {
}
class ListPeerRequest::_Internal {
 public:
};

ListPeerRequest::ListPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPeerRequest)
}
ListPeerRequest::ListPeerRequest(const ListPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  enableadvertised_ = from.enableadvertised_;
  // @@protoc_insertion_point(copy_constructor:apipb.ListPeerRequest)
}

void ListPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enableadvertised_ = false;
}

ListPeerRequest::~ListPeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListPeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPeerRequest::ArenaDtor(void* object) {
  ListPeerRequest* _this = reinterpret_cast< ListPeerRequest* >(object);
  (void)_this;
}
void ListPeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeerRequest& ListPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enableadvertised_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableAdvertised = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enableadvertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool enableAdvertised = 2;
  if (this->enableadvertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enableadvertised(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPeerRequest)
  return target;
}

size_t ListPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool enableAdvertised = 2;
  if (this->enableadvertised() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPeerRequest)
    MergeFrom(*source);
  }
}

void ListPeerRequest::MergeFrom(const ListPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.enableadvertised() != 0) {
    _internal_set_enableadvertised(from._internal_enableadvertised());
  }
}

void ListPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeerRequest::CopyFrom(const ListPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeerRequest::IsInitialized() const {
  return true;
}

void ListPeerRequest::InternalSwap(ListPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(enableadvertised_, other->enableadvertised_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeerResponse::InitAsDefaultInstance() {
  ::apipb::_ListPeerResponse_default_instance_._instance.get_mutable()->peer_ = const_cast< ::apipb::Peer*>(
      ::apipb::Peer::internal_default_instance());
}
class ListPeerResponse::_Internal {
 public:
  static const ::apipb::Peer& peer(const ListPeerResponse* msg);
};

const ::apipb::Peer&
ListPeerResponse::_Internal::peer(const ListPeerResponse* msg) {
  return *msg->peer_;
}
ListPeerResponse::ListPeerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPeerResponse)
}
ListPeerResponse::ListPeerResponse(const ListPeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::apipb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPeerResponse)
}

void ListPeerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeerResponse_gobgp_2eproto.base);
  peer_ = nullptr;
}

ListPeerResponse::~ListPeerResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListPeerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPeerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void ListPeerResponse::ArenaDtor(void* object) {
  ListPeerResponse* _this = reinterpret_cast< ListPeerResponse* >(object);
  (void)_this;
}
void ListPeerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeerResponse& ListPeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeerResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPeerResponse)
  return target;
}

size_t ListPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPeerResponse)
    MergeFrom(*source);
  }
}

void ListPeerResponse::MergeFrom(const ListPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::apipb::Peer::MergeFrom(from._internal_peer());
  }
}

void ListPeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeerResponse::CopyFrom(const ListPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeerResponse::IsInitialized() const {
  return true;
}

void ListPeerResponse::InternalSwap(ListPeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerRequest::InitAsDefaultInstance() {
  ::apipb::_UpdatePeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::apipb::Peer*>(
      ::apipb::Peer::internal_default_instance());
}
class UpdatePeerRequest::_Internal {
 public:
  static const ::apipb::Peer& peer(const UpdatePeerRequest* msg);
};

const ::apipb::Peer&
UpdatePeerRequest::_Internal::peer(const UpdatePeerRequest* msg) {
  return *msg->peer_;
}
UpdatePeerRequest::UpdatePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UpdatePeerRequest)
}
UpdatePeerRequest::UpdatePeerRequest(const UpdatePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::apipb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  do_soft_reset_in_ = from.do_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:apipb.UpdatePeerRequest)
}

void UpdatePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePeerRequest_gobgp_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_soft_reset_in_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(do_soft_reset_in_));
}

UpdatePeerRequest::~UpdatePeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.UpdatePeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void UpdatePeerRequest::ArenaDtor(void* object) {
  UpdatePeerRequest* _this = reinterpret_cast< UpdatePeerRequest* >(object);
  (void)_this;
}
void UpdatePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerRequest& UpdatePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UpdatePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  do_soft_reset_in_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_soft_reset_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          do_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UpdatePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_do_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UpdatePeerRequest)
  return target;
}

size_t UpdatePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UpdatePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UpdatePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UpdatePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UpdatePeerRequest)
    MergeFrom(*source);
  }
}

void UpdatePeerRequest::MergeFrom(const UpdatePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UpdatePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::apipb::Peer::MergeFrom(from._internal_peer());
  }
  if (from.do_soft_reset_in() != 0) {
    _internal_set_do_soft_reset_in(from._internal_do_soft_reset_in());
  }
}

void UpdatePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UpdatePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerRequest::CopyFrom(const UpdatePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UpdatePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerRequest::IsInitialized() const {
  return true;
}

void UpdatePeerRequest::InternalSwap(UpdatePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePeerRequest, do_soft_reset_in_)
      + sizeof(UpdatePeerRequest::do_soft_reset_in_)
      - PROTOBUF_FIELD_OFFSET(UpdatePeerRequest, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerResponse::InitAsDefaultInstance() {
}
class UpdatePeerResponse::_Internal {
 public:
};

UpdatePeerResponse::UpdatePeerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UpdatePeerResponse)
}
UpdatePeerResponse::UpdatePeerResponse(const UpdatePeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  needs_soft_reset_in_ = from.needs_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:apipb.UpdatePeerResponse)
}

void UpdatePeerResponse::SharedCtor() {
  needs_soft_reset_in_ = false;
}

UpdatePeerResponse::~UpdatePeerResponse() {
  // @@protoc_insertion_point(destructor:apipb.UpdatePeerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePeerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdatePeerResponse::ArenaDtor(void* object) {
  UpdatePeerResponse* _this = reinterpret_cast< UpdatePeerResponse* >(object);
  (void)_this;
}
void UpdatePeerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerResponse& UpdatePeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UpdatePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needs_soft_reset_in_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool needs_soft_reset_in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          needs_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UpdatePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_needs_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UpdatePeerResponse)
  return target;
}

size_t UpdatePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UpdatePeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UpdatePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UpdatePeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UpdatePeerResponse)
    MergeFrom(*source);
  }
}

void UpdatePeerResponse::MergeFrom(const UpdatePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UpdatePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.needs_soft_reset_in() != 0) {
    _internal_set_needs_soft_reset_in(from._internal_needs_soft_reset_in());
  }
}

void UpdatePeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UpdatePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerResponse::CopyFrom(const UpdatePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UpdatePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerResponse::IsInitialized() const {
  return true;
}

void UpdatePeerResponse::InternalSwap(UpdatePeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(needs_soft_reset_in_, other->needs_soft_reset_in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetPeerRequest::InitAsDefaultInstance() {
}
class ResetPeerRequest::_Internal {
 public:
};

ResetPeerRequest::ResetPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ResetPeerRequest)
}
ResetPeerRequest::ResetPeerRequest(const ResetPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communication().empty()) {
    communication_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_communication(),
      GetArena());
  }
  ::memcpy(&soft_, &from.soft_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&soft_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:apipb.ResetPeerRequest)
}

void ResetPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&soft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&soft_)) + sizeof(direction_));
}

ResetPeerRequest::~ResetPeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.ResetPeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetPeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetPeerRequest::ArenaDtor(void* object) {
  ResetPeerRequest* _this = reinterpret_cast< ResetPeerRequest* >(object);
  (void)_this;
}
void ResetPeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetPeerRequest& ResetPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ResetPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ResetPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communication_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&soft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&soft_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ResetPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_communication();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ResetPeerRequest.communication"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.ResetPeerRequest.SoftResetDirection direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::apipb::ResetPeerRequest_SoftResetDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ResetPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ResetPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communication().data(), static_cast<int>(this->_internal_communication().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ResetPeerRequest.communication");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_communication(), target);
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_soft(), target);
  }

  // .apipb.ResetPeerRequest.SoftResetDirection direction = 4;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ResetPeerRequest)
  return target;
}

size_t ResetPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ResetPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communication());
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    total_size += 1 + 1;
  }

  // .apipb.ResetPeerRequest.SoftResetDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ResetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ResetPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ResetPeerRequest)
    MergeFrom(*source);
  }
}

void ResetPeerRequest::MergeFrom(const ResetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ResetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.communication().size() > 0) {
    _internal_set_communication(from._internal_communication());
  }
  if (from.soft() != 0) {
    _internal_set_soft(from._internal_soft());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void ResetPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ResetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPeerRequest::CopyFrom(const ResetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ResetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPeerRequest::IsInitialized() const {
  return true;
}

void ResetPeerRequest::InternalSwap(ResetPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communication_.Swap(&other->communication_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResetPeerRequest, direction_)
      + sizeof(ResetPeerRequest::direction_)
      - PROTOBUF_FIELD_OFFSET(ResetPeerRequest, soft_)>(
          reinterpret_cast<char*>(&soft_),
          reinterpret_cast<char*>(&other->soft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutdownPeerRequest::InitAsDefaultInstance() {
}
class ShutdownPeerRequest::_Internal {
 public:
};

ShutdownPeerRequest::ShutdownPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ShutdownPeerRequest)
}
ShutdownPeerRequest::ShutdownPeerRequest(const ShutdownPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communication().empty()) {
    communication_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_communication(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ShutdownPeerRequest)
}

void ShutdownPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShutdownPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShutdownPeerRequest::~ShutdownPeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.ShutdownPeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShutdownPeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShutdownPeerRequest::ArenaDtor(void* object) {
  ShutdownPeerRequest* _this = reinterpret_cast< ShutdownPeerRequest* >(object);
  (void)_this;
}
void ShutdownPeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownPeerRequest& ShutdownPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ShutdownPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ShutdownPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communication_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ShutdownPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_communication();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ShutdownPeerRequest.communication"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ShutdownPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ShutdownPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communication().data(), static_cast<int>(this->_internal_communication().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ShutdownPeerRequest.communication");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_communication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ShutdownPeerRequest)
  return target;
}

size_t ShutdownPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ShutdownPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communication());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ShutdownPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ShutdownPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ShutdownPeerRequest)
    MergeFrom(*source);
  }
}

void ShutdownPeerRequest::MergeFrom(const ShutdownPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ShutdownPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.communication().size() > 0) {
    _internal_set_communication(from._internal_communication());
  }
}

void ShutdownPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ShutdownPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPeerRequest::CopyFrom(const ShutdownPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ShutdownPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPeerRequest::IsInitialized() const {
  return true;
}

void ShutdownPeerRequest::InternalSwap(ShutdownPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communication_.Swap(&other->communication_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnablePeerRequest::InitAsDefaultInstance() {
}
class EnablePeerRequest::_Internal {
 public:
};

EnablePeerRequest::EnablePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EnablePeerRequest)
}
EnablePeerRequest::EnablePeerRequest(const EnablePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.EnablePeerRequest)
}

void EnablePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnablePeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnablePeerRequest::~EnablePeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.EnablePeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnablePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnablePeerRequest::ArenaDtor(void* object) {
  EnablePeerRequest* _this = reinterpret_cast< EnablePeerRequest* >(object);
  (void)_this;
}
void EnablePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnablePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnablePeerRequest& EnablePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnablePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnablePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EnablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnablePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EnablePeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnablePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EnablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EnablePeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EnablePeerRequest)
  return target;
}

size_t EnablePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EnablePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnablePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EnablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnablePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnablePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EnablePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EnablePeerRequest)
    MergeFrom(*source);
  }
}

void EnablePeerRequest::MergeFrom(const EnablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EnablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void EnablePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EnablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnablePeerRequest::CopyFrom(const EnablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EnablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnablePeerRequest::IsInitialized() const {
  return true;
}

void EnablePeerRequest::InternalSwap(EnablePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnablePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisablePeerRequest::InitAsDefaultInstance() {
}
class DisablePeerRequest::_Internal {
 public:
};

DisablePeerRequest::DisablePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DisablePeerRequest)
}
DisablePeerRequest::DisablePeerRequest(const DisablePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communication().empty()) {
    communication_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_communication(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DisablePeerRequest)
}

void DisablePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisablePeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisablePeerRequest::~DisablePeerRequest() {
  // @@protoc_insertion_point(destructor:apipb.DisablePeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisablePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisablePeerRequest::ArenaDtor(void* object) {
  DisablePeerRequest* _this = reinterpret_cast< DisablePeerRequest* >(object);
  (void)_this;
}
void DisablePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisablePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisablePeerRequest& DisablePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisablePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DisablePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DisablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communication_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisablePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DisablePeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_communication();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DisablePeerRequest.communication"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisablePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DisablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DisablePeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communication().data(), static_cast<int>(this->_internal_communication().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DisablePeerRequest.communication");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_communication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DisablePeerRequest)
  return target;
}

size_t DisablePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DisablePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communication());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisablePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DisablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisablePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisablePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DisablePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DisablePeerRequest)
    MergeFrom(*source);
  }
}

void DisablePeerRequest::MergeFrom(const DisablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DisablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.communication().size() > 0) {
    _internal_set_communication(from._internal_communication());
  }
}

void DisablePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DisablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisablePeerRequest::CopyFrom(const DisablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DisablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisablePeerRequest::IsInitialized() const {
  return true;
}

void DisablePeerRequest::InternalSwap(DisablePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  communication_.Swap(&other->communication_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisablePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPeerGroupRequest::InitAsDefaultInstance() {
  ::apipb::_AddPeerGroupRequest_default_instance_._instance.get_mutable()->peer_group_ = const_cast< ::apipb::PeerGroup*>(
      ::apipb::PeerGroup::internal_default_instance());
}
class AddPeerGroupRequest::_Internal {
 public:
  static const ::apipb::PeerGroup& peer_group(const AddPeerGroupRequest* msg);
};

const ::apipb::PeerGroup&
AddPeerGroupRequest::_Internal::peer_group(const AddPeerGroupRequest* msg) {
  return *msg->peer_group_;
}
AddPeerGroupRequest::AddPeerGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPeerGroupRequest)
}
AddPeerGroupRequest::AddPeerGroupRequest(const AddPeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_group()) {
    peer_group_ = new ::apipb::PeerGroup(*from.peer_group_);
  } else {
    peer_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddPeerGroupRequest)
}

void AddPeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPeerGroupRequest_gobgp_2eproto.base);
  peer_group_ = nullptr;
}

AddPeerGroupRequest::~AddPeerGroupRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddPeerGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPeerGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_group_;
}

void AddPeerGroupRequest::ArenaDtor(void* object) {
  AddPeerGroupRequest* _this = reinterpret_cast< AddPeerGroupRequest* >(object);
  (void)_this;
}
void AddPeerGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPeerGroupRequest& AddPeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PeerGroup peer_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPeerGroupRequest)
  return target;
}

size_t AddPeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPeerGroupRequest)
    MergeFrom(*source);
  }
}

void AddPeerGroupRequest::MergeFrom(const AddPeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_group()) {
    _internal_mutable_peer_group()->::apipb::PeerGroup::MergeFrom(from._internal_peer_group());
  }
}

void AddPeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerGroupRequest::CopyFrom(const AddPeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerGroupRequest::IsInitialized() const {
  return true;
}

void AddPeerGroupRequest::InternalSwap(AddPeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(peer_group_, other->peer_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePeerGroupRequest::InitAsDefaultInstance() {
}
class DeletePeerGroupRequest::_Internal {
 public:
};

DeletePeerGroupRequest::DeletePeerGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeletePeerGroupRequest)
}
DeletePeerGroupRequest::DeletePeerGroupRequest(const DeletePeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DeletePeerGroupRequest)
}

void DeletePeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePeerGroupRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePeerGroupRequest::~DeletePeerGroupRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeletePeerGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePeerGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePeerGroupRequest::ArenaDtor(void* object) {
  DeletePeerGroupRequest* _this = reinterpret_cast< DeletePeerGroupRequest* >(object);
  (void)_this;
}
void DeletePeerGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePeerGroupRequest& DeletePeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeletePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeletePeerGroupRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeletePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeletePeerGroupRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeletePeerGroupRequest)
  return target;
}

size_t DeletePeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeletePeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeletePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeletePeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeletePeerGroupRequest)
    MergeFrom(*source);
  }
}

void DeletePeerGroupRequest::MergeFrom(const DeletePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeletePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DeletePeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeletePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePeerGroupRequest::CopyFrom(const DeletePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeletePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePeerGroupRequest::IsInitialized() const {
  return true;
}

void DeletePeerGroupRequest::InternalSwap(DeletePeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerGroupRequest::InitAsDefaultInstance() {
  ::apipb::_UpdatePeerGroupRequest_default_instance_._instance.get_mutable()->peer_group_ = const_cast< ::apipb::PeerGroup*>(
      ::apipb::PeerGroup::internal_default_instance());
}
class UpdatePeerGroupRequest::_Internal {
 public:
  static const ::apipb::PeerGroup& peer_group(const UpdatePeerGroupRequest* msg);
};

const ::apipb::PeerGroup&
UpdatePeerGroupRequest::_Internal::peer_group(const UpdatePeerGroupRequest* msg) {
  return *msg->peer_group_;
}
UpdatePeerGroupRequest::UpdatePeerGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UpdatePeerGroupRequest)
}
UpdatePeerGroupRequest::UpdatePeerGroupRequest(const UpdatePeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_group()) {
    peer_group_ = new ::apipb::PeerGroup(*from.peer_group_);
  } else {
    peer_group_ = nullptr;
  }
  do_soft_reset_in_ = from.do_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:apipb.UpdatePeerGroupRequest)
}

void UpdatePeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePeerGroupRequest_gobgp_2eproto.base);
  ::memset(&peer_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_soft_reset_in_) -
      reinterpret_cast<char*>(&peer_group_)) + sizeof(do_soft_reset_in_));
}

UpdatePeerGroupRequest::~UpdatePeerGroupRequest() {
  // @@protoc_insertion_point(destructor:apipb.UpdatePeerGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePeerGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_group_;
}

void UpdatePeerGroupRequest::ArenaDtor(void* object) {
  UpdatePeerGroupRequest* _this = reinterpret_cast< UpdatePeerGroupRequest* >(object);
  (void)_this;
}
void UpdatePeerGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerGroupRequest& UpdatePeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UpdatePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
  do_soft_reset_in_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PeerGroup peer_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_soft_reset_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          do_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UpdatePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_group(this), target, stream);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_do_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UpdatePeerGroupRequest)
  return target;
}

size_t UpdatePeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UpdatePeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_group_);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UpdatePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UpdatePeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UpdatePeerGroupRequest)
    MergeFrom(*source);
  }
}

void UpdatePeerGroupRequest::MergeFrom(const UpdatePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UpdatePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_group()) {
    _internal_mutable_peer_group()->::apipb::PeerGroup::MergeFrom(from._internal_peer_group());
  }
  if (from.do_soft_reset_in() != 0) {
    _internal_set_do_soft_reset_in(from._internal_do_soft_reset_in());
  }
}

void UpdatePeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UpdatePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerGroupRequest::CopyFrom(const UpdatePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UpdatePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerGroupRequest::IsInitialized() const {
  return true;
}

void UpdatePeerGroupRequest::InternalSwap(UpdatePeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePeerGroupRequest, do_soft_reset_in_)
      + sizeof(UpdatePeerGroupRequest::do_soft_reset_in_)
      - PROTOBUF_FIELD_OFFSET(UpdatePeerGroupRequest, peer_group_)>(
          reinterpret_cast<char*>(&peer_group_),
          reinterpret_cast<char*>(&other->peer_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerGroupResponse::InitAsDefaultInstance() {
}
class UpdatePeerGroupResponse::_Internal {
 public:
};

UpdatePeerGroupResponse::UpdatePeerGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UpdatePeerGroupResponse)
}
UpdatePeerGroupResponse::UpdatePeerGroupResponse(const UpdatePeerGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  needs_soft_reset_in_ = from.needs_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:apipb.UpdatePeerGroupResponse)
}

void UpdatePeerGroupResponse::SharedCtor() {
  needs_soft_reset_in_ = false;
}

UpdatePeerGroupResponse::~UpdatePeerGroupResponse() {
  // @@protoc_insertion_point(destructor:apipb.UpdatePeerGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePeerGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdatePeerGroupResponse::ArenaDtor(void* object) {
  UpdatePeerGroupResponse* _this = reinterpret_cast< UpdatePeerGroupResponse* >(object);
  (void)_this;
}
void UpdatePeerGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePeerGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerGroupResponse& UpdatePeerGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerGroupResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UpdatePeerGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needs_soft_reset_in_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePeerGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool needs_soft_reset_in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          needs_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UpdatePeerGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_needs_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UpdatePeerGroupResponse)
  return target;
}

size_t UpdatePeerGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UpdatePeerGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UpdatePeerGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UpdatePeerGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UpdatePeerGroupResponse)
    MergeFrom(*source);
  }
}

void UpdatePeerGroupResponse::MergeFrom(const UpdatePeerGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UpdatePeerGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.needs_soft_reset_in() != 0) {
    _internal_set_needs_soft_reset_in(from._internal_needs_soft_reset_in());
  }
}

void UpdatePeerGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UpdatePeerGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerGroupResponse::CopyFrom(const UpdatePeerGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UpdatePeerGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerGroupResponse::IsInitialized() const {
  return true;
}

void UpdatePeerGroupResponse::InternalSwap(UpdatePeerGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(needs_soft_reset_in_, other->needs_soft_reset_in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeerGroupRequest::InitAsDefaultInstance() {
}
class ListPeerGroupRequest::_Internal {
 public:
};

ListPeerGroupRequest::ListPeerGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPeerGroupRequest)
}
ListPeerGroupRequest::ListPeerGroupRequest(const ListPeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group_name().empty()) {
    peer_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPeerGroupRequest)
}

void ListPeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeerGroupRequest_gobgp_2eproto.base);
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPeerGroupRequest::~ListPeerGroupRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListPeerGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPeerGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  peer_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPeerGroupRequest::ArenaDtor(void* object) {
  ListPeerGroupRequest* _this = reinterpret_cast< ListPeerGroupRequest* >(object);
  (void)_this;
}
void ListPeerGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeerGroupRequest& ListPeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string peer_group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_peer_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListPeerGroupRequest.peer_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer_group_name = 1;
  if (this->peer_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group_name().data(), static_cast<int>(this->_internal_peer_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListPeerGroupRequest.peer_group_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_peer_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPeerGroupRequest)
  return target;
}

size_t ListPeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peer_group_name = 1;
  if (this->peer_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPeerGroupRequest)
    MergeFrom(*source);
  }
}

void ListPeerGroupRequest::MergeFrom(const ListPeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_group_name().size() > 0) {
    _internal_set_peer_group_name(from._internal_peer_group_name());
  }
}

void ListPeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeerGroupRequest::CopyFrom(const ListPeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeerGroupRequest::IsInitialized() const {
  return true;
}

void ListPeerGroupRequest::InternalSwap(ListPeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peer_group_name_.Swap(&other->peer_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeerGroupResponse::InitAsDefaultInstance() {
  ::apipb::_ListPeerGroupResponse_default_instance_._instance.get_mutable()->peer_group_ = const_cast< ::apipb::PeerGroup*>(
      ::apipb::PeerGroup::internal_default_instance());
}
class ListPeerGroupResponse::_Internal {
 public:
  static const ::apipb::PeerGroup& peer_group(const ListPeerGroupResponse* msg);
};

const ::apipb::PeerGroup&
ListPeerGroupResponse::_Internal::peer_group(const ListPeerGroupResponse* msg) {
  return *msg->peer_group_;
}
ListPeerGroupResponse::ListPeerGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPeerGroupResponse)
}
ListPeerGroupResponse::ListPeerGroupResponse(const ListPeerGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_group()) {
    peer_group_ = new ::apipb::PeerGroup(*from.peer_group_);
  } else {
    peer_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPeerGroupResponse)
}

void ListPeerGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeerGroupResponse_gobgp_2eproto.base);
  peer_group_ = nullptr;
}

ListPeerGroupResponse::~ListPeerGroupResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListPeerGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPeerGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_group_;
}

void ListPeerGroupResponse::ArenaDtor(void* object) {
  ListPeerGroupResponse* _this = reinterpret_cast< ListPeerGroupResponse* >(object);
  (void)_this;
}
void ListPeerGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPeerGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeerGroupResponse& ListPeerGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeerGroupResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPeerGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPeerGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPeerGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PeerGroup peer_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeerGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPeerGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPeerGroupResponse)
  return target;
}

size_t ListPeerGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPeerGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeerGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPeerGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeerGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeerGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPeerGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPeerGroupResponse)
    MergeFrom(*source);
  }
}

void ListPeerGroupResponse::MergeFrom(const ListPeerGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPeerGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_group()) {
    _internal_mutable_peer_group()->::apipb::PeerGroup::MergeFrom(from._internal_peer_group());
  }
}

void ListPeerGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPeerGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeerGroupResponse::CopyFrom(const ListPeerGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPeerGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeerGroupResponse::IsInitialized() const {
  return true;
}

void ListPeerGroupResponse::InternalSwap(ListPeerGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(peer_group_, other->peer_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeerGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDynamicNeighborRequest::InitAsDefaultInstance() {
  ::apipb::_AddDynamicNeighborRequest_default_instance_._instance.get_mutable()->dynamic_neighbor_ = const_cast< ::apipb::DynamicNeighbor*>(
      ::apipb::DynamicNeighbor::internal_default_instance());
}
class AddDynamicNeighborRequest::_Internal {
 public:
  static const ::apipb::DynamicNeighbor& dynamic_neighbor(const AddDynamicNeighborRequest* msg);
};

const ::apipb::DynamicNeighbor&
AddDynamicNeighborRequest::_Internal::dynamic_neighbor(const AddDynamicNeighborRequest* msg) {
  return *msg->dynamic_neighbor_;
}
AddDynamicNeighborRequest::AddDynamicNeighborRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddDynamicNeighborRequest)
}
AddDynamicNeighborRequest::AddDynamicNeighborRequest(const AddDynamicNeighborRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dynamic_neighbor()) {
    dynamic_neighbor_ = new ::apipb::DynamicNeighbor(*from.dynamic_neighbor_);
  } else {
    dynamic_neighbor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddDynamicNeighborRequest)
}

void AddDynamicNeighborRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDynamicNeighborRequest_gobgp_2eproto.base);
  dynamic_neighbor_ = nullptr;
}

AddDynamicNeighborRequest::~AddDynamicNeighborRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddDynamicNeighborRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDynamicNeighborRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dynamic_neighbor_;
}

void AddDynamicNeighborRequest::ArenaDtor(void* object) {
  AddDynamicNeighborRequest* _this = reinterpret_cast< AddDynamicNeighborRequest* >(object);
  (void)_this;
}
void AddDynamicNeighborRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDynamicNeighborRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDynamicNeighborRequest& AddDynamicNeighborRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDynamicNeighborRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddDynamicNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dynamic_neighbor_ != nullptr) {
    delete dynamic_neighbor_;
  }
  dynamic_neighbor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDynamicNeighborRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DynamicNeighbor dynamic_neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_neighbor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDynamicNeighborRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DynamicNeighbor dynamic_neighbor = 1;
  if (this->has_dynamic_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dynamic_neighbor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddDynamicNeighborRequest)
  return target;
}

size_t AddDynamicNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddDynamicNeighborRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.DynamicNeighbor dynamic_neighbor = 1;
  if (this->has_dynamic_neighbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_neighbor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDynamicNeighborRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDynamicNeighborRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDynamicNeighborRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddDynamicNeighborRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddDynamicNeighborRequest)
    MergeFrom(*source);
  }
}

void AddDynamicNeighborRequest::MergeFrom(const AddDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dynamic_neighbor()) {
    _internal_mutable_dynamic_neighbor()->::apipb::DynamicNeighbor::MergeFrom(from._internal_dynamic_neighbor());
  }
}

void AddDynamicNeighborRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDynamicNeighborRequest::CopyFrom(const AddDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDynamicNeighborRequest::IsInitialized() const {
  return true;
}

void AddDynamicNeighborRequest::InternalSwap(AddDynamicNeighborRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(dynamic_neighbor_, other->dynamic_neighbor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDynamicNeighborRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDynamicNeighborRequest::InitAsDefaultInstance() {
}
class DeleteDynamicNeighborRequest::_Internal {
 public:
};

DeleteDynamicNeighborRequest::DeleteDynamicNeighborRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeleteDynamicNeighborRequest)
}
DeleteDynamicNeighborRequest::DeleteDynamicNeighborRequest(const DeleteDynamicNeighborRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DeleteDynamicNeighborRequest)
}

void DeleteDynamicNeighborRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDynamicNeighborRequest_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteDynamicNeighborRequest::~DeleteDynamicNeighborRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeleteDynamicNeighborRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDynamicNeighborRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteDynamicNeighborRequest::ArenaDtor(void* object) {
  DeleteDynamicNeighborRequest* _this = reinterpret_cast< DeleteDynamicNeighborRequest* >(object);
  (void)_this;
}
void DeleteDynamicNeighborRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDynamicNeighborRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDynamicNeighborRequest& DeleteDynamicNeighborRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDynamicNeighborRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteDynamicNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeleteDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDynamicNeighborRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeleteDynamicNeighborRequest.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeleteDynamicNeighborRequest.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDynamicNeighborRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeleteDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeleteDynamicNeighborRequest.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string peer_group = 2;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeleteDynamicNeighborRequest.peer_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeleteDynamicNeighborRequest)
  return target;
}

size_t DeleteDynamicNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeleteDynamicNeighborRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string peer_group = 2;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDynamicNeighborRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeleteDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDynamicNeighborRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDynamicNeighborRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeleteDynamicNeighborRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeleteDynamicNeighborRequest)
    MergeFrom(*source);
  }
}

void DeleteDynamicNeighborRequest::MergeFrom(const DeleteDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeleteDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.peer_group().size() > 0) {
    _internal_set_peer_group(from._internal_peer_group());
  }
}

void DeleteDynamicNeighborRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeleteDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDynamicNeighborRequest::CopyFrom(const DeleteDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeleteDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDynamicNeighborRequest::IsInitialized() const {
  return true;
}

void DeleteDynamicNeighborRequest::InternalSwap(DeleteDynamicNeighborRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDynamicNeighborRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDynamicNeighborRequest::InitAsDefaultInstance() {
}
class ListDynamicNeighborRequest::_Internal {
 public:
};

ListDynamicNeighborRequest::ListDynamicNeighborRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListDynamicNeighborRequest)
}
ListDynamicNeighborRequest::ListDynamicNeighborRequest(const ListDynamicNeighborRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListDynamicNeighborRequest)
}

void ListDynamicNeighborRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDynamicNeighborRequest_gobgp_2eproto.base);
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListDynamicNeighborRequest::~ListDynamicNeighborRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListDynamicNeighborRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDynamicNeighborRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListDynamicNeighborRequest::ArenaDtor(void* object) {
  ListDynamicNeighborRequest* _this = reinterpret_cast< ListDynamicNeighborRequest* >(object);
  (void)_this;
}
void ListDynamicNeighborRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDynamicNeighborRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDynamicNeighborRequest& ListDynamicNeighborRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDynamicNeighborRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListDynamicNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDynamicNeighborRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string peer_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListDynamicNeighborRequest.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDynamicNeighborRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer_group = 1;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListDynamicNeighborRequest.peer_group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_peer_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListDynamicNeighborRequest)
  return target;
}

size_t ListDynamicNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListDynamicNeighborRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peer_group = 1;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDynamicNeighborRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDynamicNeighborRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDynamicNeighborRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListDynamicNeighborRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListDynamicNeighborRequest)
    MergeFrom(*source);
  }
}

void ListDynamicNeighborRequest::MergeFrom(const ListDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_group().size() > 0) {
    _internal_set_peer_group(from._internal_peer_group());
  }
}

void ListDynamicNeighborRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDynamicNeighborRequest::CopyFrom(const ListDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDynamicNeighborRequest::IsInitialized() const {
  return true;
}

void ListDynamicNeighborRequest::InternalSwap(ListDynamicNeighborRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDynamicNeighborRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDynamicNeighborResponse::InitAsDefaultInstance() {
  ::apipb::_ListDynamicNeighborResponse_default_instance_._instance.get_mutable()->dynamic_neighbor_ = const_cast< ::apipb::DynamicNeighbor*>(
      ::apipb::DynamicNeighbor::internal_default_instance());
}
class ListDynamicNeighborResponse::_Internal {
 public:
  static const ::apipb::DynamicNeighbor& dynamic_neighbor(const ListDynamicNeighborResponse* msg);
};

const ::apipb::DynamicNeighbor&
ListDynamicNeighborResponse::_Internal::dynamic_neighbor(const ListDynamicNeighborResponse* msg) {
  return *msg->dynamic_neighbor_;
}
ListDynamicNeighborResponse::ListDynamicNeighborResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListDynamicNeighborResponse)
}
ListDynamicNeighborResponse::ListDynamicNeighborResponse(const ListDynamicNeighborResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dynamic_neighbor()) {
    dynamic_neighbor_ = new ::apipb::DynamicNeighbor(*from.dynamic_neighbor_);
  } else {
    dynamic_neighbor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListDynamicNeighborResponse)
}

void ListDynamicNeighborResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDynamicNeighborResponse_gobgp_2eproto.base);
  dynamic_neighbor_ = nullptr;
}

ListDynamicNeighborResponse::~ListDynamicNeighborResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListDynamicNeighborResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDynamicNeighborResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dynamic_neighbor_;
}

void ListDynamicNeighborResponse::ArenaDtor(void* object) {
  ListDynamicNeighborResponse* _this = reinterpret_cast< ListDynamicNeighborResponse* >(object);
  (void)_this;
}
void ListDynamicNeighborResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDynamicNeighborResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDynamicNeighborResponse& ListDynamicNeighborResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDynamicNeighborResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListDynamicNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListDynamicNeighborResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dynamic_neighbor_ != nullptr) {
    delete dynamic_neighbor_;
  }
  dynamic_neighbor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDynamicNeighborResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DynamicNeighbor dynamic_neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_neighbor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDynamicNeighborResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListDynamicNeighborResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DynamicNeighbor dynamic_neighbor = 1;
  if (this->has_dynamic_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dynamic_neighbor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListDynamicNeighborResponse)
  return target;
}

size_t ListDynamicNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListDynamicNeighborResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.DynamicNeighbor dynamic_neighbor = 1;
  if (this->has_dynamic_neighbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_neighbor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDynamicNeighborResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListDynamicNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDynamicNeighborResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDynamicNeighborResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListDynamicNeighborResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListDynamicNeighborResponse)
    MergeFrom(*source);
  }
}

void ListDynamicNeighborResponse::MergeFrom(const ListDynamicNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListDynamicNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dynamic_neighbor()) {
    _internal_mutable_dynamic_neighbor()->::apipb::DynamicNeighbor::MergeFrom(from._internal_dynamic_neighbor());
  }
}

void ListDynamicNeighborResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListDynamicNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDynamicNeighborResponse::CopyFrom(const ListDynamicNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListDynamicNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDynamicNeighborResponse::IsInitialized() const {
  return true;
}

void ListDynamicNeighborResponse::InternalSwap(ListDynamicNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(dynamic_neighbor_, other->dynamic_neighbor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDynamicNeighborResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathRequest::InitAsDefaultInstance() {
  ::apipb::_AddPathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::apipb::Path*>(
      ::apipb::Path::internal_default_instance());
}
class AddPathRequest::_Internal {
 public:
  static const ::apipb::Path& path(const AddPathRequest* msg);
};

const ::apipb::Path&
AddPathRequest::_Internal::path(const AddPathRequest* msg) {
  return *msg->path_;
}
AddPathRequest::AddPathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPathRequest)
}
AddPathRequest::AddPathRequest(const AddPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_id().empty()) {
    vrf_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrf_id(),
      GetArena());
  }
  if (from._internal_has_path()) {
    path_ = new ::apipb::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.AddPathRequest)
}

void AddPathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPathRequest_gobgp_2eproto.base);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_type_) -
      reinterpret_cast<char*>(&path_)) + sizeof(table_type_));
}

AddPathRequest::~AddPathRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddPathRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrf_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void AddPathRequest::ArenaDtor(void* object) {
  AddPathRequest* _this = reinterpret_cast< AddPathRequest* >(object);
  (void)_this;
}
void AddPathRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathRequest& AddPathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  table_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::apipb::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string vrf_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AddPathRequest.vrf_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Path path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf_id().data(), static_cast<int>(this->_internal_vrf_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AddPathRequest.vrf_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrf_id(), target);
  }

  // .apipb.Path path = 3;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPathRequest)
  return target;
}

size_t AddPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPathRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf_id());
  }

  // .apipb.Path path = 3;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPathRequest)
    MergeFrom(*source);
  }
}

void AddPathRequest::MergeFrom(const AddPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrf_id().size() > 0) {
    _internal_set_vrf_id(from._internal_vrf_id());
  }
  if (from.has_path()) {
    _internal_mutable_path()->::apipb::Path::MergeFrom(from._internal_path());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void AddPathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathRequest::CopyFrom(const AddPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathRequest::IsInitialized() const {
  return true;
}

void AddPathRequest::InternalSwap(AddPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrf_id_.Swap(&other->vrf_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPathRequest, table_type_)
      + sizeof(AddPathRequest::table_type_)
      - PROTOBUF_FIELD_OFFSET(AddPathRequest, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathResponse::InitAsDefaultInstance() {
}
class AddPathResponse::_Internal {
 public:
};

AddPathResponse::AddPathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPathResponse)
}
AddPathResponse::AddPathResponse(const AddPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddPathResponse)
}

void AddPathResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPathResponse_gobgp_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddPathResponse::~AddPathResponse() {
  // @@protoc_insertion_point(destructor:apipb.AddPathResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPathResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddPathResponse::ArenaDtor(void* object) {
  AddPathResponse* _this = reinterpret_cast< AddPathResponse* >(object);
  (void)_this;
}
void AddPathResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathResponse& AddPathResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPathResponse)
  return target;
}

size_t AddPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPathResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPathResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPathResponse)
    MergeFrom(*source);
  }
}

void AddPathResponse::MergeFrom(const AddPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
}

void AddPathResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathResponse::CopyFrom(const AddPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathResponse::IsInitialized() const {
  return true;
}

void AddPathResponse::InternalSwap(AddPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePathRequest::InitAsDefaultInstance() {
  ::apipb::_DeletePathRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
  ::apipb::_DeletePathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::apipb::Path*>(
      ::apipb::Path::internal_default_instance());
}
class DeletePathRequest::_Internal {
 public:
  static const ::apipb::Family& family(const DeletePathRequest* msg);
  static const ::apipb::Path& path(const DeletePathRequest* msg);
};

const ::apipb::Family&
DeletePathRequest::_Internal::family(const DeletePathRequest* msg) {
  return *msg->family_;
}
const ::apipb::Path&
DeletePathRequest::_Internal::path(const DeletePathRequest* msg) {
  return *msg->path_;
}
DeletePathRequest::DeletePathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeletePathRequest)
}
DeletePathRequest::DeletePathRequest(const DeletePathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_id().empty()) {
    vrf_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrf_id(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  if (from._internal_has_path()) {
    path_ = new ::apipb::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.DeletePathRequest)
}

void DeletePathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePathRequest_gobgp_2eproto.base);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_type_) -
      reinterpret_cast<char*>(&family_)) + sizeof(table_type_));
}

DeletePathRequest::~DeletePathRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeletePathRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrf_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
  if (this != internal_default_instance()) delete path_;
}

void DeletePathRequest::ArenaDtor(void* object) {
  DeletePathRequest* _this = reinterpret_cast< DeletePathRequest* >(object);
  (void)_this;
}
void DeletePathRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePathRequest& DeletePathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePathRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeletePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  table_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::apipb::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string vrf_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeletePathRequest.vrf_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Family family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Path path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePathRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeletePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf_id().data(), static_cast<int>(this->_internal_vrf_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeletePathRequest.vrf_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrf_id(), target);
  }

  // .apipb.Family family = 3;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::family(this), target, stream);
  }

  // .apipb.Path path = 4;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::path(this), target, stream);
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeletePathRequest)
  return target;
}

size_t DeletePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeletePathRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf_id());
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // .apipb.Family family = 3;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .apipb.Path path = 4;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeletePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeletePathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeletePathRequest)
    MergeFrom(*source);
  }
}

void DeletePathRequest::MergeFrom(const DeletePathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeletePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrf_id().size() > 0) {
    _internal_set_vrf_id(from._internal_vrf_id());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.has_path()) {
    _internal_mutable_path()->::apipb::Path::MergeFrom(from._internal_path());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void DeletePathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeletePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePathRequest::CopyFrom(const DeletePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeletePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePathRequest::IsInitialized() const {
  return true;
}

void DeletePathRequest::InternalSwap(DeletePathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrf_id_.Swap(&other->vrf_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeletePathRequest, table_type_)
      + sizeof(DeletePathRequest::table_type_)
      - PROTOBUF_FIELD_OFFSET(DeletePathRequest, family_)>(
          reinterpret_cast<char*>(&family_),
          reinterpret_cast<char*>(&other->family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableLookupPrefix::InitAsDefaultInstance() {
}
class TableLookupPrefix::_Internal {
 public:
};

TableLookupPrefix::TableLookupPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TableLookupPrefix)
}
TableLookupPrefix::TableLookupPrefix(const TableLookupPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.TableLookupPrefix)
}

void TableLookupPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableLookupPrefix_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TableLookupPrefix::~TableLookupPrefix() {
  // @@protoc_insertion_point(destructor:apipb.TableLookupPrefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableLookupPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableLookupPrefix::ArenaDtor(void* object) {
  TableLookupPrefix* _this = reinterpret_cast< TableLookupPrefix* >(object);
  (void)_this;
}
void TableLookupPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableLookupPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableLookupPrefix& TableLookupPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableLookupPrefix_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TableLookupPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TableLookupPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableLookupPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.TableLookupPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.TableLookupPrefix.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::TableLookupPrefix_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableLookupPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TableLookupPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.TableLookupPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // .apipb.TableLookupPrefix.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TableLookupPrefix)
  return target;
}

size_t TableLookupPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TableLookupPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .apipb.TableLookupPrefix.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableLookupPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TableLookupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const TableLookupPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableLookupPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TableLookupPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TableLookupPrefix)
    MergeFrom(*source);
  }
}

void TableLookupPrefix::MergeFrom(const TableLookupPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TableLookupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TableLookupPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TableLookupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableLookupPrefix::CopyFrom(const TableLookupPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TableLookupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableLookupPrefix::IsInitialized() const {
  return true;
}

void TableLookupPrefix::InternalSwap(TableLookupPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableLookupPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPathRequest::InitAsDefaultInstance() {
  ::apipb::_ListPathRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class ListPathRequest::_Internal {
 public:
  static const ::apipb::Family& family(const ListPathRequest* msg);
};

const ::apipb::Family&
ListPathRequest::_Internal::family(const ListPathRequest* msg) {
  return *msg->family_;
}
ListPathRequest::ListPathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prefixes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPathRequest)
}
ListPathRequest::ListPathRequest(const ListPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prefixes_(from.prefixes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&table_type_, &from.table_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_only_binary_) -
    reinterpret_cast<char*>(&table_type_)) + sizeof(enable_only_binary_));
  // @@protoc_insertion_point(copy_constructor:apipb.ListPathRequest)
}

void ListPathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPathRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_only_binary_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enable_only_binary_));
}

ListPathRequest::~ListPathRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListPathRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
}

void ListPathRequest::ArenaDtor(void* object) {
  ListPathRequest* _this = reinterpret_cast< ListPathRequest* >(object);
  (void)_this;
}
void ListPathRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPathRequest& ListPathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPathRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefixes_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&table_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_only_binary_) -
      reinterpret_cast<char*>(&table_type_)) + sizeof(enable_only_binary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::apipb::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListPathRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Family family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.TableLookupPrefix prefixes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefixes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .apipb.ListPathRequest.SortType sort_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_type(static_cast<::apipb::ListPathRequest_SortType>(val));
        } else goto handle_unusual;
        continue;
      // bool enable_filtered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enable_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_nlri_binary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_nlri_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_attribute_binary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enable_attribute_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_only_binary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          enable_only_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPathRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListPathRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .apipb.Family family = 3;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::family(this), target, stream);
  }

  // repeated .apipb.TableLookupPrefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefixes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prefixes(i), target, stream);
  }

  // .apipb.ListPathRequest.SortType sort_type = 5;
  if (this->sort_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_type(), target);
  }

  // bool enable_filtered = 6;
  if (this->enable_filtered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_filtered(), target);
  }

  // bool enable_nlri_binary = 7;
  if (this->enable_nlri_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_nlri_binary(), target);
  }

  // bool enable_attribute_binary = 8;
  if (this->enable_attribute_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_attribute_binary(), target);
  }

  // bool enable_only_binary = 9;
  if (this->enable_only_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_only_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPathRequest)
  return target;
}

size_t ListPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPathRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.TableLookupPrefix prefixes = 4;
  total_size += 1UL * this->_internal_prefixes_size();
  for (const auto& msg : this->prefixes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.Family family = 3;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  // .apipb.ListPathRequest.SortType sort_type = 5;
  if (this->sort_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_type());
  }

  // bool enable_filtered = 6;
  if (this->enable_filtered() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_nlri_binary = 7;
  if (this->enable_nlri_binary() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_attribute_binary = 8;
  if (this->enable_attribute_binary() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_only_binary = 9;
  if (this->enable_only_binary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPathRequest)
    MergeFrom(*source);
  }
}

void ListPathRequest::MergeFrom(const ListPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefixes_.MergeFrom(from.prefixes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
  if (from.sort_type() != 0) {
    _internal_set_sort_type(from._internal_sort_type());
  }
  if (from.enable_filtered() != 0) {
    _internal_set_enable_filtered(from._internal_enable_filtered());
  }
  if (from.enable_nlri_binary() != 0) {
    _internal_set_enable_nlri_binary(from._internal_enable_nlri_binary());
  }
  if (from.enable_attribute_binary() != 0) {
    _internal_set_enable_attribute_binary(from._internal_enable_attribute_binary());
  }
  if (from.enable_only_binary() != 0) {
    _internal_set_enable_only_binary(from._internal_enable_only_binary());
  }
}

void ListPathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPathRequest::CopyFrom(const ListPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPathRequest::IsInitialized() const {
  return true;
}

void ListPathRequest::InternalSwap(ListPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefixes_.InternalSwap(&other->prefixes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListPathRequest, enable_only_binary_)
      + sizeof(ListPathRequest::enable_only_binary_)
      - PROTOBUF_FIELD_OFFSET(ListPathRequest, family_)>(
          reinterpret_cast<char*>(&family_),
          reinterpret_cast<char*>(&other->family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPathResponse::InitAsDefaultInstance() {
  ::apipb::_ListPathResponse_default_instance_._instance.get_mutable()->destination_ = const_cast< ::apipb::Destination*>(
      ::apipb::Destination::internal_default_instance());
}
class ListPathResponse::_Internal {
 public:
  static const ::apipb::Destination& destination(const ListPathResponse* msg);
};

const ::apipb::Destination&
ListPathResponse::_Internal::destination(const ListPathResponse* msg) {
  return *msg->destination_;
}
ListPathResponse::ListPathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPathResponse)
}
ListPathResponse::ListPathResponse(const ListPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destination()) {
    destination_ = new ::apipb::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPathResponse)
}

void ListPathResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPathResponse_gobgp_2eproto.base);
  destination_ = nullptr;
}

ListPathResponse::~ListPathResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListPathResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPathResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete destination_;
}

void ListPathResponse::ArenaDtor(void* object) {
  ListPathResponse* _this = reinterpret_cast< ListPathResponse* >(object);
  (void)_this;
}
void ListPathResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPathResponse& ListPathResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPathResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Destination destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPathResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Destination destination = 1;
  if (this->has_destination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::destination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPathResponse)
  return target;
}

size_t ListPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPathResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Destination destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPathResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPathResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPathResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPathResponse)
    MergeFrom(*source);
  }
}

void ListPathResponse::MergeFrom(const ListPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    _internal_mutable_destination()->::apipb::Destination::MergeFrom(from._internal_destination());
  }
}

void ListPathResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPathResponse::CopyFrom(const ListPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPathResponse::IsInitialized() const {
  return true;
}

void ListPathResponse::InternalSwap(ListPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(destination_, other->destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPathResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathStreamRequest::InitAsDefaultInstance() {
}
class AddPathStreamRequest::_Internal {
 public:
};

AddPathStreamRequest::AddPathStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPathStreamRequest)
}
AddPathStreamRequest::AddPathStreamRequest(const AddPathStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_id().empty()) {
    vrf_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrf_id(),
      GetArena());
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.AddPathStreamRequest)
}

void AddPathStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPathStreamRequest_gobgp_2eproto.base);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_type_ = 0;
}

AddPathStreamRequest::~AddPathStreamRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddPathStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPathStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrf_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddPathStreamRequest::ArenaDtor(void* object) {
  AddPathStreamRequest* _this = reinterpret_cast< AddPathStreamRequest* >(object);
  (void)_this;
}
void AddPathStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPathStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathStreamRequest& AddPathStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathStreamRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  vrf_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  table_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPathStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::apipb::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string vrf_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AddPathStreamRequest.vrf_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Path paths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf_id().data(), static_cast<int>(this->_internal_vrf_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AddPathStreamRequest.vrf_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrf_id(), target);
  }

  // repeated .apipb.Path paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPathStreamRequest)
  return target;
}

size_t AddPathStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPathStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.Path paths = 3;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf_id());
  }

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPathStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPathStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPathStreamRequest)
    MergeFrom(*source);
  }
}

void AddPathStreamRequest::MergeFrom(const AddPathStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPathStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.vrf_id().size() > 0) {
    _internal_set_vrf_id(from._internal_vrf_id());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void AddPathStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPathStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathStreamRequest::CopyFrom(const AddPathStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPathStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathStreamRequest::IsInitialized() const {
  return true;
}

void AddPathStreamRequest::InternalSwap(AddPathStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  vrf_id_.Swap(&other->vrf_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(table_type_, other->table_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTableRequest::InitAsDefaultInstance() {
  ::apipb::_GetTableRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class GetTableRequest::_Internal {
 public:
  static const ::apipb::Family& family(const GetTableRequest* msg);
};

const ::apipb::Family&
GetTableRequest::_Internal::family(const GetTableRequest* msg) {
  return *msg->family_;
}
GetTableRequest::GetTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.GetTableRequest)
}
GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.GetTableRequest)
}

void GetTableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTableRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_type_) -
      reinterpret_cast<char*>(&family_)) + sizeof(table_type_));
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:apipb.GetTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
}

void GetTableRequest::ArenaDtor(void* object) {
  GetTableRequest* _this = reinterpret_cast< GetTableRequest* >(object);
  (void)_this;
}
void GetTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTableRequest& GetTableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTableRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.GetTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  table_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::apipb::TableType>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.Family family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.GetTableRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.GetTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // .apipb.Family family = 2;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::family(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.GetTableRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.GetTableRequest)
  return target;
}

size_t GetTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.GetTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.Family family = 2;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .apipb.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.GetTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.GetTableRequest)
    MergeFrom(*source);
  }
}

void GetTableRequest::MergeFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void GetTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {
  return true;
}

void GetTableRequest::InternalSwap(GetTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTableRequest, table_type_)
      + sizeof(GetTableRequest::table_type_)
      - PROTOBUF_FIELD_OFFSET(GetTableRequest, family_)>(
          reinterpret_cast<char*>(&family_),
          reinterpret_cast<char*>(&other->family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTableResponse::InitAsDefaultInstance() {
}
class GetTableResponse::_Internal {
 public:
};

GetTableResponse::GetTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.GetTableResponse)
}
GetTableResponse::GetTableResponse(const GetTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_destination_, &from.num_destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_accepted_) -
    reinterpret_cast<char*>(&num_destination_)) + sizeof(num_accepted_));
  // @@protoc_insertion_point(copy_constructor:apipb.GetTableResponse)
}

void GetTableResponse::SharedCtor() {
  ::memset(&num_destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accepted_) -
      reinterpret_cast<char*>(&num_destination_)) + sizeof(num_accepted_));
}

GetTableResponse::~GetTableResponse() {
  // @@protoc_insertion_point(destructor:apipb.GetTableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTableResponse::ArenaDtor(void* object) {
  GetTableResponse* _this = reinterpret_cast< GetTableResponse* >(object);
  (void)_this;
}
void GetTableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTableResponse& GetTableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTableResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.GetTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accepted_) -
      reinterpret_cast<char*>(&num_destination_)) + sizeof(num_accepted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 num_destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_accepted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.GetTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 num_destination = 1;
  if (this->num_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_num_destination(), target);
  }

  // uint64 num_path = 2;
  if (this->num_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_path(), target);
  }

  // uint64 num_accepted = 3;
  if (this->num_accepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.GetTableResponse)
  return target;
}

size_t GetTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.GetTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 num_destination = 1;
  if (this->num_destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_destination());
  }

  // uint64 num_path = 2;
  if (this->num_path() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_path());
  }

  // uint64 num_accepted = 3;
  if (this->num_accepted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_accepted());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.GetTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.GetTableResponse)
    MergeFrom(*source);
  }
}

void GetTableResponse::MergeFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_destination() != 0) {
    _internal_set_num_destination(from._internal_num_destination());
  }
  if (from.num_path() != 0) {
    _internal_set_num_path(from._internal_num_path());
  }
  if (from.num_accepted() != 0) {
    _internal_set_num_accepted(from._internal_num_accepted());
  }
}

void GetTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableResponse::CopyFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableResponse::IsInitialized() const {
  return true;
}

void GetTableResponse::InternalSwap(GetTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTableResponse, num_accepted_)
      + sizeof(GetTableResponse::num_accepted_)
      - PROTOBUF_FIELD_OFFSET(GetTableResponse, num_destination_)>(
          reinterpret_cast<char*>(&num_destination_),
          reinterpret_cast<char*>(&other->num_destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddVrfRequest::InitAsDefaultInstance() {
  ::apipb::_AddVrfRequest_default_instance_._instance.get_mutable()->vrf_ = const_cast< ::apipb::Vrf*>(
      ::apipb::Vrf::internal_default_instance());
}
class AddVrfRequest::_Internal {
 public:
  static const ::apipb::Vrf& vrf(const AddVrfRequest* msg);
};

const ::apipb::Vrf&
AddVrfRequest::_Internal::vrf(const AddVrfRequest* msg) {
  return *msg->vrf_;
}
AddVrfRequest::AddVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddVrfRequest)
}
AddVrfRequest::AddVrfRequest(const AddVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vrf()) {
    vrf_ = new ::apipb::Vrf(*from.vrf_);
  } else {
    vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddVrfRequest)
}

void AddVrfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddVrfRequest_gobgp_2eproto.base);
  vrf_ = nullptr;
}

AddVrfRequest::~AddVrfRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddVrfRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddVrfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vrf_;
}

void AddVrfRequest::ArenaDtor(void* object) {
  AddVrfRequest* _this = reinterpret_cast< AddVrfRequest* >(object);
  (void)_this;
}
void AddVrfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddVrfRequest& AddVrfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddVrfRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Vrf vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddVrfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Vrf vrf = 1;
  if (this->has_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddVrfRequest)
  return target;
}

size_t AddVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddVrfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Vrf vrf = 1;
  if (this->has_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddVrfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddVrfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddVrfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddVrfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddVrfRequest)
    MergeFrom(*source);
  }
}

void AddVrfRequest::MergeFrom(const AddVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vrf()) {
    _internal_mutable_vrf()->::apipb::Vrf::MergeFrom(from._internal_vrf());
  }
}

void AddVrfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVrfRequest::CopyFrom(const AddVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVrfRequest::IsInitialized() const {
  return true;
}

void AddVrfRequest::InternalSwap(AddVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(vrf_, other->vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddVrfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVrfRequest::InitAsDefaultInstance() {
}
class DeleteVrfRequest::_Internal {
 public:
};

DeleteVrfRequest::DeleteVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeleteVrfRequest)
}
DeleteVrfRequest::DeleteVrfRequest(const DeleteVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DeleteVrfRequest)
}

void DeleteVrfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVrfRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteVrfRequest::~DeleteVrfRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeleteVrfRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteVrfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVrfRequest::ArenaDtor(void* object) {
  DeleteVrfRequest* _this = reinterpret_cast< DeleteVrfRequest* >(object);
  (void)_this;
}
void DeleteVrfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVrfRequest& DeleteVrfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVrfRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeleteVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeleteVrfRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVrfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeleteVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeleteVrfRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeleteVrfRequest)
  return target;
}

size_t DeleteVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeleteVrfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVrfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVrfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVrfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeleteVrfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeleteVrfRequest)
    MergeFrom(*source);
  }
}

void DeleteVrfRequest::MergeFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DeleteVrfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVrfRequest::CopyFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVrfRequest::IsInitialized() const {
  return true;
}

void DeleteVrfRequest::InternalSwap(DeleteVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVrfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVrfRequest::InitAsDefaultInstance() {
}
class ListVrfRequest::_Internal {
 public:
};

ListVrfRequest::ListVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListVrfRequest)
}
ListVrfRequest::ListVrfRequest(const ListVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListVrfRequest)
}

void ListVrfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVrfRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListVrfRequest::~ListVrfRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListVrfRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVrfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVrfRequest::ArenaDtor(void* object) {
  ListVrfRequest* _this = reinterpret_cast< ListVrfRequest* >(object);
  (void)_this;
}
void ListVrfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVrfRequest& ListVrfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVrfRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListVrfRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVrfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListVrfRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListVrfRequest)
  return target;
}

size_t ListVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListVrfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVrfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVrfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVrfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListVrfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListVrfRequest)
    MergeFrom(*source);
  }
}

void ListVrfRequest::MergeFrom(const ListVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ListVrfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVrfRequest::CopyFrom(const ListVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVrfRequest::IsInitialized() const {
  return true;
}

void ListVrfRequest::InternalSwap(ListVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVrfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVrfResponse::InitAsDefaultInstance() {
  ::apipb::_ListVrfResponse_default_instance_._instance.get_mutable()->vrf_ = const_cast< ::apipb::Vrf*>(
      ::apipb::Vrf::internal_default_instance());
}
class ListVrfResponse::_Internal {
 public:
  static const ::apipb::Vrf& vrf(const ListVrfResponse* msg);
};

const ::apipb::Vrf&
ListVrfResponse::_Internal::vrf(const ListVrfResponse* msg) {
  return *msg->vrf_;
}
ListVrfResponse::ListVrfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListVrfResponse)
}
ListVrfResponse::ListVrfResponse(const ListVrfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vrf()) {
    vrf_ = new ::apipb::Vrf(*from.vrf_);
  } else {
    vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListVrfResponse)
}

void ListVrfResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVrfResponse_gobgp_2eproto.base);
  vrf_ = nullptr;
}

ListVrfResponse::~ListVrfResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListVrfResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVrfResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vrf_;
}

void ListVrfResponse::ArenaDtor(void* object) {
  ListVrfResponse* _this = reinterpret_cast< ListVrfResponse* >(object);
  (void)_this;
}
void ListVrfResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVrfResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVrfResponse& ListVrfResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVrfResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListVrfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListVrfResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVrfResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Vrf vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVrfResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListVrfResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Vrf vrf = 1;
  if (this->has_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListVrfResponse)
  return target;
}

size_t ListVrfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListVrfResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Vrf vrf = 1;
  if (this->has_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVrfResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVrfResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVrfResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListVrfResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListVrfResponse)
    MergeFrom(*source);
  }
}

void ListVrfResponse::MergeFrom(const ListVrfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vrf()) {
    _internal_mutable_vrf()->::apipb::Vrf::MergeFrom(from._internal_vrf());
  }
}

void ListVrfResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVrfResponse::CopyFrom(const ListVrfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVrfResponse::IsInitialized() const {
  return true;
}

void ListVrfResponse::InternalSwap(ListVrfResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(vrf_, other->vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVrfResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPolicyRequest::InitAsDefaultInstance() {
  ::apipb::_AddPolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::apipb::Policy*>(
      ::apipb::Policy::internal_default_instance());
}
class AddPolicyRequest::_Internal {
 public:
  static const ::apipb::Policy& policy(const AddPolicyRequest* msg);
};

const ::apipb::Policy&
AddPolicyRequest::_Internal::policy(const AddPolicyRequest* msg) {
  return *msg->policy_;
}
AddPolicyRequest::AddPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPolicyRequest)
}
AddPolicyRequest::AddPolicyRequest(const AddPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::apipb::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  refer_existing_statements_ = from.refer_existing_statements_;
  // @@protoc_insertion_point(copy_constructor:apipb.AddPolicyRequest)
}

void AddPolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPolicyRequest_gobgp_2eproto.base);
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refer_existing_statements_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(refer_existing_statements_));
}

AddPolicyRequest::~AddPolicyRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddPolicyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPolicyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete policy_;
}

void AddPolicyRequest::ArenaDtor(void* object) {
  AddPolicyRequest* _this = reinterpret_cast< AddPolicyRequest* >(object);
  (void)_this;
}
void AddPolicyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPolicyRequest& AddPolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPolicyRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  refer_existing_statements_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool refer_existing_statements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refer_existing_statements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Policy policy = 1;
  if (this->has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy(this), target, stream);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_refer_existing_statements(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPolicyRequest)
  return target;
}

size_t AddPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPolicyRequest)
    MergeFrom(*source);
  }
}

void AddPolicyRequest::MergeFrom(const AddPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    _internal_mutable_policy()->::apipb::Policy::MergeFrom(from._internal_policy());
  }
  if (from.refer_existing_statements() != 0) {
    _internal_set_refer_existing_statements(from._internal_refer_existing_statements());
  }
}

void AddPolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyRequest::CopyFrom(const AddPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyRequest::IsInitialized() const {
  return true;
}

void AddPolicyRequest::InternalSwap(AddPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPolicyRequest, refer_existing_statements_)
      + sizeof(AddPolicyRequest::refer_existing_statements_)
      - PROTOBUF_FIELD_OFFSET(AddPolicyRequest, policy_)>(
          reinterpret_cast<char*>(&policy_),
          reinterpret_cast<char*>(&other->policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePolicyRequest::InitAsDefaultInstance() {
  ::apipb::_DeletePolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::apipb::Policy*>(
      ::apipb::Policy::internal_default_instance());
}
class DeletePolicyRequest::_Internal {
 public:
  static const ::apipb::Policy& policy(const DeletePolicyRequest* msg);
};

const ::apipb::Policy&
DeletePolicyRequest::_Internal::policy(const DeletePolicyRequest* msg) {
  return *msg->policy_;
}
DeletePolicyRequest::DeletePolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeletePolicyRequest)
}
DeletePolicyRequest::DeletePolicyRequest(const DeletePolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::apipb::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  ::memcpy(&preserve_statements_, &from.preserve_statements_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&preserve_statements_)) + sizeof(all_));
  // @@protoc_insertion_point(copy_constructor:apipb.DeletePolicyRequest)
}

void DeletePolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePolicyRequest_gobgp_2eproto.base);
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(all_));
}

DeletePolicyRequest::~DeletePolicyRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeletePolicyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePolicyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete policy_;
}

void DeletePolicyRequest::ArenaDtor(void* object) {
  DeletePolicyRequest* _this = reinterpret_cast< DeletePolicyRequest* >(object);
  (void)_this;
}
void DeletePolicyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePolicyRequest& DeletePolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePolicyRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeletePolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  ::memset(&preserve_statements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&preserve_statements_)) + sizeof(all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool preserve_statements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          preserve_statements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeletePolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Policy policy = 1;
  if (this->has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy(this), target, stream);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_preserve_statements(), target);
  }

  // bool all = 3;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeletePolicyRequest)
  return target;
}

size_t DeletePolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeletePolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    total_size += 1 + 1;
  }

  // bool all = 3;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeletePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeletePolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeletePolicyRequest)
    MergeFrom(*source);
  }
}

void DeletePolicyRequest::MergeFrom(const DeletePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeletePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    _internal_mutable_policy()->::apipb::Policy::MergeFrom(from._internal_policy());
  }
  if (from.preserve_statements() != 0) {
    _internal_set_preserve_statements(from._internal_preserve_statements());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeletePolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeletePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyRequest::CopyFrom(const DeletePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeletePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyRequest::IsInitialized() const {
  return true;
}

void DeletePolicyRequest::InternalSwap(DeletePolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeletePolicyRequest, all_)
      + sizeof(DeletePolicyRequest::all_)
      - PROTOBUF_FIELD_OFFSET(DeletePolicyRequest, policy_)>(
          reinterpret_cast<char*>(&policy_),
          reinterpret_cast<char*>(&other->policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyRequest::InitAsDefaultInstance() {
}
class ListPolicyRequest::_Internal {
 public:
};

ListPolicyRequest::ListPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPolicyRequest)
}
ListPolicyRequest::ListPolicyRequest(const ListPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPolicyRequest)
}

void ListPolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPolicyRequest::~ListPolicyRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListPolicyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPolicyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPolicyRequest::ArenaDtor(void* object) {
  ListPolicyRequest* _this = reinterpret_cast< ListPolicyRequest* >(object);
  (void)_this;
}
void ListPolicyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyRequest& ListPolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListPolicyRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListPolicyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPolicyRequest)
  return target;
}

size_t ListPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPolicyRequest)
    MergeFrom(*source);
  }
}

void ListPolicyRequest::MergeFrom(const ListPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ListPolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyRequest::CopyFrom(const ListPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyRequest::IsInitialized() const {
  return true;
}

void ListPolicyRequest::InternalSwap(ListPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyResponse::InitAsDefaultInstance() {
  ::apipb::_ListPolicyResponse_default_instance_._instance.get_mutable()->policy_ = const_cast< ::apipb::Policy*>(
      ::apipb::Policy::internal_default_instance());
}
class ListPolicyResponse::_Internal {
 public:
  static const ::apipb::Policy& policy(const ListPolicyResponse* msg);
};

const ::apipb::Policy&
ListPolicyResponse::_Internal::policy(const ListPolicyResponse* msg) {
  return *msg->policy_;
}
ListPolicyResponse::ListPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPolicyResponse)
}
ListPolicyResponse::ListPolicyResponse(const ListPolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::apipb::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPolicyResponse)
}

void ListPolicyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyResponse_gobgp_2eproto.base);
  policy_ = nullptr;
}

ListPolicyResponse::~ListPolicyResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListPolicyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPolicyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete policy_;
}

void ListPolicyResponse::ArenaDtor(void* object) {
  ListPolicyResponse* _this = reinterpret_cast< ListPolicyResponse* >(object);
  (void)_this;
}
void ListPolicyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPolicyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyResponse& ListPolicyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPolicyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Policy policy = 1;
  if (this->has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPolicyResponse)
  return target;
}

size_t ListPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPolicyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPolicyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPolicyResponse)
    MergeFrom(*source);
  }
}

void ListPolicyResponse::MergeFrom(const ListPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    _internal_mutable_policy()->::apipb::Policy::MergeFrom(from._internal_policy());
  }
}

void ListPolicyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyResponse::CopyFrom(const ListPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyResponse::IsInitialized() const {
  return true;
}

void ListPolicyResponse::InternalSwap(ListPolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(policy_, other->policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPoliciesRequest::InitAsDefaultInstance() {
}
class SetPoliciesRequest::_Internal {
 public:
};

SetPoliciesRequest::SetPoliciesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  defined_sets_(arena),
  policies_(arena),
  assignments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SetPoliciesRequest)
}
SetPoliciesRequest::SetPoliciesRequest(const SetPoliciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      defined_sets_(from.defined_sets_),
      policies_(from.policies_),
      assignments_(from.assignments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.SetPoliciesRequest)
}

void SetPoliciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPoliciesRequest_gobgp_2eproto.base);
}

SetPoliciesRequest::~SetPoliciesRequest() {
  // @@protoc_insertion_point(destructor:apipb.SetPoliciesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPoliciesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPoliciesRequest::ArenaDtor(void* object) {
  SetPoliciesRequest* _this = reinterpret_cast< SetPoliciesRequest* >(object);
  (void)_this;
}
void SetPoliciesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPoliciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPoliciesRequest& SetPoliciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPoliciesRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void SetPoliciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SetPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defined_sets_.Clear();
  policies_.Clear();
  assignments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPoliciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.DefinedSet defined_sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defined_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Policy policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.PolicyAssignment assignments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPoliciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SetPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.DefinedSet defined_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defined_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_defined_sets(i), target, stream);
  }

  // repeated .apipb.Policy policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_policies(i), target, stream);
  }

  // repeated .apipb.PolicyAssignment assignments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_assignments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SetPoliciesRequest)
  return target;
}

size_t SetPoliciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SetPoliciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.DefinedSet defined_sets = 1;
  total_size += 1UL * this->_internal_defined_sets_size();
  for (const auto& msg : this->defined_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apipb.Policy policies = 2;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apipb.PolicyAssignment assignments = 3;
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto& msg : this->assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPoliciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SetPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPoliciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPoliciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SetPoliciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SetPoliciesRequest)
    MergeFrom(*source);
  }
}

void SetPoliciesRequest::MergeFrom(const SetPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SetPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defined_sets_.MergeFrom(from.defined_sets_);
  policies_.MergeFrom(from.policies_);
  assignments_.MergeFrom(from.assignments_);
}

void SetPoliciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SetPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPoliciesRequest::CopyFrom(const SetPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SetPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPoliciesRequest::IsInitialized() const {
  return true;
}

void SetPoliciesRequest::InternalSwap(SetPoliciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  defined_sets_.InternalSwap(&other->defined_sets_);
  policies_.InternalSwap(&other->policies_);
  assignments_.InternalSwap(&other->assignments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPoliciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDefinedSetRequest::InitAsDefaultInstance() {
  ::apipb::_AddDefinedSetRequest_default_instance_._instance.get_mutable()->defined_set_ = const_cast< ::apipb::DefinedSet*>(
      ::apipb::DefinedSet::internal_default_instance());
}
class AddDefinedSetRequest::_Internal {
 public:
  static const ::apipb::DefinedSet& defined_set(const AddDefinedSetRequest* msg);
};

const ::apipb::DefinedSet&
AddDefinedSetRequest::_Internal::defined_set(const AddDefinedSetRequest* msg) {
  return *msg->defined_set_;
}
AddDefinedSetRequest::AddDefinedSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddDefinedSetRequest)
}
AddDefinedSetRequest::AddDefinedSetRequest(const AddDefinedSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defined_set()) {
    defined_set_ = new ::apipb::DefinedSet(*from.defined_set_);
  } else {
    defined_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddDefinedSetRequest)
}

void AddDefinedSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDefinedSetRequest_gobgp_2eproto.base);
  defined_set_ = nullptr;
}

AddDefinedSetRequest::~AddDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddDefinedSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDefinedSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete defined_set_;
}

void AddDefinedSetRequest::ArenaDtor(void* object) {
  AddDefinedSetRequest* _this = reinterpret_cast< AddDefinedSetRequest* >(object);
  (void)_this;
}
void AddDefinedSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDefinedSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDefinedSetRequest& AddDefinedSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDefinedSetRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDefinedSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DefinedSet defined_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDefinedSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defined_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddDefinedSetRequest)
  return target;
}

size_t AddDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddDefinedSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defined_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDefinedSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDefinedSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDefinedSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddDefinedSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddDefinedSetRequest)
    MergeFrom(*source);
  }
}

void AddDefinedSetRequest::MergeFrom(const AddDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_defined_set()) {
    _internal_mutable_defined_set()->::apipb::DefinedSet::MergeFrom(from._internal_defined_set());
  }
}

void AddDefinedSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDefinedSetRequest::CopyFrom(const AddDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDefinedSetRequest::IsInitialized() const {
  return true;
}

void AddDefinedSetRequest::InternalSwap(AddDefinedSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(defined_set_, other->defined_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDefinedSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDefinedSetRequest::InitAsDefaultInstance() {
  ::apipb::_DeleteDefinedSetRequest_default_instance_._instance.get_mutable()->defined_set_ = const_cast< ::apipb::DefinedSet*>(
      ::apipb::DefinedSet::internal_default_instance());
}
class DeleteDefinedSetRequest::_Internal {
 public:
  static const ::apipb::DefinedSet& defined_set(const DeleteDefinedSetRequest* msg);
};

const ::apipb::DefinedSet&
DeleteDefinedSetRequest::_Internal::defined_set(const DeleteDefinedSetRequest* msg) {
  return *msg->defined_set_;
}
DeleteDefinedSetRequest::DeleteDefinedSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeleteDefinedSetRequest)
}
DeleteDefinedSetRequest::DeleteDefinedSetRequest(const DeleteDefinedSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defined_set()) {
    defined_set_ = new ::apipb::DefinedSet(*from.defined_set_);
  } else {
    defined_set_ = nullptr;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:apipb.DeleteDefinedSetRequest)
}

void DeleteDefinedSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDefinedSetRequest_gobgp_2eproto.base);
  ::memset(&defined_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&defined_set_)) + sizeof(all_));
}

DeleteDefinedSetRequest::~DeleteDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeleteDefinedSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDefinedSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete defined_set_;
}

void DeleteDefinedSetRequest::ArenaDtor(void* object) {
  DeleteDefinedSetRequest* _this = reinterpret_cast< DeleteDefinedSetRequest* >(object);
  (void)_this;
}
void DeleteDefinedSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDefinedSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDefinedSetRequest& DeleteDefinedSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDefinedSetRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeleteDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
  all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDefinedSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DefinedSet defined_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDefinedSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeleteDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defined_set(this), target, stream);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeleteDefinedSetRequest)
  return target;
}

size_t DeleteDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeleteDefinedSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defined_set_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDefinedSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeleteDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDefinedSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDefinedSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeleteDefinedSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeleteDefinedSetRequest)
    MergeFrom(*source);
  }
}

void DeleteDefinedSetRequest::MergeFrom(const DeleteDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeleteDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_defined_set()) {
    _internal_mutable_defined_set()->::apipb::DefinedSet::MergeFrom(from._internal_defined_set());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeleteDefinedSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeleteDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDefinedSetRequest::CopyFrom(const DeleteDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeleteDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDefinedSetRequest::IsInitialized() const {
  return true;
}

void DeleteDefinedSetRequest::InternalSwap(DeleteDefinedSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteDefinedSetRequest, all_)
      + sizeof(DeleteDefinedSetRequest::all_)
      - PROTOBUF_FIELD_OFFSET(DeleteDefinedSetRequest, defined_set_)>(
          reinterpret_cast<char*>(&defined_set_),
          reinterpret_cast<char*>(&other->defined_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDefinedSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDefinedSetRequest::InitAsDefaultInstance() {
}
class ListDefinedSetRequest::_Internal {
 public:
};

ListDefinedSetRequest::ListDefinedSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListDefinedSetRequest)
}
ListDefinedSetRequest::ListDefinedSetRequest(const ListDefinedSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  defined_type_ = from.defined_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.ListDefinedSetRequest)
}

void ListDefinedSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDefinedSetRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_type_ = 0;
}

ListDefinedSetRequest::~ListDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListDefinedSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDefinedSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListDefinedSetRequest::ArenaDtor(void* object) {
  ListDefinedSetRequest* _this = reinterpret_cast< ListDefinedSetRequest* >(object);
  (void)_this;
}
void ListDefinedSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDefinedSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDefinedSetRequest& ListDefinedSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDefinedSetRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defined_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDefinedSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DefinedType defined_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_defined_type(static_cast<::apipb::DefinedType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListDefinedSetRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDefinedSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_defined_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListDefinedSetRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListDefinedSetRequest)
  return target;
}

size_t ListDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListDefinedSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_defined_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDefinedSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDefinedSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDefinedSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListDefinedSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListDefinedSetRequest)
    MergeFrom(*source);
  }
}

void ListDefinedSetRequest::MergeFrom(const ListDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.defined_type() != 0) {
    _internal_set_defined_type(from._internal_defined_type());
  }
}

void ListDefinedSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDefinedSetRequest::CopyFrom(const ListDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDefinedSetRequest::IsInitialized() const {
  return true;
}

void ListDefinedSetRequest::InternalSwap(ListDefinedSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(defined_type_, other->defined_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDefinedSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDefinedSetResponse::InitAsDefaultInstance() {
  ::apipb::_ListDefinedSetResponse_default_instance_._instance.get_mutable()->defined_set_ = const_cast< ::apipb::DefinedSet*>(
      ::apipb::DefinedSet::internal_default_instance());
}
class ListDefinedSetResponse::_Internal {
 public:
  static const ::apipb::DefinedSet& defined_set(const ListDefinedSetResponse* msg);
};

const ::apipb::DefinedSet&
ListDefinedSetResponse::_Internal::defined_set(const ListDefinedSetResponse* msg) {
  return *msg->defined_set_;
}
ListDefinedSetResponse::ListDefinedSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListDefinedSetResponse)
}
ListDefinedSetResponse::ListDefinedSetResponse(const ListDefinedSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defined_set()) {
    defined_set_ = new ::apipb::DefinedSet(*from.defined_set_);
  } else {
    defined_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListDefinedSetResponse)
}

void ListDefinedSetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDefinedSetResponse_gobgp_2eproto.base);
  defined_set_ = nullptr;
}

ListDefinedSetResponse::~ListDefinedSetResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListDefinedSetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDefinedSetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete defined_set_;
}

void ListDefinedSetResponse::ArenaDtor(void* object) {
  ListDefinedSetResponse* _this = reinterpret_cast< ListDefinedSetResponse* >(object);
  (void)_this;
}
void ListDefinedSetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDefinedSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDefinedSetResponse& ListDefinedSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDefinedSetResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListDefinedSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListDefinedSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDefinedSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DefinedSet defined_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDefinedSetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListDefinedSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defined_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListDefinedSetResponse)
  return target;
}

size_t ListDefinedSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListDefinedSetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defined_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDefinedSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDefinedSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDefinedSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListDefinedSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListDefinedSetResponse)
    MergeFrom(*source);
  }
}

void ListDefinedSetResponse::MergeFrom(const ListDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_defined_set()) {
    _internal_mutable_defined_set()->::apipb::DefinedSet::MergeFrom(from._internal_defined_set());
  }
}

void ListDefinedSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDefinedSetResponse::CopyFrom(const ListDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDefinedSetResponse::IsInitialized() const {
  return true;
}

void ListDefinedSetResponse::InternalSwap(ListDefinedSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(defined_set_, other->defined_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDefinedSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddStatementRequest::InitAsDefaultInstance() {
  ::apipb::_AddStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::apipb::Statement*>(
      ::apipb::Statement::internal_default_instance());
}
class AddStatementRequest::_Internal {
 public:
  static const ::apipb::Statement& statement(const AddStatementRequest* msg);
};

const ::apipb::Statement&
AddStatementRequest::_Internal::statement(const AddStatementRequest* msg) {
  return *msg->statement_;
}
AddStatementRequest::AddStatementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddStatementRequest)
}
AddStatementRequest::AddStatementRequest(const AddStatementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statement()) {
    statement_ = new ::apipb::Statement(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddStatementRequest)
}

void AddStatementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddStatementRequest_gobgp_2eproto.base);
  statement_ = nullptr;
}

AddStatementRequest::~AddStatementRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddStatementRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddStatementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statement_;
}

void AddStatementRequest::ArenaDtor(void* object) {
  AddStatementRequest* _this = reinterpret_cast< AddStatementRequest* >(object);
  (void)_this;
}
void AddStatementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddStatementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddStatementRequest& AddStatementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddStatementRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddStatementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Statement statement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddStatementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Statement statement = 1;
  if (this->has_statement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddStatementRequest)
  return target;
}

size_t AddStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddStatementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddStatementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddStatementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddStatementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddStatementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddStatementRequest)
    MergeFrom(*source);
  }
}

void AddStatementRequest::MergeFrom(const AddStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    _internal_mutable_statement()->::apipb::Statement::MergeFrom(from._internal_statement());
  }
}

void AddStatementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStatementRequest::CopyFrom(const AddStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStatementRequest::IsInitialized() const {
  return true;
}

void AddStatementRequest::InternalSwap(AddStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(statement_, other->statement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddStatementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStatementRequest::InitAsDefaultInstance() {
  ::apipb::_DeleteStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::apipb::Statement*>(
      ::apipb::Statement::internal_default_instance());
}
class DeleteStatementRequest::_Internal {
 public:
  static const ::apipb::Statement& statement(const DeleteStatementRequest* msg);
};

const ::apipb::Statement&
DeleteStatementRequest::_Internal::statement(const DeleteStatementRequest* msg) {
  return *msg->statement_;
}
DeleteStatementRequest::DeleteStatementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeleteStatementRequest)
}
DeleteStatementRequest::DeleteStatementRequest(const DeleteStatementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statement()) {
    statement_ = new ::apipb::Statement(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:apipb.DeleteStatementRequest)
}

void DeleteStatementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStatementRequest_gobgp_2eproto.base);
  ::memset(&statement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&statement_)) + sizeof(all_));
}

DeleteStatementRequest::~DeleteStatementRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeleteStatementRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteStatementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statement_;
}

void DeleteStatementRequest::ArenaDtor(void* object) {
  DeleteStatementRequest* _this = reinterpret_cast< DeleteStatementRequest* >(object);
  (void)_this;
}
void DeleteStatementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteStatementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStatementRequest& DeleteStatementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStatementRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeleteStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
  all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteStatementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Statement statement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStatementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeleteStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Statement statement = 1;
  if (this->has_statement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statement(this), target, stream);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeleteStatementRequest)
  return target;
}

size_t DeleteStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeleteStatementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statement_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStatementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeleteStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStatementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStatementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeleteStatementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeleteStatementRequest)
    MergeFrom(*source);
  }
}

void DeleteStatementRequest::MergeFrom(const DeleteStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeleteStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    _internal_mutable_statement()->::apipb::Statement::MergeFrom(from._internal_statement());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeleteStatementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeleteStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStatementRequest::CopyFrom(const DeleteStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeleteStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStatementRequest::IsInitialized() const {
  return true;
}

void DeleteStatementRequest::InternalSwap(DeleteStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteStatementRequest, all_)
      + sizeof(DeleteStatementRequest::all_)
      - PROTOBUF_FIELD_OFFSET(DeleteStatementRequest, statement_)>(
          reinterpret_cast<char*>(&statement_),
          reinterpret_cast<char*>(&other->statement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStatementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListStatementRequest::InitAsDefaultInstance() {
}
class ListStatementRequest::_Internal {
 public:
};

ListStatementRequest::ListStatementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListStatementRequest)
}
ListStatementRequest::ListStatementRequest(const ListStatementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListStatementRequest)
}

void ListStatementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListStatementRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListStatementRequest::~ListStatementRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListStatementRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListStatementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListStatementRequest::ArenaDtor(void* object) {
  ListStatementRequest* _this = reinterpret_cast< ListStatementRequest* >(object);
  (void)_this;
}
void ListStatementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListStatementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStatementRequest& ListStatementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStatementRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStatementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListStatementRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStatementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListStatementRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListStatementRequest)
  return target;
}

size_t ListStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListStatementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStatementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStatementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStatementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListStatementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListStatementRequest)
    MergeFrom(*source);
  }
}

void ListStatementRequest::MergeFrom(const ListStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ListStatementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStatementRequest::CopyFrom(const ListStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStatementRequest::IsInitialized() const {
  return true;
}

void ListStatementRequest::InternalSwap(ListStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStatementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListStatementResponse::InitAsDefaultInstance() {
  ::apipb::_ListStatementResponse_default_instance_._instance.get_mutable()->statement_ = const_cast< ::apipb::Statement*>(
      ::apipb::Statement::internal_default_instance());
}
class ListStatementResponse::_Internal {
 public:
  static const ::apipb::Statement& statement(const ListStatementResponse* msg);
};

const ::apipb::Statement&
ListStatementResponse::_Internal::statement(const ListStatementResponse* msg) {
  return *msg->statement_;
}
ListStatementResponse::ListStatementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListStatementResponse)
}
ListStatementResponse::ListStatementResponse(const ListStatementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statement()) {
    statement_ = new ::apipb::Statement(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListStatementResponse)
}

void ListStatementResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListStatementResponse_gobgp_2eproto.base);
  statement_ = nullptr;
}

ListStatementResponse::~ListStatementResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListStatementResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListStatementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statement_;
}

void ListStatementResponse::ArenaDtor(void* object) {
  ListStatementResponse* _this = reinterpret_cast< ListStatementResponse* >(object);
  (void)_this;
}
void ListStatementResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListStatementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStatementResponse& ListStatementResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStatementResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListStatementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListStatementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStatementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Statement statement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStatementResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListStatementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Statement statement = 1;
  if (this->has_statement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListStatementResponse)
  return target;
}

size_t ListStatementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListStatementResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStatementResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStatementResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStatementResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListStatementResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListStatementResponse)
    MergeFrom(*source);
  }
}

void ListStatementResponse::MergeFrom(const ListStatementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    _internal_mutable_statement()->::apipb::Statement::MergeFrom(from._internal_statement());
  }
}

void ListStatementResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStatementResponse::CopyFrom(const ListStatementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStatementResponse::IsInitialized() const {
  return true;
}

void ListStatementResponse::InternalSwap(ListStatementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(statement_, other->statement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStatementResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPolicyAssignmentRequest::InitAsDefaultInstance() {
  ::apipb::_AddPolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
}
class AddPolicyAssignmentRequest::_Internal {
 public:
  static const ::apipb::PolicyAssignment& assignment(const AddPolicyAssignmentRequest* msg);
};

const ::apipb::PolicyAssignment&
AddPolicyAssignmentRequest::_Internal::assignment(const AddPolicyAssignmentRequest* msg) {
  return *msg->assignment_;
}
AddPolicyAssignmentRequest::AddPolicyAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPolicyAssignmentRequest)
}
AddPolicyAssignmentRequest::AddPolicyAssignmentRequest(const AddPolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::apipb::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddPolicyAssignmentRequest)
}

void AddPolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPolicyAssignmentRequest_gobgp_2eproto.base);
  assignment_ = nullptr;
}

AddPolicyAssignmentRequest::~AddPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddPolicyAssignmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPolicyAssignmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete assignment_;
}

void AddPolicyAssignmentRequest::ArenaDtor(void* object) {
  AddPolicyAssignmentRequest* _this = reinterpret_cast< AddPolicyAssignmentRequest* >(object);
  (void)_this;
}
void AddPolicyAssignmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPolicyAssignmentRequest& AddPolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPolicyAssignmentRequest)
  return target;
}

size_t AddPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void AddPolicyAssignmentRequest::MergeFrom(const AddPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::apipb::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
}

void AddPolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyAssignmentRequest::CopyFrom(const AddPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void AddPolicyAssignmentRequest::InternalSwap(AddPolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePolicyAssignmentRequest::InitAsDefaultInstance() {
  ::apipb::_DeletePolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
}
class DeletePolicyAssignmentRequest::_Internal {
 public:
  static const ::apipb::PolicyAssignment& assignment(const DeletePolicyAssignmentRequest* msg);
};

const ::apipb::PolicyAssignment&
DeletePolicyAssignmentRequest::_Internal::assignment(const DeletePolicyAssignmentRequest* msg) {
  return *msg->assignment_;
}
DeletePolicyAssignmentRequest::DeletePolicyAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeletePolicyAssignmentRequest)
}
DeletePolicyAssignmentRequest::DeletePolicyAssignmentRequest(const DeletePolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::apipb::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:apipb.DeletePolicyAssignmentRequest)
}

void DeletePolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto.base);
  ::memset(&assignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&assignment_)) + sizeof(all_));
}

DeletePolicyAssignmentRequest::~DeletePolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeletePolicyAssignmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePolicyAssignmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete assignment_;
}

void DeletePolicyAssignmentRequest::ArenaDtor(void* object) {
  DeletePolicyAssignmentRequest* _this = reinterpret_cast< DeletePolicyAssignmentRequest* >(object);
  (void)_this;
}
void DeletePolicyAssignmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePolicyAssignmentRequest& DeletePolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeletePolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeletePolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeletePolicyAssignmentRequest)
  return target;
}

size_t DeletePolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeletePolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeletePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeletePolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeletePolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void DeletePolicyAssignmentRequest::MergeFrom(const DeletePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeletePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::apipb::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeletePolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeletePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyAssignmentRequest::CopyFrom(const DeletePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeletePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void DeletePolicyAssignmentRequest::InternalSwap(DeletePolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeletePolicyAssignmentRequest, all_)
      + sizeof(DeletePolicyAssignmentRequest::all_)
      - PROTOBUF_FIELD_OFFSET(DeletePolicyAssignmentRequest, assignment_)>(
          reinterpret_cast<char*>(&assignment_),
          reinterpret_cast<char*>(&other->assignment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyAssignmentRequest::InitAsDefaultInstance() {
}
class ListPolicyAssignmentRequest::_Internal {
 public:
};

ListPolicyAssignmentRequest::ListPolicyAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPolicyAssignmentRequest)
}
ListPolicyAssignmentRequest::ListPolicyAssignmentRequest(const ListPolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:apipb.ListPolicyAssignmentRequest)
}

void ListPolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyAssignmentRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
}

ListPolicyAssignmentRequest::~ListPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListPolicyAssignmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPolicyAssignmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPolicyAssignmentRequest::ArenaDtor(void* object) {
  ListPolicyAssignmentRequest* _this = reinterpret_cast< ListPolicyAssignmentRequest* >(object);
  (void)_this;
}
void ListPolicyAssignmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyAssignmentRequest& ListPolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListPolicyAssignmentRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PolicyDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::apipb::PolicyDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListPolicyAssignmentRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .apipb.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPolicyAssignmentRequest)
  return target;
}

size_t ListPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void ListPolicyAssignmentRequest::MergeFrom(const ListPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void ListPolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyAssignmentRequest::CopyFrom(const ListPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void ListPolicyAssignmentRequest::InternalSwap(ListPolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyAssignmentResponse::InitAsDefaultInstance() {
  ::apipb::_ListPolicyAssignmentResponse_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
}
class ListPolicyAssignmentResponse::_Internal {
 public:
  static const ::apipb::PolicyAssignment& assignment(const ListPolicyAssignmentResponse* msg);
};

const ::apipb::PolicyAssignment&
ListPolicyAssignmentResponse::_Internal::assignment(const ListPolicyAssignmentResponse* msg) {
  return *msg->assignment_;
}
ListPolicyAssignmentResponse::ListPolicyAssignmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListPolicyAssignmentResponse)
}
ListPolicyAssignmentResponse::ListPolicyAssignmentResponse(const ListPolicyAssignmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::apipb::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListPolicyAssignmentResponse)
}

void ListPolicyAssignmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyAssignmentResponse_gobgp_2eproto.base);
  assignment_ = nullptr;
}

ListPolicyAssignmentResponse::~ListPolicyAssignmentResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListPolicyAssignmentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPolicyAssignmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete assignment_;
}

void ListPolicyAssignmentResponse::ArenaDtor(void* object) {
  ListPolicyAssignmentResponse* _this = reinterpret_cast< ListPolicyAssignmentResponse* >(object);
  (void)_this;
}
void ListPolicyAssignmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPolicyAssignmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyAssignmentResponse& ListPolicyAssignmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyAssignmentResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListPolicyAssignmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPolicyAssignmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyAssignmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListPolicyAssignmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListPolicyAssignmentResponse)
  return target;
}

size_t ListPolicyAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListPolicyAssignmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyAssignmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyAssignmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyAssignmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListPolicyAssignmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListPolicyAssignmentResponse)
    MergeFrom(*source);
  }
}

void ListPolicyAssignmentResponse::MergeFrom(const ListPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::apipb::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
}

void ListPolicyAssignmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyAssignmentResponse::CopyFrom(const ListPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyAssignmentResponse::IsInitialized() const {
  return true;
}

void ListPolicyAssignmentResponse::InternalSwap(ListPolicyAssignmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyAssignmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPolicyAssignmentRequest::InitAsDefaultInstance() {
  ::apipb::_SetPolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
}
class SetPolicyAssignmentRequest::_Internal {
 public:
  static const ::apipb::PolicyAssignment& assignment(const SetPolicyAssignmentRequest* msg);
};

const ::apipb::PolicyAssignment&
SetPolicyAssignmentRequest::_Internal::assignment(const SetPolicyAssignmentRequest* msg) {
  return *msg->assignment_;
}
SetPolicyAssignmentRequest::SetPolicyAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SetPolicyAssignmentRequest)
}
SetPolicyAssignmentRequest::SetPolicyAssignmentRequest(const SetPolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::apipb::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.SetPolicyAssignmentRequest)
}

void SetPolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPolicyAssignmentRequest_gobgp_2eproto.base);
  assignment_ = nullptr;
}

SetPolicyAssignmentRequest::~SetPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:apipb.SetPolicyAssignmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPolicyAssignmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete assignment_;
}

void SetPolicyAssignmentRequest::ArenaDtor(void* object) {
  SetPolicyAssignmentRequest* _this = reinterpret_cast< SetPolicyAssignmentRequest* >(object);
  (void)_this;
}
void SetPolicyAssignmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPolicyAssignmentRequest& SetPolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void SetPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SetPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SetPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SetPolicyAssignmentRequest)
  return target;
}

size_t SetPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SetPolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SetPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SetPolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SetPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void SetPolicyAssignmentRequest::MergeFrom(const SetPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SetPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::apipb::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
}

void SetPolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SetPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPolicyAssignmentRequest::CopyFrom(const SetPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SetPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void SetPolicyAssignmentRequest::InternalSwap(SetPolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRpkiRequest::InitAsDefaultInstance() {
}
class AddRpkiRequest::_Internal {
 public:
};

AddRpkiRequest::AddRpkiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddRpkiRequest)
}
AddRpkiRequest::AddRpkiRequest(const AddRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&lifetime_, &from.lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:apipb.AddRpkiRequest)
}

void AddRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
}

AddRpkiRequest::~AddRpkiRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddRpkiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRpkiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddRpkiRequest::ArenaDtor(void* object) {
  AddRpkiRequest* _this = reinterpret_cast< AddRpkiRequest* >(object);
  (void)_this;
}
void AddRpkiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRpkiRequest& AddRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AddRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AddRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddRpkiRequest)
  return target;
}

size_t AddRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetime());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddRpkiRequest)
    MergeFrom(*source);
  }
}

void AddRpkiRequest::MergeFrom(const AddRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.lifetime() != 0) {
    _internal_set_lifetime(from._internal_lifetime());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void AddRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRpkiRequest::CopyFrom(const AddRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRpkiRequest::IsInitialized() const {
  return true;
}

void AddRpkiRequest::InternalSwap(AddRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRpkiRequest, port_)
      + sizeof(AddRpkiRequest::port_)
      - PROTOBUF_FIELD_OFFSET(AddRpkiRequest, lifetime_)>(
          reinterpret_cast<char*>(&lifetime_),
          reinterpret_cast<char*>(&other->lifetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRpkiRequest::InitAsDefaultInstance() {
}
class DeleteRpkiRequest::_Internal {
 public:
};

DeleteRpkiRequest::DeleteRpkiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeleteRpkiRequest)
}
DeleteRpkiRequest::DeleteRpkiRequest(const DeleteRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apipb.DeleteRpkiRequest)
}

void DeleteRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

DeleteRpkiRequest::~DeleteRpkiRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeleteRpkiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteRpkiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRpkiRequest::ArenaDtor(void* object) {
  DeleteRpkiRequest* _this = reinterpret_cast< DeleteRpkiRequest* >(object);
  (void)_this;
}
void DeleteRpkiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRpkiRequest& DeleteRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeleteRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeleteRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeleteRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeleteRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeleteRpkiRequest)
  return target;
}

size_t DeleteRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeleteRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeleteRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeleteRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeleteRpkiRequest)
    MergeFrom(*source);
  }
}

void DeleteRpkiRequest::MergeFrom(const DeleteRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeleteRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DeleteRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeleteRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRpkiRequest::CopyFrom(const DeleteRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeleteRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRpkiRequest::IsInitialized() const {
  return true;
}

void DeleteRpkiRequest::InternalSwap(DeleteRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiRequest::InitAsDefaultInstance() {
  ::apipb::_ListRpkiRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class ListRpkiRequest::_Internal {
 public:
  static const ::apipb::Family& family(const ListRpkiRequest* msg);
};

const ::apipb::Family&
ListRpkiRequest::_Internal::family(const ListRpkiRequest* msg) {
  return *msg->family_;
}
ListRpkiRequest::ListRpkiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListRpkiRequest)
}
ListRpkiRequest::ListRpkiRequest(const ListRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListRpkiRequest)
}

void ListRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiRequest_gobgp_2eproto.base);
  family_ = nullptr;
}

ListRpkiRequest::~ListRpkiRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListRpkiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRpkiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void ListRpkiRequest::ArenaDtor(void* object) {
  ListRpkiRequest* _this = reinterpret_cast< ListRpkiRequest* >(object);
  (void)_this;
}
void ListRpkiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiRequest& ListRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListRpkiRequest)
  return target;
}

size_t ListRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListRpkiRequest)
    MergeFrom(*source);
  }
}

void ListRpkiRequest::MergeFrom(const ListRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
}

void ListRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiRequest::CopyFrom(const ListRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiRequest::IsInitialized() const {
  return true;
}

void ListRpkiRequest::InternalSwap(ListRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiResponse::InitAsDefaultInstance() {
  ::apipb::_ListRpkiResponse_default_instance_._instance.get_mutable()->server_ = const_cast< ::apipb::Rpki*>(
      ::apipb::Rpki::internal_default_instance());
}
class ListRpkiResponse::_Internal {
 public:
  static const ::apipb::Rpki& server(const ListRpkiResponse* msg);
};

const ::apipb::Rpki&
ListRpkiResponse::_Internal::server(const ListRpkiResponse* msg) {
  return *msg->server_;
}
ListRpkiResponse::ListRpkiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListRpkiResponse)
}
ListRpkiResponse::ListRpkiResponse(const ListRpkiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server()) {
    server_ = new ::apipb::Rpki(*from.server_);
  } else {
    server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListRpkiResponse)
}

void ListRpkiResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiResponse_gobgp_2eproto.base);
  server_ = nullptr;
}

ListRpkiResponse::~ListRpkiResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListRpkiResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRpkiResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_;
}

void ListRpkiResponse::ArenaDtor(void* object) {
  ListRpkiResponse* _this = reinterpret_cast< ListRpkiResponse* >(object);
  (void)_this;
}
void ListRpkiResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRpkiResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiResponse& ListRpkiResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListRpkiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpkiResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Rpki server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListRpkiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Rpki server = 1;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListRpkiResponse)
  return target;
}

size_t ListRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListRpkiResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Rpki server = 1;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListRpkiResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListRpkiResponse)
    MergeFrom(*source);
  }
}

void ListRpkiResponse::MergeFrom(const ListRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    _internal_mutable_server()->::apipb::Rpki::MergeFrom(from._internal_server());
  }
}

void ListRpkiResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiResponse::CopyFrom(const ListRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiResponse::IsInitialized() const {
  return true;
}

void ListRpkiResponse::InternalSwap(ListRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(server_, other->server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableRpkiRequest::InitAsDefaultInstance() {
}
class EnableRpkiRequest::_Internal {
 public:
};

EnableRpkiRequest::EnableRpkiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EnableRpkiRequest)
}
EnableRpkiRequest::EnableRpkiRequest(const EnableRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apipb.EnableRpkiRequest)
}

void EnableRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

EnableRpkiRequest::~EnableRpkiRequest() {
  // @@protoc_insertion_point(destructor:apipb.EnableRpkiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnableRpkiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableRpkiRequest::ArenaDtor(void* object) {
  EnableRpkiRequest* _this = reinterpret_cast< EnableRpkiRequest* >(object);
  (void)_this;
}
void EnableRpkiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableRpkiRequest& EnableRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnableRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EnableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EnableRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EnableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EnableRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EnableRpkiRequest)
  return target;
}

size_t EnableRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EnableRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EnableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EnableRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EnableRpkiRequest)
    MergeFrom(*source);
  }
}

void EnableRpkiRequest::MergeFrom(const EnableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EnableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void EnableRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EnableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableRpkiRequest::CopyFrom(const EnableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EnableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRpkiRequest::IsInitialized() const {
  return true;
}

void EnableRpkiRequest::InternalSwap(EnableRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisableRpkiRequest::InitAsDefaultInstance() {
}
class DisableRpkiRequest::_Internal {
 public:
};

DisableRpkiRequest::DisableRpkiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DisableRpkiRequest)
}
DisableRpkiRequest::DisableRpkiRequest(const DisableRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apipb.DisableRpkiRequest)
}

void DisableRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisableRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

DisableRpkiRequest::~DisableRpkiRequest() {
  // @@protoc_insertion_point(destructor:apipb.DisableRpkiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisableRpkiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisableRpkiRequest::ArenaDtor(void* object) {
  DisableRpkiRequest* _this = reinterpret_cast< DisableRpkiRequest* >(object);
  (void)_this;
}
void DisableRpkiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableRpkiRequest& DisableRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DisableRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DisableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisableRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DisableRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DisableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DisableRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DisableRpkiRequest)
  return target;
}

size_t DisableRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DisableRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DisableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisableRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DisableRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DisableRpkiRequest)
    MergeFrom(*source);
  }
}

void DisableRpkiRequest::MergeFrom(const DisableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DisableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DisableRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DisableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableRpkiRequest::CopyFrom(const DisableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DisableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableRpkiRequest::IsInitialized() const {
  return true;
}

void DisableRpkiRequest::InternalSwap(DisableRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetRpkiRequest::InitAsDefaultInstance() {
}
class ResetRpkiRequest::_Internal {
 public:
};

ResetRpkiRequest::ResetRpkiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ResetRpkiRequest)
}
ResetRpkiRequest::ResetRpkiRequest(const ResetRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&soft_) -
    reinterpret_cast<char*>(&port_)) + sizeof(soft_));
  // @@protoc_insertion_point(copy_constructor:apipb.ResetRpkiRequest)
}

void ResetRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_) -
      reinterpret_cast<char*>(&port_)) + sizeof(soft_));
}

ResetRpkiRequest::~ResetRpkiRequest() {
  // @@protoc_insertion_point(destructor:apipb.ResetRpkiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetRpkiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetRpkiRequest::ArenaDtor(void* object) {
  ResetRpkiRequest* _this = reinterpret_cast< ResetRpkiRequest* >(object);
  (void)_this;
}
void ResetRpkiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetRpkiRequest& ResetRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ResetRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ResetRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_) -
      reinterpret_cast<char*>(&port_)) + sizeof(soft_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ResetRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ResetRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ResetRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_soft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ResetRpkiRequest)
  return target;
}

size_t ResetRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ResetRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ResetRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ResetRpkiRequest)
    MergeFrom(*source);
  }
}

void ResetRpkiRequest::MergeFrom(const ResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.soft() != 0) {
    _internal_set_soft(from._internal_soft());
  }
}

void ResetRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRpkiRequest::CopyFrom(const ResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRpkiRequest::IsInitialized() const {
  return true;
}

void ResetRpkiRequest::InternalSwap(ResetRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResetRpkiRequest, soft_)
      + sizeof(ResetRpkiRequest::soft_)
      - PROTOBUF_FIELD_OFFSET(ResetRpkiRequest, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiTableRequest::InitAsDefaultInstance() {
  ::apipb::_ListRpkiTableRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class ListRpkiTableRequest::_Internal {
 public:
  static const ::apipb::Family& family(const ListRpkiTableRequest* msg);
};

const ::apipb::Family&
ListRpkiTableRequest::_Internal::family(const ListRpkiTableRequest* msg) {
  return *msg->family_;
}
ListRpkiTableRequest::ListRpkiTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListRpkiTableRequest)
}
ListRpkiTableRequest::ListRpkiTableRequest(const ListRpkiTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListRpkiTableRequest)
}

void ListRpkiTableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiTableRequest_gobgp_2eproto.base);
  family_ = nullptr;
}

ListRpkiTableRequest::~ListRpkiTableRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListRpkiTableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRpkiTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void ListRpkiTableRequest::ArenaDtor(void* object) {
  ListRpkiTableRequest* _this = reinterpret_cast< ListRpkiTableRequest* >(object);
  (void)_this;
}
void ListRpkiTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRpkiTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiTableRequest& ListRpkiTableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiTableRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListRpkiTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpkiTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListRpkiTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListRpkiTableRequest)
  return target;
}

size_t ListRpkiTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListRpkiTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListRpkiTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListRpkiTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListRpkiTableRequest)
    MergeFrom(*source);
  }
}

void ListRpkiTableRequest::MergeFrom(const ListRpkiTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListRpkiTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
}

void ListRpkiTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListRpkiTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiTableRequest::CopyFrom(const ListRpkiTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListRpkiTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiTableRequest::IsInitialized() const {
  return true;
}

void ListRpkiTableRequest::InternalSwap(ListRpkiTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiTableResponse::InitAsDefaultInstance() {
  ::apipb::_ListRpkiTableResponse_default_instance_._instance.get_mutable()->roa_ = const_cast< ::apipb::Roa*>(
      ::apipb::Roa::internal_default_instance());
}
class ListRpkiTableResponse::_Internal {
 public:
  static const ::apipb::Roa& roa(const ListRpkiTableResponse* msg);
};

const ::apipb::Roa&
ListRpkiTableResponse::_Internal::roa(const ListRpkiTableResponse* msg) {
  return *msg->roa_;
}
ListRpkiTableResponse::ListRpkiTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListRpkiTableResponse)
}
ListRpkiTableResponse::ListRpkiTableResponse(const ListRpkiTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roa()) {
    roa_ = new ::apipb::Roa(*from.roa_);
  } else {
    roa_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListRpkiTableResponse)
}

void ListRpkiTableResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiTableResponse_gobgp_2eproto.base);
  roa_ = nullptr;
}

ListRpkiTableResponse::~ListRpkiTableResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListRpkiTableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRpkiTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roa_;
}

void ListRpkiTableResponse::ArenaDtor(void* object) {
  ListRpkiTableResponse* _this = reinterpret_cast< ListRpkiTableResponse* >(object);
  (void)_this;
}
void ListRpkiTableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRpkiTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiTableResponse& ListRpkiTableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiTableResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListRpkiTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && roa_ != nullptr) {
    delete roa_;
  }
  roa_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpkiTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Roa roa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListRpkiTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Roa roa = 1;
  if (this->has_roa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roa(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListRpkiTableResponse)
  return target;
}

size_t ListRpkiTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListRpkiTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Roa roa = 1;
  if (this->has_roa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roa_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListRpkiTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListRpkiTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListRpkiTableResponse)
    MergeFrom(*source);
  }
}

void ListRpkiTableResponse::MergeFrom(const ListRpkiTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListRpkiTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roa()) {
    _internal_mutable_roa()->::apipb::Roa::MergeFrom(from._internal_roa());
  }
}

void ListRpkiTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListRpkiTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiTableResponse::CopyFrom(const ListRpkiTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListRpkiTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiTableResponse::IsInitialized() const {
  return true;
}

void ListRpkiTableResponse::InternalSwap(ListRpkiTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roa_, other->roa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableZebraRequest::InitAsDefaultInstance() {
}
class EnableZebraRequest::_Internal {
 public:
};

EnableZebraRequest::EnableZebraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  route_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EnableZebraRequest)
}
EnableZebraRequest::EnableZebraRequest(const EnableZebraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_types_(from.route_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  software_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_software_name().empty()) {
    software_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_software_name(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&mpls_label_range_size_) -
    reinterpret_cast<char*>(&version_)) + sizeof(mpls_label_range_size_));
  // @@protoc_insertion_point(copy_constructor:apipb.EnableZebraRequest)
}

void EnableZebraRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableZebraRequest_gobgp_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mpls_label_range_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(mpls_label_range_size_));
}

EnableZebraRequest::~EnableZebraRequest() {
  // @@protoc_insertion_point(destructor:apipb.EnableZebraRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnableZebraRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableZebraRequest::ArenaDtor(void* object) {
  EnableZebraRequest* _this = reinterpret_cast< EnableZebraRequest* >(object);
  (void)_this;
}
void EnableZebraRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableZebraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableZebraRequest& EnableZebraRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableZebraRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnableZebraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EnableZebraRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_types_.Clear();
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  software_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mpls_label_range_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(mpls_label_range_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableZebraRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EnableZebraRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string route_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_route_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EnableZebraRequest.route_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nexthop_trigger_enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nexthop_trigger_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nexthop_trigger_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nexthop_trigger_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mpls_label_range_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mpls_label_range_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string software_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_software_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EnableZebraRequest.software_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableZebraRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EnableZebraRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EnableZebraRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // repeated string route_types = 2;
  for (int i = 0, n = this->_internal_route_types_size(); i < n; i++) {
    const auto& s = this->_internal_route_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EnableZebraRequest.route_types");
    target = stream->WriteString(2, s, target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_nexthop_trigger_enable(), target);
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nexthop_trigger_delay(), target);
  }

  // uint32 mpls_label_range_size = 6;
  if (this->mpls_label_range_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mpls_label_range_size(), target);
  }

  // string software_name = 7;
  if (this->software_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_software_name().data(), static_cast<int>(this->_internal_software_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EnableZebraRequest.software_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_software_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EnableZebraRequest)
  return target;
}

size_t EnableZebraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EnableZebraRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string route_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(route_types_.size());
  for (int i = 0, n = route_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      route_types_.Get(i));
  }

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string software_name = 7;
  if (this->software_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_software_name());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nexthop_trigger_delay());
  }

  // uint32 mpls_label_range_size = 6;
  if (this->mpls_label_range_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls_label_range_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableZebraRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EnableZebraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableZebraRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableZebraRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EnableZebraRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EnableZebraRequest)
    MergeFrom(*source);
  }
}

void EnableZebraRequest::MergeFrom(const EnableZebraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EnableZebraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_types_.MergeFrom(from.route_types_);
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.software_name().size() > 0) {
    _internal_set_software_name(from._internal_software_name());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.nexthop_trigger_enable() != 0) {
    _internal_set_nexthop_trigger_enable(from._internal_nexthop_trigger_enable());
  }
  if (from.nexthop_trigger_delay() != 0) {
    _internal_set_nexthop_trigger_delay(from._internal_nexthop_trigger_delay());
  }
  if (from.mpls_label_range_size() != 0) {
    _internal_set_mpls_label_range_size(from._internal_mpls_label_range_size());
  }
}

void EnableZebraRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EnableZebraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableZebraRequest::CopyFrom(const EnableZebraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EnableZebraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableZebraRequest::IsInitialized() const {
  return true;
}

void EnableZebraRequest::InternalSwap(EnableZebraRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  route_types_.InternalSwap(&other->route_types_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  software_name_.Swap(&other->software_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableZebraRequest, mpls_label_range_size_)
      + sizeof(EnableZebraRequest::mpls_label_range_size_)
      - PROTOBUF_FIELD_OFFSET(EnableZebraRequest, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableZebraRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableMrtRequest::InitAsDefaultInstance() {
}
class EnableMrtRequest::_Internal {
 public:
};

EnableMrtRequest::EnableMrtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EnableMrtRequest)
}
EnableMrtRequest::EnableMrtRequest(const EnableMrtRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  ::memcpy(&dump_interval_, &from.dump_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&dump_interval_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apipb.EnableMrtRequest)
}

void EnableMrtRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableMrtRequest_gobgp_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dump_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&dump_interval_)) + sizeof(type_));
}

EnableMrtRequest::~EnableMrtRequest() {
  // @@protoc_insertion_point(destructor:apipb.EnableMrtRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnableMrtRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableMrtRequest::ArenaDtor(void* object) {
  EnableMrtRequest* _this = reinterpret_cast< EnableMrtRequest* >(object);
  (void)_this;
}
void EnableMrtRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableMrtRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableMrtRequest& EnableMrtRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableMrtRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnableMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EnableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dump_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&dump_interval_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableMrtRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.EnableMrtRequest.DumpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::EnableMrtRequest_DumpType>(val));
        } else goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.EnableMrtRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dump_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dump_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rotation_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rotation_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableMrtRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EnableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.EnableMrtRequest.DumpType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.EnableMrtRequest.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // uint64 dump_interval = 3;
  if (this->dump_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dump_interval(), target);
  }

  // uint64 rotation_interval = 4;
  if (this->rotation_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rotation_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EnableMrtRequest)
  return target;
}

size_t EnableMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EnableMrtRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint64 dump_interval = 3;
  if (this->dump_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dump_interval());
  }

  // uint64 rotation_interval = 4;
  if (this->rotation_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rotation_interval());
  }

  // .apipb.EnableMrtRequest.DumpType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMrtRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EnableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableMrtRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableMrtRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EnableMrtRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EnableMrtRequest)
    MergeFrom(*source);
  }
}

void EnableMrtRequest::MergeFrom(const EnableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EnableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.dump_interval() != 0) {
    _internal_set_dump_interval(from._internal_dump_interval());
  }
  if (from.rotation_interval() != 0) {
    _internal_set_rotation_interval(from._internal_rotation_interval());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EnableMrtRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EnableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableMrtRequest::CopyFrom(const EnableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EnableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMrtRequest::IsInitialized() const {
  return true;
}

void EnableMrtRequest::InternalSwap(EnableMrtRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableMrtRequest, type_)
      + sizeof(EnableMrtRequest::type_)
      - PROTOBUF_FIELD_OFFSET(EnableMrtRequest, dump_interval_)>(
          reinterpret_cast<char*>(&dump_interval_),
          reinterpret_cast<char*>(&other->dump_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableMrtRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisableMrtRequest::InitAsDefaultInstance() {
}
class DisableMrtRequest::_Internal {
 public:
};

DisableMrtRequest::DisableMrtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DisableMrtRequest)
}
DisableMrtRequest::DisableMrtRequest(const DisableMrtRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DisableMrtRequest)
}

void DisableMrtRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisableMrtRequest_gobgp_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisableMrtRequest::~DisableMrtRequest() {
  // @@protoc_insertion_point(destructor:apipb.DisableMrtRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisableMrtRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisableMrtRequest::ArenaDtor(void* object) {
  DisableMrtRequest* _this = reinterpret_cast< DisableMrtRequest* >(object);
  (void)_this;
}
void DisableMrtRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableMrtRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableMrtRequest& DisableMrtRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableMrtRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DisableMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DisableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisableMrtRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DisableMrtRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableMrtRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DisableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DisableMrtRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DisableMrtRequest)
  return target;
}

size_t DisableMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DisableMrtRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableMrtRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DisableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableMrtRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisableMrtRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DisableMrtRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DisableMrtRequest)
    MergeFrom(*source);
  }
}

void DisableMrtRequest::MergeFrom(const DisableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DisableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void DisableMrtRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DisableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableMrtRequest::CopyFrom(const DisableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DisableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableMrtRequest::IsInitialized() const {
  return true;
}

void DisableMrtRequest::InternalSwap(DisableMrtRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableMrtRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddBmpRequest::InitAsDefaultInstance() {
}
class AddBmpRequest::_Internal {
 public:
};

AddBmpRequest::AddBmpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddBmpRequest)
}
AddBmpRequest::AddBmpRequest(const AddBmpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  sysname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sysname().empty()) {
    sysname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sysname(),
      GetArena());
  }
  sysdescr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sysdescr().empty()) {
    sysdescr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sysdescr(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&statisticstimeout_) -
    reinterpret_cast<char*>(&port_)) + sizeof(statisticstimeout_));
  // @@protoc_insertion_point(copy_constructor:apipb.AddBmpRequest)
}

void AddBmpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddBmpRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysdescr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statisticstimeout_) -
      reinterpret_cast<char*>(&port_)) + sizeof(statisticstimeout_));
}

AddBmpRequest::~AddBmpRequest() {
  // @@protoc_insertion_point(destructor:apipb.AddBmpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddBmpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysdescr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddBmpRequest::ArenaDtor(void* object) {
  AddBmpRequest* _this = reinterpret_cast< AddBmpRequest* >(object);
  (void)_this;
}
void AddBmpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddBmpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddBmpRequest& AddBmpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddBmpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sysname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sysdescr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statisticstimeout_) -
      reinterpret_cast<char*>(&port_)) + sizeof(statisticstimeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddBmpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AddBmpRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AddBmpRequest.MonitoringPolicy policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::apipb::AddBmpRequest_MonitoringPolicy>(val));
        } else goto handle_unusual;
        continue;
      // int32 StatisticsTimeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          statisticstimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SysName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sysname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AddBmpRequest.SysName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SysDescr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sysdescr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.AddBmpRequest.SysDescr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddBmpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AddBmpRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .apipb.AddBmpRequest.MonitoringPolicy policy = 3;
  if (this->policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_policy(), target);
  }

  // int32 StatisticsTimeout = 4;
  if (this->statisticstimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_statisticstimeout(), target);
  }

  // string SysName = 5;
  if (this->sysname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sysname().data(), static_cast<int>(this->_internal_sysname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AddBmpRequest.SysName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sysname(), target);
  }

  // string SysDescr = 6;
  if (this->sysdescr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sysdescr().data(), static_cast<int>(this->_internal_sysdescr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.AddBmpRequest.SysDescr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sysdescr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddBmpRequest)
  return target;
}

size_t AddBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddBmpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string SysName = 5;
  if (this->sysname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sysname());
  }

  // string SysDescr = 6;
  if (this->sysdescr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sysdescr());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // .apipb.AddBmpRequest.MonitoringPolicy policy = 3;
  if (this->policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_policy());
  }

  // int32 StatisticsTimeout = 4;
  if (this->statisticstimeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statisticstimeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBmpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBmpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddBmpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddBmpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddBmpRequest)
    MergeFrom(*source);
  }
}

void AddBmpRequest::MergeFrom(const AddBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.sysname().size() > 0) {
    _internal_set_sysname(from._internal_sysname());
  }
  if (from.sysdescr().size() > 0) {
    _internal_set_sysdescr(from._internal_sysdescr());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
  if (from.statisticstimeout() != 0) {
    _internal_set_statisticstimeout(from._internal_statisticstimeout());
  }
}

void AddBmpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBmpRequest::CopyFrom(const AddBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBmpRequest::IsInitialized() const {
  return true;
}

void AddBmpRequest::InternalSwap(AddBmpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sysname_.Swap(&other->sysname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sysdescr_.Swap(&other->sysdescr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddBmpRequest, statisticstimeout_)
      + sizeof(AddBmpRequest::statisticstimeout_)
      - PROTOBUF_FIELD_OFFSET(AddBmpRequest, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBmpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteBmpRequest::InitAsDefaultInstance() {
}
class DeleteBmpRequest::_Internal {
 public:
};

DeleteBmpRequest::DeleteBmpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DeleteBmpRequest)
}
DeleteBmpRequest::DeleteBmpRequest(const DeleteBmpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apipb.DeleteBmpRequest)
}

void DeleteBmpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteBmpRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

DeleteBmpRequest::~DeleteBmpRequest() {
  // @@protoc_insertion_point(destructor:apipb.DeleteBmpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteBmpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteBmpRequest::ArenaDtor(void* object) {
  DeleteBmpRequest* _this = reinterpret_cast< DeleteBmpRequest* >(object);
  (void)_this;
}
void DeleteBmpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteBmpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBmpRequest& DeleteBmpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBmpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DeleteBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBmpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DeleteBmpRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteBmpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DeleteBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DeleteBmpRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DeleteBmpRequest)
  return target;
}

size_t DeleteBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DeleteBmpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBmpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DeleteBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBmpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteBmpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DeleteBmpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DeleteBmpRequest)
    MergeFrom(*source);
  }
}

void DeleteBmpRequest::MergeFrom(const DeleteBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DeleteBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DeleteBmpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DeleteBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBmpRequest::CopyFrom(const DeleteBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DeleteBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBmpRequest::IsInitialized() const {
  return true;
}

void DeleteBmpRequest::InternalSwap(DeleteBmpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBmpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListBmpRequest::InitAsDefaultInstance() {
}
class ListBmpRequest::_Internal {
 public:
};

ListBmpRequest::ListBmpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListBmpRequest)
}
ListBmpRequest::ListBmpRequest(const ListBmpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.ListBmpRequest)
}

void ListBmpRequest::SharedCtor() {
}

ListBmpRequest::~ListBmpRequest() {
  // @@protoc_insertion_point(destructor:apipb.ListBmpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBmpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListBmpRequest::ArenaDtor(void* object) {
  ListBmpRequest* _this = reinterpret_cast< ListBmpRequest* >(object);
  (void)_this;
}
void ListBmpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBmpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBmpRequest& ListBmpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBmpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBmpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBmpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListBmpRequest)
  return target;
}

size_t ListBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListBmpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBmpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBmpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBmpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListBmpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListBmpRequest)
    MergeFrom(*source);
  }
}

void ListBmpRequest::MergeFrom(const ListBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListBmpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBmpRequest::CopyFrom(const ListBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBmpRequest::IsInitialized() const {
  return true;
}

void ListBmpRequest::InternalSwap(ListBmpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBmpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListBmpResponse_BmpStation_Conf::InitAsDefaultInstance() {
}
class ListBmpResponse_BmpStation_Conf::_Internal {
 public:
};

ListBmpResponse_BmpStation_Conf::ListBmpResponse_BmpStation_Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListBmpResponse.BmpStation.Conf)
}
ListBmpResponse_BmpStation_Conf::ListBmpResponse_BmpStation_Conf(const ListBmpResponse_BmpStation_Conf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apipb.ListBmpResponse.BmpStation.Conf)
}

void ListBmpResponse_BmpStation_Conf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ListBmpResponse_BmpStation_Conf::~ListBmpResponse_BmpStation_Conf() {
  // @@protoc_insertion_point(destructor:apipb.ListBmpResponse.BmpStation.Conf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBmpResponse_BmpStation_Conf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListBmpResponse_BmpStation_Conf::ArenaDtor(void* object) {
  ListBmpResponse_BmpStation_Conf* _this = reinterpret_cast< ListBmpResponse_BmpStation_Conf* >(object);
  (void)_this;
}
void ListBmpResponse_BmpStation_Conf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBmpResponse_BmpStation_Conf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBmpResponse_BmpStation_Conf& ListBmpResponse_BmpStation_Conf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBmpResponse_BmpStation_Conf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListBmpResponse_BmpStation_Conf::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListBmpResponse.BmpStation.Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBmpResponse_BmpStation_Conf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.ListBmpResponse.BmpStation.Conf.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBmpResponse_BmpStation_Conf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListBmpResponse.BmpStation.Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.ListBmpResponse.BmpStation.Conf.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListBmpResponse.BmpStation.Conf)
  return target;
}

size_t ListBmpResponse_BmpStation_Conf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListBmpResponse.BmpStation.Conf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBmpResponse_BmpStation_Conf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListBmpResponse.BmpStation.Conf)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBmpResponse_BmpStation_Conf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBmpResponse_BmpStation_Conf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListBmpResponse.BmpStation.Conf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListBmpResponse.BmpStation.Conf)
    MergeFrom(*source);
  }
}

void ListBmpResponse_BmpStation_Conf::MergeFrom(const ListBmpResponse_BmpStation_Conf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListBmpResponse.BmpStation.Conf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void ListBmpResponse_BmpStation_Conf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListBmpResponse.BmpStation.Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBmpResponse_BmpStation_Conf::CopyFrom(const ListBmpResponse_BmpStation_Conf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListBmpResponse.BmpStation.Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBmpResponse_BmpStation_Conf::IsInitialized() const {
  return true;
}

void ListBmpResponse_BmpStation_Conf::InternalSwap(ListBmpResponse_BmpStation_Conf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBmpResponse_BmpStation_Conf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListBmpResponse_BmpStation_State::InitAsDefaultInstance() {
  ::apipb::_ListBmpResponse_BmpStation_State_default_instance_._instance.get_mutable()->uptime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::apipb::_ListBmpResponse_BmpStation_State_default_instance_._instance.get_mutable()->downtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ListBmpResponse_BmpStation_State::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& uptime(const ListBmpResponse_BmpStation_State* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& downtime(const ListBmpResponse_BmpStation_State* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ListBmpResponse_BmpStation_State::_Internal::uptime(const ListBmpResponse_BmpStation_State* msg) {
  return *msg->uptime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ListBmpResponse_BmpStation_State::_Internal::downtime(const ListBmpResponse_BmpStation_State* msg) {
  return *msg->downtime_;
}
void ListBmpResponse_BmpStation_State::clear_uptime() {
  if (GetArena() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
}
void ListBmpResponse_BmpStation_State::clear_downtime() {
  if (GetArena() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
}
ListBmpResponse_BmpStation_State::ListBmpResponse_BmpStation_State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListBmpResponse.BmpStation.State)
}
ListBmpResponse_BmpStation_State::ListBmpResponse_BmpStation_State(const ListBmpResponse_BmpStation_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uptime()) {
    uptime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.uptime_);
  } else {
    uptime_ = nullptr;
  }
  if (from._internal_has_downtime()) {
    downtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.downtime_);
  } else {
    downtime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListBmpResponse.BmpStation.State)
}

void ListBmpResponse_BmpStation_State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto.base);
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downtime_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(downtime_));
}

ListBmpResponse_BmpStation_State::~ListBmpResponse_BmpStation_State() {
  // @@protoc_insertion_point(destructor:apipb.ListBmpResponse.BmpStation.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBmpResponse_BmpStation_State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uptime_;
  if (this != internal_default_instance()) delete downtime_;
}

void ListBmpResponse_BmpStation_State::ArenaDtor(void* object) {
  ListBmpResponse_BmpStation_State* _this = reinterpret_cast< ListBmpResponse_BmpStation_State* >(object);
  (void)_this;
}
void ListBmpResponse_BmpStation_State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBmpResponse_BmpStation_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBmpResponse_BmpStation_State& ListBmpResponse_BmpStation_State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBmpResponse_BmpStation_State_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListBmpResponse_BmpStation_State::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListBmpResponse.BmpStation.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
  if (GetArena() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBmpResponse_BmpStation_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp uptime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp downtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_downtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBmpResponse_BmpStation_State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListBmpResponse.BmpStation.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 1;
  if (this->has_uptime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uptime(this), target, stream);
  }

  // .google.protobuf.Timestamp downtime = 2;
  if (this->has_downtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::downtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListBmpResponse.BmpStation.State)
  return target;
}

size_t ListBmpResponse_BmpStation_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListBmpResponse.BmpStation.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 1;
  if (this->has_uptime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // .google.protobuf.Timestamp downtime = 2;
  if (this->has_downtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *downtime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBmpResponse_BmpStation_State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListBmpResponse.BmpStation.State)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBmpResponse_BmpStation_State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBmpResponse_BmpStation_State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListBmpResponse.BmpStation.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListBmpResponse.BmpStation.State)
    MergeFrom(*source);
  }
}

void ListBmpResponse_BmpStation_State::MergeFrom(const ListBmpResponse_BmpStation_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListBmpResponse.BmpStation.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uptime()) {
    _internal_mutable_uptime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_uptime());
  }
  if (from.has_downtime()) {
    _internal_mutable_downtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_downtime());
  }
}

void ListBmpResponse_BmpStation_State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListBmpResponse.BmpStation.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBmpResponse_BmpStation_State::CopyFrom(const ListBmpResponse_BmpStation_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListBmpResponse.BmpStation.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBmpResponse_BmpStation_State::IsInitialized() const {
  return true;
}

void ListBmpResponse_BmpStation_State::InternalSwap(ListBmpResponse_BmpStation_State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListBmpResponse_BmpStation_State, downtime_)
      + sizeof(ListBmpResponse_BmpStation_State::downtime_)
      - PROTOBUF_FIELD_OFFSET(ListBmpResponse_BmpStation_State, uptime_)>(
          reinterpret_cast<char*>(&uptime_),
          reinterpret_cast<char*>(&other->uptime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBmpResponse_BmpStation_State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListBmpResponse_BmpStation::InitAsDefaultInstance() {
  ::apipb::_ListBmpResponse_BmpStation_default_instance_._instance.get_mutable()->conf_ = const_cast< ::apipb::ListBmpResponse_BmpStation_Conf*>(
      ::apipb::ListBmpResponse_BmpStation_Conf::internal_default_instance());
  ::apipb::_ListBmpResponse_BmpStation_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::ListBmpResponse_BmpStation_State*>(
      ::apipb::ListBmpResponse_BmpStation_State::internal_default_instance());
}
class ListBmpResponse_BmpStation::_Internal {
 public:
  static const ::apipb::ListBmpResponse_BmpStation_Conf& conf(const ListBmpResponse_BmpStation* msg);
  static const ::apipb::ListBmpResponse_BmpStation_State& state(const ListBmpResponse_BmpStation* msg);
};

const ::apipb::ListBmpResponse_BmpStation_Conf&
ListBmpResponse_BmpStation::_Internal::conf(const ListBmpResponse_BmpStation* msg) {
  return *msg->conf_;
}
const ::apipb::ListBmpResponse_BmpStation_State&
ListBmpResponse_BmpStation::_Internal::state(const ListBmpResponse_BmpStation* msg) {
  return *msg->state_;
}
ListBmpResponse_BmpStation::ListBmpResponse_BmpStation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListBmpResponse.BmpStation)
}
ListBmpResponse_BmpStation::ListBmpResponse_BmpStation(const ListBmpResponse_BmpStation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conf()) {
    conf_ = new ::apipb::ListBmpResponse_BmpStation_Conf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::ListBmpResponse_BmpStation_State(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListBmpResponse.BmpStation)
}

void ListBmpResponse_BmpStation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListBmpResponse_BmpStation_gobgp_2eproto.base);
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(state_));
}

ListBmpResponse_BmpStation::~ListBmpResponse_BmpStation() {
  // @@protoc_insertion_point(destructor:apipb.ListBmpResponse.BmpStation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBmpResponse_BmpStation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete state_;
}

void ListBmpResponse_BmpStation::ArenaDtor(void* object) {
  ListBmpResponse_BmpStation* _this = reinterpret_cast< ListBmpResponse_BmpStation* >(object);
  (void)_this;
}
void ListBmpResponse_BmpStation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBmpResponse_BmpStation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBmpResponse_BmpStation& ListBmpResponse_BmpStation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBmpResponse_BmpStation_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListBmpResponse_BmpStation::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListBmpResponse.BmpStation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBmpResponse_BmpStation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.ListBmpResponse.BmpStation.Conf conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.ListBmpResponse.BmpStation.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBmpResponse_BmpStation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListBmpResponse.BmpStation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.ListBmpResponse.BmpStation.Conf conf = 1;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conf(this), target, stream);
  }

  // .apipb.ListBmpResponse.BmpStation.State state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListBmpResponse.BmpStation)
  return target;
}

size_t ListBmpResponse_BmpStation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListBmpResponse.BmpStation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.ListBmpResponse.BmpStation.Conf conf = 1;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .apipb.ListBmpResponse.BmpStation.State state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBmpResponse_BmpStation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListBmpResponse.BmpStation)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBmpResponse_BmpStation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBmpResponse_BmpStation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListBmpResponse.BmpStation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListBmpResponse.BmpStation)
    MergeFrom(*source);
  }
}

void ListBmpResponse_BmpStation::MergeFrom(const ListBmpResponse_BmpStation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListBmpResponse.BmpStation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conf()) {
    _internal_mutable_conf()->::apipb::ListBmpResponse_BmpStation_Conf::MergeFrom(from._internal_conf());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::ListBmpResponse_BmpStation_State::MergeFrom(from._internal_state());
  }
}

void ListBmpResponse_BmpStation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListBmpResponse.BmpStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBmpResponse_BmpStation::CopyFrom(const ListBmpResponse_BmpStation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListBmpResponse.BmpStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBmpResponse_BmpStation::IsInitialized() const {
  return true;
}

void ListBmpResponse_BmpStation::InternalSwap(ListBmpResponse_BmpStation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListBmpResponse_BmpStation, state_)
      + sizeof(ListBmpResponse_BmpStation::state_)
      - PROTOBUF_FIELD_OFFSET(ListBmpResponse_BmpStation, conf_)>(
          reinterpret_cast<char*>(&conf_),
          reinterpret_cast<char*>(&other->conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBmpResponse_BmpStation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListBmpResponse::InitAsDefaultInstance() {
  ::apipb::_ListBmpResponse_default_instance_._instance.get_mutable()->station_ = const_cast< ::apipb::ListBmpResponse_BmpStation*>(
      ::apipb::ListBmpResponse_BmpStation::internal_default_instance());
}
class ListBmpResponse::_Internal {
 public:
  static const ::apipb::ListBmpResponse_BmpStation& station(const ListBmpResponse* msg);
};

const ::apipb::ListBmpResponse_BmpStation&
ListBmpResponse::_Internal::station(const ListBmpResponse* msg) {
  return *msg->station_;
}
ListBmpResponse::ListBmpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ListBmpResponse)
}
ListBmpResponse::ListBmpResponse(const ListBmpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_station()) {
    station_ = new ::apipb::ListBmpResponse_BmpStation(*from.station_);
  } else {
    station_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ListBmpResponse)
}

void ListBmpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListBmpResponse_gobgp_2eproto.base);
  station_ = nullptr;
}

ListBmpResponse::~ListBmpResponse() {
  // @@protoc_insertion_point(destructor:apipb.ListBmpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBmpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete station_;
}

void ListBmpResponse::ArenaDtor(void* object) {
  ListBmpResponse* _this = reinterpret_cast< ListBmpResponse* >(object);
  (void)_this;
}
void ListBmpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBmpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBmpResponse& ListBmpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBmpResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListBmpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ListBmpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && station_ != nullptr) {
    delete station_;
  }
  station_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBmpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.ListBmpResponse.BmpStation station = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_station(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBmpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ListBmpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.ListBmpResponse.BmpStation station = 1;
  if (this->has_station()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::station(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ListBmpResponse)
  return target;
}

size_t ListBmpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ListBmpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.ListBmpResponse.BmpStation station = 1;
  if (this->has_station()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *station_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBmpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ListBmpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBmpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBmpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ListBmpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ListBmpResponse)
    MergeFrom(*source);
  }
}

void ListBmpResponse::MergeFrom(const ListBmpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ListBmpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_station()) {
    _internal_mutable_station()->::apipb::ListBmpResponse_BmpStation::MergeFrom(from._internal_station());
  }
}

void ListBmpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ListBmpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBmpResponse::CopyFrom(const ListBmpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ListBmpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBmpResponse::IsInitialized() const {
  return true;
}

void ListBmpResponse::InternalSwap(ListBmpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(station_, other->station_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBmpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Family::InitAsDefaultInstance() {
}
class Family::_Internal {
 public:
};

Family::Family(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Family)
}
Family::Family(const Family& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&safi_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  // @@protoc_insertion_point(copy_constructor:apipb.Family)
}

void Family::SharedCtor() {
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
}

Family::~Family() {
  // @@protoc_insertion_point(destructor:apipb.Family)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Family::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Family::ArenaDtor(void* object) {
  Family* _this = reinterpret_cast< Family* >(object);
  (void)_this;
}
void Family::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Family::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Family& Family::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Family_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Family::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Family::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family.Afi afi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::apipb::Family_Afi>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.Family.Safi safi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::apipb::Family_Safi>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Family::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family.Afi afi = 1;
  if (this->afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_afi(), target);
  }

  // .apipb.Family.Safi safi = 2;
  if (this->safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_safi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Family)
  return target;
}

size_t Family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Family)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Family.Afi afi = 1;
  if (this->afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .apipb.Family.Safi safi = 2;
  if (this->safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Family::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Family)
  GOOGLE_DCHECK_NE(&from, this);
  const Family* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Family>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Family)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Family)
    MergeFrom(*source);
  }
}

void Family::MergeFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Family)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from.safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
}

void Family::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Family::CopyFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Family::IsInitialized() const {
  return true;
}

void Family::InternalSwap(Family* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Family, safi_)
      + sizeof(Family::safi_)
      - PROTOBUF_FIELD_OFFSET(Family, afi_)>(
          reinterpret_cast<char*>(&afi_),
          reinterpret_cast<char*>(&other->afi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Family::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Validation::InitAsDefaultInstance() {
}
class Validation::_Internal {
 public:
};

Validation::Validation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matched_(arena),
  unmatched_asn_(arena),
  unmatched_length_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Validation)
}
Validation::Validation(const Validation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matched_(from.matched_),
      unmatched_asn_(from.unmatched_asn_),
      unmatched_length_(from.unmatched_length_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:apipb.Validation)
}

void Validation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Validation_gobgp_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reason_));
}

Validation::~Validation() {
  // @@protoc_insertion_point(destructor:apipb.Validation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Validation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Validation::ArenaDtor(void* object) {
  Validation* _this = reinterpret_cast< Validation* >(object);
  (void)_this;
}
void Validation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validation& Validation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Validation_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Validation::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matched_.Clear();
  unmatched_asn_.Clear();
  unmatched_length_.Clear();
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Validation.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::apipb::Validation_State>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.Validation.Reason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::apipb::Validation_Reason>(val));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Roa matched = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matched(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Roa unmatched_asn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmatched_asn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Roa unmatched_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmatched_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Validation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Validation.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .apipb.Validation.Reason reason = 2;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // repeated .apipb.Roa matched = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matched_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_matched(i), target, stream);
  }

  // repeated .apipb.Roa unmatched_asn = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unmatched_asn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_unmatched_asn(i), target, stream);
  }

  // repeated .apipb.Roa unmatched_length = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unmatched_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_unmatched_length(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Validation)
  return target;
}

size_t Validation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Validation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.Roa matched = 3;
  total_size += 1UL * this->_internal_matched_size();
  for (const auto& msg : this->matched_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apipb.Roa unmatched_asn = 4;
  total_size += 1UL * this->_internal_unmatched_asn_size();
  for (const auto& msg : this->unmatched_asn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apipb.Roa unmatched_length = 5;
  total_size += 1UL * this->_internal_unmatched_length_size();
  for (const auto& msg : this->unmatched_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.Validation.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .apipb.Validation.Reason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Validation)
  GOOGLE_DCHECK_NE(&from, this);
  const Validation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Validation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Validation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Validation)
    MergeFrom(*source);
  }
}

void Validation::MergeFrom(const Validation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Validation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matched_.MergeFrom(from.matched_);
  unmatched_asn_.MergeFrom(from.unmatched_asn_);
  unmatched_length_.MergeFrom(from.unmatched_length_);
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void Validation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validation::CopyFrom(const Validation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validation::IsInitialized() const {
  return true;
}

void Validation::InternalSwap(Validation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matched_.InternalSwap(&other->matched_);
  unmatched_asn_.InternalSwap(&other->unmatched_asn_);
  unmatched_length_.InternalSwap(&other->unmatched_length_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validation, reason_)
      + sizeof(Validation::reason_)
      - PROTOBUF_FIELD_OFFSET(Validation, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
  ::apipb::_Path_default_instance_._instance.get_mutable()->nlri_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::apipb::_Path_default_instance_._instance.get_mutable()->age_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::apipb::_Path_default_instance_._instance.get_mutable()->validation_ = const_cast< ::apipb::Validation*>(
      ::apipb::Validation::internal_default_instance());
  ::apipb::_Path_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class Path::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& nlri(const Path* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& age(const Path* msg);
  static const ::apipb::Validation& validation(const Path* msg);
  static const ::apipb::Family& family(const Path* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Path::_Internal::nlri(const Path* msg) {
  return *msg->nlri_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Path::_Internal::age(const Path* msg) {
  return *msg->age_;
}
const ::apipb::Validation&
Path::_Internal::validation(const Path* msg) {
  return *msg->validation_;
}
const ::apipb::Family&
Path::_Internal::family(const Path* msg) {
  return *msg->family_;
}
void Path::clear_nlri() {
  if (GetArena() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
}
void Path::clear_pattrs() {
  pattrs_.Clear();
}
void Path::clear_age() {
  if (GetArena() == nullptr && age_ != nullptr) {
    delete age_;
  }
  age_ = nullptr;
}
Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pattrs_(arena),
  pattrs_binary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pattrs_(from.pattrs_),
      pattrs_binary_(from.pattrs_binary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_id(),
      GetArena());
  }
  neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_ip().empty()) {
    neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neighbor_ip(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  nlri_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nlri_binary().empty()) {
    nlri_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nlri_binary(),
      GetArena());
  }
  if (from._internal_has_nlri()) {
    nlri_ = new PROTOBUF_NAMESPACE_ID::Any(*from.nlri_);
  } else {
    nlri_ = nullptr;
  }
  if (from._internal_has_age()) {
    age_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.age_);
  } else {
    age_ = nullptr;
  }
  if (from._internal_has_validation()) {
    validation_ = new ::apipb::Validation(*from.validation_);
  } else {
    validation_ = nullptr;
  }
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&best_, &from.best_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_identifier_) -
    reinterpret_cast<char*>(&best_)) + sizeof(local_identifier_));
  // @@protoc_insertion_point(copy_constructor:apipb.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_gobgp_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlri_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nlri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_identifier_) -
      reinterpret_cast<char*>(&nlri_)) + sizeof(local_identifier_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:apipb.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlri_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nlri_;
  if (this != internal_default_instance()) delete age_;
  if (this != internal_default_instance()) delete validation_;
  if (this != internal_default_instance()) delete family_;
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattrs_.Clear();
  pattrs_binary_.Clear();
  source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nlri_binary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
  if (GetArena() == nullptr && age_ != nullptr) {
    delete age_;
  }
  age_ = nullptr;
  if (GetArena() == nullptr && validation_ != nullptr) {
    delete validation_;
  }
  validation_ = nullptr;
  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&best_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_identifier_) -
      reinterpret_cast<char*>(&best_)) + sizeof(local_identifier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any nlri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nlri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any pattrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pattrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool best = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          best_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_withdraw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_withdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Validation validation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_validation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_implicit_withdraw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          no_implicit_withdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Family family = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 source_asn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          source_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_source_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Path.source_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool filtered = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_from_external = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_from_external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_ip = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_neighbor_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Path.neighbor_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_nexthop_invalid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_nexthop_invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 identifier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_identifier = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          local_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nlri_binary = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_nlri_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes pattrs_binary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_pattrs_binary();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any nlri = 1;
  if (this->has_nlri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nlri(this), target, stream);
  }

  // repeated .google.protobuf.Any pattrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pattrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pattrs(i), target, stream);
  }

  // .google.protobuf.Timestamp age = 3;
  if (this->has_age()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::age(this), target, stream);
  }

  // bool best = 4;
  if (this->best() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_best(), target);
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_withdraw(), target);
  }

  // .apipb.Validation validation = 7;
  if (this->has_validation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::validation(this), target, stream);
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_no_implicit_withdraw(), target);
  }

  // .apipb.Family family = 9;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::family(this), target, stream);
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_source_asn(), target);
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Path.source_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_source_id(), target);
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_filtered(), target);
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_stale(), target);
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_from_external(), target);
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_ip().data(), static_cast<int>(this->_internal_neighbor_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Path.neighbor_ip");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_neighbor_ip(), target);
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_uuid(), target);
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_nexthop_invalid(), target);
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_identifier(), target);
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_local_identifier(), target);
  }

  // bytes nlri_binary = 20;
  if (this->nlri_binary().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_nlri_binary(), target);
  }

  // repeated bytes pattrs_binary = 21;
  for (int i = 0, n = this->_internal_pattrs_binary_size(); i < n; i++) {
    const auto& s = this->_internal_pattrs_binary(i);
    target = stream->WriteBytes(21, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any pattrs = 2;
  total_size += 1UL * this->_internal_pattrs_size();
  for (const auto& msg : this->pattrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes pattrs_binary = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pattrs_binary_.size());
  for (int i = 0, n = pattrs_binary_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      pattrs_binary_.Get(i));
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_ip());
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // bytes nlri_binary = 20;
  if (this->nlri_binary().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nlri_binary());
  }

  // .google.protobuf.Any nlri = 1;
  if (this->has_nlri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nlri_);
  }

  // .google.protobuf.Timestamp age = 3;
  if (this->has_age()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *age_);
  }

  // .apipb.Validation validation = 7;
  if (this->has_validation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validation_);
  }

  // .apipb.Family family = 9;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // bool best = 4;
  if (this->best() != 0) {
    total_size += 1 + 1;
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    total_size += 1 + 1;
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_source_asn());
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    total_size += 1 + 1;
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    total_size += 1 + 1;
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    total_size += 2 + 1;
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_identifier());
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pattrs_.MergeFrom(from.pattrs_);
  pattrs_binary_.MergeFrom(from.pattrs_binary_);
  if (from.source_id().size() > 0) {
    _internal_set_source_id(from._internal_source_id());
  }
  if (from.neighbor_ip().size() > 0) {
    _internal_set_neighbor_ip(from._internal_neighbor_ip());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.nlri_binary().size() > 0) {
    _internal_set_nlri_binary(from._internal_nlri_binary());
  }
  if (from.has_nlri()) {
    _internal_mutable_nlri()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_nlri());
  }
  if (from.has_age()) {
    _internal_mutable_age()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_age());
  }
  if (from.has_validation()) {
    _internal_mutable_validation()->::apipb::Validation::MergeFrom(from._internal_validation());
  }
  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.best() != 0) {
    _internal_set_best(from._internal_best());
  }
  if (from.is_withdraw() != 0) {
    _internal_set_is_withdraw(from._internal_is_withdraw());
  }
  if (from.no_implicit_withdraw() != 0) {
    _internal_set_no_implicit_withdraw(from._internal_no_implicit_withdraw());
  }
  if (from.filtered() != 0) {
    _internal_set_filtered(from._internal_filtered());
  }
  if (from.source_asn() != 0) {
    _internal_set_source_asn(from._internal_source_asn());
  }
  if (from.stale() != 0) {
    _internal_set_stale(from._internal_stale());
  }
  if (from.is_from_external() != 0) {
    _internal_set_is_from_external(from._internal_is_from_external());
  }
  if (from.is_nexthop_invalid() != 0) {
    _internal_set_is_nexthop_invalid(from._internal_is_nexthop_invalid());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from.local_identifier() != 0) {
    _internal_set_local_identifier(from._internal_local_identifier());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pattrs_.InternalSwap(&other->pattrs_);
  pattrs_binary_.InternalSwap(&other->pattrs_binary_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_ip_.Swap(&other->neighbor_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nlri_binary_.Swap(&other->nlri_binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Path, local_identifier_)
      + sizeof(Path::local_identifier_)
      - PROTOBUF_FIELD_OFFSET(Path, nlri_)>(
          reinterpret_cast<char*>(&nlri_),
          reinterpret_cast<char*>(&other->nlri_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Destination::InitAsDefaultInstance() {
}
class Destination::_Internal {
 public:
};

Destination::Destination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Destination)
}
Destination::Destination(const Destination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Destination)
}

void Destination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Destination_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:apipb.Destination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Destination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Destination::ArenaDtor(void* object) {
  Destination* _this = reinterpret_cast< Destination* >(object);
  (void)_this;
}
void Destination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Destination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Destination& Destination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Destination_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Destination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Destination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Destination.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Path paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Destination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Destination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Destination.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // repeated .apipb.Path paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Destination)
  return target;
}

size_t Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Destination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.Path paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Destination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  const Destination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Destination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Destination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Destination)
    MergeFrom(*source);
  }
}

void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
}

void Destination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  return true;
}

void Destination::InternalSwap(Destination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Destination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
  ::apipb::_Peer_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::apipb::ApplyPolicy*>(
      ::apipb::ApplyPolicy::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->conf_ = const_cast< ::apipb::PeerConf*>(
      ::apipb::PeerConf::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->ebgp_multihop_ = const_cast< ::apipb::EbgpMultihop*>(
      ::apipb::EbgpMultihop::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->route_reflector_ = const_cast< ::apipb::RouteReflector*>(
      ::apipb::RouteReflector::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::PeerState*>(
      ::apipb::PeerState::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->timers_ = const_cast< ::apipb::Timers*>(
      ::apipb::Timers::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->transport_ = const_cast< ::apipb::Transport*>(
      ::apipb::Transport::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->route_server_ = const_cast< ::apipb::RouteServer*>(
      ::apipb::RouteServer::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::apipb::GracefulRestart*>(
      ::apipb::GracefulRestart::internal_default_instance());
  ::apipb::_Peer_default_instance_._instance.get_mutable()->ttl_security_ = const_cast< ::apipb::TtlSecurity*>(
      ::apipb::TtlSecurity::internal_default_instance());
}
class Peer::_Internal {
 public:
  static const ::apipb::ApplyPolicy& apply_policy(const Peer* msg);
  static const ::apipb::PeerConf& conf(const Peer* msg);
  static const ::apipb::EbgpMultihop& ebgp_multihop(const Peer* msg);
  static const ::apipb::RouteReflector& route_reflector(const Peer* msg);
  static const ::apipb::PeerState& state(const Peer* msg);
  static const ::apipb::Timers& timers(const Peer* msg);
  static const ::apipb::Transport& transport(const Peer* msg);
  static const ::apipb::RouteServer& route_server(const Peer* msg);
  static const ::apipb::GracefulRestart& graceful_restart(const Peer* msg);
  static const ::apipb::TtlSecurity& ttl_security(const Peer* msg);
};

const ::apipb::ApplyPolicy&
Peer::_Internal::apply_policy(const Peer* msg) {
  return *msg->apply_policy_;
}
const ::apipb::PeerConf&
Peer::_Internal::conf(const Peer* msg) {
  return *msg->conf_;
}
const ::apipb::EbgpMultihop&
Peer::_Internal::ebgp_multihop(const Peer* msg) {
  return *msg->ebgp_multihop_;
}
const ::apipb::RouteReflector&
Peer::_Internal::route_reflector(const Peer* msg) {
  return *msg->route_reflector_;
}
const ::apipb::PeerState&
Peer::_Internal::state(const Peer* msg) {
  return *msg->state_;
}
const ::apipb::Timers&
Peer::_Internal::timers(const Peer* msg) {
  return *msg->timers_;
}
const ::apipb::Transport&
Peer::_Internal::transport(const Peer* msg) {
  return *msg->transport_;
}
const ::apipb::RouteServer&
Peer::_Internal::route_server(const Peer* msg) {
  return *msg->route_server_;
}
const ::apipb::GracefulRestart&
Peer::_Internal::graceful_restart(const Peer* msg) {
  return *msg->graceful_restart_;
}
const ::apipb::TtlSecurity&
Peer::_Internal::ttl_security(const Peer* msg) {
  return *msg->ttl_security_;
}
Peer::Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  afi_safis_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      afi_safis_(from.afi_safis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::apipb::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  if (from._internal_has_conf()) {
    conf_ = new ::apipb::PeerConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_ebgp_multihop()) {
    ebgp_multihop_ = new ::apipb::EbgpMultihop(*from.ebgp_multihop_);
  } else {
    ebgp_multihop_ = nullptr;
  }
  if (from._internal_has_route_reflector()) {
    route_reflector_ = new ::apipb::RouteReflector(*from.route_reflector_);
  } else {
    route_reflector_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::PeerState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_timers()) {
    timers_ = new ::apipb::Timers(*from.timers_);
  } else {
    timers_ = nullptr;
  }
  if (from._internal_has_transport()) {
    transport_ = new ::apipb::Transport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  if (from._internal_has_route_server()) {
    route_server_ = new ::apipb::RouteServer(*from.route_server_);
  } else {
    route_server_ = nullptr;
  }
  if (from._internal_has_graceful_restart()) {
    graceful_restart_ = new ::apipb::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = nullptr;
  }
  if (from._internal_has_ttl_security()) {
    ttl_security_ = new ::apipb::TtlSecurity(*from.ttl_security_);
  } else {
    ttl_security_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Peer)
}

void Peer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Peer_gobgp_2eproto.base);
  ::memset(&apply_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_security_) -
      reinterpret_cast<char*>(&apply_policy_)) + sizeof(ttl_security_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:apipb.Peer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete ebgp_multihop_;
  if (this != internal_default_instance()) delete route_reflector_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete timers_;
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete route_server_;
  if (this != internal_default_instance()) delete graceful_restart_;
  if (this != internal_default_instance()) delete ttl_security_;
}

void Peer::ArenaDtor(void* object) {
  Peer* _this = reinterpret_cast< Peer* >(object);
  (void)_this;
}
void Peer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Peer& Peer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Peer_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  afi_safis_.Clear();
  if (GetArena() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  if (GetArena() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArena() == nullptr && ebgp_multihop_ != nullptr) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = nullptr;
  if (GetArena() == nullptr && route_reflector_ != nullptr) {
    delete route_reflector_;
  }
  route_reflector_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  if (GetArena() == nullptr && route_server_ != nullptr) {
    delete route_server_;
  }
  route_server_ = nullptr;
  if (GetArena() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
  if (GetArena() == nullptr && ttl_security_ != nullptr) {
    delete ttl_security_;
  }
  ttl_security_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.ApplyPolicy apply_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerConf conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EbgpMultihop ebgp_multihop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebgp_multihop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteReflector route_reflector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_reflector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Timers timers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Transport transport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteServer route_server = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.GracefulRestart graceful_restart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.AfiSafi afi_safis = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afi_safis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .apipb.TtlSecurity ttl_security = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::apply_policy(this), target, stream);
  }

  // .apipb.PeerConf conf = 2;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conf(this), target, stream);
  }

  // .apipb.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ebgp_multihop(this), target, stream);
  }

  // .apipb.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_reflector(this), target, stream);
  }

  // .apipb.PeerState state = 5;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::state(this), target, stream);
  }

  // .apipb.Timers timers = 6;
  if (this->has_timers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timers(this), target, stream);
  }

  // .apipb.Transport transport = 7;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transport(this), target, stream);
  }

  // .apipb.RouteServer route_server = 8;
  if (this->has_route_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::route_server(this), target, stream);
  }

  // .apipb.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::graceful_restart(this), target, stream);
  }

  // repeated .apipb.AfiSafi afi_safis = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afi_safis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_afi_safis(i), target, stream);
  }

  // .apipb.TtlSecurity ttl_security = 11;
  if (this->has_ttl_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ttl_security(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.AfiSafi afi_safis = 10;
  total_size += 1UL * this->_internal_afi_safis_size();
  for (const auto& msg : this->afi_safis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // .apipb.PeerConf conf = 2;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .apipb.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ebgp_multihop_);
  }

  // .apipb.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_reflector_);
  }

  // .apipb.PeerState state = 5;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .apipb.Timers timers = 6;
  if (this->has_timers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timers_);
  }

  // .apipb.Transport transport = 7;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  // .apipb.RouteServer route_server = 8;
  if (this->has_route_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_server_);
  }

  // .apipb.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graceful_restart_);
  }

  // .apipb.TtlSecurity ttl_security = 11;
  if (this->has_ttl_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ttl_security_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  afi_safis_.MergeFrom(from.afi_safis_);
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::apipb::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.has_conf()) {
    _internal_mutable_conf()->::apipb::PeerConf::MergeFrom(from._internal_conf());
  }
  if (from.has_ebgp_multihop()) {
    _internal_mutable_ebgp_multihop()->::apipb::EbgpMultihop::MergeFrom(from._internal_ebgp_multihop());
  }
  if (from.has_route_reflector()) {
    _internal_mutable_route_reflector()->::apipb::RouteReflector::MergeFrom(from._internal_route_reflector());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::PeerState::MergeFrom(from._internal_state());
  }
  if (from.has_timers()) {
    _internal_mutable_timers()->::apipb::Timers::MergeFrom(from._internal_timers());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::apipb::Transport::MergeFrom(from._internal_transport());
  }
  if (from.has_route_server()) {
    _internal_mutable_route_server()->::apipb::RouteServer::MergeFrom(from._internal_route_server());
  }
  if (from.has_graceful_restart()) {
    _internal_mutable_graceful_restart()->::apipb::GracefulRestart::MergeFrom(from._internal_graceful_restart());
  }
  if (from.has_ttl_security()) {
    _internal_mutable_ttl_security()->::apipb::TtlSecurity::MergeFrom(from._internal_ttl_security());
  }
}

void Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  afi_safis_.InternalSwap(&other->afi_safis_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Peer, ttl_security_)
      + sizeof(Peer::ttl_security_)
      - PROTOBUF_FIELD_OFFSET(Peer, apply_policy_)>(
          reinterpret_cast<char*>(&apply_policy_),
          reinterpret_cast<char*>(&other->apply_policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerGroup::InitAsDefaultInstance() {
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::apipb::ApplyPolicy*>(
      ::apipb::ApplyPolicy::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->conf_ = const_cast< ::apipb::PeerGroupConf*>(
      ::apipb::PeerGroupConf::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->ebgp_multihop_ = const_cast< ::apipb::EbgpMultihop*>(
      ::apipb::EbgpMultihop::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->route_reflector_ = const_cast< ::apipb::RouteReflector*>(
      ::apipb::RouteReflector::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->info_ = const_cast< ::apipb::PeerGroupState*>(
      ::apipb::PeerGroupState::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->timers_ = const_cast< ::apipb::Timers*>(
      ::apipb::Timers::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->transport_ = const_cast< ::apipb::Transport*>(
      ::apipb::Transport::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->route_server_ = const_cast< ::apipb::RouteServer*>(
      ::apipb::RouteServer::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::apipb::GracefulRestart*>(
      ::apipb::GracefulRestart::internal_default_instance());
  ::apipb::_PeerGroup_default_instance_._instance.get_mutable()->ttl_security_ = const_cast< ::apipb::TtlSecurity*>(
      ::apipb::TtlSecurity::internal_default_instance());
}
class PeerGroup::_Internal {
 public:
  static const ::apipb::ApplyPolicy& apply_policy(const PeerGroup* msg);
  static const ::apipb::PeerGroupConf& conf(const PeerGroup* msg);
  static const ::apipb::EbgpMultihop& ebgp_multihop(const PeerGroup* msg);
  static const ::apipb::RouteReflector& route_reflector(const PeerGroup* msg);
  static const ::apipb::PeerGroupState& info(const PeerGroup* msg);
  static const ::apipb::Timers& timers(const PeerGroup* msg);
  static const ::apipb::Transport& transport(const PeerGroup* msg);
  static const ::apipb::RouteServer& route_server(const PeerGroup* msg);
  static const ::apipb::GracefulRestart& graceful_restart(const PeerGroup* msg);
  static const ::apipb::TtlSecurity& ttl_security(const PeerGroup* msg);
};

const ::apipb::ApplyPolicy&
PeerGroup::_Internal::apply_policy(const PeerGroup* msg) {
  return *msg->apply_policy_;
}
const ::apipb::PeerGroupConf&
PeerGroup::_Internal::conf(const PeerGroup* msg) {
  return *msg->conf_;
}
const ::apipb::EbgpMultihop&
PeerGroup::_Internal::ebgp_multihop(const PeerGroup* msg) {
  return *msg->ebgp_multihop_;
}
const ::apipb::RouteReflector&
PeerGroup::_Internal::route_reflector(const PeerGroup* msg) {
  return *msg->route_reflector_;
}
const ::apipb::PeerGroupState&
PeerGroup::_Internal::info(const PeerGroup* msg) {
  return *msg->info_;
}
const ::apipb::Timers&
PeerGroup::_Internal::timers(const PeerGroup* msg) {
  return *msg->timers_;
}
const ::apipb::Transport&
PeerGroup::_Internal::transport(const PeerGroup* msg) {
  return *msg->transport_;
}
const ::apipb::RouteServer&
PeerGroup::_Internal::route_server(const PeerGroup* msg) {
  return *msg->route_server_;
}
const ::apipb::GracefulRestart&
PeerGroup::_Internal::graceful_restart(const PeerGroup* msg) {
  return *msg->graceful_restart_;
}
const ::apipb::TtlSecurity&
PeerGroup::_Internal::ttl_security(const PeerGroup* msg) {
  return *msg->ttl_security_;
}
PeerGroup::PeerGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  afi_safis_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PeerGroup)
}
PeerGroup::PeerGroup(const PeerGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      afi_safis_(from.afi_safis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::apipb::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  if (from._internal_has_conf()) {
    conf_ = new ::apipb::PeerGroupConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_ebgp_multihop()) {
    ebgp_multihop_ = new ::apipb::EbgpMultihop(*from.ebgp_multihop_);
  } else {
    ebgp_multihop_ = nullptr;
  }
  if (from._internal_has_route_reflector()) {
    route_reflector_ = new ::apipb::RouteReflector(*from.route_reflector_);
  } else {
    route_reflector_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::apipb::PeerGroupState(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_timers()) {
    timers_ = new ::apipb::Timers(*from.timers_);
  } else {
    timers_ = nullptr;
  }
  if (from._internal_has_transport()) {
    transport_ = new ::apipb::Transport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  if (from._internal_has_route_server()) {
    route_server_ = new ::apipb::RouteServer(*from.route_server_);
  } else {
    route_server_ = nullptr;
  }
  if (from._internal_has_graceful_restart()) {
    graceful_restart_ = new ::apipb::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = nullptr;
  }
  if (from._internal_has_ttl_security()) {
    ttl_security_ = new ::apipb::TtlSecurity(*from.ttl_security_);
  } else {
    ttl_security_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.PeerGroup)
}

void PeerGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerGroup_gobgp_2eproto.base);
  ::memset(&apply_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_security_) -
      reinterpret_cast<char*>(&apply_policy_)) + sizeof(ttl_security_));
}

PeerGroup::~PeerGroup() {
  // @@protoc_insertion_point(destructor:apipb.PeerGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete ebgp_multihop_;
  if (this != internal_default_instance()) delete route_reflector_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete timers_;
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete route_server_;
  if (this != internal_default_instance()) delete graceful_restart_;
  if (this != internal_default_instance()) delete ttl_security_;
}

void PeerGroup::ArenaDtor(void* object) {
  PeerGroup* _this = reinterpret_cast< PeerGroup* >(object);
  (void)_this;
}
void PeerGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerGroup& PeerGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerGroup_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PeerGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  afi_safis_.Clear();
  if (GetArena() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  if (GetArena() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArena() == nullptr && ebgp_multihop_ != nullptr) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = nullptr;
  if (GetArena() == nullptr && route_reflector_ != nullptr) {
    delete route_reflector_;
  }
  route_reflector_ = nullptr;
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArena() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  if (GetArena() == nullptr && route_server_ != nullptr) {
    delete route_server_;
  }
  route_server_ = nullptr;
  if (GetArena() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
  if (GetArena() == nullptr && ttl_security_ != nullptr) {
    delete ttl_security_;
  }
  ttl_security_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.ApplyPolicy apply_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerGroupConf conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EbgpMultihop ebgp_multihop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebgp_multihop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteReflector route_reflector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_reflector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerGroupState info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Timers timers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Transport transport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteServer route_server = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.GracefulRestart graceful_restart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.AfiSafi afi_safis = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afi_safis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .apipb.TtlSecurity ttl_security = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PeerGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::apply_policy(this), target, stream);
  }

  // .apipb.PeerGroupConf conf = 2;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conf(this), target, stream);
  }

  // .apipb.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ebgp_multihop(this), target, stream);
  }

  // .apipb.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_reflector(this), target, stream);
  }

  // .apipb.PeerGroupState info = 5;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::info(this), target, stream);
  }

  // .apipb.Timers timers = 6;
  if (this->has_timers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timers(this), target, stream);
  }

  // .apipb.Transport transport = 7;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transport(this), target, stream);
  }

  // .apipb.RouteServer route_server = 8;
  if (this->has_route_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::route_server(this), target, stream);
  }

  // .apipb.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::graceful_restart(this), target, stream);
  }

  // repeated .apipb.AfiSafi afi_safis = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afi_safis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_afi_safis(i), target, stream);
  }

  // .apipb.TtlSecurity ttl_security = 11;
  if (this->has_ttl_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ttl_security(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PeerGroup)
  return target;
}

size_t PeerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PeerGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.AfiSafi afi_safis = 10;
  total_size += 1UL * this->_internal_afi_safis_size();
  for (const auto& msg : this->afi_safis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // .apipb.PeerGroupConf conf = 2;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .apipb.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ebgp_multihop_);
  }

  // .apipb.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_reflector_);
  }

  // .apipb.PeerGroupState info = 5;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .apipb.Timers timers = 6;
  if (this->has_timers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timers_);
  }

  // .apipb.Transport transport = 7;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  // .apipb.RouteServer route_server = 8;
  if (this->has_route_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_server_);
  }

  // .apipb.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graceful_restart_);
  }

  // .apipb.TtlSecurity ttl_security = 11;
  if (this->has_ttl_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ttl_security_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PeerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PeerGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PeerGroup)
    MergeFrom(*source);
  }
}

void PeerGroup::MergeFrom(const PeerGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PeerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  afi_safis_.MergeFrom(from.afi_safis_);
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::apipb::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.has_conf()) {
    _internal_mutable_conf()->::apipb::PeerGroupConf::MergeFrom(from._internal_conf());
  }
  if (from.has_ebgp_multihop()) {
    _internal_mutable_ebgp_multihop()->::apipb::EbgpMultihop::MergeFrom(from._internal_ebgp_multihop());
  }
  if (from.has_route_reflector()) {
    _internal_mutable_route_reflector()->::apipb::RouteReflector::MergeFrom(from._internal_route_reflector());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::apipb::PeerGroupState::MergeFrom(from._internal_info());
  }
  if (from.has_timers()) {
    _internal_mutable_timers()->::apipb::Timers::MergeFrom(from._internal_timers());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::apipb::Transport::MergeFrom(from._internal_transport());
  }
  if (from.has_route_server()) {
    _internal_mutable_route_server()->::apipb::RouteServer::MergeFrom(from._internal_route_server());
  }
  if (from.has_graceful_restart()) {
    _internal_mutable_graceful_restart()->::apipb::GracefulRestart::MergeFrom(from._internal_graceful_restart());
  }
  if (from.has_ttl_security()) {
    _internal_mutable_ttl_security()->::apipb::TtlSecurity::MergeFrom(from._internal_ttl_security());
  }
}

void PeerGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PeerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerGroup::CopyFrom(const PeerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PeerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroup::IsInitialized() const {
  return true;
}

void PeerGroup::InternalSwap(PeerGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  afi_safis_.InternalSwap(&other->afi_safis_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerGroup, ttl_security_)
      + sizeof(PeerGroup::ttl_security_)
      - PROTOBUF_FIELD_OFFSET(PeerGroup, apply_policy_)>(
          reinterpret_cast<char*>(&apply_policy_),
          reinterpret_cast<char*>(&other->apply_policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicNeighbor::InitAsDefaultInstance() {
}
class DynamicNeighbor::_Internal {
 public:
};

DynamicNeighbor::DynamicNeighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DynamicNeighbor)
}
DynamicNeighbor::DynamicNeighbor(const DynamicNeighbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.DynamicNeighbor)
}

void DynamicNeighbor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicNeighbor_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DynamicNeighbor::~DynamicNeighbor() {
  // @@protoc_insertion_point(destructor:apipb.DynamicNeighbor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DynamicNeighbor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DynamicNeighbor::ArenaDtor(void* object) {
  DynamicNeighbor* _this = reinterpret_cast< DynamicNeighbor* >(object);
  (void)_this;
}
void DynamicNeighbor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicNeighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicNeighbor& DynamicNeighbor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicNeighbor_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DynamicNeighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DynamicNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicNeighbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DynamicNeighbor.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DynamicNeighbor.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicNeighbor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DynamicNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DynamicNeighbor.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string peer_group = 2;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DynamicNeighbor.peer_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DynamicNeighbor)
  return target;
}

size_t DynamicNeighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DynamicNeighbor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string peer_group = 2;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicNeighbor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DynamicNeighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicNeighbor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicNeighbor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DynamicNeighbor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DynamicNeighbor)
    MergeFrom(*source);
  }
}

void DynamicNeighbor::MergeFrom(const DynamicNeighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DynamicNeighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.peer_group().size() > 0) {
    _internal_set_peer_group(from._internal_peer_group());
  }
}

void DynamicNeighbor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DynamicNeighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicNeighbor::CopyFrom(const DynamicNeighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DynamicNeighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicNeighbor::IsInitialized() const {
  return true;
}

void DynamicNeighbor::InternalSwap(DynamicNeighbor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicNeighbor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplyPolicy::InitAsDefaultInstance() {
  ::apipb::_ApplyPolicy_default_instance_._instance.get_mutable()->in_policy_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
  ::apipb::_ApplyPolicy_default_instance_._instance.get_mutable()->export_policy_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
  ::apipb::_ApplyPolicy_default_instance_._instance.get_mutable()->import_policy_ = const_cast< ::apipb::PolicyAssignment*>(
      ::apipb::PolicyAssignment::internal_default_instance());
}
class ApplyPolicy::_Internal {
 public:
  static const ::apipb::PolicyAssignment& in_policy(const ApplyPolicy* msg);
  static const ::apipb::PolicyAssignment& export_policy(const ApplyPolicy* msg);
  static const ::apipb::PolicyAssignment& import_policy(const ApplyPolicy* msg);
};

const ::apipb::PolicyAssignment&
ApplyPolicy::_Internal::in_policy(const ApplyPolicy* msg) {
  return *msg->in_policy_;
}
const ::apipb::PolicyAssignment&
ApplyPolicy::_Internal::export_policy(const ApplyPolicy* msg) {
  return *msg->export_policy_;
}
const ::apipb::PolicyAssignment&
ApplyPolicy::_Internal::import_policy(const ApplyPolicy* msg) {
  return *msg->import_policy_;
}
ApplyPolicy::ApplyPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.ApplyPolicy)
}
ApplyPolicy::ApplyPolicy(const ApplyPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_in_policy()) {
    in_policy_ = new ::apipb::PolicyAssignment(*from.in_policy_);
  } else {
    in_policy_ = nullptr;
  }
  if (from._internal_has_export_policy()) {
    export_policy_ = new ::apipb::PolicyAssignment(*from.export_policy_);
  } else {
    export_policy_ = nullptr;
  }
  if (from._internal_has_import_policy()) {
    import_policy_ = new ::apipb::PolicyAssignment(*from.import_policy_);
  } else {
    import_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.ApplyPolicy)
}

void ApplyPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplyPolicy_gobgp_2eproto.base);
  ::memset(&in_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&import_policy_) -
      reinterpret_cast<char*>(&in_policy_)) + sizeof(import_policy_));
}

ApplyPolicy::~ApplyPolicy() {
  // @@protoc_insertion_point(destructor:apipb.ApplyPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete in_policy_;
  if (this != internal_default_instance()) delete export_policy_;
  if (this != internal_default_instance()) delete import_policy_;
}

void ApplyPolicy::ArenaDtor(void* object) {
  ApplyPolicy* _this = reinterpret_cast< ApplyPolicy* >(object);
  (void)_this;
}
void ApplyPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPolicy& ApplyPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyPolicy_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ApplyPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.ApplyPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && in_policy_ != nullptr) {
    delete in_policy_;
  }
  in_policy_ = nullptr;
  if (GetArena() == nullptr && export_policy_ != nullptr) {
    delete export_policy_;
  }
  export_policy_ = nullptr;
  if (GetArena() == nullptr && import_policy_ != nullptr) {
    delete import_policy_;
  }
  import_policy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.PolicyAssignment in_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PolicyAssignment export_policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PolicyAssignment import_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.ApplyPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::in_policy(this), target, stream);
  }

  // .apipb.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::export_policy(this), target, stream);
  }

  // .apipb.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::import_policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.ApplyPolicy)
  return target;
}

size_t ApplyPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.ApplyPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_policy_);
  }

  // .apipb.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *export_policy_);
  }

  // .apipb.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *import_policy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.ApplyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.ApplyPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.ApplyPolicy)
    MergeFrom(*source);
  }
}

void ApplyPolicy::MergeFrom(const ApplyPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.ApplyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_in_policy()) {
    _internal_mutable_in_policy()->::apipb::PolicyAssignment::MergeFrom(from._internal_in_policy());
  }
  if (from.has_export_policy()) {
    _internal_mutable_export_policy()->::apipb::PolicyAssignment::MergeFrom(from._internal_export_policy());
  }
  if (from.has_import_policy()) {
    _internal_mutable_import_policy()->::apipb::PolicyAssignment::MergeFrom(from._internal_import_policy());
  }
}

void ApplyPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.ApplyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPolicy::CopyFrom(const ApplyPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.ApplyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPolicy::IsInitialized() const {
  return true;
}

void ApplyPolicy::InternalSwap(ApplyPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyPolicy, import_policy_)
      + sizeof(ApplyPolicy::import_policy_)
      - PROTOBUF_FIELD_OFFSET(ApplyPolicy, in_policy_)>(
          reinterpret_cast<char*>(&in_policy_),
          reinterpret_cast<char*>(&other->in_policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrefixLimit::InitAsDefaultInstance() {
  ::apipb::_PrefixLimit_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class PrefixLimit::_Internal {
 public:
  static const ::apipb::Family& family(const PrefixLimit* msg);
};

const ::apipb::Family&
PrefixLimit::_Internal::family(const PrefixLimit* msg) {
  return *msg->family_;
}
PrefixLimit::PrefixLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PrefixLimit)
}
PrefixLimit::PrefixLimit(const PrefixLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&max_prefixes_, &from.max_prefixes_,
    static_cast<size_t>(reinterpret_cast<char*>(&shutdown_threshold_pct_) -
    reinterpret_cast<char*>(&max_prefixes_)) + sizeof(shutdown_threshold_pct_));
  // @@protoc_insertion_point(copy_constructor:apipb.PrefixLimit)
}

void PrefixLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrefixLimit_gobgp_2eproto.base);
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_threshold_pct_) -
      reinterpret_cast<char*>(&family_)) + sizeof(shutdown_threshold_pct_));
}

PrefixLimit::~PrefixLimit() {
  // @@protoc_insertion_point(destructor:apipb.PrefixLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrefixLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void PrefixLimit::ArenaDtor(void* object) {
  PrefixLimit* _this = reinterpret_cast< PrefixLimit* >(object);
  (void)_this;
}
void PrefixLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrefixLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrefixLimit& PrefixLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrefixLimit_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PrefixLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PrefixLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&max_prefixes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_threshold_pct_) -
      reinterpret_cast<char*>(&max_prefixes_)) + sizeof(shutdown_threshold_pct_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefixLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_prefixes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_prefixes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shutdown_threshold_pct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shutdown_threshold_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefixLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PrefixLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_prefixes(), target);
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shutdown_threshold_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PrefixLimit)
  return target;
}

size_t PrefixLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PrefixLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_prefixes());
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shutdown_threshold_pct());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefixLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefixLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefixLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PrefixLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PrefixLimit)
    MergeFrom(*source);
  }
}

void PrefixLimit::MergeFrom(const PrefixLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.max_prefixes() != 0) {
    _internal_set_max_prefixes(from._internal_max_prefixes());
  }
  if (from.shutdown_threshold_pct() != 0) {
    _internal_set_shutdown_threshold_pct(from._internal_shutdown_threshold_pct());
  }
}

void PrefixLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefixLimit::CopyFrom(const PrefixLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixLimit::IsInitialized() const {
  return true;
}

void PrefixLimit::InternalSwap(PrefixLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrefixLimit, shutdown_threshold_pct_)
      + sizeof(PrefixLimit::shutdown_threshold_pct_)
      - PROTOBUF_FIELD_OFFSET(PrefixLimit, family_)>(
          reinterpret_cast<char*>(&family_),
          reinterpret_cast<char*>(&other->family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefixLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerConf::InitAsDefaultInstance() {
}
class PeerConf::_Internal {
 public:
};

PeerConf::PeerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PeerConf)
}
PeerConf::PeerConf(const PeerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_password(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_address().empty()) {
    neighbor_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neighbor_address(),
      GetArena());
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group(),
      GetArena());
  }
  neighbor_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_interface().empty()) {
    neighbor_interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neighbor_interface(),
      GetArena());
  }
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf().empty()) {
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrf(),
      GetArena());
  }
  ::memcpy(&local_asn_, &from.local_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_software_version_) -
    reinterpret_cast<char*>(&local_asn_)) + sizeof(send_software_version_));
  // @@protoc_insertion_point(copy_constructor:apipb.PeerConf)
}

void PeerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerConf_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_software_version_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(send_software_version_));
}

PeerConf::~PeerConf() {
  // @@protoc_insertion_point(destructor:apipb.PeerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerConf::ArenaDtor(void* object) {
  PeerConf* _this = reinterpret_cast< PeerConf* >(object);
  (void)_this;
}
void PeerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerConf& PeerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerConf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PeerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_interface_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vrf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_software_version_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(send_software_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerConf.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerConf.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_neighbor_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerConf.neighbor_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_asn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          peer_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerConf.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::PeerType>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.RemovePrivate remove_private = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_remove_private(static_cast<::apipb::RemovePrivate>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_interface = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_neighbor_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerConf.neighbor_interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vrf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_vrf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerConf.vrf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 allow_own_asn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          allow_own_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool replace_peer_asn = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          replace_peer_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool admin_down = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          admin_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool send_software_version = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          send_software_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PeerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerConf.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerConf.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_asn(), target);
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_address().data(), static_cast<int>(this->_internal_neighbor_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerConf.neighbor_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_neighbor_address(), target);
  }

  // uint32 peer_asn = 5;
  if (this->peer_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_peer_asn(), target);
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerConf.peer_group");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_peer_group(), target);
  }

  // .apipb.PeerType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // .apipb.RemovePrivate remove_private = 8;
  if (this->remove_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_remove_private(), target);
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_send_community(), target);
  }

  // string neighbor_interface = 11;
  if (this->neighbor_interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_interface().data(), static_cast<int>(this->_internal_neighbor_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerConf.neighbor_interface");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_neighbor_interface(), target);
  }

  // string vrf = 12;
  if (this->vrf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf().data(), static_cast<int>(this->_internal_vrf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerConf.vrf");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_vrf(), target);
  }

  // uint32 allow_own_asn = 13;
  if (this->allow_own_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_allow_own_asn(), target);
  }

  // bool replace_peer_asn = 14;
  if (this->replace_peer_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_replace_peer_asn(), target);
  }

  // bool admin_down = 15;
  if (this->admin_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_admin_down(), target);
  }

  // bool send_software_version = 16;
  if (this->send_software_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_send_software_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PeerConf)
  return target;
}

size_t PeerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PeerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_address());
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  // string neighbor_interface = 11;
  if (this->neighbor_interface().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_interface());
  }

  // string vrf = 12;
  if (this->vrf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf());
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_asn());
  }

  // uint32 peer_asn = 5;
  if (this->peer_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_asn());
  }

  // .apipb.PeerType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .apipb.RemovePrivate remove_private = 8;
  if (this->remove_private() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private());
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  // uint32 allow_own_asn = 13;
  if (this->allow_own_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_allow_own_asn());
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // bool replace_peer_asn = 14;
  if (this->replace_peer_asn() != 0) {
    total_size += 1 + 1;
  }

  // bool admin_down = 15;
  if (this->admin_down() != 0) {
    total_size += 1 + 1;
  }

  // bool send_software_version = 16;
  if (this->send_software_version() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PeerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PeerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PeerConf)
    MergeFrom(*source);
  }
}

void PeerConf::MergeFrom(const PeerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PeerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_password().size() > 0) {
    _internal_set_auth_password(from._internal_auth_password());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.neighbor_address().size() > 0) {
    _internal_set_neighbor_address(from._internal_neighbor_address());
  }
  if (from.peer_group().size() > 0) {
    _internal_set_peer_group(from._internal_peer_group());
  }
  if (from.neighbor_interface().size() > 0) {
    _internal_set_neighbor_interface(from._internal_neighbor_interface());
  }
  if (from.vrf().size() > 0) {
    _internal_set_vrf(from._internal_vrf());
  }
  if (from.local_asn() != 0) {
    _internal_set_local_asn(from._internal_local_asn());
  }
  if (from.peer_asn() != 0) {
    _internal_set_peer_asn(from._internal_peer_asn());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.remove_private() != 0) {
    _internal_set_remove_private(from._internal_remove_private());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
  if (from.allow_own_asn() != 0) {
    _internal_set_allow_own_asn(from._internal_allow_own_asn());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.replace_peer_asn() != 0) {
    _internal_set_replace_peer_asn(from._internal_replace_peer_asn());
  }
  if (from.admin_down() != 0) {
    _internal_set_admin_down(from._internal_admin_down());
  }
  if (from.send_software_version() != 0) {
    _internal_set_send_software_version(from._internal_send_software_version());
  }
}

void PeerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PeerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerConf::CopyFrom(const PeerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PeerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConf::IsInitialized() const {
  return true;
}

void PeerConf::InternalSwap(PeerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_address_.Swap(&other->neighbor_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_interface_.Swap(&other->neighbor_interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vrf_.Swap(&other->vrf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerConf, send_software_version_)
      + sizeof(PeerConf::send_software_version_)
      - PROTOBUF_FIELD_OFFSET(PeerConf, local_asn_)>(
          reinterpret_cast<char*>(&local_asn_),
          reinterpret_cast<char*>(&other->local_asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerGroupConf::InitAsDefaultInstance() {
}
class PeerGroupConf::_Internal {
 public:
};

PeerGroupConf::PeerGroupConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PeerGroupConf)
}
PeerGroupConf::PeerGroupConf(const PeerGroupConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_password(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group_name().empty()) {
    peer_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group_name(),
      GetArena());
  }
  ::memcpy(&local_asn_, &from.local_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_community_) -
    reinterpret_cast<char*>(&local_asn_)) + sizeof(send_community_));
  // @@protoc_insertion_point(copy_constructor:apipb.PeerGroupConf)
}

void PeerGroupConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerGroupConf_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_community_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(send_community_));
}

PeerGroupConf::~PeerGroupConf() {
  // @@protoc_insertion_point(destructor:apipb.PeerGroupConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerGroupConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerGroupConf::ArenaDtor(void* object) {
  PeerGroupConf* _this = reinterpret_cast< PeerGroupConf* >(object);
  (void)_this;
}
void PeerGroupConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerGroupConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerGroupConf& PeerGroupConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerGroupConf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerGroupConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PeerGroupConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_community_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(send_community_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerGroupConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerGroupConf.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerGroupConf.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_asn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_peer_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerGroupConf.peer_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::PeerType>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.RemovePrivate remove_private = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_remove_private(static_cast<::apipb::RemovePrivate>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerGroupConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PeerGroupConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerGroupConf.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerGroupConf.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_asn(), target);
  }

  // uint32 peer_asn = 4;
  if (this->peer_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peer_asn(), target);
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group_name().data(), static_cast<int>(this->_internal_peer_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerGroupConf.peer_group_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_peer_group_name(), target);
  }

  // .apipb.PeerType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .apipb.RemovePrivate remove_private = 7;
  if (this->remove_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_remove_private(), target);
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_send_community(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PeerGroupConf)
  return target;
}

size_t PeerGroupConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PeerGroupConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group_name());
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_asn());
  }

  // uint32 peer_asn = 4;
  if (this->peer_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_asn());
  }

  // .apipb.PeerType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .apipb.RemovePrivate remove_private = 7;
  if (this->remove_private() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private());
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerGroupConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PeerGroupConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerGroupConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerGroupConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PeerGroupConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PeerGroupConf)
    MergeFrom(*source);
  }
}

void PeerGroupConf::MergeFrom(const PeerGroupConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PeerGroupConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_password().size() > 0) {
    _internal_set_auth_password(from._internal_auth_password());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.peer_group_name().size() > 0) {
    _internal_set_peer_group_name(from._internal_peer_group_name());
  }
  if (from.local_asn() != 0) {
    _internal_set_local_asn(from._internal_local_asn());
  }
  if (from.peer_asn() != 0) {
    _internal_set_peer_asn(from._internal_peer_asn());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.remove_private() != 0) {
    _internal_set_remove_private(from._internal_remove_private());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
}

void PeerGroupConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PeerGroupConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerGroupConf::CopyFrom(const PeerGroupConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PeerGroupConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroupConf::IsInitialized() const {
  return true;
}

void PeerGroupConf::InternalSwap(PeerGroupConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_name_.Swap(&other->peer_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerGroupConf, send_community_)
      + sizeof(PeerGroupConf::send_community_)
      - PROTOBUF_FIELD_OFFSET(PeerGroupConf, local_asn_)>(
          reinterpret_cast<char*>(&local_asn_),
          reinterpret_cast<char*>(&other->local_asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroupConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerGroupState::InitAsDefaultInstance() {
}
class PeerGroupState::_Internal {
 public:
};

PeerGroupState::PeerGroupState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PeerGroupState)
}
PeerGroupState::PeerGroupState(const PeerGroupState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_password(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group_name().empty()) {
    peer_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group_name(),
      GetArena());
  }
  ::memcpy(&local_asn_, &from.local_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_prefixes_) -
    reinterpret_cast<char*>(&local_asn_)) + sizeof(total_prefixes_));
  // @@protoc_insertion_point(copy_constructor:apipb.PeerGroupState)
}

void PeerGroupState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerGroupState_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prefixes_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(total_prefixes_));
}

PeerGroupState::~PeerGroupState() {
  // @@protoc_insertion_point(destructor:apipb.PeerGroupState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerGroupState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerGroupState::ArenaDtor(void* object) {
  PeerGroupState* _this = reinterpret_cast< PeerGroupState* >(object);
  (void)_this;
}
void PeerGroupState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerGroupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerGroupState& PeerGroupState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerGroupState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerGroupState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PeerGroupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prefixes_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(total_prefixes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerGroupState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerGroupState.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerGroupState.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_asn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_peer_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerGroupState.peer_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::PeerType>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.RemovePrivate remove_private = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_remove_private(static_cast<::apipb::RemovePrivate>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_paths = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          total_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_prefixes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          total_prefixes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerGroupState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PeerGroupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerGroupState.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerGroupState.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_asn(), target);
  }

  // uint32 peer_asn = 4;
  if (this->peer_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peer_asn(), target);
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group_name().data(), static_cast<int>(this->_internal_peer_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerGroupState.peer_group_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_peer_group_name(), target);
  }

  // .apipb.PeerType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .apipb.RemovePrivate remove_private = 7;
  if (this->remove_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_remove_private(), target);
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_send_community(), target);
  }

  // uint32 total_paths = 10;
  if (this->total_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_total_paths(), target);
  }

  // uint32 total_prefixes = 11;
  if (this->total_prefixes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_total_prefixes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PeerGroupState)
  return target;
}

size_t PeerGroupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PeerGroupState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group_name());
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_asn());
  }

  // uint32 peer_asn = 4;
  if (this->peer_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_asn());
  }

  // .apipb.PeerType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .apipb.RemovePrivate remove_private = 7;
  if (this->remove_private() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private());
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  // uint32 total_paths = 10;
  if (this->total_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_paths());
  }

  // uint32 total_prefixes = 11;
  if (this->total_prefixes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_prefixes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerGroupState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PeerGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerGroupState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerGroupState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PeerGroupState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PeerGroupState)
    MergeFrom(*source);
  }
}

void PeerGroupState::MergeFrom(const PeerGroupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PeerGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_password().size() > 0) {
    _internal_set_auth_password(from._internal_auth_password());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.peer_group_name().size() > 0) {
    _internal_set_peer_group_name(from._internal_peer_group_name());
  }
  if (from.local_asn() != 0) {
    _internal_set_local_asn(from._internal_local_asn());
  }
  if (from.peer_asn() != 0) {
    _internal_set_peer_asn(from._internal_peer_asn());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.remove_private() != 0) {
    _internal_set_remove_private(from._internal_remove_private());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
  if (from.total_paths() != 0) {
    _internal_set_total_paths(from._internal_total_paths());
  }
  if (from.total_prefixes() != 0) {
    _internal_set_total_prefixes(from._internal_total_prefixes());
  }
}

void PeerGroupState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PeerGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerGroupState::CopyFrom(const PeerGroupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PeerGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroupState::IsInitialized() const {
  return true;
}

void PeerGroupState::InternalSwap(PeerGroupState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_name_.Swap(&other->peer_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerGroupState, total_prefixes_)
      + sizeof(PeerGroupState::total_prefixes_)
      - PROTOBUF_FIELD_OFFSET(PeerGroupState, local_asn_)>(
          reinterpret_cast<char*>(&local_asn_),
          reinterpret_cast<char*>(&other->local_asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroupState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TtlSecurity::InitAsDefaultInstance() {
}
class TtlSecurity::_Internal {
 public:
};

TtlSecurity::TtlSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TtlSecurity)
}
TtlSecurity::TtlSecurity(const TtlSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_min_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(ttl_min_));
  // @@protoc_insertion_point(copy_constructor:apipb.TtlSecurity)
}

void TtlSecurity::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_min_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(ttl_min_));
}

TtlSecurity::~TtlSecurity() {
  // @@protoc_insertion_point(destructor:apipb.TtlSecurity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TtlSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TtlSecurity::ArenaDtor(void* object) {
  TtlSecurity* _this = reinterpret_cast< TtlSecurity* >(object);
  (void)_this;
}
void TtlSecurity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TtlSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TtlSecurity& TtlSecurity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TtlSecurity_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TtlSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TtlSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_min_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(ttl_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtlSecurity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ttl_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ttl_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TtlSecurity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TtlSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 ttl_min = 2;
  if (this->ttl_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ttl_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TtlSecurity)
  return target;
}

size_t TtlSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TtlSecurity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ttl_min = 2;
  if (this->ttl_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ttl_min());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TtlSecurity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TtlSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  const TtlSecurity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TtlSecurity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TtlSecurity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TtlSecurity)
    MergeFrom(*source);
  }
}

void TtlSecurity::MergeFrom(const TtlSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TtlSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.ttl_min() != 0) {
    _internal_set_ttl_min(from._internal_ttl_min());
  }
}

void TtlSecurity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TtlSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtlSecurity::CopyFrom(const TtlSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TtlSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtlSecurity::IsInitialized() const {
  return true;
}

void TtlSecurity::InternalSwap(TtlSecurity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtlSecurity, ttl_min_)
      + sizeof(TtlSecurity::ttl_min_)
      - PROTOBUF_FIELD_OFFSET(TtlSecurity, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtlSecurity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EbgpMultihop::InitAsDefaultInstance() {
}
class EbgpMultihop::_Internal {
 public:
};

EbgpMultihop::EbgpMultihop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EbgpMultihop)
}
EbgpMultihop::EbgpMultihop(const EbgpMultihop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&multihop_ttl_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  // @@protoc_insertion_point(copy_constructor:apipb.EbgpMultihop)
}

void EbgpMultihop::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multihop_ttl_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
}

EbgpMultihop::~EbgpMultihop() {
  // @@protoc_insertion_point(destructor:apipb.EbgpMultihop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EbgpMultihop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EbgpMultihop::ArenaDtor(void* object) {
  EbgpMultihop* _this = reinterpret_cast< EbgpMultihop* >(object);
  (void)_this;
}
void EbgpMultihop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EbgpMultihop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbgpMultihop& EbgpMultihop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EbgpMultihop_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EbgpMultihop::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EbgpMultihop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multihop_ttl_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EbgpMultihop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 multihop_ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multihop_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EbgpMultihop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EbgpMultihop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_multihop_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EbgpMultihop)
  return target;
}

size_t EbgpMultihop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EbgpMultihop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_multihop_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbgpMultihop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EbgpMultihop)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpMultihop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EbgpMultihop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EbgpMultihop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EbgpMultihop)
    MergeFrom(*source);
  }
}

void EbgpMultihop::MergeFrom(const EbgpMultihop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EbgpMultihop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.multihop_ttl() != 0) {
    _internal_set_multihop_ttl(from._internal_multihop_ttl());
  }
}

void EbgpMultihop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EbgpMultihop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpMultihop::CopyFrom(const EbgpMultihop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EbgpMultihop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpMultihop::IsInitialized() const {
  return true;
}

void EbgpMultihop::InternalSwap(EbgpMultihop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EbgpMultihop, multihop_ttl_)
      + sizeof(EbgpMultihop::multihop_ttl_)
      - PROTOBUF_FIELD_OFFSET(EbgpMultihop, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EbgpMultihop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteReflector::InitAsDefaultInstance() {
}
class RouteReflector::_Internal {
 public:
};

RouteReflector::RouteReflector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteReflector)
}
RouteReflector::RouteReflector(const RouteReflector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_reflector_cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route_reflector_cluster_id().empty()) {
    route_reflector_cluster_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_route_reflector_cluster_id(),
      GetArena());
  }
  route_reflector_client_ = from.route_reflector_client_;
  // @@protoc_insertion_point(copy_constructor:apipb.RouteReflector)
}

void RouteReflector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteReflector_gobgp_2eproto.base);
  route_reflector_cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_reflector_client_ = false;
}

RouteReflector::~RouteReflector() {
  // @@protoc_insertion_point(destructor:apipb.RouteReflector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteReflector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  route_reflector_cluster_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteReflector::ArenaDtor(void* object) {
  RouteReflector* _this = reinterpret_cast< RouteReflector* >(object);
  (void)_this;
}
void RouteReflector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteReflector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteReflector& RouteReflector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteReflector_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteReflector::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteReflector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_reflector_cluster_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  route_reflector_client_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteReflector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool route_reflector_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_reflector_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string route_reflector_cluster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_route_reflector_cluster_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.RouteReflector.route_reflector_cluster_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteReflector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteReflector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_route_reflector_client(), target);
  }

  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_reflector_cluster_id().data(), static_cast<int>(this->_internal_route_reflector_cluster_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.RouteReflector.route_reflector_cluster_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route_reflector_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteReflector)
  return target;
}

size_t RouteReflector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteReflector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_reflector_cluster_id());
  }

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteReflector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteReflector)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteReflector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteReflector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteReflector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteReflector)
    MergeFrom(*source);
  }
}

void RouteReflector::MergeFrom(const RouteReflector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteReflector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_reflector_cluster_id().size() > 0) {
    _internal_set_route_reflector_cluster_id(from._internal_route_reflector_cluster_id());
  }
  if (from.route_reflector_client() != 0) {
    _internal_set_route_reflector_client(from._internal_route_reflector_client());
  }
}

void RouteReflector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteReflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteReflector::CopyFrom(const RouteReflector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteReflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteReflector::IsInitialized() const {
  return true;
}

void RouteReflector::InternalSwap(RouteReflector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  route_reflector_cluster_id_.Swap(&other->route_reflector_cluster_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(route_reflector_client_, other->route_reflector_client_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteReflector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerState::InitAsDefaultInstance() {
  ::apipb::_PeerState_default_instance_._instance.get_mutable()->messages_ = const_cast< ::apipb::Messages*>(
      ::apipb::Messages::internal_default_instance());
  ::apipb::_PeerState_default_instance_._instance.get_mutable()->queues_ = const_cast< ::apipb::Queues*>(
      ::apipb::Queues::internal_default_instance());
}
class PeerState::_Internal {
 public:
  static const ::apipb::Messages& messages(const PeerState* msg);
  static const ::apipb::Queues& queues(const PeerState* msg);
};

const ::apipb::Messages&
PeerState::_Internal::messages(const PeerState* msg) {
  return *msg->messages_;
}
const ::apipb::Queues&
PeerState::_Internal::queues(const PeerState* msg) {
  return *msg->queues_;
}
void PeerState::clear_remote_cap() {
  remote_cap_.Clear();
}
void PeerState::clear_local_cap() {
  local_cap_.Clear();
}
PeerState::PeerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remote_cap_(arena),
  local_cap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PeerState)
}
PeerState::PeerState(const PeerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remote_cap_(from.remote_cap_),
      local_cap_(from.local_cap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_password(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_address().empty()) {
    neighbor_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neighbor_address(),
      GetArena());
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_group(),
      GetArena());
  }
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_router_id().empty()) {
    router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_router_id(),
      GetArena());
  }
  if (from._internal_has_messages()) {
    messages_ = new ::apipb::Messages(*from.messages_);
  } else {
    messages_ = nullptr;
  }
  if (from._internal_has_queues()) {
    queues_ = new ::apipb::Queues(*from.queues_);
  } else {
    queues_ = nullptr;
  }
  ::memcpy(&local_asn_, &from.local_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&flops_) -
    reinterpret_cast<char*>(&local_asn_)) + sizeof(flops_));
  // @@protoc_insertion_point(copy_constructor:apipb.PeerState)
}

void PeerState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerState_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flops_) -
      reinterpret_cast<char*>(&messages_)) + sizeof(flops_));
}

PeerState::~PeerState() {
  // @@protoc_insertion_point(destructor:apipb.PeerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete messages_;
  if (this != internal_default_instance()) delete queues_;
}

void PeerState::ArenaDtor(void* object) {
  PeerState* _this = reinterpret_cast< PeerState* >(object);
  (void)_this;
}
void PeerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerState& PeerState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PeerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_cap_.Clear();
  local_cap_.Clear();
  auth_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && messages_ != nullptr) {
    delete messages_;
  }
  messages_ = nullptr;
  if (GetArena() == nullptr && queues_ != nullptr) {
    delete queues_;
  }
  queues_ = nullptr;
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flops_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(flops_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerState.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerState.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Messages messages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_messages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_neighbor_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerState.neighbor_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_asn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          peer_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerState.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerType type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::PeerType>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.Queues queues = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_queues(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RemovePrivate remove_private = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_remove_private(static_cast<::apipb::RemovePrivate>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PeerState.SessionState session_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_state(static_cast<::apipb::PeerState_SessionState>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.PeerState.AdminState admin_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_state(static_cast<::apipb::PeerState_AdminState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 out_q = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          out_q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flops = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          flops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any remote_cap = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_remote_cap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any local_cap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_local_cap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // string router_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PeerState.router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PeerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerState.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerState.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_asn(), target);
  }

  // .apipb.Messages messages = 4;
  if (this->has_messages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::messages(this), target, stream);
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_address().data(), static_cast<int>(this->_internal_neighbor_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerState.neighbor_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_neighbor_address(), target);
  }

  // uint32 peer_asn = 6;
  if (this->peer_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_peer_asn(), target);
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerState.peer_group");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_peer_group(), target);
  }

  // .apipb.PeerType type = 8;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_type(), target);
  }

  // .apipb.Queues queues = 9;
  if (this->has_queues()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::queues(this), target, stream);
  }

  // .apipb.RemovePrivate remove_private = 10;
  if (this->remove_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_remove_private(), target);
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_send_community(), target);
  }

  // .apipb.PeerState.SessionState session_state = 13;
  if (this->session_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_session_state(), target);
  }

  // .apipb.PeerState.AdminState admin_state = 15;
  if (this->admin_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_admin_state(), target);
  }

  // uint32 out_q = 16;
  if (this->out_q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_out_q(), target);
  }

  // uint32 flops = 17;
  if (this->flops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_flops(), target);
  }

  // repeated .google.protobuf.Any remote_cap = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remote_cap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_remote_cap(i), target, stream);
  }

  // repeated .google.protobuf.Any local_cap = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_local_cap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_local_cap(i), target, stream);
  }

  // string router_id = 20;
  if (this->router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_router_id().data(), static_cast<int>(this->_internal_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PeerState.router_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_router_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PeerState)
  return target;
}

size_t PeerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PeerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any remote_cap = 18;
  total_size += 2UL * this->_internal_remote_cap_size();
  for (const auto& msg : this->remote_cap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any local_cap = 19;
  total_size += 2UL * this->_internal_local_cap_size();
  for (const auto& msg : this->local_cap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_address());
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  // string router_id = 20;
  if (this->router_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_router_id());
  }

  // .apipb.Messages messages = 4;
  if (this->has_messages()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messages_);
  }

  // .apipb.Queues queues = 9;
  if (this->has_queues()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *queues_);
  }

  // uint32 local_asn = 3;
  if (this->local_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_asn());
  }

  // uint32 peer_asn = 6;
  if (this->peer_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_asn());
  }

  // .apipb.PeerType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .apipb.RemovePrivate remove_private = 10;
  if (this->remove_private() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private());
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  // .apipb.PeerState.SessionState session_state = 13;
  if (this->session_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_state());
  }

  // .apipb.PeerState.AdminState admin_state = 15;
  if (this->admin_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_admin_state());
  }

  // uint32 out_q = 16;
  if (this->out_q() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_q());
  }

  // uint32 flops = 17;
  if (this->flops() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flops());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PeerState)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PeerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PeerState)
    MergeFrom(*source);
  }
}

void PeerState::MergeFrom(const PeerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PeerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_cap_.MergeFrom(from.remote_cap_);
  local_cap_.MergeFrom(from.local_cap_);
  if (from.auth_password().size() > 0) {
    _internal_set_auth_password(from._internal_auth_password());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.neighbor_address().size() > 0) {
    _internal_set_neighbor_address(from._internal_neighbor_address());
  }
  if (from.peer_group().size() > 0) {
    _internal_set_peer_group(from._internal_peer_group());
  }
  if (from.router_id().size() > 0) {
    _internal_set_router_id(from._internal_router_id());
  }
  if (from.has_messages()) {
    _internal_mutable_messages()->::apipb::Messages::MergeFrom(from._internal_messages());
  }
  if (from.has_queues()) {
    _internal_mutable_queues()->::apipb::Queues::MergeFrom(from._internal_queues());
  }
  if (from.local_asn() != 0) {
    _internal_set_local_asn(from._internal_local_asn());
  }
  if (from.peer_asn() != 0) {
    _internal_set_peer_asn(from._internal_peer_asn());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.remove_private() != 0) {
    _internal_set_remove_private(from._internal_remove_private());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
  if (from.session_state() != 0) {
    _internal_set_session_state(from._internal_session_state());
  }
  if (from.admin_state() != 0) {
    _internal_set_admin_state(from._internal_admin_state());
  }
  if (from.out_q() != 0) {
    _internal_set_out_q(from._internal_out_q());
  }
  if (from.flops() != 0) {
    _internal_set_flops(from._internal_flops());
  }
}

void PeerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PeerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerState::CopyFrom(const PeerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PeerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerState::IsInitialized() const {
  return true;
}

void PeerState::InternalSwap(PeerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remote_cap_.InternalSwap(&other->remote_cap_);
  local_cap_.InternalSwap(&other->local_cap_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neighbor_address_.Swap(&other->neighbor_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  router_id_.Swap(&other->router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerState, flops_)
      + sizeof(PeerState::flops_)
      - PROTOBUF_FIELD_OFFSET(PeerState, messages_)>(
          reinterpret_cast<char*>(&messages_),
          reinterpret_cast<char*>(&other->messages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Messages::InitAsDefaultInstance() {
  ::apipb::_Messages_default_instance_._instance.get_mutable()->received_ = const_cast< ::apipb::Message*>(
      ::apipb::Message::internal_default_instance());
  ::apipb::_Messages_default_instance_._instance.get_mutable()->sent_ = const_cast< ::apipb::Message*>(
      ::apipb::Message::internal_default_instance());
}
class Messages::_Internal {
 public:
  static const ::apipb::Message& received(const Messages* msg);
  static const ::apipb::Message& sent(const Messages* msg);
};

const ::apipb::Message&
Messages::_Internal::received(const Messages* msg) {
  return *msg->received_;
}
const ::apipb::Message&
Messages::_Internal::sent(const Messages* msg) {
  return *msg->sent_;
}
Messages::Messages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Messages)
}
Messages::Messages(const Messages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_received()) {
    received_ = new ::apipb::Message(*from.received_);
  } else {
    received_ = nullptr;
  }
  if (from._internal_has_sent()) {
    sent_ = new ::apipb::Message(*from.sent_);
  } else {
    sent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Messages)
}

void Messages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Messages_gobgp_2eproto.base);
  ::memset(&received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_) -
      reinterpret_cast<char*>(&received_)) + sizeof(sent_));
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:apipb.Messages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Messages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete received_;
  if (this != internal_default_instance()) delete sent_;
}

void Messages::ArenaDtor(void* object) {
  Messages* _this = reinterpret_cast< Messages* >(object);
  (void)_this;
}
void Messages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Messages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Messages& Messages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Messages_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && received_ != nullptr) {
    delete received_;
  }
  received_ = nullptr;
  if (GetArena() == nullptr && sent_ != nullptr) {
    delete sent_;
  }
  sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Messages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Message received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Message sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Messages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Message received = 1;
  if (this->has_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::received(this), target, stream);
  }

  // .apipb.Message sent = 2;
  if (this->has_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Messages)
  return target;
}

size_t Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Messages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Message received = 1;
  if (this->has_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *received_);
  }

  // .apipb.Message sent = 2;
  if (this->has_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Messages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  const Messages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Messages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Messages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Messages)
    MergeFrom(*source);
  }
}

void Messages::MergeFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_received()) {
    _internal_mutable_received()->::apipb::Message::MergeFrom(from._internal_received());
  }
  if (from.has_sent()) {
    _internal_mutable_sent()->::apipb::Message::MergeFrom(from._internal_sent());
  }
}

void Messages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Messages::CopyFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {
  return true;
}

void Messages::InternalSwap(Messages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Messages, sent_)
      + sizeof(Messages::sent_)
      - PROTOBUF_FIELD_OFFSET(Messages, received_)>(
          reinterpret_cast<char*>(&received_),
          reinterpret_cast<char*>(&other->received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Messages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&notification_, &from.notification_,
    static_cast<size_t>(reinterpret_cast<char*>(&withdraw_prefix_) -
    reinterpret_cast<char*>(&notification_)) + sizeof(withdraw_prefix_));
  // @@protoc_insertion_point(copy_constructor:apipb.Message)
}

void Message::SharedCtor() {
  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&withdraw_prefix_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(withdraw_prefix_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:apipb.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&withdraw_prefix_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(withdraw_prefix_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 notification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keepalive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keepalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 refresh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 discarded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 withdraw_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          withdraw_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 withdraw_prefix = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          withdraw_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 notification = 1;
  if (this->notification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_notification(), target);
  }

  // uint64 update = 2;
  if (this->update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_update(), target);
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_open(), target);
  }

  // uint64 keepalive = 4;
  if (this->keepalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_keepalive(), target);
  }

  // uint64 refresh = 5;
  if (this->refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_refresh(), target);
  }

  // uint64 discarded = 6;
  if (this->discarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_discarded(), target);
  }

  // uint64 total = 7;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_total(), target);
  }

  // uint64 withdraw_update = 8;
  if (this->withdraw_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_withdraw_update(), target);
  }

  // uint64 withdraw_prefix = 9;
  if (this->withdraw_prefix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_withdraw_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 notification = 1;
  if (this->notification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_notification());
  }

  // uint64 update = 2;
  if (this->update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_update());
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 keepalive = 4;
  if (this->keepalive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keepalive());
  }

  // uint64 refresh = 5;
  if (this->refresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_refresh());
  }

  // uint64 discarded = 6;
  if (this->discarded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_discarded());
  }

  // uint64 total = 7;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total());
  }

  // uint64 withdraw_update = 8;
  if (this->withdraw_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_withdraw_update());
  }

  // uint64 withdraw_prefix = 9;
  if (this->withdraw_prefix() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_withdraw_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notification() != 0) {
    _internal_set_notification(from._internal_notification());
  }
  if (from.update() != 0) {
    _internal_set_update(from._internal_update());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.keepalive() != 0) {
    _internal_set_keepalive(from._internal_keepalive());
  }
  if (from.refresh() != 0) {
    _internal_set_refresh(from._internal_refresh());
  }
  if (from.discarded() != 0) {
    _internal_set_discarded(from._internal_discarded());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.withdraw_update() != 0) {
    _internal_set_withdraw_update(from._internal_withdraw_update());
  }
  if (from.withdraw_prefix() != 0) {
    _internal_set_withdraw_prefix(from._internal_withdraw_prefix());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, withdraw_prefix_)
      + sizeof(Message::withdraw_prefix_)
      - PROTOBUF_FIELD_OFFSET(Message, notification_)>(
          reinterpret_cast<char*>(&notification_),
          reinterpret_cast<char*>(&other->notification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Queues::InitAsDefaultInstance() {
}
class Queues::_Internal {
 public:
};

Queues::Queues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Queues)
}
Queues::Queues(const Queues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&input_, &from.input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&input_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:apipb.Queues)
}

void Queues::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

Queues::~Queues() {
  // @@protoc_insertion_point(destructor:apipb.Queues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Queues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Queues::ArenaDtor(void* object) {
  Queues* _this = reinterpret_cast< Queues* >(object);
  (void)_this;
}
void Queues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Queues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Queues& Queues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Queues_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Queues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Queues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Queues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Queues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_input(), target);
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Queues)
  return target;
}

size_t Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Queues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input());
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Queues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Queues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Queues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Queues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Queues)
    MergeFrom(*source);
  }
}

void Queues::MergeFrom(const Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input() != 0) {
    _internal_set_input(from._internal_input());
  }
  if (from.output() != 0) {
    _internal_set_output(from._internal_output());
  }
}

void Queues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queues::CopyFrom(const Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queues::IsInitialized() const {
  return true;
}

void Queues::InternalSwap(Queues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Queues, output_)
      + sizeof(Queues::output_)
      - PROTOBUF_FIELD_OFFSET(Queues, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Queues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timers::InitAsDefaultInstance() {
  ::apipb::_Timers_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::TimersConfig*>(
      ::apipb::TimersConfig::internal_default_instance());
  ::apipb::_Timers_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::TimersState*>(
      ::apipb::TimersState::internal_default_instance());
}
class Timers::_Internal {
 public:
  static const ::apipb::TimersConfig& config(const Timers* msg);
  static const ::apipb::TimersState& state(const Timers* msg);
};

const ::apipb::TimersConfig&
Timers::_Internal::config(const Timers* msg) {
  return *msg->config_;
}
const ::apipb::TimersState&
Timers::_Internal::state(const Timers* msg) {
  return *msg->state_;
}
Timers::Timers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Timers)
}
Timers::Timers(const Timers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::TimersConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::TimersState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Timers)
}

void Timers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Timers_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Timers::~Timers() {
  // @@protoc_insertion_point(destructor:apipb.Timers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Timers::ArenaDtor(void* object) {
  Timers* _this = reinterpret_cast< Timers* >(object);
  (void)_this;
}
void Timers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timers& Timers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timers_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Timers::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Timers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.TimersConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.TimersState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Timers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.TimersConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.TimersState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Timers)
  return target;
}

size_t Timers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Timers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.TimersConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.TimersState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Timers)
  GOOGLE_DCHECK_NE(&from, this);
  const Timers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Timers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Timers)
    MergeFrom(*source);
  }
}

void Timers::MergeFrom(const Timers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Timers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::TimersConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::TimersState::MergeFrom(from._internal_state());
  }
}

void Timers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Timers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timers::CopyFrom(const Timers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Timers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timers::IsInitialized() const {
  return true;
}

void Timers::InternalSwap(Timers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timers, state_)
      + sizeof(Timers::state_)
      - PROTOBUF_FIELD_OFFSET(Timers, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimersConfig::InitAsDefaultInstance() {
}
class TimersConfig::_Internal {
 public:
};

TimersConfig::TimersConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TimersConfig)
}
TimersConfig::TimersConfig(const TimersConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&connect_retry_, &from.connect_retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&idle_hold_time_after_reset_) -
    reinterpret_cast<char*>(&connect_retry_)) + sizeof(idle_hold_time_after_reset_));
  // @@protoc_insertion_point(copy_constructor:apipb.TimersConfig)
}

void TimersConfig::SharedCtor() {
  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idle_hold_time_after_reset_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(idle_hold_time_after_reset_));
}

TimersConfig::~TimersConfig() {
  // @@protoc_insertion_point(destructor:apipb.TimersConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimersConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimersConfig::ArenaDtor(void* object) {
  TimersConfig* _this = reinterpret_cast< TimersConfig* >(object);
  (void)_this;
}
void TimersConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimersConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimersConfig& TimersConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimersConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TimersConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TimersConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idle_hold_time_after_reset_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(idle_hold_time_after_reset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimersConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 connect_retry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keepalive_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keepalive_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 minimum_advertisement_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minimum_advertisement_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idle_hold_time_after_reset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idle_hold_time_after_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimersConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TimersConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_connect_retry(), target);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hold_time(), target);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_keepalive_interval(), target);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_minimum_advertisement_interval(), target);
  }

  // uint64 idle_hold_time_after_reset = 5;
  if (this->idle_hold_time_after_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_idle_hold_time_after_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TimersConfig)
  return target;
}

size_t TimersConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TimersConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_connect_retry());
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hold_time());
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keepalive_interval());
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_minimum_advertisement_interval());
  }

  // uint64 idle_hold_time_after_reset = 5;
  if (this->idle_hold_time_after_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idle_hold_time_after_reset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimersConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TimersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimersConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimersConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TimersConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TimersConfig)
    MergeFrom(*source);
  }
}

void TimersConfig::MergeFrom(const TimersConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TimersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect_retry() != 0) {
    _internal_set_connect_retry(from._internal_connect_retry());
  }
  if (from.hold_time() != 0) {
    _internal_set_hold_time(from._internal_hold_time());
  }
  if (from.keepalive_interval() != 0) {
    _internal_set_keepalive_interval(from._internal_keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    _internal_set_minimum_advertisement_interval(from._internal_minimum_advertisement_interval());
  }
  if (from.idle_hold_time_after_reset() != 0) {
    _internal_set_idle_hold_time_after_reset(from._internal_idle_hold_time_after_reset());
  }
}

void TimersConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TimersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersConfig::CopyFrom(const TimersConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TimersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersConfig::IsInitialized() const {
  return true;
}

void TimersConfig::InternalSwap(TimersConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimersConfig, idle_hold_time_after_reset_)
      + sizeof(TimersConfig::idle_hold_time_after_reset_)
      - PROTOBUF_FIELD_OFFSET(TimersConfig, connect_retry_)>(
          reinterpret_cast<char*>(&connect_retry_),
          reinterpret_cast<char*>(&other->connect_retry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimersConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimersState::InitAsDefaultInstance() {
  ::apipb::_TimersState_default_instance_._instance.get_mutable()->uptime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::apipb::_TimersState_default_instance_._instance.get_mutable()->downtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimersState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& uptime(const TimersState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& downtime(const TimersState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimersState::_Internal::uptime(const TimersState* msg) {
  return *msg->uptime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimersState::_Internal::downtime(const TimersState* msg) {
  return *msg->downtime_;
}
void TimersState::clear_uptime() {
  if (GetArena() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
}
void TimersState::clear_downtime() {
  if (GetArena() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
}
TimersState::TimersState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.TimersState)
}
TimersState::TimersState(const TimersState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uptime()) {
    uptime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.uptime_);
  } else {
    uptime_ = nullptr;
  }
  if (from._internal_has_downtime()) {
    downtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.downtime_);
  } else {
    downtime_ = nullptr;
  }
  ::memcpy(&connect_retry_, &from.connect_retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&negotiated_hold_time_) -
    reinterpret_cast<char*>(&connect_retry_)) + sizeof(negotiated_hold_time_));
  // @@protoc_insertion_point(copy_constructor:apipb.TimersState)
}

void TimersState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimersState_gobgp_2eproto.base);
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negotiated_hold_time_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(negotiated_hold_time_));
}

TimersState::~TimersState() {
  // @@protoc_insertion_point(destructor:apipb.TimersState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimersState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uptime_;
  if (this != internal_default_instance()) delete downtime_;
}

void TimersState::ArenaDtor(void* object) {
  TimersState* _this = reinterpret_cast< TimersState* >(object);
  (void)_this;
}
void TimersState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimersState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimersState& TimersState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimersState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TimersState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.TimersState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
  if (GetArena() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negotiated_hold_time_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(negotiated_hold_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimersState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 connect_retry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keepalive_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keepalive_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 minimum_advertisement_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minimum_advertisement_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 negotiated_hold_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          negotiated_hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp uptime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp downtime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_downtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimersState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.TimersState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_connect_retry(), target);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hold_time(), target);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_keepalive_interval(), target);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_minimum_advertisement_interval(), target);
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_negotiated_hold_time(), target);
  }

  // .google.protobuf.Timestamp uptime = 6;
  if (this->has_uptime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::uptime(this), target, stream);
  }

  // .google.protobuf.Timestamp downtime = 7;
  if (this->has_downtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::downtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.TimersState)
  return target;
}

size_t TimersState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.TimersState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 6;
  if (this->has_uptime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // .google.protobuf.Timestamp downtime = 7;
  if (this->has_downtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *downtime_);
  }

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_connect_retry());
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hold_time());
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keepalive_interval());
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_minimum_advertisement_interval());
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_negotiated_hold_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimersState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.TimersState)
  GOOGLE_DCHECK_NE(&from, this);
  const TimersState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimersState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.TimersState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.TimersState)
    MergeFrom(*source);
  }
}

void TimersState::MergeFrom(const TimersState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.TimersState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uptime()) {
    _internal_mutable_uptime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_uptime());
  }
  if (from.has_downtime()) {
    _internal_mutable_downtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_downtime());
  }
  if (from.connect_retry() != 0) {
    _internal_set_connect_retry(from._internal_connect_retry());
  }
  if (from.hold_time() != 0) {
    _internal_set_hold_time(from._internal_hold_time());
  }
  if (from.keepalive_interval() != 0) {
    _internal_set_keepalive_interval(from._internal_keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    _internal_set_minimum_advertisement_interval(from._internal_minimum_advertisement_interval());
  }
  if (from.negotiated_hold_time() != 0) {
    _internal_set_negotiated_hold_time(from._internal_negotiated_hold_time());
  }
}

void TimersState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.TimersState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersState::CopyFrom(const TimersState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.TimersState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersState::IsInitialized() const {
  return true;
}

void TimersState::InternalSwap(TimersState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimersState, negotiated_hold_time_)
      + sizeof(TimersState::negotiated_hold_time_)
      - PROTOBUF_FIELD_OFFSET(TimersState, uptime_)>(
          reinterpret_cast<char*>(&uptime_),
          reinterpret_cast<char*>(&other->uptime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimersState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transport::InitAsDefaultInstance() {
}
class Transport::_Internal {
 public:
};

Transport::Transport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Transport)
}
Transport::Transport(const Transport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_address().empty()) {
    local_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_address(),
      GetArena());
  }
  remote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_address().empty()) {
    remote_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_address(),
      GetArena());
  }
  bind_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bind_interface().empty()) {
    bind_interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bind_interface(),
      GetArena());
  }
  ::memcpy(&local_port_, &from.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_mss_) -
    reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  // @@protoc_insertion_point(copy_constructor:apipb.Transport)
}

void Transport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transport_gobgp_2eproto.base);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_mss_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
}

Transport::~Transport() {
  // @@protoc_insertion_point(destructor:apipb.Transport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  local_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transport::ArenaDtor(void* object) {
  Transport* _this = reinterpret_cast< Transport* >(object);
  (void)_this;
}
void Transport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transport& Transport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transport_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Transport::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Transport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bind_interface_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_mss_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string local_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_local_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Transport.local_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mtu_discovery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtu_discovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool passive_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          passive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_remote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Transport.remote_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcp_mss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tcp_mss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bind_interface = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bind_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Transport.bind_interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Transport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_address = 1;
  if (this->local_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_address().data(), static_cast<int>(this->_internal_local_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Transport.local_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_address(), target);
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_port(), target);
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_mtu_discovery(), target);
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_passive_mode(), target);
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_address().data(), static_cast<int>(this->_internal_remote_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Transport.remote_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_remote_address(), target);
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remote_port(), target);
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tcp_mss(), target);
  }

  // string bind_interface = 8;
  if (this->bind_interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_interface().data(), static_cast<int>(this->_internal_bind_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Transport.bind_interface");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bind_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Transport)
  return target;
}

size_t Transport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Transport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_address = 1;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_address());
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_address());
  }

  // string bind_interface = 8;
  if (this->bind_interface().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_interface());
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_port());
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    total_size += 1 + 1;
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_port());
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcp_mss());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Transport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Transport)
    MergeFrom(*source);
  }
}

void Transport::MergeFrom(const Transport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_address().size() > 0) {
    _internal_set_local_address(from._internal_local_address());
  }
  if (from.remote_address().size() > 0) {
    _internal_set_remote_address(from._internal_remote_address());
  }
  if (from.bind_interface().size() > 0) {
    _internal_set_bind_interface(from._internal_bind_interface());
  }
  if (from.local_port() != 0) {
    _internal_set_local_port(from._internal_local_port());
  }
  if (from.mtu_discovery() != 0) {
    _internal_set_mtu_discovery(from._internal_mtu_discovery());
  }
  if (from.passive_mode() != 0) {
    _internal_set_passive_mode(from._internal_passive_mode());
  }
  if (from.remote_port() != 0) {
    _internal_set_remote_port(from._internal_remote_port());
  }
  if (from.tcp_mss() != 0) {
    _internal_set_tcp_mss(from._internal_tcp_mss());
  }
}

void Transport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport::CopyFrom(const Transport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport::IsInitialized() const {
  return true;
}

void Transport::InternalSwap(Transport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  local_address_.Swap(&other->local_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_address_.Swap(&other->remote_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bind_interface_.Swap(&other->bind_interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transport, tcp_mss_)
      + sizeof(Transport::tcp_mss_)
      - PROTOBUF_FIELD_OFFSET(Transport, local_port_)>(
          reinterpret_cast<char*>(&local_port_),
          reinterpret_cast<char*>(&other->local_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteServer::InitAsDefaultInstance() {
}
class RouteServer::_Internal {
 public:
};

RouteServer::RouteServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteServer)
}
RouteServer::RouteServer(const RouteServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&route_server_client_, &from.route_server_client_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_route_) -
    reinterpret_cast<char*>(&route_server_client_)) + sizeof(secondary_route_));
  // @@protoc_insertion_point(copy_constructor:apipb.RouteServer)
}

void RouteServer::SharedCtor() {
  ::memset(&route_server_client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_route_) -
      reinterpret_cast<char*>(&route_server_client_)) + sizeof(secondary_route_));
}

RouteServer::~RouteServer() {
  // @@protoc_insertion_point(destructor:apipb.RouteServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteServer::ArenaDtor(void* object) {
  RouteServer* _this = reinterpret_cast< RouteServer* >(object);
  (void)_this;
}
void RouteServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteServer& RouteServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteServer_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteServer::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&route_server_client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_route_) -
      reinterpret_cast<char*>(&route_server_client_)) + sizeof(secondary_route_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool route_server_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_server_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool secondary_route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          secondary_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_route_server_client(), target);
  }

  // bool secondary_route = 2;
  if (this->secondary_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_secondary_route(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteServer)
  return target;
}

size_t RouteServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    total_size += 1 + 1;
  }

  // bool secondary_route = 2;
  if (this->secondary_route() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteServer)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteServer)
    MergeFrom(*source);
  }
}

void RouteServer::MergeFrom(const RouteServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_server_client() != 0) {
    _internal_set_route_server_client(from._internal_route_server_client());
  }
  if (from.secondary_route() != 0) {
    _internal_set_secondary_route(from._internal_secondary_route());
  }
}

void RouteServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteServer::CopyFrom(const RouteServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteServer::IsInitialized() const {
  return true;
}

void RouteServer::InternalSwap(RouteServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteServer, secondary_route_)
      + sizeof(RouteServer::secondary_route_)
      - PROTOBUF_FIELD_OFFSET(RouteServer, route_server_client_)>(
          reinterpret_cast<char*>(&route_server_client_),
          reinterpret_cast<char*>(&other->route_server_client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GracefulRestart::InitAsDefaultInstance() {
}
class GracefulRestart::_Internal {
 public:
};

GracefulRestart::GracefulRestart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.GracefulRestart)
}
GracefulRestart::GracefulRestart(const GracefulRestart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  ::memcpy(&restart_time_, &from.restart_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_restarting_) -
    reinterpret_cast<char*>(&restart_time_)) + sizeof(local_restarting_));
  // @@protoc_insertion_point(copy_constructor:apipb.GracefulRestart)
}

void GracefulRestart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GracefulRestart_gobgp_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&restart_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_restarting_) -
      reinterpret_cast<char*>(&restart_time_)) + sizeof(local_restarting_));
}

GracefulRestart::~GracefulRestart() {
  // @@protoc_insertion_point(destructor:apipb.GracefulRestart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GracefulRestart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GracefulRestart::ArenaDtor(void* object) {
  GracefulRestart* _this = reinterpret_cast< GracefulRestart* >(object);
  (void)_this;
}
void GracefulRestart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GracefulRestart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GracefulRestart& GracefulRestart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GracefulRestart_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.GracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&restart_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_restarting_) -
      reinterpret_cast<char*>(&restart_time_)) + sizeof(local_restarting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GracefulRestart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 restart_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool helper_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          helper_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 deferral_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          deferral_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool notification_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          notification_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool longlived_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          longlived_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stale_routes_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stale_routes_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_restart_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          peer_restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool peer_restarting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          peer_restarting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local_restarting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          local_restarting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.GracefulRestart.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GracefulRestart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.GracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_restart_time(), target);
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_helper_only(), target);
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deferral_time(), target);
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_notification_enabled(), target);
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_longlived_enabled(), target);
  }

  // uint32 stale_routes_time = 7;
  if (this->stale_routes_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stale_routes_time(), target);
  }

  // uint32 peer_restart_time = 8;
  if (this->peer_restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_peer_restart_time(), target);
  }

  // bool peer_restarting = 9;
  if (this->peer_restarting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_peer_restarting(), target);
  }

  // bool local_restarting = 10;
  if (this->local_restarting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_local_restarting(), target);
  }

  // string mode = 11;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.GracefulRestart.mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.GracefulRestart)
  return target;
}

size_t GracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.GracefulRestart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mode = 11;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_restart_time());
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    total_size += 1 + 1;
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deferral_time());
  }

  // uint32 stale_routes_time = 7;
  if (this->stale_routes_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stale_routes_time());
  }

  // uint32 peer_restart_time = 8;
  if (this->peer_restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_restart_time());
  }

  // bool peer_restarting = 9;
  if (this->peer_restarting() != 0) {
    total_size += 1 + 1;
  }

  // bool local_restarting = 10;
  if (this->local_restarting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GracefulRestart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.GracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const GracefulRestart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GracefulRestart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.GracefulRestart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.GracefulRestart)
    MergeFrom(*source);
  }
}

void GracefulRestart::MergeFrom(const GracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.GracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.restart_time() != 0) {
    _internal_set_restart_time(from._internal_restart_time());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.helper_only() != 0) {
    _internal_set_helper_only(from._internal_helper_only());
  }
  if (from.notification_enabled() != 0) {
    _internal_set_notification_enabled(from._internal_notification_enabled());
  }
  if (from.longlived_enabled() != 0) {
    _internal_set_longlived_enabled(from._internal_longlived_enabled());
  }
  if (from.deferral_time() != 0) {
    _internal_set_deferral_time(from._internal_deferral_time());
  }
  if (from.stale_routes_time() != 0) {
    _internal_set_stale_routes_time(from._internal_stale_routes_time());
  }
  if (from.peer_restart_time() != 0) {
    _internal_set_peer_restart_time(from._internal_peer_restart_time());
  }
  if (from.peer_restarting() != 0) {
    _internal_set_peer_restarting(from._internal_peer_restarting());
  }
  if (from.local_restarting() != 0) {
    _internal_set_local_restarting(from._internal_local_restarting());
  }
}

void GracefulRestart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.GracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GracefulRestart::CopyFrom(const GracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.GracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GracefulRestart::IsInitialized() const {
  return true;
}

void GracefulRestart::InternalSwap(GracefulRestart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GracefulRestart, local_restarting_)
      + sizeof(GracefulRestart::local_restarting_)
      - PROTOBUF_FIELD_OFFSET(GracefulRestart, restart_time_)>(
          reinterpret_cast<char*>(&restart_time_),
          reinterpret_cast<char*>(&other->restart_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GracefulRestart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpGracefulRestartConfig::InitAsDefaultInstance() {
}
class MpGracefulRestartConfig::_Internal {
 public:
};

MpGracefulRestartConfig::MpGracefulRestartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MpGracefulRestartConfig)
}
MpGracefulRestartConfig::MpGracefulRestartConfig(const MpGracefulRestartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:apipb.MpGracefulRestartConfig)
}

void MpGracefulRestartConfig::SharedCtor() {
  enabled_ = false;
}

MpGracefulRestartConfig::~MpGracefulRestartConfig() {
  // @@protoc_insertion_point(destructor:apipb.MpGracefulRestartConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MpGracefulRestartConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MpGracefulRestartConfig::ArenaDtor(void* object) {
  MpGracefulRestartConfig* _this = reinterpret_cast< MpGracefulRestartConfig* >(object);
  (void)_this;
}
void MpGracefulRestartConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MpGracefulRestartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpGracefulRestartConfig& MpGracefulRestartConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpGracefulRestartConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MpGracefulRestartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MpGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MpGracefulRestartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpGracefulRestartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MpGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MpGracefulRestartConfig)
  return target;
}

size_t MpGracefulRestartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MpGracefulRestartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpGracefulRestartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MpGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpGracefulRestartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MpGracefulRestartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MpGracefulRestartConfig)
    MergeFrom(*source);
  }
}

void MpGracefulRestartConfig::MergeFrom(const MpGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MpGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void MpGracefulRestartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MpGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestartConfig::CopyFrom(const MpGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MpGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestartConfig::IsInitialized() const {
  return true;
}

void MpGracefulRestartConfig::InternalSwap(MpGracefulRestartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpGracefulRestartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpGracefulRestartState::InitAsDefaultInstance() {
}
class MpGracefulRestartState::_Internal {
 public:
};

MpGracefulRestartState::MpGracefulRestartState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MpGracefulRestartState)
}
MpGracefulRestartState::MpGracefulRestartState(const MpGracefulRestartState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_of_rib_sent_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  // @@protoc_insertion_point(copy_constructor:apipb.MpGracefulRestartState)
}

void MpGracefulRestartState::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_rib_sent_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
}

MpGracefulRestartState::~MpGracefulRestartState() {
  // @@protoc_insertion_point(destructor:apipb.MpGracefulRestartState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MpGracefulRestartState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MpGracefulRestartState::ArenaDtor(void* object) {
  MpGracefulRestartState* _this = reinterpret_cast< MpGracefulRestartState* >(object);
  (void)_this;
}
void MpGracefulRestartState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MpGracefulRestartState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpGracefulRestartState& MpGracefulRestartState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpGracefulRestartState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MpGracefulRestartState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MpGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_rib_sent_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MpGracefulRestartState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertised = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_of_rib_received = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_of_rib_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_of_rib_sent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_of_rib_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpGracefulRestartState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MpGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool received = 2;
  if (this->received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_received(), target);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_advertised(), target);
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_end_of_rib_received(), target);
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_end_of_rib_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MpGracefulRestartState)
  return target;
}

size_t MpGracefulRestartState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MpGracefulRestartState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool received = 2;
  if (this->received() != 0) {
    total_size += 1 + 1;
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    total_size += 1 + 1;
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    total_size += 1 + 1;
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpGracefulRestartState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MpGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestartState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpGracefulRestartState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MpGracefulRestartState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MpGracefulRestartState)
    MergeFrom(*source);
  }
}

void MpGracefulRestartState::MergeFrom(const MpGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MpGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from.advertised() != 0) {
    _internal_set_advertised(from._internal_advertised());
  }
  if (from.end_of_rib_received() != 0) {
    _internal_set_end_of_rib_received(from._internal_end_of_rib_received());
  }
  if (from.end_of_rib_sent() != 0) {
    _internal_set_end_of_rib_sent(from._internal_end_of_rib_sent());
  }
}

void MpGracefulRestartState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MpGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestartState::CopyFrom(const MpGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MpGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestartState::IsInitialized() const {
  return true;
}

void MpGracefulRestartState::InternalSwap(MpGracefulRestartState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MpGracefulRestartState, end_of_rib_sent_)
      + sizeof(MpGracefulRestartState::end_of_rib_sent_)
      - PROTOBUF_FIELD_OFFSET(MpGracefulRestartState, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MpGracefulRestartState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpGracefulRestart::InitAsDefaultInstance() {
  ::apipb::_MpGracefulRestart_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::MpGracefulRestartConfig*>(
      ::apipb::MpGracefulRestartConfig::internal_default_instance());
  ::apipb::_MpGracefulRestart_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::MpGracefulRestartState*>(
      ::apipb::MpGracefulRestartState::internal_default_instance());
}
class MpGracefulRestart::_Internal {
 public:
  static const ::apipb::MpGracefulRestartConfig& config(const MpGracefulRestart* msg);
  static const ::apipb::MpGracefulRestartState& state(const MpGracefulRestart* msg);
};

const ::apipb::MpGracefulRestartConfig&
MpGracefulRestart::_Internal::config(const MpGracefulRestart* msg) {
  return *msg->config_;
}
const ::apipb::MpGracefulRestartState&
MpGracefulRestart::_Internal::state(const MpGracefulRestart* msg) {
  return *msg->state_;
}
MpGracefulRestart::MpGracefulRestart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MpGracefulRestart)
}
MpGracefulRestart::MpGracefulRestart(const MpGracefulRestart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::MpGracefulRestartConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::MpGracefulRestartState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.MpGracefulRestart)
}

void MpGracefulRestart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpGracefulRestart_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

MpGracefulRestart::~MpGracefulRestart() {
  // @@protoc_insertion_point(destructor:apipb.MpGracefulRestart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MpGracefulRestart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void MpGracefulRestart::ArenaDtor(void* object) {
  MpGracefulRestart* _this = reinterpret_cast< MpGracefulRestart* >(object);
  (void)_this;
}
void MpGracefulRestart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MpGracefulRestart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpGracefulRestart& MpGracefulRestart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpGracefulRestart_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MpGracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MpGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MpGracefulRestart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.MpGracefulRestartConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.MpGracefulRestartState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpGracefulRestart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MpGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MpGracefulRestart)
  return target;
}

size_t MpGracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MpGracefulRestart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpGracefulRestart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MpGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpGracefulRestart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MpGracefulRestart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MpGracefulRestart)
    MergeFrom(*source);
  }
}

void MpGracefulRestart::MergeFrom(const MpGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MpGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::MpGracefulRestartConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::MpGracefulRestartState::MergeFrom(from._internal_state());
  }
}

void MpGracefulRestart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MpGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestart::CopyFrom(const MpGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MpGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestart::IsInitialized() const {
  return true;
}

void MpGracefulRestart::InternalSwap(MpGracefulRestart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MpGracefulRestart, state_)
      + sizeof(MpGracefulRestart::state_)
      - PROTOBUF_FIELD_OFFSET(MpGracefulRestart, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MpGracefulRestart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AfiSafiConfig::InitAsDefaultInstance() {
  ::apipb::_AfiSafiConfig_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class AfiSafiConfig::_Internal {
 public:
  static const ::apipb::Family& family(const AfiSafiConfig* msg);
};

const ::apipb::Family&
AfiSafiConfig::_Internal::family(const AfiSafiConfig* msg) {
  return *msg->family_;
}
AfiSafiConfig::AfiSafiConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AfiSafiConfig)
}
AfiSafiConfig::AfiSafiConfig(const AfiSafiConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:apipb.AfiSafiConfig)
}

void AfiSafiConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfiSafiConfig_gobgp_2eproto.base);
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
}

AfiSafiConfig::~AfiSafiConfig() {
  // @@protoc_insertion_point(destructor:apipb.AfiSafiConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfiSafiConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void AfiSafiConfig::ArenaDtor(void* object) {
  AfiSafiConfig* _this = reinterpret_cast< AfiSafiConfig* >(object);
  (void)_this;
}
void AfiSafiConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfiSafiConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfiSafiConfig& AfiSafiConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfiSafiConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AfiSafiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AfiSafiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfiSafiConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfiSafiConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AfiSafiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AfiSafiConfig)
  return target;
}

size_t AfiSafiConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AfiSafiConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfiSafiConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AfiSafiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafiConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfiSafiConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AfiSafiConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AfiSafiConfig)
    MergeFrom(*source);
  }
}

void AfiSafiConfig::MergeFrom(const AfiSafiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AfiSafiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void AfiSafiConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AfiSafiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafiConfig::CopyFrom(const AfiSafiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AfiSafiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafiConfig::IsInitialized() const {
  return true;
}

void AfiSafiConfig::InternalSwap(AfiSafiConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AfiSafiConfig, enabled_)
      + sizeof(AfiSafiConfig::enabled_)
      - PROTOBUF_FIELD_OFFSET(AfiSafiConfig, family_)>(
          reinterpret_cast<char*>(&family_),
          reinterpret_cast<char*>(&other->family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AfiSafiConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AfiSafiState::InitAsDefaultInstance() {
  ::apipb::_AfiSafiState_default_instance_._instance.get_mutable()->family_ = const_cast< ::apipb::Family*>(
      ::apipb::Family::internal_default_instance());
}
class AfiSafiState::_Internal {
 public:
  static const ::apipb::Family& family(const AfiSafiState* msg);
};

const ::apipb::Family&
AfiSafiState::_Internal::family(const AfiSafiState* msg) {
  return *msg->family_;
}
AfiSafiState::AfiSafiState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AfiSafiState)
}
AfiSafiState::AfiSafiState(const AfiSafiState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::apipb::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&received_, &from.received_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&received_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:apipb.AfiSafiState)
}

void AfiSafiState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfiSafiState_gobgp_2eproto.base);
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
}

AfiSafiState::~AfiSafiState() {
  // @@protoc_insertion_point(destructor:apipb.AfiSafiState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfiSafiState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete family_;
}

void AfiSafiState::ArenaDtor(void* object) {
  AfiSafiState* _this = reinterpret_cast< AfiSafiState* >(object);
  (void)_this;
}
void AfiSafiState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfiSafiState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfiSafiState& AfiSafiState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfiSafiState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AfiSafiState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AfiSafiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&received_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfiSafiState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 accepted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 advertised = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfiSafiState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AfiSafiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // uint64 received = 3;
  if (this->received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_received(), target);
  }

  // uint64 accepted = 4;
  if (this->accepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_accepted(), target);
  }

  // uint64 advertised = 5;
  if (this->advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_advertised(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AfiSafiState)
  return target;
}

size_t AfiSafiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AfiSafiState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // uint64 received = 3;
  if (this->received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_received());
  }

  // uint64 accepted = 4;
  if (this->accepted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accepted());
  }

  // uint64 advertised = 5;
  if (this->advertised() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_advertised());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfiSafiState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AfiSafiState)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafiState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfiSafiState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AfiSafiState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AfiSafiState)
    MergeFrom(*source);
  }
}

void AfiSafiState::MergeFrom(const AfiSafiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AfiSafiState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::apipb::Family::MergeFrom(from._internal_family());
  }
  if (from.received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from.accepted() != 0) {
    _internal_set_accepted(from._internal_accepted());
  }
  if (from.advertised() != 0) {
    _internal_set_advertised(from._internal_advertised());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void AfiSafiState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AfiSafiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafiState::CopyFrom(const AfiSafiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AfiSafiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafiState::IsInitialized() const {
  return true;
}

void AfiSafiState::InternalSwap(AfiSafiState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AfiSafiState, enabled_)
      + sizeof(AfiSafiState::enabled_)
      - PROTOBUF_FIELD_OFFSET(AfiSafiState, family_)>(
          reinterpret_cast<char*>(&family_),
          reinterpret_cast<char*>(&other->family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AfiSafiState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSelectionOptionsConfig::InitAsDefaultInstance() {
}
class RouteSelectionOptionsConfig::_Internal {
 public:
};

RouteSelectionOptionsConfig::RouteSelectionOptionsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteSelectionOptionsConfig)
}
RouteSelectionOptionsConfig::RouteSelectionOptionsConfig(const RouteSelectionOptionsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&always_compare_med_, &from.always_compare_med_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_best_path_selection_) -
    reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  // @@protoc_insertion_point(copy_constructor:apipb.RouteSelectionOptionsConfig)
}

void RouteSelectionOptionsConfig::SharedCtor() {
  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
}

RouteSelectionOptionsConfig::~RouteSelectionOptionsConfig() {
  // @@protoc_insertion_point(destructor:apipb.RouteSelectionOptionsConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteSelectionOptionsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteSelectionOptionsConfig::ArenaDtor(void* object) {
  RouteSelectionOptionsConfig* _this = reinterpret_cast< RouteSelectionOptionsConfig* >(object);
  (void)_this;
}
void RouteSelectionOptionsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteSelectionOptionsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSelectionOptionsConfig& RouteSelectionOptionsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteSelectionOptionsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteSelectionOptionsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSelectionOptionsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_compare_med = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_compare_med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_as_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ignore_as_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_compare_router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          external_compare_router_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertise_inactive_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          advertise_inactive_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_aigp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_aigp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_next_hop_igp_metric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_next_hop_igp_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_best_path_selection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disable_best_path_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSelectionOptionsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteSelectionOptionsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_compare_med(), target);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_as_path_length(), target);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_external_compare_router_id(), target);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_advertise_inactive_routes(), target);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_aigp(), target);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_next_hop_igp_metric(), target);
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_best_path_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteSelectionOptionsConfig)
  return target;
}

size_t RouteSelectionOptionsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteSelectionOptionsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    total_size += 1 + 1;
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    total_size += 1 + 1;
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSelectionOptionsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteSelectionOptionsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptionsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSelectionOptionsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteSelectionOptionsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteSelectionOptionsConfig)
    MergeFrom(*source);
  }
}

void RouteSelectionOptionsConfig::MergeFrom(const RouteSelectionOptionsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteSelectionOptionsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.always_compare_med() != 0) {
    _internal_set_always_compare_med(from._internal_always_compare_med());
  }
  if (from.ignore_as_path_length() != 0) {
    _internal_set_ignore_as_path_length(from._internal_ignore_as_path_length());
  }
  if (from.external_compare_router_id() != 0) {
    _internal_set_external_compare_router_id(from._internal_external_compare_router_id());
  }
  if (from.advertise_inactive_routes() != 0) {
    _internal_set_advertise_inactive_routes(from._internal_advertise_inactive_routes());
  }
  if (from.enable_aigp() != 0) {
    _internal_set_enable_aigp(from._internal_enable_aigp());
  }
  if (from.ignore_next_hop_igp_metric() != 0) {
    _internal_set_ignore_next_hop_igp_metric(from._internal_ignore_next_hop_igp_metric());
  }
  if (from.disable_best_path_selection() != 0) {
    _internal_set_disable_best_path_selection(from._internal_disable_best_path_selection());
  }
}

void RouteSelectionOptionsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteSelectionOptionsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptionsConfig::CopyFrom(const RouteSelectionOptionsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteSelectionOptionsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptionsConfig::IsInitialized() const {
  return true;
}

void RouteSelectionOptionsConfig::InternalSwap(RouteSelectionOptionsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteSelectionOptionsConfig, disable_best_path_selection_)
      + sizeof(RouteSelectionOptionsConfig::disable_best_path_selection_)
      - PROTOBUF_FIELD_OFFSET(RouteSelectionOptionsConfig, always_compare_med_)>(
          reinterpret_cast<char*>(&always_compare_med_),
          reinterpret_cast<char*>(&other->always_compare_med_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSelectionOptionsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSelectionOptionsState::InitAsDefaultInstance() {
}
class RouteSelectionOptionsState::_Internal {
 public:
};

RouteSelectionOptionsState::RouteSelectionOptionsState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteSelectionOptionsState)
}
RouteSelectionOptionsState::RouteSelectionOptionsState(const RouteSelectionOptionsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&always_compare_med_, &from.always_compare_med_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_best_path_selection_) -
    reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  // @@protoc_insertion_point(copy_constructor:apipb.RouteSelectionOptionsState)
}

void RouteSelectionOptionsState::SharedCtor() {
  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
}

RouteSelectionOptionsState::~RouteSelectionOptionsState() {
  // @@protoc_insertion_point(destructor:apipb.RouteSelectionOptionsState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteSelectionOptionsState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteSelectionOptionsState::ArenaDtor(void* object) {
  RouteSelectionOptionsState* _this = reinterpret_cast< RouteSelectionOptionsState* >(object);
  (void)_this;
}
void RouteSelectionOptionsState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteSelectionOptionsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSelectionOptionsState& RouteSelectionOptionsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSelectionOptionsState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteSelectionOptionsState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteSelectionOptionsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSelectionOptionsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_compare_med = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_compare_med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_as_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ignore_as_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_compare_router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          external_compare_router_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertise_inactive_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          advertise_inactive_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_aigp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_aigp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_next_hop_igp_metric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_next_hop_igp_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_best_path_selection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disable_best_path_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSelectionOptionsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteSelectionOptionsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_compare_med(), target);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_as_path_length(), target);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_external_compare_router_id(), target);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_advertise_inactive_routes(), target);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_aigp(), target);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_next_hop_igp_metric(), target);
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_best_path_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteSelectionOptionsState)
  return target;
}

size_t RouteSelectionOptionsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteSelectionOptionsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    total_size += 1 + 1;
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    total_size += 1 + 1;
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSelectionOptionsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteSelectionOptionsState)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptionsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSelectionOptionsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteSelectionOptionsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteSelectionOptionsState)
    MergeFrom(*source);
  }
}

void RouteSelectionOptionsState::MergeFrom(const RouteSelectionOptionsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteSelectionOptionsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.always_compare_med() != 0) {
    _internal_set_always_compare_med(from._internal_always_compare_med());
  }
  if (from.ignore_as_path_length() != 0) {
    _internal_set_ignore_as_path_length(from._internal_ignore_as_path_length());
  }
  if (from.external_compare_router_id() != 0) {
    _internal_set_external_compare_router_id(from._internal_external_compare_router_id());
  }
  if (from.advertise_inactive_routes() != 0) {
    _internal_set_advertise_inactive_routes(from._internal_advertise_inactive_routes());
  }
  if (from.enable_aigp() != 0) {
    _internal_set_enable_aigp(from._internal_enable_aigp());
  }
  if (from.ignore_next_hop_igp_metric() != 0) {
    _internal_set_ignore_next_hop_igp_metric(from._internal_ignore_next_hop_igp_metric());
  }
  if (from.disable_best_path_selection() != 0) {
    _internal_set_disable_best_path_selection(from._internal_disable_best_path_selection());
  }
}

void RouteSelectionOptionsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteSelectionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptionsState::CopyFrom(const RouteSelectionOptionsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteSelectionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptionsState::IsInitialized() const {
  return true;
}

void RouteSelectionOptionsState::InternalSwap(RouteSelectionOptionsState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteSelectionOptionsState, disable_best_path_selection_)
      + sizeof(RouteSelectionOptionsState::disable_best_path_selection_)
      - PROTOBUF_FIELD_OFFSET(RouteSelectionOptionsState, always_compare_med_)>(
          reinterpret_cast<char*>(&always_compare_med_),
          reinterpret_cast<char*>(&other->always_compare_med_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSelectionOptionsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSelectionOptions::InitAsDefaultInstance() {
  ::apipb::_RouteSelectionOptions_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::RouteSelectionOptionsConfig*>(
      ::apipb::RouteSelectionOptionsConfig::internal_default_instance());
  ::apipb::_RouteSelectionOptions_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::RouteSelectionOptionsState*>(
      ::apipb::RouteSelectionOptionsState::internal_default_instance());
}
class RouteSelectionOptions::_Internal {
 public:
  static const ::apipb::RouteSelectionOptionsConfig& config(const RouteSelectionOptions* msg);
  static const ::apipb::RouteSelectionOptionsState& state(const RouteSelectionOptions* msg);
};

const ::apipb::RouteSelectionOptionsConfig&
RouteSelectionOptions::_Internal::config(const RouteSelectionOptions* msg) {
  return *msg->config_;
}
const ::apipb::RouteSelectionOptionsState&
RouteSelectionOptions::_Internal::state(const RouteSelectionOptions* msg) {
  return *msg->state_;
}
RouteSelectionOptions::RouteSelectionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteSelectionOptions)
}
RouteSelectionOptions::RouteSelectionOptions(const RouteSelectionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::RouteSelectionOptionsConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::RouteSelectionOptionsState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.RouteSelectionOptions)
}

void RouteSelectionOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteSelectionOptions_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

RouteSelectionOptions::~RouteSelectionOptions() {
  // @@protoc_insertion_point(destructor:apipb.RouteSelectionOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteSelectionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void RouteSelectionOptions::ArenaDtor(void* object) {
  RouteSelectionOptions* _this = reinterpret_cast< RouteSelectionOptions* >(object);
  (void)_this;
}
void RouteSelectionOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteSelectionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSelectionOptions& RouteSelectionOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSelectionOptions_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteSelectionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteSelectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSelectionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.RouteSelectionOptionsConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteSelectionOptionsState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSelectionOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteSelectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteSelectionOptions)
  return target;
}

size_t RouteSelectionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteSelectionOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSelectionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteSelectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSelectionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteSelectionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteSelectionOptions)
    MergeFrom(*source);
  }
}

void RouteSelectionOptions::MergeFrom(const RouteSelectionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteSelectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::RouteSelectionOptionsConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::RouteSelectionOptionsState::MergeFrom(from._internal_state());
  }
}

void RouteSelectionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteSelectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptions::CopyFrom(const RouteSelectionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteSelectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptions::IsInitialized() const {
  return true;
}

void RouteSelectionOptions::InternalSwap(RouteSelectionOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteSelectionOptions, state_)
      + sizeof(RouteSelectionOptions::state_)
      - PROTOBUF_FIELD_OFFSET(RouteSelectionOptions, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSelectionOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMultiplePathsConfig::InitAsDefaultInstance() {
}
class UseMultiplePathsConfig::_Internal {
 public:
};

UseMultiplePathsConfig::UseMultiplePathsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UseMultiplePathsConfig)
}
UseMultiplePathsConfig::UseMultiplePathsConfig(const UseMultiplePathsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:apipb.UseMultiplePathsConfig)
}

void UseMultiplePathsConfig::SharedCtor() {
  enabled_ = false;
}

UseMultiplePathsConfig::~UseMultiplePathsConfig() {
  // @@protoc_insertion_point(destructor:apipb.UseMultiplePathsConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseMultiplePathsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseMultiplePathsConfig::ArenaDtor(void* object) {
  UseMultiplePathsConfig* _this = reinterpret_cast< UseMultiplePathsConfig* >(object);
  (void)_this;
}
void UseMultiplePathsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseMultiplePathsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMultiplePathsConfig& UseMultiplePathsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMultiplePathsConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UseMultiplePathsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UseMultiplePathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseMultiplePathsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMultiplePathsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UseMultiplePathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UseMultiplePathsConfig)
  return target;
}

size_t UseMultiplePathsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UseMultiplePathsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMultiplePathsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UseMultiplePathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePathsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMultiplePathsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UseMultiplePathsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UseMultiplePathsConfig)
    MergeFrom(*source);
  }
}

void UseMultiplePathsConfig::MergeFrom(const UseMultiplePathsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UseMultiplePathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void UseMultiplePathsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UseMultiplePathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePathsConfig::CopyFrom(const UseMultiplePathsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UseMultiplePathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePathsConfig::IsInitialized() const {
  return true;
}

void UseMultiplePathsConfig::InternalSwap(UseMultiplePathsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMultiplePathsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMultiplePathsState::InitAsDefaultInstance() {
}
class UseMultiplePathsState::_Internal {
 public:
};

UseMultiplePathsState::UseMultiplePathsState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UseMultiplePathsState)
}
UseMultiplePathsState::UseMultiplePathsState(const UseMultiplePathsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:apipb.UseMultiplePathsState)
}

void UseMultiplePathsState::SharedCtor() {
  enabled_ = false;
}

UseMultiplePathsState::~UseMultiplePathsState() {
  // @@protoc_insertion_point(destructor:apipb.UseMultiplePathsState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseMultiplePathsState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseMultiplePathsState::ArenaDtor(void* object) {
  UseMultiplePathsState* _this = reinterpret_cast< UseMultiplePathsState* >(object);
  (void)_this;
}
void UseMultiplePathsState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseMultiplePathsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMultiplePathsState& UseMultiplePathsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMultiplePathsState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UseMultiplePathsState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UseMultiplePathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseMultiplePathsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMultiplePathsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UseMultiplePathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UseMultiplePathsState)
  return target;
}

size_t UseMultiplePathsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UseMultiplePathsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMultiplePathsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UseMultiplePathsState)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePathsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMultiplePathsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UseMultiplePathsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UseMultiplePathsState)
    MergeFrom(*source);
  }
}

void UseMultiplePathsState::MergeFrom(const UseMultiplePathsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UseMultiplePathsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void UseMultiplePathsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UseMultiplePathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePathsState::CopyFrom(const UseMultiplePathsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UseMultiplePathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePathsState::IsInitialized() const {
  return true;
}

void UseMultiplePathsState::InternalSwap(UseMultiplePathsState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMultiplePathsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EbgpConfig::InitAsDefaultInstance() {
}
class EbgpConfig::_Internal {
 public:
};

EbgpConfig::EbgpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EbgpConfig)
}
EbgpConfig::EbgpConfig(const EbgpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&allow_multiple_asn_, &from.allow_multiple_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_paths_) -
    reinterpret_cast<char*>(&allow_multiple_asn_)) + sizeof(maximum_paths_));
  // @@protoc_insertion_point(copy_constructor:apipb.EbgpConfig)
}

void EbgpConfig::SharedCtor() {
  ::memset(&allow_multiple_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_asn_)) + sizeof(maximum_paths_));
}

EbgpConfig::~EbgpConfig() {
  // @@protoc_insertion_point(destructor:apipb.EbgpConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EbgpConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EbgpConfig::ArenaDtor(void* object) {
  EbgpConfig* _this = reinterpret_cast< EbgpConfig* >(object);
  (void)_this;
}
void EbgpConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EbgpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbgpConfig& EbgpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EbgpConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EbgpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_multiple_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_asn_)) + sizeof(maximum_paths_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EbgpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool allow_multiple_asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allow_multiple_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maximum_paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EbgpConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_asn = 1;
  if (this->allow_multiple_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_multiple_asn(), target);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EbgpConfig)
  return target;
}

size_t EbgpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EbgpConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_multiple_asn = 1;
  if (this->allow_multiple_asn() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbgpConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EbgpConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EbgpConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EbgpConfig)
    MergeFrom(*source);
  }
}

void EbgpConfig::MergeFrom(const EbgpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_multiple_asn() != 0) {
    _internal_set_allow_multiple_asn(from._internal_allow_multiple_asn());
  }
  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void EbgpConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpConfig::CopyFrom(const EbgpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpConfig::IsInitialized() const {
  return true;
}

void EbgpConfig::InternalSwap(EbgpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EbgpConfig, maximum_paths_)
      + sizeof(EbgpConfig::maximum_paths_)
      - PROTOBUF_FIELD_OFFSET(EbgpConfig, allow_multiple_asn_)>(
          reinterpret_cast<char*>(&allow_multiple_asn_),
          reinterpret_cast<char*>(&other->allow_multiple_asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EbgpConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EbgpState::InitAsDefaultInstance() {
}
class EbgpState::_Internal {
 public:
};

EbgpState::EbgpState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.EbgpState)
}
EbgpState::EbgpState(const EbgpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&allow_multiple_asn_, &from.allow_multiple_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_paths_) -
    reinterpret_cast<char*>(&allow_multiple_asn_)) + sizeof(maximum_paths_));
  // @@protoc_insertion_point(copy_constructor:apipb.EbgpState)
}

void EbgpState::SharedCtor() {
  ::memset(&allow_multiple_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_asn_)) + sizeof(maximum_paths_));
}

EbgpState::~EbgpState() {
  // @@protoc_insertion_point(destructor:apipb.EbgpState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EbgpState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EbgpState::ArenaDtor(void* object) {
  EbgpState* _this = reinterpret_cast< EbgpState* >(object);
  (void)_this;
}
void EbgpState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EbgpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbgpState& EbgpState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EbgpState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EbgpState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.EbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_multiple_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_asn_)) + sizeof(maximum_paths_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EbgpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool allow_multiple_asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allow_multiple_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maximum_paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EbgpState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.EbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_asn = 1;
  if (this->allow_multiple_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_multiple_asn(), target);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.EbgpState)
  return target;
}

size_t EbgpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.EbgpState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_multiple_asn = 1;
  if (this->allow_multiple_asn() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbgpState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.EbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EbgpState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.EbgpState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.EbgpState)
    MergeFrom(*source);
  }
}

void EbgpState::MergeFrom(const EbgpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.EbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_multiple_asn() != 0) {
    _internal_set_allow_multiple_asn(from._internal_allow_multiple_asn());
  }
  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void EbgpState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.EbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpState::CopyFrom(const EbgpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.EbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpState::IsInitialized() const {
  return true;
}

void EbgpState::InternalSwap(EbgpState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EbgpState, maximum_paths_)
      + sizeof(EbgpState::maximum_paths_)
      - PROTOBUF_FIELD_OFFSET(EbgpState, allow_multiple_asn_)>(
          reinterpret_cast<char*>(&allow_multiple_asn_),
          reinterpret_cast<char*>(&other->allow_multiple_asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EbgpState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ebgp::InitAsDefaultInstance() {
  ::apipb::_Ebgp_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::EbgpConfig*>(
      ::apipb::EbgpConfig::internal_default_instance());
  ::apipb::_Ebgp_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::EbgpState*>(
      ::apipb::EbgpState::internal_default_instance());
}
class Ebgp::_Internal {
 public:
  static const ::apipb::EbgpConfig& config(const Ebgp* msg);
  static const ::apipb::EbgpState& state(const Ebgp* msg);
};

const ::apipb::EbgpConfig&
Ebgp::_Internal::config(const Ebgp* msg) {
  return *msg->config_;
}
const ::apipb::EbgpState&
Ebgp::_Internal::state(const Ebgp* msg) {
  return *msg->state_;
}
Ebgp::Ebgp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Ebgp)
}
Ebgp::Ebgp(const Ebgp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::EbgpConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::EbgpState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Ebgp)
}

void Ebgp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ebgp_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Ebgp::~Ebgp() {
  // @@protoc_insertion_point(destructor:apipb.Ebgp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ebgp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ebgp::ArenaDtor(void* object) {
  Ebgp* _this = reinterpret_cast< Ebgp* >(object);
  (void)_this;
}
void Ebgp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ebgp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ebgp& Ebgp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ebgp_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Ebgp::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Ebgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ebgp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.EbgpConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.EbgpState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ebgp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Ebgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.EbgpConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.EbgpState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Ebgp)
  return target;
}

size_t Ebgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Ebgp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.EbgpConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.EbgpState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ebgp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Ebgp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ebgp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ebgp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Ebgp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Ebgp)
    MergeFrom(*source);
  }
}

void Ebgp::MergeFrom(const Ebgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Ebgp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::EbgpConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::EbgpState::MergeFrom(from._internal_state());
  }
}

void Ebgp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Ebgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ebgp::CopyFrom(const Ebgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Ebgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ebgp::IsInitialized() const {
  return true;
}

void Ebgp::InternalSwap(Ebgp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ebgp, state_)
      + sizeof(Ebgp::state_)
      - PROTOBUF_FIELD_OFFSET(Ebgp, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ebgp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IbgpConfig::InitAsDefaultInstance() {
}
class IbgpConfig::_Internal {
 public:
};

IbgpConfig::IbgpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.IbgpConfig)
}
IbgpConfig::IbgpConfig(const IbgpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maximum_paths_ = from.maximum_paths_;
  // @@protoc_insertion_point(copy_constructor:apipb.IbgpConfig)
}

void IbgpConfig::SharedCtor() {
  maximum_paths_ = 0u;
}

IbgpConfig::~IbgpConfig() {
  // @@protoc_insertion_point(destructor:apipb.IbgpConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IbgpConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IbgpConfig::ArenaDtor(void* object) {
  IbgpConfig* _this = reinterpret_cast< IbgpConfig* >(object);
  (void)_this;
}
void IbgpConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IbgpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IbgpConfig& IbgpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IbgpConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void IbgpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.IbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maximum_paths_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IbgpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 maximum_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IbgpConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.IbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.IbgpConfig)
  return target;
}

size_t IbgpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.IbgpConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IbgpConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.IbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IbgpConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IbgpConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.IbgpConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.IbgpConfig)
    MergeFrom(*source);
  }
}

void IbgpConfig::MergeFrom(const IbgpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.IbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void IbgpConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.IbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IbgpConfig::CopyFrom(const IbgpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.IbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbgpConfig::IsInitialized() const {
  return true;
}

void IbgpConfig::InternalSwap(IbgpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(maximum_paths_, other->maximum_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbgpConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IbgpState::InitAsDefaultInstance() {
}
class IbgpState::_Internal {
 public:
};

IbgpState::IbgpState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.IbgpState)
}
IbgpState::IbgpState(const IbgpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maximum_paths_ = from.maximum_paths_;
  // @@protoc_insertion_point(copy_constructor:apipb.IbgpState)
}

void IbgpState::SharedCtor() {
  maximum_paths_ = 0u;
}

IbgpState::~IbgpState() {
  // @@protoc_insertion_point(destructor:apipb.IbgpState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IbgpState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IbgpState::ArenaDtor(void* object) {
  IbgpState* _this = reinterpret_cast< IbgpState* >(object);
  (void)_this;
}
void IbgpState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IbgpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IbgpState& IbgpState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IbgpState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void IbgpState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.IbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maximum_paths_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IbgpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 maximum_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IbgpState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.IbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.IbgpState)
  return target;
}

size_t IbgpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.IbgpState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IbgpState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.IbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  const IbgpState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IbgpState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.IbgpState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.IbgpState)
    MergeFrom(*source);
  }
}

void IbgpState::MergeFrom(const IbgpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.IbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void IbgpState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.IbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IbgpState::CopyFrom(const IbgpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.IbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbgpState::IsInitialized() const {
  return true;
}

void IbgpState::InternalSwap(IbgpState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(maximum_paths_, other->maximum_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbgpState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ibgp::InitAsDefaultInstance() {
  ::apipb::_Ibgp_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::IbgpConfig*>(
      ::apipb::IbgpConfig::internal_default_instance());
  ::apipb::_Ibgp_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::IbgpState*>(
      ::apipb::IbgpState::internal_default_instance());
}
class Ibgp::_Internal {
 public:
  static const ::apipb::IbgpConfig& config(const Ibgp* msg);
  static const ::apipb::IbgpState& state(const Ibgp* msg);
};

const ::apipb::IbgpConfig&
Ibgp::_Internal::config(const Ibgp* msg) {
  return *msg->config_;
}
const ::apipb::IbgpState&
Ibgp::_Internal::state(const Ibgp* msg) {
  return *msg->state_;
}
Ibgp::Ibgp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Ibgp)
}
Ibgp::Ibgp(const Ibgp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::IbgpConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::IbgpState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Ibgp)
}

void Ibgp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ibgp_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Ibgp::~Ibgp() {
  // @@protoc_insertion_point(destructor:apipb.Ibgp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ibgp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ibgp::ArenaDtor(void* object) {
  Ibgp* _this = reinterpret_cast< Ibgp* >(object);
  (void)_this;
}
void Ibgp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ibgp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ibgp& Ibgp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ibgp_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Ibgp::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Ibgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ibgp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.IbgpConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.IbgpState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ibgp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Ibgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.IbgpConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.IbgpState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Ibgp)
  return target;
}

size_t Ibgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Ibgp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.IbgpConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.IbgpState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ibgp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Ibgp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ibgp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ibgp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Ibgp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Ibgp)
    MergeFrom(*source);
  }
}

void Ibgp::MergeFrom(const Ibgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Ibgp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::IbgpConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::IbgpState::MergeFrom(from._internal_state());
  }
}

void Ibgp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Ibgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ibgp::CopyFrom(const Ibgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Ibgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ibgp::IsInitialized() const {
  return true;
}

void Ibgp::InternalSwap(Ibgp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ibgp, state_)
      + sizeof(Ibgp::state_)
      - PROTOBUF_FIELD_OFFSET(Ibgp, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ibgp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMultiplePaths::InitAsDefaultInstance() {
  ::apipb::_UseMultiplePaths_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::UseMultiplePathsConfig*>(
      ::apipb::UseMultiplePathsConfig::internal_default_instance());
  ::apipb::_UseMultiplePaths_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::UseMultiplePathsState*>(
      ::apipb::UseMultiplePathsState::internal_default_instance());
  ::apipb::_UseMultiplePaths_default_instance_._instance.get_mutable()->ebgp_ = const_cast< ::apipb::Ebgp*>(
      ::apipb::Ebgp::internal_default_instance());
  ::apipb::_UseMultiplePaths_default_instance_._instance.get_mutable()->ibgp_ = const_cast< ::apipb::Ibgp*>(
      ::apipb::Ibgp::internal_default_instance());
}
class UseMultiplePaths::_Internal {
 public:
  static const ::apipb::UseMultiplePathsConfig& config(const UseMultiplePaths* msg);
  static const ::apipb::UseMultiplePathsState& state(const UseMultiplePaths* msg);
  static const ::apipb::Ebgp& ebgp(const UseMultiplePaths* msg);
  static const ::apipb::Ibgp& ibgp(const UseMultiplePaths* msg);
};

const ::apipb::UseMultiplePathsConfig&
UseMultiplePaths::_Internal::config(const UseMultiplePaths* msg) {
  return *msg->config_;
}
const ::apipb::UseMultiplePathsState&
UseMultiplePaths::_Internal::state(const UseMultiplePaths* msg) {
  return *msg->state_;
}
const ::apipb::Ebgp&
UseMultiplePaths::_Internal::ebgp(const UseMultiplePaths* msg) {
  return *msg->ebgp_;
}
const ::apipb::Ibgp&
UseMultiplePaths::_Internal::ibgp(const UseMultiplePaths* msg) {
  return *msg->ibgp_;
}
UseMultiplePaths::UseMultiplePaths(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.UseMultiplePaths)
}
UseMultiplePaths::UseMultiplePaths(const UseMultiplePaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::UseMultiplePathsConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::UseMultiplePathsState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_ebgp()) {
    ebgp_ = new ::apipb::Ebgp(*from.ebgp_);
  } else {
    ebgp_ = nullptr;
  }
  if (from._internal_has_ibgp()) {
    ibgp_ = new ::apipb::Ibgp(*from.ibgp_);
  } else {
    ibgp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.UseMultiplePaths)
}

void UseMultiplePaths::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseMultiplePaths_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ibgp_) -
      reinterpret_cast<char*>(&config_)) + sizeof(ibgp_));
}

UseMultiplePaths::~UseMultiplePaths() {
  // @@protoc_insertion_point(destructor:apipb.UseMultiplePaths)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseMultiplePaths::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete ebgp_;
  if (this != internal_default_instance()) delete ibgp_;
}

void UseMultiplePaths::ArenaDtor(void* object) {
  UseMultiplePaths* _this = reinterpret_cast< UseMultiplePaths* >(object);
  (void)_this;
}
void UseMultiplePaths::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseMultiplePaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMultiplePaths& UseMultiplePaths::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMultiplePaths_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UseMultiplePaths::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.UseMultiplePaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && ebgp_ != nullptr) {
    delete ebgp_;
  }
  ebgp_ = nullptr;
  if (GetArena() == nullptr && ibgp_ != nullptr) {
    delete ibgp_;
  }
  ibgp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseMultiplePaths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.UseMultiplePathsConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.UseMultiplePathsState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Ebgp ebgp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebgp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Ibgp ibgp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ibgp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMultiplePaths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.UseMultiplePaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // .apipb.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ebgp(this), target, stream);
  }

  // .apipb.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ibgp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.UseMultiplePaths)
  return target;
}

size_t UseMultiplePaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.UseMultiplePaths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .apipb.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ebgp_);
  }

  // .apipb.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ibgp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMultiplePaths::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.UseMultiplePaths)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePaths* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMultiplePaths>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.UseMultiplePaths)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.UseMultiplePaths)
    MergeFrom(*source);
  }
}

void UseMultiplePaths::MergeFrom(const UseMultiplePaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.UseMultiplePaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::UseMultiplePathsConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::UseMultiplePathsState::MergeFrom(from._internal_state());
  }
  if (from.has_ebgp()) {
    _internal_mutable_ebgp()->::apipb::Ebgp::MergeFrom(from._internal_ebgp());
  }
  if (from.has_ibgp()) {
    _internal_mutable_ibgp()->::apipb::Ibgp::MergeFrom(from._internal_ibgp());
  }
}

void UseMultiplePaths::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.UseMultiplePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePaths::CopyFrom(const UseMultiplePaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.UseMultiplePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePaths::IsInitialized() const {
  return true;
}

void UseMultiplePaths::InternalSwap(UseMultiplePaths* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseMultiplePaths, ibgp_)
      + sizeof(UseMultiplePaths::ibgp_)
      - PROTOBUF_FIELD_OFFSET(UseMultiplePaths, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMultiplePaths::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembershipConfig::InitAsDefaultInstance() {
}
class RouteTargetMembershipConfig::_Internal {
 public:
};

RouteTargetMembershipConfig::RouteTargetMembershipConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteTargetMembershipConfig)
}
RouteTargetMembershipConfig::RouteTargetMembershipConfig(const RouteTargetMembershipConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deferral_time_ = from.deferral_time_;
  // @@protoc_insertion_point(copy_constructor:apipb.RouteTargetMembershipConfig)
}

void RouteTargetMembershipConfig::SharedCtor() {
  deferral_time_ = 0u;
}

RouteTargetMembershipConfig::~RouteTargetMembershipConfig() {
  // @@protoc_insertion_point(destructor:apipb.RouteTargetMembershipConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteTargetMembershipConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteTargetMembershipConfig::ArenaDtor(void* object) {
  RouteTargetMembershipConfig* _this = reinterpret_cast< RouteTargetMembershipConfig* >(object);
  (void)_this;
}
void RouteTargetMembershipConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetMembershipConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembershipConfig& RouteTargetMembershipConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembershipConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembershipConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteTargetMembershipConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deferral_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetMembershipConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 deferral_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deferral_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembershipConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteTargetMembershipConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deferral_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteTargetMembershipConfig)
  return target;
}

size_t RouteTargetMembershipConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteTargetMembershipConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deferral_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembershipConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteTargetMembershipConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembershipConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteTargetMembershipConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteTargetMembershipConfig)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipConfig::MergeFrom(const RouteTargetMembershipConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteTargetMembershipConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deferral_time() != 0) {
    _internal_set_deferral_time(from._internal_deferral_time());
  }
}

void RouteTargetMembershipConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteTargetMembershipConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipConfig::CopyFrom(const RouteTargetMembershipConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteTargetMembershipConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipConfig::IsInitialized() const {
  return true;
}

void RouteTargetMembershipConfig::InternalSwap(RouteTargetMembershipConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(deferral_time_, other->deferral_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembershipConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembershipState::InitAsDefaultInstance() {
}
class RouteTargetMembershipState::_Internal {
 public:
};

RouteTargetMembershipState::RouteTargetMembershipState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteTargetMembershipState)
}
RouteTargetMembershipState::RouteTargetMembershipState(const RouteTargetMembershipState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deferral_time_ = from.deferral_time_;
  // @@protoc_insertion_point(copy_constructor:apipb.RouteTargetMembershipState)
}

void RouteTargetMembershipState::SharedCtor() {
  deferral_time_ = 0u;
}

RouteTargetMembershipState::~RouteTargetMembershipState() {
  // @@protoc_insertion_point(destructor:apipb.RouteTargetMembershipState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteTargetMembershipState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteTargetMembershipState::ArenaDtor(void* object) {
  RouteTargetMembershipState* _this = reinterpret_cast< RouteTargetMembershipState* >(object);
  (void)_this;
}
void RouteTargetMembershipState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetMembershipState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembershipState& RouteTargetMembershipState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembershipState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembershipState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteTargetMembershipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deferral_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetMembershipState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 deferral_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deferral_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembershipState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteTargetMembershipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deferral_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteTargetMembershipState)
  return target;
}

size_t RouteTargetMembershipState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteTargetMembershipState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deferral_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembershipState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteTargetMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembershipState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteTargetMembershipState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteTargetMembershipState)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipState::MergeFrom(const RouteTargetMembershipState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteTargetMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deferral_time() != 0) {
    _internal_set_deferral_time(from._internal_deferral_time());
  }
}

void RouteTargetMembershipState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteTargetMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipState::CopyFrom(const RouteTargetMembershipState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteTargetMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipState::IsInitialized() const {
  return true;
}

void RouteTargetMembershipState::InternalSwap(RouteTargetMembershipState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(deferral_time_, other->deferral_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembershipState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembership::InitAsDefaultInstance() {
  ::apipb::_RouteTargetMembership_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::RouteTargetMembershipConfig*>(
      ::apipb::RouteTargetMembershipConfig::internal_default_instance());
  ::apipb::_RouteTargetMembership_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::RouteTargetMembershipState*>(
      ::apipb::RouteTargetMembershipState::internal_default_instance());
}
class RouteTargetMembership::_Internal {
 public:
  static const ::apipb::RouteTargetMembershipConfig& config(const RouteTargetMembership* msg);
  static const ::apipb::RouteTargetMembershipState& state(const RouteTargetMembership* msg);
};

const ::apipb::RouteTargetMembershipConfig&
RouteTargetMembership::_Internal::config(const RouteTargetMembership* msg) {
  return *msg->config_;
}
const ::apipb::RouteTargetMembershipState&
RouteTargetMembership::_Internal::state(const RouteTargetMembership* msg) {
  return *msg->state_;
}
RouteTargetMembership::RouteTargetMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RouteTargetMembership)
}
RouteTargetMembership::RouteTargetMembership(const RouteTargetMembership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::RouteTargetMembershipConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::RouteTargetMembershipState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.RouteTargetMembership)
}

void RouteTargetMembership::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteTargetMembership_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

RouteTargetMembership::~RouteTargetMembership() {
  // @@protoc_insertion_point(destructor:apipb.RouteTargetMembership)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteTargetMembership::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void RouteTargetMembership::ArenaDtor(void* object) {
  RouteTargetMembership* _this = reinterpret_cast< RouteTargetMembership* >(object);
  (void)_this;
}
void RouteTargetMembership::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembership& RouteTargetMembership::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembership_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RouteTargetMembership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetMembership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.RouteTargetMembershipConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteTargetMembershipState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembership::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RouteTargetMembership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RouteTargetMembership)
  return target;
}

size_t RouteTargetMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RouteTargetMembership)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembership::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RouteTargetMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembership* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RouteTargetMembership)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RouteTargetMembership)
    MergeFrom(*source);
  }
}

void RouteTargetMembership::MergeFrom(const RouteTargetMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RouteTargetMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::RouteTargetMembershipConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::RouteTargetMembershipState::MergeFrom(from._internal_state());
  }
}

void RouteTargetMembership::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RouteTargetMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembership::CopyFrom(const RouteTargetMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RouteTargetMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembership::IsInitialized() const {
  return true;
}

void RouteTargetMembership::InternalSwap(RouteTargetMembership* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTargetMembership, state_)
      + sizeof(RouteTargetMembership::state_)
      - PROTOBUF_FIELD_OFFSET(RouteTargetMembership, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembership::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongLivedGracefulRestartConfig::InitAsDefaultInstance() {
}
class LongLivedGracefulRestartConfig::_Internal {
 public:
};

LongLivedGracefulRestartConfig::LongLivedGracefulRestartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LongLivedGracefulRestartConfig)
}
LongLivedGracefulRestartConfig::LongLivedGracefulRestartConfig(const LongLivedGracefulRestartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&restart_time_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  // @@protoc_insertion_point(copy_constructor:apipb.LongLivedGracefulRestartConfig)
}

void LongLivedGracefulRestartConfig::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
}

LongLivedGracefulRestartConfig::~LongLivedGracefulRestartConfig() {
  // @@protoc_insertion_point(destructor:apipb.LongLivedGracefulRestartConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongLivedGracefulRestartConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LongLivedGracefulRestartConfig::ArenaDtor(void* object) {
  LongLivedGracefulRestartConfig* _this = reinterpret_cast< LongLivedGracefulRestartConfig* >(object);
  (void)_this;
}
void LongLivedGracefulRestartConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongLivedGracefulRestartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongLivedGracefulRestartConfig& LongLivedGracefulRestartConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LongLivedGracefulRestartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LongLivedGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongLivedGracefulRestartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 restart_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongLivedGracefulRestartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LongLivedGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_restart_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LongLivedGracefulRestartConfig)
  return target;
}

size_t LongLivedGracefulRestartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LongLivedGracefulRestartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_restart_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongLivedGracefulRestartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LongLivedGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongLivedGracefulRestartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LongLivedGracefulRestartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LongLivedGracefulRestartConfig)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestartConfig::MergeFrom(const LongLivedGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LongLivedGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.restart_time() != 0) {
    _internal_set_restart_time(from._internal_restart_time());
  }
}

void LongLivedGracefulRestartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LongLivedGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestartConfig::CopyFrom(const LongLivedGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LongLivedGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestartConfig::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestartConfig::InternalSwap(LongLivedGracefulRestartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongLivedGracefulRestartConfig, restart_time_)
      + sizeof(LongLivedGracefulRestartConfig::restart_time_)
      - PROTOBUF_FIELD_OFFSET(LongLivedGracefulRestartConfig, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLivedGracefulRestartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongLivedGracefulRestartState::InitAsDefaultInstance() {
}
class LongLivedGracefulRestartState::_Internal {
 public:
};

LongLivedGracefulRestartState::LongLivedGracefulRestartState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LongLivedGracefulRestartState)
}
LongLivedGracefulRestartState::LongLivedGracefulRestartState(const LongLivedGracefulRestartState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_restart_time_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  // @@protoc_insertion_point(copy_constructor:apipb.LongLivedGracefulRestartState)
}

void LongLivedGracefulRestartState::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
}

LongLivedGracefulRestartState::~LongLivedGracefulRestartState() {
  // @@protoc_insertion_point(destructor:apipb.LongLivedGracefulRestartState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongLivedGracefulRestartState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LongLivedGracefulRestartState::ArenaDtor(void* object) {
  LongLivedGracefulRestartState* _this = reinterpret_cast< LongLivedGracefulRestartState* >(object);
  (void)_this;
}
void LongLivedGracefulRestartState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongLivedGracefulRestartState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongLivedGracefulRestartState& LongLivedGracefulRestartState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongLivedGracefulRestartState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LongLivedGracefulRestartState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LongLivedGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongLivedGracefulRestartState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertised = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_restart_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool peer_restart_timer_expired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          peer_restart_timer_expired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongLivedGracefulRestartState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LongLivedGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool received = 2;
  if (this->received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_received(), target);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_advertised(), target);
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peer_restart_time(), target);
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_peer_restart_timer_expired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LongLivedGracefulRestartState)
  return target;
}

size_t LongLivedGracefulRestartState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LongLivedGracefulRestartState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool received = 2;
  if (this->received() != 0) {
    total_size += 1 + 1;
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    total_size += 1 + 1;
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    total_size += 1 + 1;
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_restart_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongLivedGracefulRestartState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LongLivedGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestartState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongLivedGracefulRestartState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LongLivedGracefulRestartState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LongLivedGracefulRestartState)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestartState::MergeFrom(const LongLivedGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LongLivedGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from.advertised() != 0) {
    _internal_set_advertised(from._internal_advertised());
  }
  if (from.peer_restart_timer_expired() != 0) {
    _internal_set_peer_restart_timer_expired(from._internal_peer_restart_timer_expired());
  }
  if (from.peer_restart_time() != 0) {
    _internal_set_peer_restart_time(from._internal_peer_restart_time());
  }
}

void LongLivedGracefulRestartState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LongLivedGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestartState::CopyFrom(const LongLivedGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LongLivedGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestartState::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestartState::InternalSwap(LongLivedGracefulRestartState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongLivedGracefulRestartState, peer_restart_time_)
      + sizeof(LongLivedGracefulRestartState::peer_restart_time_)
      - PROTOBUF_FIELD_OFFSET(LongLivedGracefulRestartState, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLivedGracefulRestartState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongLivedGracefulRestart::InitAsDefaultInstance() {
  ::apipb::_LongLivedGracefulRestart_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::LongLivedGracefulRestartConfig*>(
      ::apipb::LongLivedGracefulRestartConfig::internal_default_instance());
  ::apipb::_LongLivedGracefulRestart_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::LongLivedGracefulRestartState*>(
      ::apipb::LongLivedGracefulRestartState::internal_default_instance());
}
class LongLivedGracefulRestart::_Internal {
 public:
  static const ::apipb::LongLivedGracefulRestartConfig& config(const LongLivedGracefulRestart* msg);
  static const ::apipb::LongLivedGracefulRestartState& state(const LongLivedGracefulRestart* msg);
};

const ::apipb::LongLivedGracefulRestartConfig&
LongLivedGracefulRestart::_Internal::config(const LongLivedGracefulRestart* msg) {
  return *msg->config_;
}
const ::apipb::LongLivedGracefulRestartState&
LongLivedGracefulRestart::_Internal::state(const LongLivedGracefulRestart* msg) {
  return *msg->state_;
}
LongLivedGracefulRestart::LongLivedGracefulRestart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LongLivedGracefulRestart)
}
LongLivedGracefulRestart::LongLivedGracefulRestart(const LongLivedGracefulRestart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::LongLivedGracefulRestartConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::LongLivedGracefulRestartState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.LongLivedGracefulRestart)
}

void LongLivedGracefulRestart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LongLivedGracefulRestart_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

LongLivedGracefulRestart::~LongLivedGracefulRestart() {
  // @@protoc_insertion_point(destructor:apipb.LongLivedGracefulRestart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongLivedGracefulRestart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void LongLivedGracefulRestart::ArenaDtor(void* object) {
  LongLivedGracefulRestart* _this = reinterpret_cast< LongLivedGracefulRestart* >(object);
  (void)_this;
}
void LongLivedGracefulRestart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongLivedGracefulRestart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongLivedGracefulRestart& LongLivedGracefulRestart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongLivedGracefulRestart_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LongLivedGracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LongLivedGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongLivedGracefulRestart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.LongLivedGracefulRestartConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LongLivedGracefulRestartState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongLivedGracefulRestart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LongLivedGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LongLivedGracefulRestart)
  return target;
}

size_t LongLivedGracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LongLivedGracefulRestart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongLivedGracefulRestart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LongLivedGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongLivedGracefulRestart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LongLivedGracefulRestart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LongLivedGracefulRestart)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestart::MergeFrom(const LongLivedGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LongLivedGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::LongLivedGracefulRestartConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::LongLivedGracefulRestartState::MergeFrom(from._internal_state());
  }
}

void LongLivedGracefulRestart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LongLivedGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestart::CopyFrom(const LongLivedGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LongLivedGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestart::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestart::InternalSwap(LongLivedGracefulRestart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongLivedGracefulRestart, state_)
      + sizeof(LongLivedGracefulRestart::state_)
      - PROTOBUF_FIELD_OFFSET(LongLivedGracefulRestart, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLivedGracefulRestart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AfiSafi::InitAsDefaultInstance() {
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->mp_graceful_restart_ = const_cast< ::apipb::MpGracefulRestart*>(
      ::apipb::MpGracefulRestart::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::AfiSafiConfig*>(
      ::apipb::AfiSafiConfig::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::AfiSafiState*>(
      ::apipb::AfiSafiState::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::apipb::ApplyPolicy*>(
      ::apipb::ApplyPolicy::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->route_selection_options_ = const_cast< ::apipb::RouteSelectionOptions*>(
      ::apipb::RouteSelectionOptions::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->use_multiple_paths_ = const_cast< ::apipb::UseMultiplePaths*>(
      ::apipb::UseMultiplePaths::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->prefix_limits_ = const_cast< ::apipb::PrefixLimit*>(
      ::apipb::PrefixLimit::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->route_target_membership_ = const_cast< ::apipb::RouteTargetMembership*>(
      ::apipb::RouteTargetMembership::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->long_lived_graceful_restart_ = const_cast< ::apipb::LongLivedGracefulRestart*>(
      ::apipb::LongLivedGracefulRestart::internal_default_instance());
  ::apipb::_AfiSafi_default_instance_._instance.get_mutable()->add_paths_ = const_cast< ::apipb::AddPaths*>(
      ::apipb::AddPaths::internal_default_instance());
}
class AfiSafi::_Internal {
 public:
  static const ::apipb::MpGracefulRestart& mp_graceful_restart(const AfiSafi* msg);
  static const ::apipb::AfiSafiConfig& config(const AfiSafi* msg);
  static const ::apipb::AfiSafiState& state(const AfiSafi* msg);
  static const ::apipb::ApplyPolicy& apply_policy(const AfiSafi* msg);
  static const ::apipb::RouteSelectionOptions& route_selection_options(const AfiSafi* msg);
  static const ::apipb::UseMultiplePaths& use_multiple_paths(const AfiSafi* msg);
  static const ::apipb::PrefixLimit& prefix_limits(const AfiSafi* msg);
  static const ::apipb::RouteTargetMembership& route_target_membership(const AfiSafi* msg);
  static const ::apipb::LongLivedGracefulRestart& long_lived_graceful_restart(const AfiSafi* msg);
  static const ::apipb::AddPaths& add_paths(const AfiSafi* msg);
};

const ::apipb::MpGracefulRestart&
AfiSafi::_Internal::mp_graceful_restart(const AfiSafi* msg) {
  return *msg->mp_graceful_restart_;
}
const ::apipb::AfiSafiConfig&
AfiSafi::_Internal::config(const AfiSafi* msg) {
  return *msg->config_;
}
const ::apipb::AfiSafiState&
AfiSafi::_Internal::state(const AfiSafi* msg) {
  return *msg->state_;
}
const ::apipb::ApplyPolicy&
AfiSafi::_Internal::apply_policy(const AfiSafi* msg) {
  return *msg->apply_policy_;
}
const ::apipb::RouteSelectionOptions&
AfiSafi::_Internal::route_selection_options(const AfiSafi* msg) {
  return *msg->route_selection_options_;
}
const ::apipb::UseMultiplePaths&
AfiSafi::_Internal::use_multiple_paths(const AfiSafi* msg) {
  return *msg->use_multiple_paths_;
}
const ::apipb::PrefixLimit&
AfiSafi::_Internal::prefix_limits(const AfiSafi* msg) {
  return *msg->prefix_limits_;
}
const ::apipb::RouteTargetMembership&
AfiSafi::_Internal::route_target_membership(const AfiSafi* msg) {
  return *msg->route_target_membership_;
}
const ::apipb::LongLivedGracefulRestart&
AfiSafi::_Internal::long_lived_graceful_restart(const AfiSafi* msg) {
  return *msg->long_lived_graceful_restart_;
}
const ::apipb::AddPaths&
AfiSafi::_Internal::add_paths(const AfiSafi* msg) {
  return *msg->add_paths_;
}
AfiSafi::AfiSafi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AfiSafi)
}
AfiSafi::AfiSafi(const AfiSafi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mp_graceful_restart()) {
    mp_graceful_restart_ = new ::apipb::MpGracefulRestart(*from.mp_graceful_restart_);
  } else {
    mp_graceful_restart_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::apipb::AfiSafiConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::AfiSafiState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::apipb::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  if (from._internal_has_route_selection_options()) {
    route_selection_options_ = new ::apipb::RouteSelectionOptions(*from.route_selection_options_);
  } else {
    route_selection_options_ = nullptr;
  }
  if (from._internal_has_use_multiple_paths()) {
    use_multiple_paths_ = new ::apipb::UseMultiplePaths(*from.use_multiple_paths_);
  } else {
    use_multiple_paths_ = nullptr;
  }
  if (from._internal_has_prefix_limits()) {
    prefix_limits_ = new ::apipb::PrefixLimit(*from.prefix_limits_);
  } else {
    prefix_limits_ = nullptr;
  }
  if (from._internal_has_route_target_membership()) {
    route_target_membership_ = new ::apipb::RouteTargetMembership(*from.route_target_membership_);
  } else {
    route_target_membership_ = nullptr;
  }
  if (from._internal_has_long_lived_graceful_restart()) {
    long_lived_graceful_restart_ = new ::apipb::LongLivedGracefulRestart(*from.long_lived_graceful_restart_);
  } else {
    long_lived_graceful_restart_ = nullptr;
  }
  if (from._internal_has_add_paths()) {
    add_paths_ = new ::apipb::AddPaths(*from.add_paths_);
  } else {
    add_paths_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AfiSafi)
}

void AfiSafi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfiSafi_gobgp_2eproto.base);
  ::memset(&mp_graceful_restart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_paths_) -
      reinterpret_cast<char*>(&mp_graceful_restart_)) + sizeof(add_paths_));
}

AfiSafi::~AfiSafi() {
  // @@protoc_insertion_point(destructor:apipb.AfiSafi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AfiSafi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mp_graceful_restart_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete route_selection_options_;
  if (this != internal_default_instance()) delete use_multiple_paths_;
  if (this != internal_default_instance()) delete prefix_limits_;
  if (this != internal_default_instance()) delete route_target_membership_;
  if (this != internal_default_instance()) delete long_lived_graceful_restart_;
  if (this != internal_default_instance()) delete add_paths_;
}

void AfiSafi::ArenaDtor(void* object) {
  AfiSafi* _this = reinterpret_cast< AfiSafi* >(object);
  (void)_this;
}
void AfiSafi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfiSafi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfiSafi& AfiSafi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfiSafi_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AfiSafi::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AfiSafi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mp_graceful_restart_ != nullptr) {
    delete mp_graceful_restart_;
  }
  mp_graceful_restart_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  if (GetArena() == nullptr && route_selection_options_ != nullptr) {
    delete route_selection_options_;
  }
  route_selection_options_ = nullptr;
  if (GetArena() == nullptr && use_multiple_paths_ != nullptr) {
    delete use_multiple_paths_;
  }
  use_multiple_paths_ = nullptr;
  if (GetArena() == nullptr && prefix_limits_ != nullptr) {
    delete prefix_limits_;
  }
  prefix_limits_ = nullptr;
  if (GetArena() == nullptr && route_target_membership_ != nullptr) {
    delete route_target_membership_;
  }
  route_target_membership_ = nullptr;
  if (GetArena() == nullptr && long_lived_graceful_restart_ != nullptr) {
    delete long_lived_graceful_restart_;
  }
  long_lived_graceful_restart_ = nullptr;
  if (GetArena() == nullptr && add_paths_ != nullptr) {
    delete add_paths_;
  }
  add_paths_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfiSafi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.MpGracefulRestart mp_graceful_restart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mp_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AfiSafiConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AfiSafiState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.ApplyPolicy apply_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteSelectionOptions route_selection_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_selection_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.UseMultiplePaths use_multiple_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_multiple_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PrefixLimit prefix_limits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteTargetMembership route_target_membership = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_target_membership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LongLivedGracefulRestart long_lived_graceful_restart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_lived_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AddPaths add_paths = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfiSafi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AfiSafi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mp_graceful_restart(this), target, stream);
  }

  // .apipb.AfiSafiConfig config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .apipb.AfiSafiState state = 3;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .apipb.ApplyPolicy apply_policy = 4;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::apply_policy(this), target, stream);
  }

  // .apipb.RouteSelectionOptions route_selection_options = 5;
  if (this->has_route_selection_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::route_selection_options(this), target, stream);
  }

  // .apipb.UseMultiplePaths use_multiple_paths = 6;
  if (this->has_use_multiple_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::use_multiple_paths(this), target, stream);
  }

  // .apipb.PrefixLimit prefix_limits = 7;
  if (this->has_prefix_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::prefix_limits(this), target, stream);
  }

  // .apipb.RouteTargetMembership route_target_membership = 8;
  if (this->has_route_target_membership()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::route_target_membership(this), target, stream);
  }

  // .apipb.LongLivedGracefulRestart long_lived_graceful_restart = 9;
  if (this->has_long_lived_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::long_lived_graceful_restart(this), target, stream);
  }

  // .apipb.AddPaths add_paths = 10;
  if (this->has_add_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::add_paths(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AfiSafi)
  return target;
}

size_t AfiSafi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AfiSafi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mp_graceful_restart_);
  }

  // .apipb.AfiSafiConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.AfiSafiState state = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .apipb.ApplyPolicy apply_policy = 4;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // .apipb.RouteSelectionOptions route_selection_options = 5;
  if (this->has_route_selection_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_selection_options_);
  }

  // .apipb.UseMultiplePaths use_multiple_paths = 6;
  if (this->has_use_multiple_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_multiple_paths_);
  }

  // .apipb.PrefixLimit prefix_limits = 7;
  if (this->has_prefix_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_limits_);
  }

  // .apipb.RouteTargetMembership route_target_membership = 8;
  if (this->has_route_target_membership()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_target_membership_);
  }

  // .apipb.LongLivedGracefulRestart long_lived_graceful_restart = 9;
  if (this->has_long_lived_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *long_lived_graceful_restart_);
  }

  // .apipb.AddPaths add_paths = 10;
  if (this->has_add_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_paths_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfiSafi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfiSafi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AfiSafi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AfiSafi)
    MergeFrom(*source);
  }
}

void AfiSafi::MergeFrom(const AfiSafi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mp_graceful_restart()) {
    _internal_mutable_mp_graceful_restart()->::apipb::MpGracefulRestart::MergeFrom(from._internal_mp_graceful_restart());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::apipb::AfiSafiConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::AfiSafiState::MergeFrom(from._internal_state());
  }
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::apipb::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.has_route_selection_options()) {
    _internal_mutable_route_selection_options()->::apipb::RouteSelectionOptions::MergeFrom(from._internal_route_selection_options());
  }
  if (from.has_use_multiple_paths()) {
    _internal_mutable_use_multiple_paths()->::apipb::UseMultiplePaths::MergeFrom(from._internal_use_multiple_paths());
  }
  if (from.has_prefix_limits()) {
    _internal_mutable_prefix_limits()->::apipb::PrefixLimit::MergeFrom(from._internal_prefix_limits());
  }
  if (from.has_route_target_membership()) {
    _internal_mutable_route_target_membership()->::apipb::RouteTargetMembership::MergeFrom(from._internal_route_target_membership());
  }
  if (from.has_long_lived_graceful_restart()) {
    _internal_mutable_long_lived_graceful_restart()->::apipb::LongLivedGracefulRestart::MergeFrom(from._internal_long_lived_graceful_restart());
  }
  if (from.has_add_paths()) {
    _internal_mutable_add_paths()->::apipb::AddPaths::MergeFrom(from._internal_add_paths());
  }
}

void AfiSafi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafi::CopyFrom(const AfiSafi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafi::IsInitialized() const {
  return true;
}

void AfiSafi::InternalSwap(AfiSafi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AfiSafi, add_paths_)
      + sizeof(AfiSafi::add_paths_)
      - PROTOBUF_FIELD_OFFSET(AfiSafi, mp_graceful_restart_)>(
          reinterpret_cast<char*>(&mp_graceful_restart_),
          reinterpret_cast<char*>(&other->mp_graceful_restart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AfiSafi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathsConfig::InitAsDefaultInstance() {
}
class AddPathsConfig::_Internal {
 public:
};

AddPathsConfig::AddPathsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPathsConfig)
}
AddPathsConfig::AddPathsConfig(const AddPathsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&receive_, &from.receive_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_max_) -
    reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  // @@protoc_insertion_point(copy_constructor:apipb.AddPathsConfig)
}

void AddPathsConfig::SharedCtor() {
  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
}

AddPathsConfig::~AddPathsConfig() {
  // @@protoc_insertion_point(destructor:apipb.AddPathsConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPathsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddPathsConfig::ArenaDtor(void* object) {
  AddPathsConfig* _this = reinterpret_cast< AddPathsConfig* >(object);
  (void)_this;
}
void AddPathsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPathsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathsConfig& AddPathsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathsConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPathsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool receive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_receive(), target);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_send_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPathsConfig)
  return target;
}

size_t AddPathsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPathsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPathsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPathsConfig)
    MergeFrom(*source);
  }
}

void AddPathsConfig::MergeFrom(const AddPathsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receive() != 0) {
    _internal_set_receive(from._internal_receive());
  }
  if (from.send_max() != 0) {
    _internal_set_send_max(from._internal_send_max());
  }
}

void AddPathsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathsConfig::CopyFrom(const AddPathsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathsConfig::IsInitialized() const {
  return true;
}

void AddPathsConfig::InternalSwap(AddPathsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPathsConfig, send_max_)
      + sizeof(AddPathsConfig::send_max_)
      - PROTOBUF_FIELD_OFFSET(AddPathsConfig, receive_)>(
          reinterpret_cast<char*>(&receive_),
          reinterpret_cast<char*>(&other->receive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathsState::InitAsDefaultInstance() {
}
class AddPathsState::_Internal {
 public:
};

AddPathsState::AddPathsState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPathsState)
}
AddPathsState::AddPathsState(const AddPathsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&receive_, &from.receive_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_max_) -
    reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  // @@protoc_insertion_point(copy_constructor:apipb.AddPathsState)
}

void AddPathsState::SharedCtor() {
  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
}

AddPathsState::~AddPathsState() {
  // @@protoc_insertion_point(destructor:apipb.AddPathsState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPathsState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddPathsState::ArenaDtor(void* object) {
  AddPathsState* _this = reinterpret_cast< AddPathsState* >(object);
  (void)_this;
}
void AddPathsState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPathsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathsState& AddPathsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathsState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathsState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPathsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool receive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_receive(), target);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_send_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPathsState)
  return target;
}

size_t AddPathsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPathsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPathsState)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPathsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPathsState)
    MergeFrom(*source);
  }
}

void AddPathsState::MergeFrom(const AddPathsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPathsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receive() != 0) {
    _internal_set_receive(from._internal_receive());
  }
  if (from.send_max() != 0) {
    _internal_set_send_max(from._internal_send_max());
  }
}

void AddPathsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathsState::CopyFrom(const AddPathsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathsState::IsInitialized() const {
  return true;
}

void AddPathsState::InternalSwap(AddPathsState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPathsState, send_max_)
      + sizeof(AddPathsState::send_max_)
      - PROTOBUF_FIELD_OFFSET(AddPathsState, receive_)>(
          reinterpret_cast<char*>(&receive_),
          reinterpret_cast<char*>(&other->receive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPaths::InitAsDefaultInstance() {
  ::apipb::_AddPaths_default_instance_._instance.get_mutable()->config_ = const_cast< ::apipb::AddPathsConfig*>(
      ::apipb::AddPathsConfig::internal_default_instance());
  ::apipb::_AddPaths_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::AddPathsState*>(
      ::apipb::AddPathsState::internal_default_instance());
}
class AddPaths::_Internal {
 public:
  static const ::apipb::AddPathsConfig& config(const AddPaths* msg);
  static const ::apipb::AddPathsState& state(const AddPaths* msg);
};

const ::apipb::AddPathsConfig&
AddPaths::_Internal::config(const AddPaths* msg) {
  return *msg->config_;
}
const ::apipb::AddPathsState&
AddPaths::_Internal::state(const AddPaths* msg) {
  return *msg->state_;
}
AddPaths::AddPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AddPaths)
}
AddPaths::AddPaths(const AddPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::apipb::AddPathsConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::AddPathsState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.AddPaths)
}

void AddPaths::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPaths_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

AddPaths::~AddPaths() {
  // @@protoc_insertion_point(destructor:apipb.AddPaths)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPaths::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void AddPaths::ArenaDtor(void* object) {
  AddPaths* _this = reinterpret_cast< AddPaths* >(object);
  (void)_this;
}
void AddPaths::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPaths& AddPaths::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPaths_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AddPaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPaths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.AddPathsConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AddPathsState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPaths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AddPaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.AddPathsConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .apipb.AddPathsState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AddPaths)
  return target;
}

size_t AddPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AddPaths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.AddPathsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .apipb.AddPathsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPaths::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AddPaths)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPaths* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPaths>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AddPaths)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AddPaths)
    MergeFrom(*source);
  }
}

void AddPaths::MergeFrom(const AddPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AddPaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::apipb::AddPathsConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::AddPathsState::MergeFrom(from._internal_state());
  }
}

void AddPaths::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AddPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPaths::CopyFrom(const AddPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AddPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPaths::IsInitialized() const {
  return true;
}

void AddPaths::InternalSwap(AddPaths* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPaths, state_)
      + sizeof(AddPaths::state_)
      - PROTOBUF_FIELD_OFFSET(AddPaths, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPaths::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prefix::InitAsDefaultInstance() {
}
class Prefix::_Internal {
 public:
};

Prefix::Prefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Prefix)
}
Prefix::Prefix(const Prefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_prefix().empty()) {
    ip_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_prefix(),
      GetArena());
  }
  ::memcpy(&mask_length_min_, &from.mask_length_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_length_max_) -
    reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  // @@protoc_insertion_point(copy_constructor:apipb.Prefix)
}

void Prefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prefix_gobgp_2eproto.base);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_length_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_length_max_) -
      reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
}

Prefix::~Prefix() {
  // @@protoc_insertion_point(destructor:apipb.Prefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prefix::ArenaDtor(void* object) {
  Prefix* _this = reinterpret_cast< Prefix* >(object);
  (void)_this;
}
void Prefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prefix& Prefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prefix_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Prefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&mask_length_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_length_max_) -
      reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Prefix.ip_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mask_length_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mask_length_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mask_length_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mask_length_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Prefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_prefix().data(), static_cast<int>(this->_internal_ip_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Prefix.ip_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_prefix(), target);
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mask_length_min(), target);
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mask_length_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Prefix)
  return target;
}

size_t Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Prefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_prefix());
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_length_min());
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_length_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  const Prefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Prefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Prefix)
    MergeFrom(*source);
  }
}

void Prefix::MergeFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_prefix().size() > 0) {
    _internal_set_ip_prefix(from._internal_ip_prefix());
  }
  if (from.mask_length_min() != 0) {
    _internal_set_mask_length_min(from._internal_mask_length_min());
  }
  if (from.mask_length_max() != 0) {
    _internal_set_mask_length_max(from._internal_mask_length_max());
  }
}

void Prefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prefix::CopyFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prefix::IsInitialized() const {
  return true;
}

void Prefix::InternalSwap(Prefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_prefix_.Swap(&other->ip_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prefix, mask_length_max_)
      + sizeof(Prefix::mask_length_max_)
      - PROTOBUF_FIELD_OFFSET(Prefix, mask_length_min_)>(
          reinterpret_cast<char*>(&mask_length_min_),
          reinterpret_cast<char*>(&other->mask_length_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefinedSet::InitAsDefaultInstance() {
}
class DefinedSet::_Internal {
 public:
};

DefinedSet::DefinedSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena),
  prefixes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DefinedSet)
}
DefinedSet::DefinedSet(const DefinedSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_),
      prefixes_(from.prefixes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  defined_type_ = from.defined_type_;
  // @@protoc_insertion_point(copy_constructor:apipb.DefinedSet)
}

void DefinedSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefinedSet_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_type_ = 0;
}

DefinedSet::~DefinedSet() {
  // @@protoc_insertion_point(destructor:apipb.DefinedSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefinedSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefinedSet::ArenaDtor(void* object) {
  DefinedSet* _this = reinterpret_cast< DefinedSet* >(object);
  (void)_this;
}
void DefinedSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefinedSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefinedSet& DefinedSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefinedSet_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DefinedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DefinedSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  prefixes_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defined_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefinedSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.DefinedType defined_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_defined_type(static_cast<::apipb::DefinedType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DefinedSet.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.DefinedSet.list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Prefix prefixes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefixes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefinedSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DefinedSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_defined_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DefinedSet.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string list = 3;
  for (int i = 0, n = this->_internal_list_size(); i < n; i++) {
    const auto& s = this->_internal_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.DefinedSet.list");
    target = stream->WriteString(3, s, target);
  }

  // repeated .apipb.Prefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefixes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prefixes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DefinedSet)
  return target;
}

size_t DefinedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DefinedSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(list_.size());
  for (int i = 0, n = list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      list_.Get(i));
  }

  // repeated .apipb.Prefix prefixes = 4;
  total_size += 1UL * this->_internal_prefixes_size();
  for (const auto& msg : this->prefixes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_defined_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefinedSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DefinedSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DefinedSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefinedSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DefinedSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DefinedSet)
    MergeFrom(*source);
  }
}

void DefinedSet::MergeFrom(const DefinedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DefinedSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  prefixes_.MergeFrom(from.prefixes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.defined_type() != 0) {
    _internal_set_defined_type(from._internal_defined_type());
  }
}

void DefinedSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DefinedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefinedSet::CopyFrom(const DefinedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DefinedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefinedSet::IsInitialized() const {
  return true;
}

void DefinedSet::InternalSwap(DefinedSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  prefixes_.InternalSwap(&other->prefixes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(defined_type_, other->defined_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefinedSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchSet::InitAsDefaultInstance() {
}
class MatchSet::_Internal {
 public:
};

MatchSet::MatchSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MatchSet)
}
MatchSet::MatchSet(const MatchSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.MatchSet)
}

void MatchSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchSet_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MatchSet::~MatchSet() {
  // @@protoc_insertion_point(destructor:apipb.MatchSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchSet::ArenaDtor(void* object) {
  MatchSet* _this = reinterpret_cast< MatchSet* >(object);
  (void)_this;
}
void MatchSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchSet& MatchSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchSet_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MatchSet::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MatchSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.MatchSet.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::MatchSet_Type>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.MatchSet.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MatchSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.MatchSet.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.MatchSet.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MatchSet)
  return target;
}

size_t MatchSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MatchSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.MatchSet.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MatchSet)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MatchSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MatchSet)
    MergeFrom(*source);
  }
}

void MatchSet::MergeFrom(const MatchSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MatchSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MatchSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MatchSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSet::CopyFrom(const MatchSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MatchSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSet::IsInitialized() const {
  return true;
}

void MatchSet::InternalSwap(MatchSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsPathLength::InitAsDefaultInstance() {
}
class AsPathLength::_Internal {
 public:
};

AsPathLength::AsPathLength(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AsPathLength)
}
AsPathLength::AsPathLength(const AsPathLength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&type_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:apipb.AsPathLength)
}

void AsPathLength::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
}

AsPathLength::~AsPathLength() {
  // @@protoc_insertion_point(destructor:apipb.AsPathLength)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsPathLength::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsPathLength::ArenaDtor(void* object) {
  AsPathLength* _this = reinterpret_cast< AsPathLength* >(object);
  (void)_this;
}
void AsPathLength::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsPathLength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsPathLength& AsPathLength::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsPathLength_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AsPathLength::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AsPathLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsPathLength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.AsPathLength.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::AsPathLength_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsPathLength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AsPathLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.AsPathLength.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AsPathLength)
  return target;
}

size_t AsPathLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AsPathLength)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.AsPathLength.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsPathLength::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AsPathLength)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPathLength* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsPathLength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AsPathLength)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AsPathLength)
    MergeFrom(*source);
  }
}

void AsPathLength::MergeFrom(const AsPathLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AsPathLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void AsPathLength::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AsPathLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPathLength::CopyFrom(const AsPathLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AsPathLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPathLength::IsInitialized() const {
  return true;
}

void AsPathLength::InternalSwap(AsPathLength* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsPathLength, length_)
      + sizeof(AsPathLength::length_)
      - PROTOBUF_FIELD_OFFSET(AsPathLength, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsPathLength::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conditions::InitAsDefaultInstance() {
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->prefix_set_ = const_cast< ::apipb::MatchSet*>(
      ::apipb::MatchSet::internal_default_instance());
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->neighbor_set_ = const_cast< ::apipb::MatchSet*>(
      ::apipb::MatchSet::internal_default_instance());
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->as_path_length_ = const_cast< ::apipb::AsPathLength*>(
      ::apipb::AsPathLength::internal_default_instance());
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->as_path_set_ = const_cast< ::apipb::MatchSet*>(
      ::apipb::MatchSet::internal_default_instance());
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->community_set_ = const_cast< ::apipb::MatchSet*>(
      ::apipb::MatchSet::internal_default_instance());
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->ext_community_set_ = const_cast< ::apipb::MatchSet*>(
      ::apipb::MatchSet::internal_default_instance());
  ::apipb::_Conditions_default_instance_._instance.get_mutable()->large_community_set_ = const_cast< ::apipb::MatchSet*>(
      ::apipb::MatchSet::internal_default_instance());
}
class Conditions::_Internal {
 public:
  static const ::apipb::MatchSet& prefix_set(const Conditions* msg);
  static const ::apipb::MatchSet& neighbor_set(const Conditions* msg);
  static const ::apipb::AsPathLength& as_path_length(const Conditions* msg);
  static const ::apipb::MatchSet& as_path_set(const Conditions* msg);
  static const ::apipb::MatchSet& community_set(const Conditions* msg);
  static const ::apipb::MatchSet& ext_community_set(const Conditions* msg);
  static const ::apipb::MatchSet& large_community_set(const Conditions* msg);
};

const ::apipb::MatchSet&
Conditions::_Internal::prefix_set(const Conditions* msg) {
  return *msg->prefix_set_;
}
const ::apipb::MatchSet&
Conditions::_Internal::neighbor_set(const Conditions* msg) {
  return *msg->neighbor_set_;
}
const ::apipb::AsPathLength&
Conditions::_Internal::as_path_length(const Conditions* msg) {
  return *msg->as_path_length_;
}
const ::apipb::MatchSet&
Conditions::_Internal::as_path_set(const Conditions* msg) {
  return *msg->as_path_set_;
}
const ::apipb::MatchSet&
Conditions::_Internal::community_set(const Conditions* msg) {
  return *msg->community_set_;
}
const ::apipb::MatchSet&
Conditions::_Internal::ext_community_set(const Conditions* msg) {
  return *msg->ext_community_set_;
}
const ::apipb::MatchSet&
Conditions::_Internal::large_community_set(const Conditions* msg) {
  return *msg->large_community_set_;
}
Conditions::Conditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  next_hop_in_list_(arena),
  afi_safi_in_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Conditions)
}
Conditions::Conditions(const Conditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      next_hop_in_list_(from.next_hop_in_list_),
      afi_safi_in_(from.afi_safi_in_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix_set()) {
    prefix_set_ = new ::apipb::MatchSet(*from.prefix_set_);
  } else {
    prefix_set_ = nullptr;
  }
  if (from._internal_has_neighbor_set()) {
    neighbor_set_ = new ::apipb::MatchSet(*from.neighbor_set_);
  } else {
    neighbor_set_ = nullptr;
  }
  if (from._internal_has_as_path_length()) {
    as_path_length_ = new ::apipb::AsPathLength(*from.as_path_length_);
  } else {
    as_path_length_ = nullptr;
  }
  if (from._internal_has_as_path_set()) {
    as_path_set_ = new ::apipb::MatchSet(*from.as_path_set_);
  } else {
    as_path_set_ = nullptr;
  }
  if (from._internal_has_community_set()) {
    community_set_ = new ::apipb::MatchSet(*from.community_set_);
  } else {
    community_set_ = nullptr;
  }
  if (from._internal_has_ext_community_set()) {
    ext_community_set_ = new ::apipb::MatchSet(*from.ext_community_set_);
  } else {
    ext_community_set_ = nullptr;
  }
  if (from._internal_has_large_community_set()) {
    large_community_set_ = new ::apipb::MatchSet(*from.large_community_set_);
  } else {
    large_community_set_ = nullptr;
  }
  ::memcpy(&rpki_result_, &from.rpki_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&route_type_) -
    reinterpret_cast<char*>(&rpki_result_)) + sizeof(route_type_));
  // @@protoc_insertion_point(copy_constructor:apipb.Conditions)
}

void Conditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conditions_gobgp_2eproto.base);
  ::memset(&prefix_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&prefix_set_)) + sizeof(route_type_));
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:apipb.Conditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Conditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prefix_set_;
  if (this != internal_default_instance()) delete neighbor_set_;
  if (this != internal_default_instance()) delete as_path_length_;
  if (this != internal_default_instance()) delete as_path_set_;
  if (this != internal_default_instance()) delete community_set_;
  if (this != internal_default_instance()) delete ext_community_set_;
  if (this != internal_default_instance()) delete large_community_set_;
}

void Conditions::ArenaDtor(void* object) {
  Conditions* _this = reinterpret_cast< Conditions* >(object);
  (void)_this;
}
void Conditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Conditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conditions& Conditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conditions_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_hop_in_list_.Clear();
  afi_safi_in_.Clear();
  if (GetArena() == nullptr && prefix_set_ != nullptr) {
    delete prefix_set_;
  }
  prefix_set_ = nullptr;
  if (GetArena() == nullptr && neighbor_set_ != nullptr) {
    delete neighbor_set_;
  }
  neighbor_set_ = nullptr;
  if (GetArena() == nullptr && as_path_length_ != nullptr) {
    delete as_path_length_;
  }
  as_path_length_ = nullptr;
  if (GetArena() == nullptr && as_path_set_ != nullptr) {
    delete as_path_set_;
  }
  as_path_set_ = nullptr;
  if (GetArena() == nullptr && community_set_ != nullptr) {
    delete community_set_;
  }
  community_set_ = nullptr;
  if (GetArena() == nullptr && ext_community_set_ != nullptr) {
    delete ext_community_set_;
  }
  ext_community_set_ = nullptr;
  if (GetArena() == nullptr && large_community_set_ != nullptr) {
    delete large_community_set_;
  }
  large_community_set_ = nullptr;
  ::memset(&rpki_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&rpki_result_)) + sizeof(route_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.MatchSet prefix_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.MatchSet neighbor_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AsPathLength as_path_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_path_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.MatchSet as_path_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_path_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.MatchSet community_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.MatchSet ext_community_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_community_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rpki_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rpki_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Conditions.RouteType route_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_type(static_cast<::apipb::Conditions_RouteType>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.MatchSet large_community_set = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_community_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string next_hop_in_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_next_hop_in_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Conditions.next_hop_in_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Family afi_safi_in = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afi_safi_in(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix_set(this), target, stream);
  }

  // .apipb.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neighbor_set(this), target, stream);
  }

  // .apipb.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::as_path_length(this), target, stream);
  }

  // .apipb.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::as_path_set(this), target, stream);
  }

  // .apipb.MatchSet community_set = 5;
  if (this->has_community_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::community_set(this), target, stream);
  }

  // .apipb.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ext_community_set(this), target, stream);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rpki_result(), target);
  }

  // .apipb.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_route_type(), target);
  }

  // .apipb.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::large_community_set(this), target, stream);
  }

  // repeated string next_hop_in_list = 10;
  for (int i = 0, n = this->_internal_next_hop_in_list_size(); i < n; i++) {
    const auto& s = this->_internal_next_hop_in_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Conditions.next_hop_in_list");
    target = stream->WriteString(10, s, target);
  }

  // repeated .apipb.Family afi_safi_in = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afi_safi_in_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_afi_safi_in(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Conditions)
  return target;
}

size_t Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Conditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string next_hop_in_list = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(next_hop_in_list_.size());
  for (int i = 0, n = next_hop_in_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      next_hop_in_list_.Get(i));
  }

  // repeated .apipb.Family afi_safi_in = 11;
  total_size += 1UL * this->_internal_afi_safi_in_size();
  for (const auto& msg : this->afi_safi_in_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apipb.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_set_);
  }

  // .apipb.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbor_set_);
  }

  // .apipb.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_path_length_);
  }

  // .apipb.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_path_set_);
  }

  // .apipb.MatchSet community_set = 5;
  if (this->has_community_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_set_);
  }

  // .apipb.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_community_set_);
  }

  // .apipb.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_community_set_);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpki_result());
  }

  // .apipb.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Conditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Conditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Conditions)
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_hop_in_list_.MergeFrom(from.next_hop_in_list_);
  afi_safi_in_.MergeFrom(from.afi_safi_in_);
  if (from.has_prefix_set()) {
    _internal_mutable_prefix_set()->::apipb::MatchSet::MergeFrom(from._internal_prefix_set());
  }
  if (from.has_neighbor_set()) {
    _internal_mutable_neighbor_set()->::apipb::MatchSet::MergeFrom(from._internal_neighbor_set());
  }
  if (from.has_as_path_length()) {
    _internal_mutable_as_path_length()->::apipb::AsPathLength::MergeFrom(from._internal_as_path_length());
  }
  if (from.has_as_path_set()) {
    _internal_mutable_as_path_set()->::apipb::MatchSet::MergeFrom(from._internal_as_path_set());
  }
  if (from.has_community_set()) {
    _internal_mutable_community_set()->::apipb::MatchSet::MergeFrom(from._internal_community_set());
  }
  if (from.has_ext_community_set()) {
    _internal_mutable_ext_community_set()->::apipb::MatchSet::MergeFrom(from._internal_ext_community_set());
  }
  if (from.has_large_community_set()) {
    _internal_mutable_large_community_set()->::apipb::MatchSet::MergeFrom(from._internal_large_community_set());
  }
  if (from.rpki_result() != 0) {
    _internal_set_rpki_result(from._internal_rpki_result());
  }
  if (from.route_type() != 0) {
    _internal_set_route_type(from._internal_route_type());
  }
}

void Conditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  return true;
}

void Conditions::InternalSwap(Conditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_hop_in_list_.InternalSwap(&other->next_hop_in_list_);
  afi_safi_in_.InternalSwap(&other->afi_safi_in_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conditions, route_type_)
      + sizeof(Conditions::route_type_)
      - PROTOBUF_FIELD_OFFSET(Conditions, prefix_set_)>(
          reinterpret_cast<char*>(&prefix_set_),
          reinterpret_cast<char*>(&other->prefix_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommunityAction::InitAsDefaultInstance() {
}
class CommunityAction::_Internal {
 public:
};

CommunityAction::CommunityAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  communities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.CommunityAction)
}
CommunityAction::CommunityAction(const CommunityAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apipb.CommunityAction)
}

void CommunityAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommunityAction_gobgp_2eproto.base);
  type_ = 0;
}

CommunityAction::~CommunityAction() {
  // @@protoc_insertion_point(destructor:apipb.CommunityAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunityAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommunityAction::ArenaDtor(void* object) {
  CommunityAction* _this = reinterpret_cast< CommunityAction* >(object);
  (void)_this;
}
void CommunityAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunityAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunityAction& CommunityAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunityAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void CommunityAction::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.CommunityAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunityAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.CommunityAction.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::CommunityAction_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated string communities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_communities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.CommunityAction.communities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunityAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.CommunityAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.CommunityAction.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string communities = 2;
  for (int i = 0, n = this->_internal_communities_size(); i < n; i++) {
    const auto& s = this->_internal_communities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.CommunityAction.communities");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.CommunityAction)
  return target;
}

size_t CommunityAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.CommunityAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string communities = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(communities_.size());
  for (int i = 0, n = communities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      communities_.Get(i));
  }

  // .apipb.CommunityAction.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunityAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.CommunityAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunityAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunityAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.CommunityAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.CommunityAction)
    MergeFrom(*source);
  }
}

void CommunityAction::MergeFrom(const CommunityAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.CommunityAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CommunityAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.CommunityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunityAction::CopyFrom(const CommunityAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.CommunityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityAction::IsInitialized() const {
  return true;
}

void CommunityAction::InternalSwap(CommunityAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunityAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedAction::InitAsDefaultInstance() {
}
class MedAction::_Internal {
 public:
};

MedAction::MedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.MedAction)
}
MedAction::MedAction(const MedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apipb.MedAction)
}

void MedAction::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

MedAction::~MedAction() {
  // @@protoc_insertion_point(destructor:apipb.MedAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MedAction::ArenaDtor(void* object) {
  MedAction* _this = reinterpret_cast< MedAction* >(object);
  (void)_this;
}
void MedAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MedAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedAction& MedAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.MedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MedAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.MedAction.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apipb::MedAction_Type>(val));
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.MedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.MedAction.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.MedAction)
  return target;
}

size_t MedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.MedAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // .apipb.MedAction.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.MedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const MedAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.MedAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.MedAction)
    MergeFrom(*source);
  }
}

void MedAction::MergeFrom(const MedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.MedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MedAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.MedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedAction::CopyFrom(const MedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.MedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedAction::IsInitialized() const {
  return true;
}

void MedAction::InternalSwap(MedAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MedAction, type_)
      + sizeof(MedAction::type_)
      - PROTOBUF_FIELD_OFFSET(MedAction, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MedAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsPrependAction::InitAsDefaultInstance() {
}
class AsPrependAction::_Internal {
 public:
};

AsPrependAction::AsPrependAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.AsPrependAction)
}
AsPrependAction::AsPrependAction(const AsPrependAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_left_most_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  // @@protoc_insertion_point(copy_constructor:apipb.AsPrependAction)
}

void AsPrependAction::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_left_most_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
}

AsPrependAction::~AsPrependAction() {
  // @@protoc_insertion_point(destructor:apipb.AsPrependAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsPrependAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsPrependAction::ArenaDtor(void* object) {
  AsPrependAction* _this = reinterpret_cast< AsPrependAction* >(object);
  (void)_this;
}
void AsPrependAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsPrependAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsPrependAction& AsPrependAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsPrependAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AsPrependAction::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.AsPrependAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_left_most_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsPrependAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 repeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_left_most = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_left_most_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsPrependAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.AsPrependAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_repeat(), target);
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_left_most(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.AsPrependAction)
  return target;
}

size_t AsPrependAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.AsPrependAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeat());
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsPrependAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.AsPrependAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPrependAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsPrependAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.AsPrependAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.AsPrependAction)
    MergeFrom(*source);
  }
}

void AsPrependAction::MergeFrom(const AsPrependAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.AsPrependAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
  if (from.use_left_most() != 0) {
    _internal_set_use_left_most(from._internal_use_left_most());
  }
}

void AsPrependAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.AsPrependAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPrependAction::CopyFrom(const AsPrependAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.AsPrependAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPrependAction::IsInitialized() const {
  return true;
}

void AsPrependAction::InternalSwap(AsPrependAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsPrependAction, use_left_most_)
      + sizeof(AsPrependAction::use_left_most_)
      - PROTOBUF_FIELD_OFFSET(AsPrependAction, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsPrependAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NexthopAction::InitAsDefaultInstance() {
}
class NexthopAction::_Internal {
 public:
};

NexthopAction::NexthopAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.NexthopAction)
}
NexthopAction::NexthopAction(const NexthopAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&self_, &from.self_,
    static_cast<size_t>(reinterpret_cast<char*>(&unchanged_) -
    reinterpret_cast<char*>(&self_)) + sizeof(unchanged_));
  // @@protoc_insertion_point(copy_constructor:apipb.NexthopAction)
}

void NexthopAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NexthopAction_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unchanged_) -
      reinterpret_cast<char*>(&self_)) + sizeof(unchanged_));
}

NexthopAction::~NexthopAction() {
  // @@protoc_insertion_point(destructor:apipb.NexthopAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NexthopAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NexthopAction::ArenaDtor(void* object) {
  NexthopAction* _this = reinterpret_cast< NexthopAction* >(object);
  (void)_this;
}
void NexthopAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NexthopAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NexthopAction& NexthopAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NexthopAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void NexthopAction::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.NexthopAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unchanged_) -
      reinterpret_cast<char*>(&self_)) + sizeof(unchanged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NexthopAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.NexthopAction.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool self = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unchanged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unchanged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NexthopAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.NexthopAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.NexthopAction.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool self = 2;
  if (this->self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_self(), target);
  }

  // bool unchanged = 3;
  if (this->unchanged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unchanged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.NexthopAction)
  return target;
}

size_t NexthopAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.NexthopAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool self = 2;
  if (this->self() != 0) {
    total_size += 1 + 1;
  }

  // bool unchanged = 3;
  if (this->unchanged() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NexthopAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.NexthopAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NexthopAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NexthopAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.NexthopAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.NexthopAction)
    MergeFrom(*source);
  }
}

void NexthopAction::MergeFrom(const NexthopAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.NexthopAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.self() != 0) {
    _internal_set_self(from._internal_self());
  }
  if (from.unchanged() != 0) {
    _internal_set_unchanged(from._internal_unchanged());
  }
}

void NexthopAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.NexthopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NexthopAction::CopyFrom(const NexthopAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.NexthopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NexthopAction::IsInitialized() const {
  return true;
}

void NexthopAction::InternalSwap(NexthopAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NexthopAction, unchanged_)
      + sizeof(NexthopAction::unchanged_)
      - PROTOBUF_FIELD_OFFSET(NexthopAction, self_)>(
          reinterpret_cast<char*>(&self_),
          reinterpret_cast<char*>(&other->self_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NexthopAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPrefAction::InitAsDefaultInstance() {
}
class LocalPrefAction::_Internal {
 public:
};

LocalPrefAction::LocalPrefAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.LocalPrefAction)
}
LocalPrefAction::LocalPrefAction(const LocalPrefAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:apipb.LocalPrefAction)
}

void LocalPrefAction::SharedCtor() {
  value_ = 0u;
}

LocalPrefAction::~LocalPrefAction() {
  // @@protoc_insertion_point(destructor:apipb.LocalPrefAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalPrefAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalPrefAction::ArenaDtor(void* object) {
  LocalPrefAction* _this = reinterpret_cast< LocalPrefAction* >(object);
  (void)_this;
}
void LocalPrefAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalPrefAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPrefAction& LocalPrefAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPrefAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LocalPrefAction::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.LocalPrefAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalPrefAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPrefAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.LocalPrefAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.LocalPrefAction)
  return target;
}

size_t LocalPrefAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.LocalPrefAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPrefAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.LocalPrefAction)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPrefAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPrefAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.LocalPrefAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.LocalPrefAction)
    MergeFrom(*source);
  }
}

void LocalPrefAction::MergeFrom(const LocalPrefAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.LocalPrefAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void LocalPrefAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.LocalPrefAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPrefAction::CopyFrom(const LocalPrefAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.LocalPrefAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPrefAction::IsInitialized() const {
  return true;
}

void LocalPrefAction::InternalSwap(LocalPrefAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPrefAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Actions::InitAsDefaultInstance() {
  ::apipb::_Actions_default_instance_._instance.get_mutable()->community_ = const_cast< ::apipb::CommunityAction*>(
      ::apipb::CommunityAction::internal_default_instance());
  ::apipb::_Actions_default_instance_._instance.get_mutable()->med_ = const_cast< ::apipb::MedAction*>(
      ::apipb::MedAction::internal_default_instance());
  ::apipb::_Actions_default_instance_._instance.get_mutable()->as_prepend_ = const_cast< ::apipb::AsPrependAction*>(
      ::apipb::AsPrependAction::internal_default_instance());
  ::apipb::_Actions_default_instance_._instance.get_mutable()->ext_community_ = const_cast< ::apipb::CommunityAction*>(
      ::apipb::CommunityAction::internal_default_instance());
  ::apipb::_Actions_default_instance_._instance.get_mutable()->nexthop_ = const_cast< ::apipb::NexthopAction*>(
      ::apipb::NexthopAction::internal_default_instance());
  ::apipb::_Actions_default_instance_._instance.get_mutable()->local_pref_ = const_cast< ::apipb::LocalPrefAction*>(
      ::apipb::LocalPrefAction::internal_default_instance());
  ::apipb::_Actions_default_instance_._instance.get_mutable()->large_community_ = const_cast< ::apipb::CommunityAction*>(
      ::apipb::CommunityAction::internal_default_instance());
}
class Actions::_Internal {
 public:
  static const ::apipb::CommunityAction& community(const Actions* msg);
  static const ::apipb::MedAction& med(const Actions* msg);
  static const ::apipb::AsPrependAction& as_prepend(const Actions* msg);
  static const ::apipb::CommunityAction& ext_community(const Actions* msg);
  static const ::apipb::NexthopAction& nexthop(const Actions* msg);
  static const ::apipb::LocalPrefAction& local_pref(const Actions* msg);
  static const ::apipb::CommunityAction& large_community(const Actions* msg);
};

const ::apipb::CommunityAction&
Actions::_Internal::community(const Actions* msg) {
  return *msg->community_;
}
const ::apipb::MedAction&
Actions::_Internal::med(const Actions* msg) {
  return *msg->med_;
}
const ::apipb::AsPrependAction&
Actions::_Internal::as_prepend(const Actions* msg) {
  return *msg->as_prepend_;
}
const ::apipb::CommunityAction&
Actions::_Internal::ext_community(const Actions* msg) {
  return *msg->ext_community_;
}
const ::apipb::NexthopAction&
Actions::_Internal::nexthop(const Actions* msg) {
  return *msg->nexthop_;
}
const ::apipb::LocalPrefAction&
Actions::_Internal::local_pref(const Actions* msg) {
  return *msg->local_pref_;
}
const ::apipb::CommunityAction&
Actions::_Internal::large_community(const Actions* msg) {
  return *msg->large_community_;
}
Actions::Actions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Actions)
}
Actions::Actions(const Actions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_community()) {
    community_ = new ::apipb::CommunityAction(*from.community_);
  } else {
    community_ = nullptr;
  }
  if (from._internal_has_med()) {
    med_ = new ::apipb::MedAction(*from.med_);
  } else {
    med_ = nullptr;
  }
  if (from._internal_has_as_prepend()) {
    as_prepend_ = new ::apipb::AsPrependAction(*from.as_prepend_);
  } else {
    as_prepend_ = nullptr;
  }
  if (from._internal_has_ext_community()) {
    ext_community_ = new ::apipb::CommunityAction(*from.ext_community_);
  } else {
    ext_community_ = nullptr;
  }
  if (from._internal_has_nexthop()) {
    nexthop_ = new ::apipb::NexthopAction(*from.nexthop_);
  } else {
    nexthop_ = nullptr;
  }
  if (from._internal_has_local_pref()) {
    local_pref_ = new ::apipb::LocalPrefAction(*from.local_pref_);
  } else {
    local_pref_ = nullptr;
  }
  if (from._internal_has_large_community()) {
    large_community_ = new ::apipb::CommunityAction(*from.large_community_);
  } else {
    large_community_ = nullptr;
  }
  route_action_ = from.route_action_;
  // @@protoc_insertion_point(copy_constructor:apipb.Actions)
}

void Actions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Actions_gobgp_2eproto.base);
  ::memset(&community_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_action_) -
      reinterpret_cast<char*>(&community_)) + sizeof(route_action_));
}

Actions::~Actions() {
  // @@protoc_insertion_point(destructor:apipb.Actions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Actions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete community_;
  if (this != internal_default_instance()) delete med_;
  if (this != internal_default_instance()) delete as_prepend_;
  if (this != internal_default_instance()) delete ext_community_;
  if (this != internal_default_instance()) delete nexthop_;
  if (this != internal_default_instance()) delete local_pref_;
  if (this != internal_default_instance()) delete large_community_;
}

void Actions::ArenaDtor(void* object) {
  Actions* _this = reinterpret_cast< Actions* >(object);
  (void)_this;
}
void Actions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Actions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Actions& Actions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Actions_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Actions::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && community_ != nullptr) {
    delete community_;
  }
  community_ = nullptr;
  if (GetArena() == nullptr && med_ != nullptr) {
    delete med_;
  }
  med_ = nullptr;
  if (GetArena() == nullptr && as_prepend_ != nullptr) {
    delete as_prepend_;
  }
  as_prepend_ = nullptr;
  if (GetArena() == nullptr && ext_community_ != nullptr) {
    delete ext_community_;
  }
  ext_community_ = nullptr;
  if (GetArena() == nullptr && nexthop_ != nullptr) {
    delete nexthop_;
  }
  nexthop_ = nullptr;
  if (GetArena() == nullptr && local_pref_ != nullptr) {
    delete local_pref_;
  }
  local_pref_ = nullptr;
  if (GetArena() == nullptr && large_community_ != nullptr) {
    delete large_community_;
  }
  large_community_ = nullptr;
  route_action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.RouteAction route_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_action(static_cast<::apipb::RouteAction>(val));
        } else goto handle_unusual;
        continue;
      // .apipb.CommunityAction community = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_community(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.MedAction med = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_med(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.AsPrependAction as_prepend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_prepend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.CommunityAction ext_community = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_community(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.NexthopAction nexthop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.LocalPrefAction local_pref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.CommunityAction large_community = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_community(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Actions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_route_action(), target);
  }

  // .apipb.CommunityAction community = 2;
  if (this->has_community()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::community(this), target, stream);
  }

  // .apipb.MedAction med = 3;
  if (this->has_med()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::med(this), target, stream);
  }

  // .apipb.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::as_prepend(this), target, stream);
  }

  // .apipb.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_community(this), target, stream);
  }

  // .apipb.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::nexthop(this), target, stream);
  }

  // .apipb.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_pref(this), target, stream);
  }

  // .apipb.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::large_community(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Actions)
  return target;
}

size_t Actions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Actions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.CommunityAction community = 2;
  if (this->has_community()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_);
  }

  // .apipb.MedAction med = 3;
  if (this->has_med()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *med_);
  }

  // .apipb.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_prepend_);
  }

  // .apipb.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_community_);
  }

  // .apipb.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthop_);
  }

  // .apipb.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pref_);
  }

  // .apipb.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_community_);
  }

  // .apipb.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Actions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  const Actions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Actions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Actions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Actions)
    MergeFrom(*source);
  }
}

void Actions::MergeFrom(const Actions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_community()) {
    _internal_mutable_community()->::apipb::CommunityAction::MergeFrom(from._internal_community());
  }
  if (from.has_med()) {
    _internal_mutable_med()->::apipb::MedAction::MergeFrom(from._internal_med());
  }
  if (from.has_as_prepend()) {
    _internal_mutable_as_prepend()->::apipb::AsPrependAction::MergeFrom(from._internal_as_prepend());
  }
  if (from.has_ext_community()) {
    _internal_mutable_ext_community()->::apipb::CommunityAction::MergeFrom(from._internal_ext_community());
  }
  if (from.has_nexthop()) {
    _internal_mutable_nexthop()->::apipb::NexthopAction::MergeFrom(from._internal_nexthop());
  }
  if (from.has_local_pref()) {
    _internal_mutable_local_pref()->::apipb::LocalPrefAction::MergeFrom(from._internal_local_pref());
  }
  if (from.has_large_community()) {
    _internal_mutable_large_community()->::apipb::CommunityAction::MergeFrom(from._internal_large_community());
  }
  if (from.route_action() != 0) {
    _internal_set_route_action(from._internal_route_action());
  }
}

void Actions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actions::CopyFrom(const Actions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actions::IsInitialized() const {
  return true;
}

void Actions::InternalSwap(Actions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Actions, route_action_)
      + sizeof(Actions::route_action_)
      - PROTOBUF_FIELD_OFFSET(Actions, community_)>(
          reinterpret_cast<char*>(&community_),
          reinterpret_cast<char*>(&other->community_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Actions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Statement::InitAsDefaultInstance() {
  ::apipb::_Statement_default_instance_._instance.get_mutable()->conditions_ = const_cast< ::apipb::Conditions*>(
      ::apipb::Conditions::internal_default_instance());
  ::apipb::_Statement_default_instance_._instance.get_mutable()->actions_ = const_cast< ::apipb::Actions*>(
      ::apipb::Actions::internal_default_instance());
}
class Statement::_Internal {
 public:
  static const ::apipb::Conditions& conditions(const Statement* msg);
  static const ::apipb::Actions& actions(const Statement* msg);
};

const ::apipb::Conditions&
Statement::_Internal::conditions(const Statement* msg) {
  return *msg->conditions_;
}
const ::apipb::Actions&
Statement::_Internal::actions(const Statement* msg) {
  return *msg->actions_;
}
Statement::Statement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Statement)
}
Statement::Statement(const Statement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_conditions()) {
    conditions_ = new ::apipb::Conditions(*from.conditions_);
  } else {
    conditions_ = nullptr;
  }
  if (from._internal_has_actions()) {
    actions_ = new ::apipb::Actions(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Statement)
}

void Statement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Statement_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actions_) -
      reinterpret_cast<char*>(&conditions_)) + sizeof(actions_));
}

Statement::~Statement() {
  // @@protoc_insertion_point(destructor:apipb.Statement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Statement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conditions_;
  if (this != internal_default_instance()) delete actions_;
}

void Statement::ArenaDtor(void* object) {
  Statement* _this = reinterpret_cast< Statement* >(object);
  (void)_this;
}
void Statement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Statement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statement& Statement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statement_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Statement::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Statement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
  if (GetArena() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Statement.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Conditions conditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Actions actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Statement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Statement.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .apipb.Conditions conditions = 2;
  if (this->has_conditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conditions(this), target, stream);
  }

  // .apipb.Actions actions = 3;
  if (this->has_actions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Statement)
  return target;
}

size_t Statement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Statement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.Conditions conditions = 2;
  if (this->has_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conditions_);
  }

  // .apipb.Actions actions = 3;
  if (this->has_actions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  const Statement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Statement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Statement)
    MergeFrom(*source);
  }
}

void Statement::MergeFrom(const Statement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_conditions()) {
    _internal_mutable_conditions()->::apipb::Conditions::MergeFrom(from._internal_conditions());
  }
  if (from.has_actions()) {
    _internal_mutable_actions()->::apipb::Actions::MergeFrom(from._internal_actions());
  }
}

void Statement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statement::CopyFrom(const Statement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statement::IsInitialized() const {
  return true;
}

void Statement::InternalSwap(Statement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statement, actions_)
      + sizeof(Statement::actions_)
      - PROTOBUF_FIELD_OFFSET(Statement, conditions_)>(
          reinterpret_cast<char*>(&conditions_),
          reinterpret_cast<char*>(&other->conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Policy::InitAsDefaultInstance() {
}
class Policy::_Internal {
 public:
};

Policy::Policy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  statements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Policy)
}
Policy::Policy(const Policy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      statements_(from.statements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Policy)
}

void Policy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Policy_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:apipb.Policy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Policy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Policy::ArenaDtor(void* object) {
  Policy* _this = reinterpret_cast< Policy* >(object);
  (void)_this;
}
void Policy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Policy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Policy& Policy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Policy_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statements_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Policy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Policy.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Statement statements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Policy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Policy.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apipb.Statement statements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_statements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Policy)
  return target;
}

size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Policy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.Statement statements = 2;
  total_size += 1UL * this->_internal_statements_size();
  for (const auto& msg : this->statements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Policy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  const Policy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Policy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Policy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Policy)
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Policy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  return true;
}

void Policy::InternalSwap(Policy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  statements_.InternalSwap(&other->statements_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Policy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolicyAssignment::InitAsDefaultInstance() {
}
class PolicyAssignment::_Internal {
 public:
};

PolicyAssignment::PolicyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  policies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.PolicyAssignment)
}
PolicyAssignment::PolicyAssignment(const PolicyAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_action_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(default_action_));
  // @@protoc_insertion_point(copy_constructor:apipb.PolicyAssignment)
}

void PolicyAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyAssignment_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_action_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(default_action_));
}

PolicyAssignment::~PolicyAssignment() {
  // @@protoc_insertion_point(destructor:apipb.PolicyAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolicyAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyAssignment::ArenaDtor(void* object) {
  PolicyAssignment* _this = reinterpret_cast< PolicyAssignment* >(object);
  (void)_this;
}
void PolicyAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyAssignment& PolicyAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyAssignment_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PolicyAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.PolicyAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_action_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(default_action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.PolicyAssignment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.PolicyDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::apipb::PolicyDirection>(val));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Policy policies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .apipb.RouteAction default_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_action(static_cast<::apipb::RouteAction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.PolicyAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.PolicyAssignment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .apipb.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // repeated .apipb.Policy policies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_policies(i), target, stream);
  }

  // .apipb.RouteAction default_action = 5;
  if (this->default_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_default_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.PolicyAssignment)
  return target;
}

size_t PolicyAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.PolicyAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.Policy policies = 4;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apipb.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .apipb.RouteAction default_action = 5;
  if (this->default_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.PolicyAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.PolicyAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.PolicyAssignment)
    MergeFrom(*source);
  }
}

void PolicyAssignment::MergeFrom(const PolicyAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.PolicyAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.default_action() != 0) {
    _internal_set_default_action(from._internal_default_action());
  }
}

void PolicyAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.PolicyAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyAssignment::CopyFrom(const PolicyAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.PolicyAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyAssignment::IsInitialized() const {
  return true;
}

void PolicyAssignment::InternalSwap(PolicyAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  policies_.InternalSwap(&other->policies_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyAssignment, default_action_)
      + sizeof(PolicyAssignment::default_action_)
      - PROTOBUF_FIELD_OFFSET(PolicyAssignment, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingPolicy::InitAsDefaultInstance() {
}
class RoutingPolicy::_Internal {
 public:
};

RoutingPolicy::RoutingPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  defined_sets_(arena),
  policies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RoutingPolicy)
}
RoutingPolicy::RoutingPolicy(const RoutingPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      defined_sets_(from.defined_sets_),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apipb.RoutingPolicy)
}

void RoutingPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingPolicy_gobgp_2eproto.base);
}

RoutingPolicy::~RoutingPolicy() {
  // @@protoc_insertion_point(destructor:apipb.RoutingPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingPolicy::ArenaDtor(void* object) {
  RoutingPolicy* _this = reinterpret_cast< RoutingPolicy* >(object);
  (void)_this;
}
void RoutingPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingPolicy& RoutingPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingPolicy_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RoutingPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RoutingPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defined_sets_.Clear();
  policies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apipb.DefinedSet defined_sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defined_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apipb.Policy policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RoutingPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apipb.DefinedSet defined_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defined_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_defined_sets(i), target, stream);
  }

  // repeated .apipb.Policy policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_policies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RoutingPolicy)
  return target;
}

size_t RoutingPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RoutingPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apipb.DefinedSet defined_sets = 1;
  total_size += 1UL * this->_internal_defined_sets_size();
  for (const auto& msg : this->defined_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apipb.Policy policies = 2;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RoutingPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RoutingPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RoutingPolicy)
    MergeFrom(*source);
  }
}

void RoutingPolicy::MergeFrom(const RoutingPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RoutingPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defined_sets_.MergeFrom(from.defined_sets_);
  policies_.MergeFrom(from.policies_);
}

void RoutingPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RoutingPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingPolicy::CopyFrom(const RoutingPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RoutingPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingPolicy::IsInitialized() const {
  return true;
}

void RoutingPolicy::InternalSwap(RoutingPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  defined_sets_.InternalSwap(&other->defined_sets_);
  policies_.InternalSwap(&other->policies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roa::InitAsDefaultInstance() {
  ::apipb::_Roa_default_instance_._instance.get_mutable()->conf_ = const_cast< ::apipb::RPKIConf*>(
      ::apipb::RPKIConf::internal_default_instance());
}
class Roa::_Internal {
 public:
  static const ::apipb::RPKIConf& conf(const Roa* msg);
};

const ::apipb::RPKIConf&
Roa::_Internal::conf(const Roa* msg) {
  return *msg->conf_;
}
Roa::Roa(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Roa)
}
Roa::Roa(const Roa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  if (from._internal_has_conf()) {
    conf_ = new ::apipb::RPKIConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlen_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(maxlen_));
  // @@protoc_insertion_point(copy_constructor:apipb.Roa)
}

void Roa::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roa_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(maxlen_));
}

Roa::~Roa() {
  // @@protoc_insertion_point(destructor:apipb.Roa)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roa::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conf_;
}

void Roa::ArenaDtor(void* object) {
  Roa* _this = reinterpret_cast< Roa* >(object);
  (void)_this;
}
void Roa::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roa::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roa& Roa::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roa_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Roa::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Roa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(maxlen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roa::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefixlen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefixlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxlen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Roa.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RPKIConf conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roa::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Roa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefixlen(), target);
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxlen(), target);
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Roa.prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  // .apipb.RPKIConf conf = 5;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Roa)
  return target;
}

size_t Roa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Roa)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .apipb.RPKIConf conf = 5;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefixlen());
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxlen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roa::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Roa)
  GOOGLE_DCHECK_NE(&from, this);
  const Roa* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roa>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Roa)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Roa)
    MergeFrom(*source);
  }
}

void Roa::MergeFrom(const Roa& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Roa)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.has_conf()) {
    _internal_mutable_conf()->::apipb::RPKIConf::MergeFrom(from._internal_conf());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.prefixlen() != 0) {
    _internal_set_prefixlen(from._internal_prefixlen());
  }
  if (from.maxlen() != 0) {
    _internal_set_maxlen(from._internal_maxlen());
  }
}

void Roa::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Roa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roa::CopyFrom(const Roa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Roa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roa::IsInitialized() const {
  return true;
}

void Roa::InternalSwap(Roa* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roa, maxlen_)
      + sizeof(Roa::maxlen_)
      - PROTOBUF_FIELD_OFFSET(Roa, conf_)>(
          reinterpret_cast<char*>(&conf_),
          reinterpret_cast<char*>(&other->conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roa::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vrf::InitAsDefaultInstance() {
  ::apipb::_Vrf_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Vrf::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const Vrf* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Vrf::_Internal::rd(const Vrf* msg) {
  return *msg->rd_;
}
void Vrf::clear_rd() {
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
void Vrf::clear_import_rt() {
  import_rt_.Clear();
}
void Vrf::clear_export_rt() {
  export_rt_.Clear();
}
Vrf::Vrf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  import_rt_(arena),
  export_rt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Vrf)
}
Vrf::Vrf(const Vrf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      import_rt_(from.import_rt_),
      export_rt_(from.export_rt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:apipb.Vrf)
}

void Vrf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vrf_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(id_));
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:apipb.Vrf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vrf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void Vrf::ArenaDtor(void* object) {
  Vrf* _this = reinterpret_cast< Vrf* >(object);
  (void)_this;
}
void Vrf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vrf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vrf& Vrf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vrf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Vrf::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Vrf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  import_rt_.Clear();
  export_rt_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vrf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Vrf.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any import_rt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_import_rt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any export_rt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_export_rt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vrf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Vrf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Vrf.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rd(this), target, stream);
  }

  // repeated .google.protobuf.Any import_rt = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_import_rt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_import_rt(i), target, stream);
  }

  // repeated .google.protobuf.Any export_rt = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_export_rt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_export_rt(i), target, stream);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Vrf)
  return target;
}

size_t Vrf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Vrf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any import_rt = 3;
  total_size += 1UL * this->_internal_import_rt_size();
  for (const auto& msg : this->import_rt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any export_rt = 4;
  total_size += 1UL * this->_internal_export_rt_size();
  for (const auto& msg : this->export_rt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vrf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  const Vrf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vrf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Vrf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Vrf)
    MergeFrom(*source);
  }
}

void Vrf::MergeFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  import_rt_.MergeFrom(from.import_rt_);
  export_rt_.MergeFrom(from.export_rt_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Vrf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vrf::CopyFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {
  return true;
}

void Vrf::InternalSwap(Vrf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  import_rt_.InternalSwap(&other->import_rt_);
  export_rt_.InternalSwap(&other->export_rt_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vrf, id_)
      + sizeof(Vrf::id_)
      - PROTOBUF_FIELD_OFFSET(Vrf, rd_)>(
          reinterpret_cast<char*>(&rd_),
          reinterpret_cast<char*>(&other->rd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vrf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultRouteDistance::InitAsDefaultInstance() {
}
class DefaultRouteDistance::_Internal {
 public:
};

DefaultRouteDistance::DefaultRouteDistance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.DefaultRouteDistance)
}
DefaultRouteDistance::DefaultRouteDistance(const DefaultRouteDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&external_route_distance_, &from.external_route_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_route_distance_) -
    reinterpret_cast<char*>(&external_route_distance_)) + sizeof(internal_route_distance_));
  // @@protoc_insertion_point(copy_constructor:apipb.DefaultRouteDistance)
}

void DefaultRouteDistance::SharedCtor() {
  ::memset(&external_route_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_route_distance_) -
      reinterpret_cast<char*>(&external_route_distance_)) + sizeof(internal_route_distance_));
}

DefaultRouteDistance::~DefaultRouteDistance() {
  // @@protoc_insertion_point(destructor:apipb.DefaultRouteDistance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefaultRouteDistance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DefaultRouteDistance::ArenaDtor(void* object) {
  DefaultRouteDistance* _this = reinterpret_cast< DefaultRouteDistance* >(object);
  (void)_this;
}
void DefaultRouteDistance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultRouteDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultRouteDistance& DefaultRouteDistance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultRouteDistance_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DefaultRouteDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.DefaultRouteDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&external_route_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_route_distance_) -
      reinterpret_cast<char*>(&external_route_distance_)) + sizeof(internal_route_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultRouteDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 external_route_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          external_route_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 internal_route_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          internal_route_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultRouteDistance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.DefaultRouteDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 external_route_distance = 1;
  if (this->external_route_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_external_route_distance(), target);
  }

  // uint32 internal_route_distance = 2;
  if (this->internal_route_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_internal_route_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.DefaultRouteDistance)
  return target;
}

size_t DefaultRouteDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.DefaultRouteDistance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 external_route_distance = 1;
  if (this->external_route_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_external_route_distance());
  }

  // uint32 internal_route_distance = 2;
  if (this->internal_route_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_route_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultRouteDistance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.DefaultRouteDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultRouteDistance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultRouteDistance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.DefaultRouteDistance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.DefaultRouteDistance)
    MergeFrom(*source);
  }
}

void DefaultRouteDistance::MergeFrom(const DefaultRouteDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.DefaultRouteDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.external_route_distance() != 0) {
    _internal_set_external_route_distance(from._internal_external_route_distance());
  }
  if (from.internal_route_distance() != 0) {
    _internal_set_internal_route_distance(from._internal_internal_route_distance());
  }
}

void DefaultRouteDistance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.DefaultRouteDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRouteDistance::CopyFrom(const DefaultRouteDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.DefaultRouteDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRouteDistance::IsInitialized() const {
  return true;
}

void DefaultRouteDistance::InternalSwap(DefaultRouteDistance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DefaultRouteDistance, internal_route_distance_)
      + sizeof(DefaultRouteDistance::internal_route_distance_)
      - PROTOBUF_FIELD_OFFSET(DefaultRouteDistance, external_route_distance_)>(
          reinterpret_cast<char*>(&external_route_distance_),
          reinterpret_cast<char*>(&other->external_route_distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultRouteDistance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Global::InitAsDefaultInstance() {
  ::apipb::_Global_default_instance_._instance.get_mutable()->route_selection_options_ = const_cast< ::apipb::RouteSelectionOptionsConfig*>(
      ::apipb::RouteSelectionOptionsConfig::internal_default_instance());
  ::apipb::_Global_default_instance_._instance.get_mutable()->default_route_distance_ = const_cast< ::apipb::DefaultRouteDistance*>(
      ::apipb::DefaultRouteDistance::internal_default_instance());
  ::apipb::_Global_default_instance_._instance.get_mutable()->confederation_ = const_cast< ::apipb::Confederation*>(
      ::apipb::Confederation::internal_default_instance());
  ::apipb::_Global_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::apipb::GracefulRestart*>(
      ::apipb::GracefulRestart::internal_default_instance());
  ::apipb::_Global_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::apipb::ApplyPolicy*>(
      ::apipb::ApplyPolicy::internal_default_instance());
}
class Global::_Internal {
 public:
  static const ::apipb::RouteSelectionOptionsConfig& route_selection_options(const Global* msg);
  static const ::apipb::DefaultRouteDistance& default_route_distance(const Global* msg);
  static const ::apipb::Confederation& confederation(const Global* msg);
  static const ::apipb::GracefulRestart& graceful_restart(const Global* msg);
  static const ::apipb::ApplyPolicy& apply_policy(const Global* msg);
};

const ::apipb::RouteSelectionOptionsConfig&
Global::_Internal::route_selection_options(const Global* msg) {
  return *msg->route_selection_options_;
}
const ::apipb::DefaultRouteDistance&
Global::_Internal::default_route_distance(const Global* msg) {
  return *msg->default_route_distance_;
}
const ::apipb::Confederation&
Global::_Internal::confederation(const Global* msg) {
  return *msg->confederation_;
}
const ::apipb::GracefulRestart&
Global::_Internal::graceful_restart(const Global* msg) {
  return *msg->graceful_restart_;
}
const ::apipb::ApplyPolicy&
Global::_Internal::apply_policy(const Global* msg) {
  return *msg->apply_policy_;
}
Global::Global(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  listen_addresses_(arena),
  families_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Global)
}
Global::Global(const Global& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listen_addresses_(from.listen_addresses_),
      families_(from.families_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_router_id().empty()) {
    router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_router_id(),
      GetArena());
  }
  bind_to_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bind_to_device().empty()) {
    bind_to_device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bind_to_device(),
      GetArena());
  }
  if (from._internal_has_route_selection_options()) {
    route_selection_options_ = new ::apipb::RouteSelectionOptionsConfig(*from.route_selection_options_);
  } else {
    route_selection_options_ = nullptr;
  }
  if (from._internal_has_default_route_distance()) {
    default_route_distance_ = new ::apipb::DefaultRouteDistance(*from.default_route_distance_);
  } else {
    default_route_distance_ = nullptr;
  }
  if (from._internal_has_confederation()) {
    confederation_ = new ::apipb::Confederation(*from.confederation_);
  } else {
    confederation_ = nullptr;
  }
  if (from._internal_has_graceful_restart()) {
    graceful_restart_ = new ::apipb::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = nullptr;
  }
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::apipb::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_multiple_paths_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(use_multiple_paths_));
  // @@protoc_insertion_point(copy_constructor:apipb.Global)
}

void Global::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Global_gobgp_2eproto.base);
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_to_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&route_selection_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_multiple_paths_) -
      reinterpret_cast<char*>(&route_selection_options_)) + sizeof(use_multiple_paths_));
}

Global::~Global() {
  // @@protoc_insertion_point(destructor:apipb.Global)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Global::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_to_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_selection_options_;
  if (this != internal_default_instance()) delete default_route_distance_;
  if (this != internal_default_instance()) delete confederation_;
  if (this != internal_default_instance()) delete graceful_restart_;
  if (this != internal_default_instance()) delete apply_policy_;
}

void Global::ArenaDtor(void* object) {
  Global* _this = reinterpret_cast< Global* >(object);
  (void)_this;
}
void Global::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Global::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Global& Global::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Global_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Global::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Global)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_addresses_.Clear();
  families_.Clear();
  router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bind_to_device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && route_selection_options_ != nullptr) {
    delete route_selection_options_;
  }
  route_selection_options_ = nullptr;
  if (GetArena() == nullptr && default_route_distance_ != nullptr) {
    delete default_route_distance_;
  }
  default_route_distance_ = nullptr;
  if (GetArena() == nullptr && confederation_ != nullptr) {
    delete confederation_;
  }
  confederation_ = nullptr;
  if (GetArena() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
  if (GetArena() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_multiple_paths_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_multiple_paths_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Global::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string router_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Global.router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 listen_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string listen_addresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_listen_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Global.listen_addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 families = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_families(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_families(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_multiple_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_multiple_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RouteSelectionOptionsConfig route_selection_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_selection_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.DefaultRouteDistance default_route_distance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_route_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.Confederation confederation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_confederation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.GracefulRestart graceful_restart = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.ApplyPolicy apply_policy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bind_to_device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_bind_to_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.Global.bind_to_device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Global::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Global)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_router_id().data(), static_cast<int>(this->_internal_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Global.router_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_router_id(), target);
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_listen_port(), target);
  }

  // repeated string listen_addresses = 4;
  for (int i = 0, n = this->_internal_listen_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_listen_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Global.listen_addresses");
    target = stream->WriteString(4, s, target);
  }

  // repeated uint32 families = 5;
  {
    int byte_size = _families_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_families(), byte_size, target);
    }
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_multiple_paths(), target);
  }

  // .apipb.RouteSelectionOptionsConfig route_selection_options = 7;
  if (this->has_route_selection_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::route_selection_options(this), target, stream);
  }

  // .apipb.DefaultRouteDistance default_route_distance = 8;
  if (this->has_default_route_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::default_route_distance(this), target, stream);
  }

  // .apipb.Confederation confederation = 9;
  if (this->has_confederation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::confederation(this), target, stream);
  }

  // .apipb.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::graceful_restart(this), target, stream);
  }

  // .apipb.ApplyPolicy apply_policy = 11;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::apply_policy(this), target, stream);
  }

  // string bind_to_device = 12;
  if (this->bind_to_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_to_device().data(), static_cast<int>(this->_internal_bind_to_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.Global.bind_to_device");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_bind_to_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Global)
  return target;
}

size_t Global::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Global)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string listen_addresses = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(listen_addresses_.size());
  for (int i = 0, n = listen_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      listen_addresses_.Get(i));
  }

  // repeated uint32 families = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->families_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _families_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_router_id());
  }

  // string bind_to_device = 12;
  if (this->bind_to_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_to_device());
  }

  // .apipb.RouteSelectionOptionsConfig route_selection_options = 7;
  if (this->has_route_selection_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_selection_options_);
  }

  // .apipb.DefaultRouteDistance default_route_distance = 8;
  if (this->has_default_route_distance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_route_distance_);
  }

  // .apipb.Confederation confederation = 9;
  if (this->has_confederation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confederation_);
  }

  // .apipb.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graceful_restart_);
  }

  // .apipb.ApplyPolicy apply_policy = 11;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_listen_port());
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Global)
  GOOGLE_DCHECK_NE(&from, this);
  const Global* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Global>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Global)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Global)
    MergeFrom(*source);
  }
}

void Global::MergeFrom(const Global& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Global)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listen_addresses_.MergeFrom(from.listen_addresses_);
  families_.MergeFrom(from.families_);
  if (from.router_id().size() > 0) {
    _internal_set_router_id(from._internal_router_id());
  }
  if (from.bind_to_device().size() > 0) {
    _internal_set_bind_to_device(from._internal_bind_to_device());
  }
  if (from.has_route_selection_options()) {
    _internal_mutable_route_selection_options()->::apipb::RouteSelectionOptionsConfig::MergeFrom(from._internal_route_selection_options());
  }
  if (from.has_default_route_distance()) {
    _internal_mutable_default_route_distance()->::apipb::DefaultRouteDistance::MergeFrom(from._internal_default_route_distance());
  }
  if (from.has_confederation()) {
    _internal_mutable_confederation()->::apipb::Confederation::MergeFrom(from._internal_confederation());
  }
  if (from.has_graceful_restart()) {
    _internal_mutable_graceful_restart()->::apipb::GracefulRestart::MergeFrom(from._internal_graceful_restart());
  }
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::apipb::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.listen_port() != 0) {
    _internal_set_listen_port(from._internal_listen_port());
  }
  if (from.use_multiple_paths() != 0) {
    _internal_set_use_multiple_paths(from._internal_use_multiple_paths());
  }
}

void Global::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global::CopyFrom(const Global& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global::IsInitialized() const {
  return true;
}

void Global::InternalSwap(Global* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  listen_addresses_.InternalSwap(&other->listen_addresses_);
  families_.InternalSwap(&other->families_);
  router_id_.Swap(&other->router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bind_to_device_.Swap(&other->bind_to_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Global, use_multiple_paths_)
      + sizeof(Global::use_multiple_paths_)
      - PROTOBUF_FIELD_OFFSET(Global, route_selection_options_)>(
          reinterpret_cast<char*>(&route_selection_options_),
          reinterpret_cast<char*>(&other->route_selection_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Global::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Confederation::InitAsDefaultInstance() {
}
class Confederation::_Internal {
 public:
};

Confederation::Confederation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_as_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Confederation)
}
Confederation::Confederation(const Confederation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_as_list_(from.member_as_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&identifier_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(identifier_));
  // @@protoc_insertion_point(copy_constructor:apipb.Confederation)
}

void Confederation::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identifier_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(identifier_));
}

Confederation::~Confederation() {
  // @@protoc_insertion_point(destructor:apipb.Confederation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Confederation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Confederation::ArenaDtor(void* object) {
  Confederation* _this = reinterpret_cast< Confederation* >(object);
  (void)_this;
}
void Confederation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Confederation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Confederation& Confederation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Confederation_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Confederation::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Confederation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_as_list_.Clear();
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identifier_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(identifier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Confederation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 member_as_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_as_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_member_as_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Confederation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Confederation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 identifier = 2;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_identifier(), target);
  }

  // repeated uint32 member_as_list = 3;
  {
    int byte_size = _member_as_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_member_as_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Confederation)
  return target;
}

size_t Confederation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Confederation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_as_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->member_as_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_as_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 identifier = 2;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Confederation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Confederation)
  GOOGLE_DCHECK_NE(&from, this);
  const Confederation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Confederation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Confederation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Confederation)
    MergeFrom(*source);
  }
}

void Confederation::MergeFrom(const Confederation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Confederation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_as_list_.MergeFrom(from.member_as_list_);
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void Confederation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Confederation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Confederation::CopyFrom(const Confederation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Confederation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confederation::IsInitialized() const {
  return true;
}

void Confederation::InternalSwap(Confederation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  member_as_list_.InternalSwap(&other->member_as_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Confederation, identifier_)
      + sizeof(Confederation::identifier_)
      - PROTOBUF_FIELD_OFFSET(Confederation, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Confederation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPKIConf::InitAsDefaultInstance() {
}
class RPKIConf::_Internal {
 public:
};

RPKIConf::RPKIConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RPKIConf)
}
RPKIConf::RPKIConf(const RPKIConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  remote_port_ = from.remote_port_;
  // @@protoc_insertion_point(copy_constructor:apipb.RPKIConf)
}

void RPKIConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPKIConf_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_port_ = 0u;
}

RPKIConf::~RPKIConf() {
  // @@protoc_insertion_point(destructor:apipb.RPKIConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RPKIConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPKIConf::ArenaDtor(void* object) {
  RPKIConf* _this = reinterpret_cast< RPKIConf* >(object);
  (void)_this;
}
void RPKIConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPKIConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPKIConf& RPKIConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPKIConf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RPKIConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RPKIConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPKIConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apipb.RPKIConf.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPKIConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RPKIConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apipb.RPKIConf.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 remote_port = 2;
  if (this->remote_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remote_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RPKIConf)
  return target;
}

size_t RPKIConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RPKIConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 remote_port = 2;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPKIConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RPKIConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPKIConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RPKIConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RPKIConf)
    MergeFrom(*source);
  }
}

void RPKIConf::MergeFrom(const RPKIConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RPKIConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.remote_port() != 0) {
    _internal_set_remote_port(from._internal_remote_port());
  }
}

void RPKIConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RPKIConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIConf::CopyFrom(const RPKIConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RPKIConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIConf::IsInitialized() const {
  return true;
}

void RPKIConf::InternalSwap(RPKIConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(remote_port_, other->remote_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPKIConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPKIState::InitAsDefaultInstance() {
  ::apipb::_RPKIState_default_instance_._instance.get_mutable()->uptime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::apipb::_RPKIState_default_instance_._instance.get_mutable()->downtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class RPKIState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& uptime(const RPKIState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& downtime(const RPKIState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RPKIState::_Internal::uptime(const RPKIState* msg) {
  return *msg->uptime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RPKIState::_Internal::downtime(const RPKIState* msg) {
  return *msg->downtime_;
}
void RPKIState::clear_uptime() {
  if (GetArena() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
}
void RPKIState::clear_downtime() {
  if (GetArena() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
}
RPKIState::RPKIState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.RPKIState)
}
RPKIState::RPKIState(const RPKIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uptime()) {
    uptime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.uptime_);
  } else {
    uptime_ = nullptr;
  }
  if (from._internal_has_downtime()) {
    downtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.downtime_);
  } else {
    downtime_ = nullptr;
  }
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_query_) -
    reinterpret_cast<char*>(&up_)) + sizeof(reset_query_));
  // @@protoc_insertion_point(copy_constructor:apipb.RPKIState)
}

void RPKIState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPKIState_gobgp_2eproto.base);
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_query_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(reset_query_));
}

RPKIState::~RPKIState() {
  // @@protoc_insertion_point(destructor:apipb.RPKIState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RPKIState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uptime_;
  if (this != internal_default_instance()) delete downtime_;
}

void RPKIState::ArenaDtor(void* object) {
  RPKIState* _this = reinterpret_cast< RPKIState* >(object);
  (void)_this;
}
void RPKIState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPKIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPKIState& RPKIState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPKIState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RPKIState::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.RPKIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
  if (GetArena() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_query_) -
      reinterpret_cast<char*>(&up_)) + sizeof(reset_query_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPKIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp uptime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp downtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_downtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_ipv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          record_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_ipv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          record_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_ipv4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prefix_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_ipv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          prefix_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 received_ipv4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          received_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 received_ipv6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          received_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serial_notify = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          serial_notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cache_reset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cache_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cache_response = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cache_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_of_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          end_of_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 error = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serial_query = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          serial_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reset_query = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          reset_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPKIState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.RPKIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 1;
  if (this->has_uptime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uptime(this), target, stream);
  }

  // .google.protobuf.Timestamp downtime = 2;
  if (this->has_downtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::downtime(this), target, stream);
  }

  // bool up = 3;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_up(), target);
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_record_ipv4(), target);
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_record_ipv6(), target);
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prefix_ipv4(), target);
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_prefix_ipv6(), target);
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_serial(), target);
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_received_ipv4(), target);
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_received_ipv6(), target);
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_serial_notify(), target);
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_cache_reset(), target);
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_cache_response(), target);
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_end_of_data(), target);
  }

  // int64 error = 15;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_error(), target);
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_serial_query(), target);
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_reset_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.RPKIState)
  return target;
}

size_t RPKIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.RPKIState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 1;
  if (this->has_uptime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // .google.protobuf.Timestamp downtime = 2;
  if (this->has_downtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *downtime_);
  }

  // bool up = 3;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_ipv4());
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_ipv6());
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_ipv4());
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_ipv6());
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_received_ipv4());
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_received_ipv6());
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial_notify());
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cache_reset());
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cache_response());
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_of_data());
  }

  // int64 error = 15;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_error());
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial_query());
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reset_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPKIState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.RPKIState)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPKIState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.RPKIState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.RPKIState)
    MergeFrom(*source);
  }
}

void RPKIState::MergeFrom(const RPKIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.RPKIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uptime()) {
    _internal_mutable_uptime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_uptime());
  }
  if (from.has_downtime()) {
    _internal_mutable_downtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_downtime());
  }
  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.record_ipv4() != 0) {
    _internal_set_record_ipv4(from._internal_record_ipv4());
  }
  if (from.record_ipv6() != 0) {
    _internal_set_record_ipv6(from._internal_record_ipv6());
  }
  if (from.prefix_ipv4() != 0) {
    _internal_set_prefix_ipv4(from._internal_prefix_ipv4());
  }
  if (from.prefix_ipv6() != 0) {
    _internal_set_prefix_ipv6(from._internal_prefix_ipv6());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.received_ipv4() != 0) {
    _internal_set_received_ipv4(from._internal_received_ipv4());
  }
  if (from.received_ipv6() != 0) {
    _internal_set_received_ipv6(from._internal_received_ipv6());
  }
  if (from.serial_notify() != 0) {
    _internal_set_serial_notify(from._internal_serial_notify());
  }
  if (from.cache_reset() != 0) {
    _internal_set_cache_reset(from._internal_cache_reset());
  }
  if (from.cache_response() != 0) {
    _internal_set_cache_response(from._internal_cache_response());
  }
  if (from.end_of_data() != 0) {
    _internal_set_end_of_data(from._internal_end_of_data());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.serial_query() != 0) {
    _internal_set_serial_query(from._internal_serial_query());
  }
  if (from.reset_query() != 0) {
    _internal_set_reset_query(from._internal_reset_query());
  }
}

void RPKIState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.RPKIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIState::CopyFrom(const RPKIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.RPKIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIState::IsInitialized() const {
  return true;
}

void RPKIState::InternalSwap(RPKIState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPKIState, reset_query_)
      + sizeof(RPKIState::reset_query_)
      - PROTOBUF_FIELD_OFFSET(RPKIState, uptime_)>(
          reinterpret_cast<char*>(&uptime_),
          reinterpret_cast<char*>(&other->uptime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPKIState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rpki::InitAsDefaultInstance() {
  ::apipb::_Rpki_default_instance_._instance.get_mutable()->conf_ = const_cast< ::apipb::RPKIConf*>(
      ::apipb::RPKIConf::internal_default_instance());
  ::apipb::_Rpki_default_instance_._instance.get_mutable()->state_ = const_cast< ::apipb::RPKIState*>(
      ::apipb::RPKIState::internal_default_instance());
}
class Rpki::_Internal {
 public:
  static const ::apipb::RPKIConf& conf(const Rpki* msg);
  static const ::apipb::RPKIState& state(const Rpki* msg);
};

const ::apipb::RPKIConf&
Rpki::_Internal::conf(const Rpki* msg) {
  return *msg->conf_;
}
const ::apipb::RPKIState&
Rpki::_Internal::state(const Rpki* msg) {
  return *msg->state_;
}
Rpki::Rpki(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.Rpki)
}
Rpki::Rpki(const Rpki& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conf()) {
    conf_ = new ::apipb::RPKIConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::apipb::RPKIState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apipb.Rpki)
}

void Rpki::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rpki_gobgp_2eproto.base);
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(state_));
}

Rpki::~Rpki() {
  // @@protoc_insertion_point(destructor:apipb.Rpki)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rpki::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete state_;
}

void Rpki::ArenaDtor(void* object) {
  Rpki* _this = reinterpret_cast< Rpki* >(object);
  (void)_this;
}
void Rpki::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rpki::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpki& Rpki::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rpki_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Rpki::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.Rpki)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rpki::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.RPKIConf conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apipb.RPKIState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rpki::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.Rpki)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.RPKIConf conf = 1;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conf(this), target, stream);
  }

  // .apipb.RPKIState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.Rpki)
  return target;
}

size_t Rpki::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.Rpki)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.RPKIConf conf = 1;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .apipb.RPKIState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpki::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.Rpki)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpki* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rpki>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.Rpki)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.Rpki)
    MergeFrom(*source);
  }
}

void Rpki::MergeFrom(const Rpki& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.Rpki)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conf()) {
    _internal_mutable_conf()->::apipb::RPKIConf::MergeFrom(from._internal_conf());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::apipb::RPKIState::MergeFrom(from._internal_state());
  }
}

void Rpki::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.Rpki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpki::CopyFrom(const Rpki& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.Rpki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpki::IsInitialized() const {
  return true;
}

void Rpki::InternalSwap(Rpki* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rpki, state_)
      + sizeof(Rpki::state_)
      - PROTOBUF_FIELD_OFFSET(Rpki, conf_)>(
          reinterpret_cast<char*>(&conf_),
          reinterpret_cast<char*>(&other->conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rpki::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLogLevelRequest::InitAsDefaultInstance() {
}
class SetLogLevelRequest::_Internal {
 public:
};

SetLogLevelRequest::SetLogLevelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apipb.SetLogLevelRequest)
}
SetLogLevelRequest::SetLogLevelRequest(const SetLogLevelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:apipb.SetLogLevelRequest)
}

void SetLogLevelRequest::SharedCtor() {
  level_ = 0;
}

SetLogLevelRequest::~SetLogLevelRequest() {
  // @@protoc_insertion_point(destructor:apipb.SetLogLevelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLogLevelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetLogLevelRequest::ArenaDtor(void* object) {
  SetLogLevelRequest* _this = reinterpret_cast< SetLogLevelRequest* >(object);
  (void)_this;
}
void SetLogLevelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLogLevelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLogLevelRequest& SetLogLevelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLogLevelRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void SetLogLevelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apipb.SetLogLevelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLogLevelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apipb.SetLogLevelRequest.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::apipb::SetLogLevelRequest_Level>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLogLevelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apipb.SetLogLevelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apipb.SetLogLevelRequest.Level level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apipb.SetLogLevelRequest)
  return target;
}

size_t SetLogLevelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apipb.SetLogLevelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apipb.SetLogLevelRequest.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLogLevelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apipb.SetLogLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLogLevelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLogLevelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apipb.SetLogLevelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apipb.SetLogLevelRequest)
    MergeFrom(*source);
  }
}

void SetLogLevelRequest::MergeFrom(const SetLogLevelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apipb.SetLogLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SetLogLevelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apipb.SetLogLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLogLevelRequest::CopyFrom(const SetLogLevelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apipb.SetLogLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLogLevelRequest::IsInitialized() const {
  return true;
}

void SetLogLevelRequest::InternalSwap(SetLogLevelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLogLevelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace apipb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apipb::StartBgpRequest* Arena::CreateMaybeMessage< ::apipb::StartBgpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::StartBgpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::StopBgpRequest* Arena::CreateMaybeMessage< ::apipb::StopBgpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::StopBgpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::GetBgpRequest* Arena::CreateMaybeMessage< ::apipb::GetBgpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::GetBgpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::GetBgpResponse* Arena::CreateMaybeMessage< ::apipb::GetBgpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::GetBgpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventRequest_Peer* Arena::CreateMaybeMessage< ::apipb::WatchEventRequest_Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventRequest_Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventRequest_Table_Filter* Arena::CreateMaybeMessage< ::apipb::WatchEventRequest_Table_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventRequest_Table_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventRequest_Table* Arena::CreateMaybeMessage< ::apipb::WatchEventRequest_Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventRequest_Table >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventRequest* Arena::CreateMaybeMessage< ::apipb::WatchEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventResponse_PeerEvent* Arena::CreateMaybeMessage< ::apipb::WatchEventResponse_PeerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventResponse_PeerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventResponse_TableEvent* Arena::CreateMaybeMessage< ::apipb::WatchEventResponse_TableEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventResponse_TableEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::WatchEventResponse* Arena::CreateMaybeMessage< ::apipb::WatchEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::WatchEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPeerRequest* Arena::CreateMaybeMessage< ::apipb::AddPeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeletePeerRequest* Arena::CreateMaybeMessage< ::apipb::DeletePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeletePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPeerRequest* Arena::CreateMaybeMessage< ::apipb::ListPeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPeerResponse* Arena::CreateMaybeMessage< ::apipb::ListPeerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UpdatePeerRequest* Arena::CreateMaybeMessage< ::apipb::UpdatePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UpdatePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UpdatePeerResponse* Arena::CreateMaybeMessage< ::apipb::UpdatePeerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UpdatePeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ResetPeerRequest* Arena::CreateMaybeMessage< ::apipb::ResetPeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ResetPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ShutdownPeerRequest* Arena::CreateMaybeMessage< ::apipb::ShutdownPeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ShutdownPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EnablePeerRequest* Arena::CreateMaybeMessage< ::apipb::EnablePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EnablePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DisablePeerRequest* Arena::CreateMaybeMessage< ::apipb::DisablePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DisablePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPeerGroupRequest* Arena::CreateMaybeMessage< ::apipb::AddPeerGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeletePeerGroupRequest* Arena::CreateMaybeMessage< ::apipb::DeletePeerGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeletePeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UpdatePeerGroupRequest* Arena::CreateMaybeMessage< ::apipb::UpdatePeerGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UpdatePeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UpdatePeerGroupResponse* Arena::CreateMaybeMessage< ::apipb::UpdatePeerGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UpdatePeerGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPeerGroupRequest* Arena::CreateMaybeMessage< ::apipb::ListPeerGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPeerGroupResponse* Arena::CreateMaybeMessage< ::apipb::ListPeerGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPeerGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddDynamicNeighborRequest* Arena::CreateMaybeMessage< ::apipb::AddDynamicNeighborRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddDynamicNeighborRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeleteDynamicNeighborRequest* Arena::CreateMaybeMessage< ::apipb::DeleteDynamicNeighborRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeleteDynamicNeighborRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListDynamicNeighborRequest* Arena::CreateMaybeMessage< ::apipb::ListDynamicNeighborRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListDynamicNeighborRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListDynamicNeighborResponse* Arena::CreateMaybeMessage< ::apipb::ListDynamicNeighborResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListDynamicNeighborResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPathRequest* Arena::CreateMaybeMessage< ::apipb::AddPathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPathResponse* Arena::CreateMaybeMessage< ::apipb::AddPathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeletePathRequest* Arena::CreateMaybeMessage< ::apipb::DeletePathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeletePathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TableLookupPrefix* Arena::CreateMaybeMessage< ::apipb::TableLookupPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TableLookupPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPathRequest* Arena::CreateMaybeMessage< ::apipb::ListPathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPathResponse* Arena::CreateMaybeMessage< ::apipb::ListPathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPathStreamRequest* Arena::CreateMaybeMessage< ::apipb::AddPathStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPathStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::GetTableRequest* Arena::CreateMaybeMessage< ::apipb::GetTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::GetTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::GetTableResponse* Arena::CreateMaybeMessage< ::apipb::GetTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::GetTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddVrfRequest* Arena::CreateMaybeMessage< ::apipb::AddVrfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeleteVrfRequest* Arena::CreateMaybeMessage< ::apipb::DeleteVrfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeleteVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListVrfRequest* Arena::CreateMaybeMessage< ::apipb::ListVrfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListVrfResponse* Arena::CreateMaybeMessage< ::apipb::ListVrfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListVrfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPolicyRequest* Arena::CreateMaybeMessage< ::apipb::AddPolicyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeletePolicyRequest* Arena::CreateMaybeMessage< ::apipb::DeletePolicyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeletePolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPolicyRequest* Arena::CreateMaybeMessage< ::apipb::ListPolicyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPolicyResponse* Arena::CreateMaybeMessage< ::apipb::ListPolicyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPolicyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SetPoliciesRequest* Arena::CreateMaybeMessage< ::apipb::SetPoliciesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SetPoliciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddDefinedSetRequest* Arena::CreateMaybeMessage< ::apipb::AddDefinedSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddDefinedSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeleteDefinedSetRequest* Arena::CreateMaybeMessage< ::apipb::DeleteDefinedSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeleteDefinedSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListDefinedSetRequest* Arena::CreateMaybeMessage< ::apipb::ListDefinedSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListDefinedSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListDefinedSetResponse* Arena::CreateMaybeMessage< ::apipb::ListDefinedSetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListDefinedSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddStatementRequest* Arena::CreateMaybeMessage< ::apipb::AddStatementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddStatementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeleteStatementRequest* Arena::CreateMaybeMessage< ::apipb::DeleteStatementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeleteStatementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListStatementRequest* Arena::CreateMaybeMessage< ::apipb::ListStatementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListStatementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListStatementResponse* Arena::CreateMaybeMessage< ::apipb::ListStatementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListStatementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPolicyAssignmentRequest* Arena::CreateMaybeMessage< ::apipb::AddPolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeletePolicyAssignmentRequest* Arena::CreateMaybeMessage< ::apipb::DeletePolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeletePolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPolicyAssignmentRequest* Arena::CreateMaybeMessage< ::apipb::ListPolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListPolicyAssignmentResponse* Arena::CreateMaybeMessage< ::apipb::ListPolicyAssignmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListPolicyAssignmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SetPolicyAssignmentRequest* Arena::CreateMaybeMessage< ::apipb::SetPolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SetPolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddRpkiRequest* Arena::CreateMaybeMessage< ::apipb::AddRpkiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeleteRpkiRequest* Arena::CreateMaybeMessage< ::apipb::DeleteRpkiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeleteRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListRpkiRequest* Arena::CreateMaybeMessage< ::apipb::ListRpkiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListRpkiResponse* Arena::CreateMaybeMessage< ::apipb::ListRpkiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListRpkiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EnableRpkiRequest* Arena::CreateMaybeMessage< ::apipb::EnableRpkiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EnableRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DisableRpkiRequest* Arena::CreateMaybeMessage< ::apipb::DisableRpkiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DisableRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ResetRpkiRequest* Arena::CreateMaybeMessage< ::apipb::ResetRpkiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ResetRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListRpkiTableRequest* Arena::CreateMaybeMessage< ::apipb::ListRpkiTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListRpkiTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListRpkiTableResponse* Arena::CreateMaybeMessage< ::apipb::ListRpkiTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListRpkiTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EnableZebraRequest* Arena::CreateMaybeMessage< ::apipb::EnableZebraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EnableZebraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EnableMrtRequest* Arena::CreateMaybeMessage< ::apipb::EnableMrtRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EnableMrtRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DisableMrtRequest* Arena::CreateMaybeMessage< ::apipb::DisableMrtRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DisableMrtRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddBmpRequest* Arena::CreateMaybeMessage< ::apipb::AddBmpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddBmpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DeleteBmpRequest* Arena::CreateMaybeMessage< ::apipb::DeleteBmpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DeleteBmpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListBmpRequest* Arena::CreateMaybeMessage< ::apipb::ListBmpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListBmpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListBmpResponse_BmpStation_Conf* Arena::CreateMaybeMessage< ::apipb::ListBmpResponse_BmpStation_Conf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListBmpResponse_BmpStation_Conf >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListBmpResponse_BmpStation_State* Arena::CreateMaybeMessage< ::apipb::ListBmpResponse_BmpStation_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListBmpResponse_BmpStation_State >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListBmpResponse_BmpStation* Arena::CreateMaybeMessage< ::apipb::ListBmpResponse_BmpStation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListBmpResponse_BmpStation >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ListBmpResponse* Arena::CreateMaybeMessage< ::apipb::ListBmpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ListBmpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Family* Arena::CreateMaybeMessage< ::apipb::Family >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Family >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Validation* Arena::CreateMaybeMessage< ::apipb::Validation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Validation >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Path* Arena::CreateMaybeMessage< ::apipb::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Destination* Arena::CreateMaybeMessage< ::apipb::Destination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Destination >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Peer* Arena::CreateMaybeMessage< ::apipb::Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PeerGroup* Arena::CreateMaybeMessage< ::apipb::PeerGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PeerGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DynamicNeighbor* Arena::CreateMaybeMessage< ::apipb::DynamicNeighbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DynamicNeighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::ApplyPolicy* Arena::CreateMaybeMessage< ::apipb::ApplyPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::ApplyPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PrefixLimit* Arena::CreateMaybeMessage< ::apipb::PrefixLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PrefixLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PeerConf* Arena::CreateMaybeMessage< ::apipb::PeerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PeerConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PeerGroupConf* Arena::CreateMaybeMessage< ::apipb::PeerGroupConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PeerGroupConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PeerGroupState* Arena::CreateMaybeMessage< ::apipb::PeerGroupState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PeerGroupState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TtlSecurity* Arena::CreateMaybeMessage< ::apipb::TtlSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TtlSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EbgpMultihop* Arena::CreateMaybeMessage< ::apipb::EbgpMultihop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EbgpMultihop >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteReflector* Arena::CreateMaybeMessage< ::apipb::RouteReflector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteReflector >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PeerState* Arena::CreateMaybeMessage< ::apipb::PeerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PeerState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Messages* Arena::CreateMaybeMessage< ::apipb::Messages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Messages >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Message* Arena::CreateMaybeMessage< ::apipb::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Queues* Arena::CreateMaybeMessage< ::apipb::Queues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Queues >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Timers* Arena::CreateMaybeMessage< ::apipb::Timers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Timers >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TimersConfig* Arena::CreateMaybeMessage< ::apipb::TimersConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TimersConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::TimersState* Arena::CreateMaybeMessage< ::apipb::TimersState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::TimersState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Transport* Arena::CreateMaybeMessage< ::apipb::Transport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Transport >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteServer* Arena::CreateMaybeMessage< ::apipb::RouteServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteServer >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::GracefulRestart* Arena::CreateMaybeMessage< ::apipb::GracefulRestart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::GracefulRestart >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MpGracefulRestartConfig* Arena::CreateMaybeMessage< ::apipb::MpGracefulRestartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MpGracefulRestartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MpGracefulRestartState* Arena::CreateMaybeMessage< ::apipb::MpGracefulRestartState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MpGracefulRestartState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MpGracefulRestart* Arena::CreateMaybeMessage< ::apipb::MpGracefulRestart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MpGracefulRestart >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AfiSafiConfig* Arena::CreateMaybeMessage< ::apipb::AfiSafiConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AfiSafiConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AfiSafiState* Arena::CreateMaybeMessage< ::apipb::AfiSafiState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AfiSafiState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteSelectionOptionsConfig* Arena::CreateMaybeMessage< ::apipb::RouteSelectionOptionsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteSelectionOptionsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteSelectionOptionsState* Arena::CreateMaybeMessage< ::apipb::RouteSelectionOptionsState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteSelectionOptionsState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteSelectionOptions* Arena::CreateMaybeMessage< ::apipb::RouteSelectionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteSelectionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UseMultiplePathsConfig* Arena::CreateMaybeMessage< ::apipb::UseMultiplePathsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UseMultiplePathsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UseMultiplePathsState* Arena::CreateMaybeMessage< ::apipb::UseMultiplePathsState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UseMultiplePathsState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EbgpConfig* Arena::CreateMaybeMessage< ::apipb::EbgpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EbgpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::EbgpState* Arena::CreateMaybeMessage< ::apipb::EbgpState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::EbgpState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Ebgp* Arena::CreateMaybeMessage< ::apipb::Ebgp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Ebgp >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::IbgpConfig* Arena::CreateMaybeMessage< ::apipb::IbgpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::IbgpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::IbgpState* Arena::CreateMaybeMessage< ::apipb::IbgpState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::IbgpState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Ibgp* Arena::CreateMaybeMessage< ::apipb::Ibgp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Ibgp >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::UseMultiplePaths* Arena::CreateMaybeMessage< ::apipb::UseMultiplePaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::UseMultiplePaths >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteTargetMembershipConfig* Arena::CreateMaybeMessage< ::apipb::RouteTargetMembershipConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteTargetMembershipConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteTargetMembershipState* Arena::CreateMaybeMessage< ::apipb::RouteTargetMembershipState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteTargetMembershipState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RouteTargetMembership* Arena::CreateMaybeMessage< ::apipb::RouteTargetMembership >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RouteTargetMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LongLivedGracefulRestartConfig* Arena::CreateMaybeMessage< ::apipb::LongLivedGracefulRestartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LongLivedGracefulRestartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LongLivedGracefulRestartState* Arena::CreateMaybeMessage< ::apipb::LongLivedGracefulRestartState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LongLivedGracefulRestartState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LongLivedGracefulRestart* Arena::CreateMaybeMessage< ::apipb::LongLivedGracefulRestart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LongLivedGracefulRestart >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AfiSafi* Arena::CreateMaybeMessage< ::apipb::AfiSafi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AfiSafi >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPathsConfig* Arena::CreateMaybeMessage< ::apipb::AddPathsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPathsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPathsState* Arena::CreateMaybeMessage< ::apipb::AddPathsState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPathsState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AddPaths* Arena::CreateMaybeMessage< ::apipb::AddPaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AddPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Prefix* Arena::CreateMaybeMessage< ::apipb::Prefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Prefix >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DefinedSet* Arena::CreateMaybeMessage< ::apipb::DefinedSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DefinedSet >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MatchSet* Arena::CreateMaybeMessage< ::apipb::MatchSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MatchSet >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AsPathLength* Arena::CreateMaybeMessage< ::apipb::AsPathLength >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AsPathLength >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Conditions* Arena::CreateMaybeMessage< ::apipb::Conditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Conditions >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::CommunityAction* Arena::CreateMaybeMessage< ::apipb::CommunityAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::CommunityAction >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::MedAction* Arena::CreateMaybeMessage< ::apipb::MedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::MedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::AsPrependAction* Arena::CreateMaybeMessage< ::apipb::AsPrependAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::AsPrependAction >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::NexthopAction* Arena::CreateMaybeMessage< ::apipb::NexthopAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::NexthopAction >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::LocalPrefAction* Arena::CreateMaybeMessage< ::apipb::LocalPrefAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::LocalPrefAction >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Actions* Arena::CreateMaybeMessage< ::apipb::Actions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Actions >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Statement* Arena::CreateMaybeMessage< ::apipb::Statement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Statement >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Policy* Arena::CreateMaybeMessage< ::apipb::Policy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Policy >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::PolicyAssignment* Arena::CreateMaybeMessage< ::apipb::PolicyAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::PolicyAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RoutingPolicy* Arena::CreateMaybeMessage< ::apipb::RoutingPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RoutingPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Roa* Arena::CreateMaybeMessage< ::apipb::Roa >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Roa >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Vrf* Arena::CreateMaybeMessage< ::apipb::Vrf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Vrf >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::DefaultRouteDistance* Arena::CreateMaybeMessage< ::apipb::DefaultRouteDistance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::DefaultRouteDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Global* Arena::CreateMaybeMessage< ::apipb::Global >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Global >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Confederation* Arena::CreateMaybeMessage< ::apipb::Confederation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Confederation >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RPKIConf* Arena::CreateMaybeMessage< ::apipb::RPKIConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RPKIConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::RPKIState* Arena::CreateMaybeMessage< ::apipb::RPKIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::RPKIState >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::Rpki* Arena::CreateMaybeMessage< ::apipb::Rpki >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::Rpki >(arena);
}
template<> PROTOBUF_NOINLINE ::apipb::SetLogLevelRequest* Arena::CreateMaybeMessage< ::apipb::SetLogLevelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apipb::SetLogLevelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
