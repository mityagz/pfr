// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribute.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_attribute_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_attribute_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "gobgp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_attribute_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_attribute_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[125]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_attribute_2eproto;
namespace apipb {
class AggregatorAttribute;
class AggregatorAttributeDefaultTypeInternal;
extern AggregatorAttributeDefaultTypeInternal _AggregatorAttribute_default_instance_;
class AigpAttribute;
class AigpAttributeDefaultTypeInternal;
extern AigpAttributeDefaultTypeInternal _AigpAttribute_default_instance_;
class AigpTLVIGPMetric;
class AigpTLVIGPMetricDefaultTypeInternal;
extern AigpTLVIGPMetricDefaultTypeInternal _AigpTLVIGPMetric_default_instance_;
class AigpTLVUnknown;
class AigpTLVUnknownDefaultTypeInternal;
extern AigpTLVUnknownDefaultTypeInternal _AigpTLVUnknown_default_instance_;
class As4AggregatorAttribute;
class As4AggregatorAttributeDefaultTypeInternal;
extern As4AggregatorAttributeDefaultTypeInternal _As4AggregatorAttribute_default_instance_;
class As4PathAttribute;
class As4PathAttributeDefaultTypeInternal;
extern As4PathAttributeDefaultTypeInternal _As4PathAttribute_default_instance_;
class AsPathAttribute;
class AsPathAttributeDefaultTypeInternal;
extern AsPathAttributeDefaultTypeInternal _AsPathAttribute_default_instance_;
class AsSegment;
class AsSegmentDefaultTypeInternal;
extern AsSegmentDefaultTypeInternal _AsSegment_default_instance_;
class AtomicAggregateAttribute;
class AtomicAggregateAttributeDefaultTypeInternal;
extern AtomicAggregateAttributeDefaultTypeInternal _AtomicAggregateAttribute_default_instance_;
class ClusterListAttribute;
class ClusterListAttributeDefaultTypeInternal;
extern ClusterListAttributeDefaultTypeInternal _ClusterListAttribute_default_instance_;
class ColorExtended;
class ColorExtendedDefaultTypeInternal;
extern ColorExtendedDefaultTypeInternal _ColorExtended_default_instance_;
class CommunitiesAttribute;
class CommunitiesAttributeDefaultTypeInternal;
extern CommunitiesAttributeDefaultTypeInternal _CommunitiesAttribute_default_instance_;
class DefaultGatewayExtended;
class DefaultGatewayExtendedDefaultTypeInternal;
extern DefaultGatewayExtendedDefaultTypeInternal _DefaultGatewayExtended_default_instance_;
class ESILabelExtended;
class ESILabelExtendedDefaultTypeInternal;
extern ESILabelExtendedDefaultTypeInternal _ESILabelExtended_default_instance_;
class ESImportRouteTarget;
class ESImportRouteTargetDefaultTypeInternal;
extern ESImportRouteTargetDefaultTypeInternal _ESImportRouteTarget_default_instance_;
class EVPNEthernetAutoDiscoveryRoute;
class EVPNEthernetAutoDiscoveryRouteDefaultTypeInternal;
extern EVPNEthernetAutoDiscoveryRouteDefaultTypeInternal _EVPNEthernetAutoDiscoveryRoute_default_instance_;
class EVPNEthernetSegmentRoute;
class EVPNEthernetSegmentRouteDefaultTypeInternal;
extern EVPNEthernetSegmentRouteDefaultTypeInternal _EVPNEthernetSegmentRoute_default_instance_;
class EVPNIPMSIRoute;
class EVPNIPMSIRouteDefaultTypeInternal;
extern EVPNIPMSIRouteDefaultTypeInternal _EVPNIPMSIRoute_default_instance_;
class EVPNIPPrefixRoute;
class EVPNIPPrefixRouteDefaultTypeInternal;
extern EVPNIPPrefixRouteDefaultTypeInternal _EVPNIPPrefixRoute_default_instance_;
class EVPNInclusiveMulticastEthernetTagRoute;
class EVPNInclusiveMulticastEthernetTagRouteDefaultTypeInternal;
extern EVPNInclusiveMulticastEthernetTagRouteDefaultTypeInternal _EVPNInclusiveMulticastEthernetTagRoute_default_instance_;
class EVPNMACIPAdvertisementRoute;
class EVPNMACIPAdvertisementRouteDefaultTypeInternal;
extern EVPNMACIPAdvertisementRouteDefaultTypeInternal _EVPNMACIPAdvertisementRoute_default_instance_;
class EncapExtended;
class EncapExtendedDefaultTypeInternal;
extern EncapExtendedDefaultTypeInternal _EncapExtended_default_instance_;
class EncapsulationNLRI;
class EncapsulationNLRIDefaultTypeInternal;
extern EncapsulationNLRIDefaultTypeInternal _EncapsulationNLRI_default_instance_;
class EthernetSegmentIdentifier;
class EthernetSegmentIdentifierDefaultTypeInternal;
extern EthernetSegmentIdentifierDefaultTypeInternal _EthernetSegmentIdentifier_default_instance_;
class ExtendedCommunitiesAttribute;
class ExtendedCommunitiesAttributeDefaultTypeInternal;
extern ExtendedCommunitiesAttributeDefaultTypeInternal _ExtendedCommunitiesAttribute_default_instance_;
class FlowSpecComponent;
class FlowSpecComponentDefaultTypeInternal;
extern FlowSpecComponentDefaultTypeInternal _FlowSpecComponent_default_instance_;
class FlowSpecComponentItem;
class FlowSpecComponentItemDefaultTypeInternal;
extern FlowSpecComponentItemDefaultTypeInternal _FlowSpecComponentItem_default_instance_;
class FlowSpecIPPrefix;
class FlowSpecIPPrefixDefaultTypeInternal;
extern FlowSpecIPPrefixDefaultTypeInternal _FlowSpecIPPrefix_default_instance_;
class FlowSpecMAC;
class FlowSpecMACDefaultTypeInternal;
extern FlowSpecMACDefaultTypeInternal _FlowSpecMAC_default_instance_;
class FlowSpecNLRI;
class FlowSpecNLRIDefaultTypeInternal;
extern FlowSpecNLRIDefaultTypeInternal _FlowSpecNLRI_default_instance_;
class FourOctetAsSpecificExtended;
class FourOctetAsSpecificExtendedDefaultTypeInternal;
extern FourOctetAsSpecificExtendedDefaultTypeInternal _FourOctetAsSpecificExtended_default_instance_;
class IP6ExtendedCommunitiesAttribute;
class IP6ExtendedCommunitiesAttributeDefaultTypeInternal;
extern IP6ExtendedCommunitiesAttributeDefaultTypeInternal _IP6ExtendedCommunitiesAttribute_default_instance_;
class IPAddressPrefix;
class IPAddressPrefixDefaultTypeInternal;
extern IPAddressPrefixDefaultTypeInternal _IPAddressPrefix_default_instance_;
class IPv4AddressSpecificExtended;
class IPv4AddressSpecificExtendedDefaultTypeInternal;
extern IPv4AddressSpecificExtendedDefaultTypeInternal _IPv4AddressSpecificExtended_default_instance_;
class IPv6AddressSpecificExtended;
class IPv6AddressSpecificExtendedDefaultTypeInternal;
extern IPv6AddressSpecificExtendedDefaultTypeInternal _IPv6AddressSpecificExtended_default_instance_;
class LabeledIPAddressPrefix;
class LabeledIPAddressPrefixDefaultTypeInternal;
extern LabeledIPAddressPrefixDefaultTypeInternal _LabeledIPAddressPrefix_default_instance_;
class LabeledVPNIPAddressPrefix;
class LabeledVPNIPAddressPrefixDefaultTypeInternal;
extern LabeledVPNIPAddressPrefixDefaultTypeInternal _LabeledVPNIPAddressPrefix_default_instance_;
class LargeCommunitiesAttribute;
class LargeCommunitiesAttributeDefaultTypeInternal;
extern LargeCommunitiesAttributeDefaultTypeInternal _LargeCommunitiesAttribute_default_instance_;
class LargeCommunity;
class LargeCommunityDefaultTypeInternal;
extern LargeCommunityDefaultTypeInternal _LargeCommunity_default_instance_;
class LinkBandwidthExtended;
class LinkBandwidthExtendedDefaultTypeInternal;
extern LinkBandwidthExtendedDefaultTypeInternal _LinkBandwidthExtended_default_instance_;
class LocalPrefAttribute;
class LocalPrefAttributeDefaultTypeInternal;
extern LocalPrefAttributeDefaultTypeInternal _LocalPrefAttribute_default_instance_;
class LsAddrPrefix;
class LsAddrPrefixDefaultTypeInternal;
extern LsAddrPrefixDefaultTypeInternal _LsAddrPrefix_default_instance_;
class LsAttribute;
class LsAttributeDefaultTypeInternal;
extern LsAttributeDefaultTypeInternal _LsAttribute_default_instance_;
class LsAttributeBgpPeerSegment;
class LsAttributeBgpPeerSegmentDefaultTypeInternal;
extern LsAttributeBgpPeerSegmentDefaultTypeInternal _LsAttributeBgpPeerSegment_default_instance_;
class LsAttributeLink;
class LsAttributeLinkDefaultTypeInternal;
extern LsAttributeLinkDefaultTypeInternal _LsAttributeLink_default_instance_;
class LsAttributeNode;
class LsAttributeNodeDefaultTypeInternal;
extern LsAttributeNodeDefaultTypeInternal _LsAttributeNode_default_instance_;
class LsAttributePrefix;
class LsAttributePrefixDefaultTypeInternal;
extern LsAttributePrefixDefaultTypeInternal _LsAttributePrefix_default_instance_;
class LsBgpPeerSegmentSID;
class LsBgpPeerSegmentSIDDefaultTypeInternal;
extern LsBgpPeerSegmentSIDDefaultTypeInternal _LsBgpPeerSegmentSID_default_instance_;
class LsBgpPeerSegmentSIDFlags;
class LsBgpPeerSegmentSIDFlagsDefaultTypeInternal;
extern LsBgpPeerSegmentSIDFlagsDefaultTypeInternal _LsBgpPeerSegmentSIDFlags_default_instance_;
class LsIGPFlags;
class LsIGPFlagsDefaultTypeInternal;
extern LsIGPFlagsDefaultTypeInternal _LsIGPFlags_default_instance_;
class LsLinkDescriptor;
class LsLinkDescriptorDefaultTypeInternal;
extern LsLinkDescriptorDefaultTypeInternal _LsLinkDescriptor_default_instance_;
class LsLinkNLRI;
class LsLinkNLRIDefaultTypeInternal;
extern LsLinkNLRIDefaultTypeInternal _LsLinkNLRI_default_instance_;
class LsNodeDescriptor;
class LsNodeDescriptorDefaultTypeInternal;
extern LsNodeDescriptorDefaultTypeInternal _LsNodeDescriptor_default_instance_;
class LsNodeFlags;
class LsNodeFlagsDefaultTypeInternal;
extern LsNodeFlagsDefaultTypeInternal _LsNodeFlags_default_instance_;
class LsNodeNLRI;
class LsNodeNLRIDefaultTypeInternal;
extern LsNodeNLRIDefaultTypeInternal _LsNodeNLRI_default_instance_;
class LsPrefixDescriptor;
class LsPrefixDescriptorDefaultTypeInternal;
extern LsPrefixDescriptorDefaultTypeInternal _LsPrefixDescriptor_default_instance_;
class LsPrefixV4NLRI;
class LsPrefixV4NLRIDefaultTypeInternal;
extern LsPrefixV4NLRIDefaultTypeInternal _LsPrefixV4NLRI_default_instance_;
class LsPrefixV6NLRI;
class LsPrefixV6NLRIDefaultTypeInternal;
extern LsPrefixV6NLRIDefaultTypeInternal _LsPrefixV6NLRI_default_instance_;
class LsSrCapabilities;
class LsSrCapabilitiesDefaultTypeInternal;
extern LsSrCapabilitiesDefaultTypeInternal _LsSrCapabilities_default_instance_;
class LsSrLocalBlock;
class LsSrLocalBlockDefaultTypeInternal;
extern LsSrLocalBlockDefaultTypeInternal _LsSrLocalBlock_default_instance_;
class LsSrRange;
class LsSrRangeDefaultTypeInternal;
extern LsSrRangeDefaultTypeInternal _LsSrRange_default_instance_;
class MUPDirectSegmentDiscoveryRoute;
class MUPDirectSegmentDiscoveryRouteDefaultTypeInternal;
extern MUPDirectSegmentDiscoveryRouteDefaultTypeInternal _MUPDirectSegmentDiscoveryRoute_default_instance_;
class MUPExtended;
class MUPExtendedDefaultTypeInternal;
extern MUPExtendedDefaultTypeInternal _MUPExtended_default_instance_;
class MUPInterworkSegmentDiscoveryRoute;
class MUPInterworkSegmentDiscoveryRouteDefaultTypeInternal;
extern MUPInterworkSegmentDiscoveryRouteDefaultTypeInternal _MUPInterworkSegmentDiscoveryRoute_default_instance_;
class MUPType1SessionTransformedRoute;
class MUPType1SessionTransformedRouteDefaultTypeInternal;
extern MUPType1SessionTransformedRouteDefaultTypeInternal _MUPType1SessionTransformedRoute_default_instance_;
class MUPType2SessionTransformedRoute;
class MUPType2SessionTransformedRouteDefaultTypeInternal;
extern MUPType2SessionTransformedRouteDefaultTypeInternal _MUPType2SessionTransformedRoute_default_instance_;
class MacMobilityExtended;
class MacMobilityExtendedDefaultTypeInternal;
extern MacMobilityExtendedDefaultTypeInternal _MacMobilityExtended_default_instance_;
class MpReachNLRIAttribute;
class MpReachNLRIAttributeDefaultTypeInternal;
extern MpReachNLRIAttributeDefaultTypeInternal _MpReachNLRIAttribute_default_instance_;
class MpUnreachNLRIAttribute;
class MpUnreachNLRIAttributeDefaultTypeInternal;
extern MpUnreachNLRIAttributeDefaultTypeInternal _MpUnreachNLRIAttribute_default_instance_;
class MultiExitDiscAttribute;
class MultiExitDiscAttributeDefaultTypeInternal;
extern MultiExitDiscAttributeDefaultTypeInternal _MultiExitDiscAttribute_default_instance_;
class NextHopAttribute;
class NextHopAttributeDefaultTypeInternal;
extern NextHopAttributeDefaultTypeInternal _NextHopAttribute_default_instance_;
class OpaqueExtended;
class OpaqueExtendedDefaultTypeInternal;
extern OpaqueExtendedDefaultTypeInternal _OpaqueExtended_default_instance_;
class OpaqueNLRI;
class OpaqueNLRIDefaultTypeInternal;
extern OpaqueNLRIDefaultTypeInternal _OpaqueNLRI_default_instance_;
class OriginAttribute;
class OriginAttributeDefaultTypeInternal;
extern OriginAttributeDefaultTypeInternal _OriginAttribute_default_instance_;
class OriginatorIdAttribute;
class OriginatorIdAttributeDefaultTypeInternal;
extern OriginatorIdAttributeDefaultTypeInternal _OriginatorIdAttribute_default_instance_;
class PmsiTunnelAttribute;
class PmsiTunnelAttributeDefaultTypeInternal;
extern PmsiTunnelAttributeDefaultTypeInternal _PmsiTunnelAttribute_default_instance_;
class PrefixSID;
class PrefixSIDDefaultTypeInternal;
extern PrefixSIDDefaultTypeInternal _PrefixSID_default_instance_;
class RedirectFourOctetAsSpecificExtended;
class RedirectFourOctetAsSpecificExtendedDefaultTypeInternal;
extern RedirectFourOctetAsSpecificExtendedDefaultTypeInternal _RedirectFourOctetAsSpecificExtended_default_instance_;
class RedirectIPv4AddressSpecificExtended;
class RedirectIPv4AddressSpecificExtendedDefaultTypeInternal;
extern RedirectIPv4AddressSpecificExtendedDefaultTypeInternal _RedirectIPv4AddressSpecificExtended_default_instance_;
class RedirectIPv6AddressSpecificExtended;
class RedirectIPv6AddressSpecificExtendedDefaultTypeInternal;
extern RedirectIPv6AddressSpecificExtendedDefaultTypeInternal _RedirectIPv6AddressSpecificExtended_default_instance_;
class RedirectTwoOctetAsSpecificExtended;
class RedirectTwoOctetAsSpecificExtendedDefaultTypeInternal;
extern RedirectTwoOctetAsSpecificExtendedDefaultTypeInternal _RedirectTwoOctetAsSpecificExtended_default_instance_;
class RouteDistinguisherFourOctetASN;
class RouteDistinguisherFourOctetASNDefaultTypeInternal;
extern RouteDistinguisherFourOctetASNDefaultTypeInternal _RouteDistinguisherFourOctetASN_default_instance_;
class RouteDistinguisherIPAddress;
class RouteDistinguisherIPAddressDefaultTypeInternal;
extern RouteDistinguisherIPAddressDefaultTypeInternal _RouteDistinguisherIPAddress_default_instance_;
class RouteDistinguisherTwoOctetASN;
class RouteDistinguisherTwoOctetASNDefaultTypeInternal;
extern RouteDistinguisherTwoOctetASNDefaultTypeInternal _RouteDistinguisherTwoOctetASN_default_instance_;
class RouteTargetMembershipNLRI;
class RouteTargetMembershipNLRIDefaultTypeInternal;
extern RouteTargetMembershipNLRIDefaultTypeInternal _RouteTargetMembershipNLRI_default_instance_;
class RouterMacExtended;
class RouterMacExtendedDefaultTypeInternal;
extern RouterMacExtendedDefaultTypeInternal _RouterMacExtended_default_instance_;
class SRBindingSID;
class SRBindingSIDDefaultTypeInternal;
extern SRBindingSIDDefaultTypeInternal _SRBindingSID_default_instance_;
class SRPolicyNLRI;
class SRPolicyNLRIDefaultTypeInternal;
extern SRPolicyNLRIDefaultTypeInternal _SRPolicyNLRI_default_instance_;
class SRWeight;
class SRWeightDefaultTypeInternal;
extern SRWeightDefaultTypeInternal _SRWeight_default_instance_;
class SRv6BindingSID;
class SRv6BindingSIDDefaultTypeInternal;
extern SRv6BindingSIDDefaultTypeInternal _SRv6BindingSID_default_instance_;
class SRv6EndPointBehavior;
class SRv6EndPointBehaviorDefaultTypeInternal;
extern SRv6EndPointBehaviorDefaultTypeInternal _SRv6EndPointBehavior_default_instance_;
class SRv6InformationSubTLV;
class SRv6InformationSubTLVDefaultTypeInternal;
extern SRv6InformationSubTLVDefaultTypeInternal _SRv6InformationSubTLV_default_instance_;
class SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse;
class SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUseDefaultTypeInternal;
extern SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUseDefaultTypeInternal _SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_default_instance_;
class SRv6L2ServiceTLV;
class SRv6L2ServiceTLVDefaultTypeInternal;
extern SRv6L2ServiceTLVDefaultTypeInternal _SRv6L2ServiceTLV_default_instance_;
class SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse;
class SRv6L2ServiceTLV_SubTlvsEntry_DoNotUseDefaultTypeInternal;
extern SRv6L2ServiceTLV_SubTlvsEntry_DoNotUseDefaultTypeInternal _SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_;
class SRv6L3ServiceTLV;
class SRv6L3ServiceTLVDefaultTypeInternal;
extern SRv6L3ServiceTLVDefaultTypeInternal _SRv6L3ServiceTLV_default_instance_;
class SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse;
class SRv6L3ServiceTLV_SubTlvsEntry_DoNotUseDefaultTypeInternal;
extern SRv6L3ServiceTLV_SubTlvsEntry_DoNotUseDefaultTypeInternal _SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_;
class SRv6SIDFlags;
class SRv6SIDFlagsDefaultTypeInternal;
extern SRv6SIDFlagsDefaultTypeInternal _SRv6SIDFlags_default_instance_;
class SRv6StructureSubSubTLV;
class SRv6StructureSubSubTLVDefaultTypeInternal;
extern SRv6StructureSubSubTLVDefaultTypeInternal _SRv6StructureSubSubTLV_default_instance_;
class SRv6TLV;
class SRv6TLVDefaultTypeInternal;
extern SRv6TLVDefaultTypeInternal _SRv6TLV_default_instance_;
class SegmentFlags;
class SegmentFlagsDefaultTypeInternal;
extern SegmentFlagsDefaultTypeInternal _SegmentFlags_default_instance_;
class SegmentTypeA;
class SegmentTypeADefaultTypeInternal;
extern SegmentTypeADefaultTypeInternal _SegmentTypeA_default_instance_;
class SegmentTypeB;
class SegmentTypeBDefaultTypeInternal;
extern SegmentTypeBDefaultTypeInternal _SegmentTypeB_default_instance_;
class TrafficActionExtended;
class TrafficActionExtendedDefaultTypeInternal;
extern TrafficActionExtendedDefaultTypeInternal _TrafficActionExtended_default_instance_;
class TrafficRateExtended;
class TrafficRateExtendedDefaultTypeInternal;
extern TrafficRateExtendedDefaultTypeInternal _TrafficRateExtended_default_instance_;
class TrafficRemarkExtended;
class TrafficRemarkExtendedDefaultTypeInternal;
extern TrafficRemarkExtendedDefaultTypeInternal _TrafficRemarkExtended_default_instance_;
class TunnelEncapAttribute;
class TunnelEncapAttributeDefaultTypeInternal;
extern TunnelEncapAttributeDefaultTypeInternal _TunnelEncapAttribute_default_instance_;
class TunnelEncapSubTLVColor;
class TunnelEncapSubTLVColorDefaultTypeInternal;
extern TunnelEncapSubTLVColorDefaultTypeInternal _TunnelEncapSubTLVColor_default_instance_;
class TunnelEncapSubTLVEgressEndpoint;
class TunnelEncapSubTLVEgressEndpointDefaultTypeInternal;
extern TunnelEncapSubTLVEgressEndpointDefaultTypeInternal _TunnelEncapSubTLVEgressEndpoint_default_instance_;
class TunnelEncapSubTLVEncapsulation;
class TunnelEncapSubTLVEncapsulationDefaultTypeInternal;
extern TunnelEncapSubTLVEncapsulationDefaultTypeInternal _TunnelEncapSubTLVEncapsulation_default_instance_;
class TunnelEncapSubTLVProtocol;
class TunnelEncapSubTLVProtocolDefaultTypeInternal;
extern TunnelEncapSubTLVProtocolDefaultTypeInternal _TunnelEncapSubTLVProtocol_default_instance_;
class TunnelEncapSubTLVSRBindingSID;
class TunnelEncapSubTLVSRBindingSIDDefaultTypeInternal;
extern TunnelEncapSubTLVSRBindingSIDDefaultTypeInternal _TunnelEncapSubTLVSRBindingSID_default_instance_;
class TunnelEncapSubTLVSRCandidatePathName;
class TunnelEncapSubTLVSRCandidatePathNameDefaultTypeInternal;
extern TunnelEncapSubTLVSRCandidatePathNameDefaultTypeInternal _TunnelEncapSubTLVSRCandidatePathName_default_instance_;
class TunnelEncapSubTLVSRENLP;
class TunnelEncapSubTLVSRENLPDefaultTypeInternal;
extern TunnelEncapSubTLVSRENLPDefaultTypeInternal _TunnelEncapSubTLVSRENLP_default_instance_;
class TunnelEncapSubTLVSRPreference;
class TunnelEncapSubTLVSRPreferenceDefaultTypeInternal;
extern TunnelEncapSubTLVSRPreferenceDefaultTypeInternal _TunnelEncapSubTLVSRPreference_default_instance_;
class TunnelEncapSubTLVSRPriority;
class TunnelEncapSubTLVSRPriorityDefaultTypeInternal;
extern TunnelEncapSubTLVSRPriorityDefaultTypeInternal _TunnelEncapSubTLVSRPriority_default_instance_;
class TunnelEncapSubTLVSRSegmentList;
class TunnelEncapSubTLVSRSegmentListDefaultTypeInternal;
extern TunnelEncapSubTLVSRSegmentListDefaultTypeInternal _TunnelEncapSubTLVSRSegmentList_default_instance_;
class TunnelEncapSubTLVUDPDestPort;
class TunnelEncapSubTLVUDPDestPortDefaultTypeInternal;
extern TunnelEncapSubTLVUDPDestPortDefaultTypeInternal _TunnelEncapSubTLVUDPDestPort_default_instance_;
class TunnelEncapSubTLVUnknown;
class TunnelEncapSubTLVUnknownDefaultTypeInternal;
extern TunnelEncapSubTLVUnknownDefaultTypeInternal _TunnelEncapSubTLVUnknown_default_instance_;
class TunnelEncapTLV;
class TunnelEncapTLVDefaultTypeInternal;
extern TunnelEncapTLVDefaultTypeInternal _TunnelEncapTLV_default_instance_;
class TwoOctetAsSpecificExtended;
class TwoOctetAsSpecificExtendedDefaultTypeInternal;
extern TwoOctetAsSpecificExtendedDefaultTypeInternal _TwoOctetAsSpecificExtended_default_instance_;
class UnknownAttribute;
class UnknownAttributeDefaultTypeInternal;
extern UnknownAttributeDefaultTypeInternal _UnknownAttribute_default_instance_;
class UnknownExtended;
class UnknownExtendedDefaultTypeInternal;
extern UnknownExtendedDefaultTypeInternal _UnknownExtended_default_instance_;
class VPNFlowSpecNLRI;
class VPNFlowSpecNLRIDefaultTypeInternal;
extern VPNFlowSpecNLRIDefaultTypeInternal _VPNFlowSpecNLRI_default_instance_;
class ValidationExtended;
class ValidationExtendedDefaultTypeInternal;
extern ValidationExtendedDefaultTypeInternal _ValidationExtended_default_instance_;
}  // namespace apipb
PROTOBUF_NAMESPACE_OPEN
template<> ::apipb::AggregatorAttribute* Arena::CreateMaybeMessage<::apipb::AggregatorAttribute>(Arena*);
template<> ::apipb::AigpAttribute* Arena::CreateMaybeMessage<::apipb::AigpAttribute>(Arena*);
template<> ::apipb::AigpTLVIGPMetric* Arena::CreateMaybeMessage<::apipb::AigpTLVIGPMetric>(Arena*);
template<> ::apipb::AigpTLVUnknown* Arena::CreateMaybeMessage<::apipb::AigpTLVUnknown>(Arena*);
template<> ::apipb::As4AggregatorAttribute* Arena::CreateMaybeMessage<::apipb::As4AggregatorAttribute>(Arena*);
template<> ::apipb::As4PathAttribute* Arena::CreateMaybeMessage<::apipb::As4PathAttribute>(Arena*);
template<> ::apipb::AsPathAttribute* Arena::CreateMaybeMessage<::apipb::AsPathAttribute>(Arena*);
template<> ::apipb::AsSegment* Arena::CreateMaybeMessage<::apipb::AsSegment>(Arena*);
template<> ::apipb::AtomicAggregateAttribute* Arena::CreateMaybeMessage<::apipb::AtomicAggregateAttribute>(Arena*);
template<> ::apipb::ClusterListAttribute* Arena::CreateMaybeMessage<::apipb::ClusterListAttribute>(Arena*);
template<> ::apipb::ColorExtended* Arena::CreateMaybeMessage<::apipb::ColorExtended>(Arena*);
template<> ::apipb::CommunitiesAttribute* Arena::CreateMaybeMessage<::apipb::CommunitiesAttribute>(Arena*);
template<> ::apipb::DefaultGatewayExtended* Arena::CreateMaybeMessage<::apipb::DefaultGatewayExtended>(Arena*);
template<> ::apipb::ESILabelExtended* Arena::CreateMaybeMessage<::apipb::ESILabelExtended>(Arena*);
template<> ::apipb::ESImportRouteTarget* Arena::CreateMaybeMessage<::apipb::ESImportRouteTarget>(Arena*);
template<> ::apipb::EVPNEthernetAutoDiscoveryRoute* Arena::CreateMaybeMessage<::apipb::EVPNEthernetAutoDiscoveryRoute>(Arena*);
template<> ::apipb::EVPNEthernetSegmentRoute* Arena::CreateMaybeMessage<::apipb::EVPNEthernetSegmentRoute>(Arena*);
template<> ::apipb::EVPNIPMSIRoute* Arena::CreateMaybeMessage<::apipb::EVPNIPMSIRoute>(Arena*);
template<> ::apipb::EVPNIPPrefixRoute* Arena::CreateMaybeMessage<::apipb::EVPNIPPrefixRoute>(Arena*);
template<> ::apipb::EVPNInclusiveMulticastEthernetTagRoute* Arena::CreateMaybeMessage<::apipb::EVPNInclusiveMulticastEthernetTagRoute>(Arena*);
template<> ::apipb::EVPNMACIPAdvertisementRoute* Arena::CreateMaybeMessage<::apipb::EVPNMACIPAdvertisementRoute>(Arena*);
template<> ::apipb::EncapExtended* Arena::CreateMaybeMessage<::apipb::EncapExtended>(Arena*);
template<> ::apipb::EncapsulationNLRI* Arena::CreateMaybeMessage<::apipb::EncapsulationNLRI>(Arena*);
template<> ::apipb::EthernetSegmentIdentifier* Arena::CreateMaybeMessage<::apipb::EthernetSegmentIdentifier>(Arena*);
template<> ::apipb::ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage<::apipb::ExtendedCommunitiesAttribute>(Arena*);
template<> ::apipb::FlowSpecComponent* Arena::CreateMaybeMessage<::apipb::FlowSpecComponent>(Arena*);
template<> ::apipb::FlowSpecComponentItem* Arena::CreateMaybeMessage<::apipb::FlowSpecComponentItem>(Arena*);
template<> ::apipb::FlowSpecIPPrefix* Arena::CreateMaybeMessage<::apipb::FlowSpecIPPrefix>(Arena*);
template<> ::apipb::FlowSpecMAC* Arena::CreateMaybeMessage<::apipb::FlowSpecMAC>(Arena*);
template<> ::apipb::FlowSpecNLRI* Arena::CreateMaybeMessage<::apipb::FlowSpecNLRI>(Arena*);
template<> ::apipb::FourOctetAsSpecificExtended* Arena::CreateMaybeMessage<::apipb::FourOctetAsSpecificExtended>(Arena*);
template<> ::apipb::IP6ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage<::apipb::IP6ExtendedCommunitiesAttribute>(Arena*);
template<> ::apipb::IPAddressPrefix* Arena::CreateMaybeMessage<::apipb::IPAddressPrefix>(Arena*);
template<> ::apipb::IPv4AddressSpecificExtended* Arena::CreateMaybeMessage<::apipb::IPv4AddressSpecificExtended>(Arena*);
template<> ::apipb::IPv6AddressSpecificExtended* Arena::CreateMaybeMessage<::apipb::IPv6AddressSpecificExtended>(Arena*);
template<> ::apipb::LabeledIPAddressPrefix* Arena::CreateMaybeMessage<::apipb::LabeledIPAddressPrefix>(Arena*);
template<> ::apipb::LabeledVPNIPAddressPrefix* Arena::CreateMaybeMessage<::apipb::LabeledVPNIPAddressPrefix>(Arena*);
template<> ::apipb::LargeCommunitiesAttribute* Arena::CreateMaybeMessage<::apipb::LargeCommunitiesAttribute>(Arena*);
template<> ::apipb::LargeCommunity* Arena::CreateMaybeMessage<::apipb::LargeCommunity>(Arena*);
template<> ::apipb::LinkBandwidthExtended* Arena::CreateMaybeMessage<::apipb::LinkBandwidthExtended>(Arena*);
template<> ::apipb::LocalPrefAttribute* Arena::CreateMaybeMessage<::apipb::LocalPrefAttribute>(Arena*);
template<> ::apipb::LsAddrPrefix* Arena::CreateMaybeMessage<::apipb::LsAddrPrefix>(Arena*);
template<> ::apipb::LsAttribute* Arena::CreateMaybeMessage<::apipb::LsAttribute>(Arena*);
template<> ::apipb::LsAttributeBgpPeerSegment* Arena::CreateMaybeMessage<::apipb::LsAttributeBgpPeerSegment>(Arena*);
template<> ::apipb::LsAttributeLink* Arena::CreateMaybeMessage<::apipb::LsAttributeLink>(Arena*);
template<> ::apipb::LsAttributeNode* Arena::CreateMaybeMessage<::apipb::LsAttributeNode>(Arena*);
template<> ::apipb::LsAttributePrefix* Arena::CreateMaybeMessage<::apipb::LsAttributePrefix>(Arena*);
template<> ::apipb::LsBgpPeerSegmentSID* Arena::CreateMaybeMessage<::apipb::LsBgpPeerSegmentSID>(Arena*);
template<> ::apipb::LsBgpPeerSegmentSIDFlags* Arena::CreateMaybeMessage<::apipb::LsBgpPeerSegmentSIDFlags>(Arena*);
template<> ::apipb::LsIGPFlags* Arena::CreateMaybeMessage<::apipb::LsIGPFlags>(Arena*);
template<> ::apipb::LsLinkDescriptor* Arena::CreateMaybeMessage<::apipb::LsLinkDescriptor>(Arena*);
template<> ::apipb::LsLinkNLRI* Arena::CreateMaybeMessage<::apipb::LsLinkNLRI>(Arena*);
template<> ::apipb::LsNodeDescriptor* Arena::CreateMaybeMessage<::apipb::LsNodeDescriptor>(Arena*);
template<> ::apipb::LsNodeFlags* Arena::CreateMaybeMessage<::apipb::LsNodeFlags>(Arena*);
template<> ::apipb::LsNodeNLRI* Arena::CreateMaybeMessage<::apipb::LsNodeNLRI>(Arena*);
template<> ::apipb::LsPrefixDescriptor* Arena::CreateMaybeMessage<::apipb::LsPrefixDescriptor>(Arena*);
template<> ::apipb::LsPrefixV4NLRI* Arena::CreateMaybeMessage<::apipb::LsPrefixV4NLRI>(Arena*);
template<> ::apipb::LsPrefixV6NLRI* Arena::CreateMaybeMessage<::apipb::LsPrefixV6NLRI>(Arena*);
template<> ::apipb::LsSrCapabilities* Arena::CreateMaybeMessage<::apipb::LsSrCapabilities>(Arena*);
template<> ::apipb::LsSrLocalBlock* Arena::CreateMaybeMessage<::apipb::LsSrLocalBlock>(Arena*);
template<> ::apipb::LsSrRange* Arena::CreateMaybeMessage<::apipb::LsSrRange>(Arena*);
template<> ::apipb::MUPDirectSegmentDiscoveryRoute* Arena::CreateMaybeMessage<::apipb::MUPDirectSegmentDiscoveryRoute>(Arena*);
template<> ::apipb::MUPExtended* Arena::CreateMaybeMessage<::apipb::MUPExtended>(Arena*);
template<> ::apipb::MUPInterworkSegmentDiscoveryRoute* Arena::CreateMaybeMessage<::apipb::MUPInterworkSegmentDiscoveryRoute>(Arena*);
template<> ::apipb::MUPType1SessionTransformedRoute* Arena::CreateMaybeMessage<::apipb::MUPType1SessionTransformedRoute>(Arena*);
template<> ::apipb::MUPType2SessionTransformedRoute* Arena::CreateMaybeMessage<::apipb::MUPType2SessionTransformedRoute>(Arena*);
template<> ::apipb::MacMobilityExtended* Arena::CreateMaybeMessage<::apipb::MacMobilityExtended>(Arena*);
template<> ::apipb::MpReachNLRIAttribute* Arena::CreateMaybeMessage<::apipb::MpReachNLRIAttribute>(Arena*);
template<> ::apipb::MpUnreachNLRIAttribute* Arena::CreateMaybeMessage<::apipb::MpUnreachNLRIAttribute>(Arena*);
template<> ::apipb::MultiExitDiscAttribute* Arena::CreateMaybeMessage<::apipb::MultiExitDiscAttribute>(Arena*);
template<> ::apipb::NextHopAttribute* Arena::CreateMaybeMessage<::apipb::NextHopAttribute>(Arena*);
template<> ::apipb::OpaqueExtended* Arena::CreateMaybeMessage<::apipb::OpaqueExtended>(Arena*);
template<> ::apipb::OpaqueNLRI* Arena::CreateMaybeMessage<::apipb::OpaqueNLRI>(Arena*);
template<> ::apipb::OriginAttribute* Arena::CreateMaybeMessage<::apipb::OriginAttribute>(Arena*);
template<> ::apipb::OriginatorIdAttribute* Arena::CreateMaybeMessage<::apipb::OriginatorIdAttribute>(Arena*);
template<> ::apipb::PmsiTunnelAttribute* Arena::CreateMaybeMessage<::apipb::PmsiTunnelAttribute>(Arena*);
template<> ::apipb::PrefixSID* Arena::CreateMaybeMessage<::apipb::PrefixSID>(Arena*);
template<> ::apipb::RedirectFourOctetAsSpecificExtended* Arena::CreateMaybeMessage<::apipb::RedirectFourOctetAsSpecificExtended>(Arena*);
template<> ::apipb::RedirectIPv4AddressSpecificExtended* Arena::CreateMaybeMessage<::apipb::RedirectIPv4AddressSpecificExtended>(Arena*);
template<> ::apipb::RedirectIPv6AddressSpecificExtended* Arena::CreateMaybeMessage<::apipb::RedirectIPv6AddressSpecificExtended>(Arena*);
template<> ::apipb::RedirectTwoOctetAsSpecificExtended* Arena::CreateMaybeMessage<::apipb::RedirectTwoOctetAsSpecificExtended>(Arena*);
template<> ::apipb::RouteDistinguisherFourOctetASN* Arena::CreateMaybeMessage<::apipb::RouteDistinguisherFourOctetASN>(Arena*);
template<> ::apipb::RouteDistinguisherIPAddress* Arena::CreateMaybeMessage<::apipb::RouteDistinguisherIPAddress>(Arena*);
template<> ::apipb::RouteDistinguisherTwoOctetASN* Arena::CreateMaybeMessage<::apipb::RouteDistinguisherTwoOctetASN>(Arena*);
template<> ::apipb::RouteTargetMembershipNLRI* Arena::CreateMaybeMessage<::apipb::RouteTargetMembershipNLRI>(Arena*);
template<> ::apipb::RouterMacExtended* Arena::CreateMaybeMessage<::apipb::RouterMacExtended>(Arena*);
template<> ::apipb::SRBindingSID* Arena::CreateMaybeMessage<::apipb::SRBindingSID>(Arena*);
template<> ::apipb::SRPolicyNLRI* Arena::CreateMaybeMessage<::apipb::SRPolicyNLRI>(Arena*);
template<> ::apipb::SRWeight* Arena::CreateMaybeMessage<::apipb::SRWeight>(Arena*);
template<> ::apipb::SRv6BindingSID* Arena::CreateMaybeMessage<::apipb::SRv6BindingSID>(Arena*);
template<> ::apipb::SRv6EndPointBehavior* Arena::CreateMaybeMessage<::apipb::SRv6EndPointBehavior>(Arena*);
template<> ::apipb::SRv6InformationSubTLV* Arena::CreateMaybeMessage<::apipb::SRv6InformationSubTLV>(Arena*);
template<> ::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse* Arena::CreateMaybeMessage<::apipb::SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse>(Arena*);
template<> ::apipb::SRv6L2ServiceTLV* Arena::CreateMaybeMessage<::apipb::SRv6L2ServiceTLV>(Arena*);
template<> ::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse* Arena::CreateMaybeMessage<::apipb::SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse>(Arena*);
template<> ::apipb::SRv6L3ServiceTLV* Arena::CreateMaybeMessage<::apipb::SRv6L3ServiceTLV>(Arena*);
template<> ::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse* Arena::CreateMaybeMessage<::apipb::SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse>(Arena*);
template<> ::apipb::SRv6SIDFlags* Arena::CreateMaybeMessage<::apipb::SRv6SIDFlags>(Arena*);
template<> ::apipb::SRv6StructureSubSubTLV* Arena::CreateMaybeMessage<::apipb::SRv6StructureSubSubTLV>(Arena*);
template<> ::apipb::SRv6TLV* Arena::CreateMaybeMessage<::apipb::SRv6TLV>(Arena*);
template<> ::apipb::SegmentFlags* Arena::CreateMaybeMessage<::apipb::SegmentFlags>(Arena*);
template<> ::apipb::SegmentTypeA* Arena::CreateMaybeMessage<::apipb::SegmentTypeA>(Arena*);
template<> ::apipb::SegmentTypeB* Arena::CreateMaybeMessage<::apipb::SegmentTypeB>(Arena*);
template<> ::apipb::TrafficActionExtended* Arena::CreateMaybeMessage<::apipb::TrafficActionExtended>(Arena*);
template<> ::apipb::TrafficRateExtended* Arena::CreateMaybeMessage<::apipb::TrafficRateExtended>(Arena*);
template<> ::apipb::TrafficRemarkExtended* Arena::CreateMaybeMessage<::apipb::TrafficRemarkExtended>(Arena*);
template<> ::apipb::TunnelEncapAttribute* Arena::CreateMaybeMessage<::apipb::TunnelEncapAttribute>(Arena*);
template<> ::apipb::TunnelEncapSubTLVColor* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVColor>(Arena*);
template<> ::apipb::TunnelEncapSubTLVEgressEndpoint* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVEgressEndpoint>(Arena*);
template<> ::apipb::TunnelEncapSubTLVEncapsulation* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVEncapsulation>(Arena*);
template<> ::apipb::TunnelEncapSubTLVProtocol* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVProtocol>(Arena*);
template<> ::apipb::TunnelEncapSubTLVSRBindingSID* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVSRBindingSID>(Arena*);
template<> ::apipb::TunnelEncapSubTLVSRCandidatePathName* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVSRCandidatePathName>(Arena*);
template<> ::apipb::TunnelEncapSubTLVSRENLP* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVSRENLP>(Arena*);
template<> ::apipb::TunnelEncapSubTLVSRPreference* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVSRPreference>(Arena*);
template<> ::apipb::TunnelEncapSubTLVSRPriority* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVSRPriority>(Arena*);
template<> ::apipb::TunnelEncapSubTLVSRSegmentList* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVSRSegmentList>(Arena*);
template<> ::apipb::TunnelEncapSubTLVUDPDestPort* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVUDPDestPort>(Arena*);
template<> ::apipb::TunnelEncapSubTLVUnknown* Arena::CreateMaybeMessage<::apipb::TunnelEncapSubTLVUnknown>(Arena*);
template<> ::apipb::TunnelEncapTLV* Arena::CreateMaybeMessage<::apipb::TunnelEncapTLV>(Arena*);
template<> ::apipb::TwoOctetAsSpecificExtended* Arena::CreateMaybeMessage<::apipb::TwoOctetAsSpecificExtended>(Arena*);
template<> ::apipb::UnknownAttribute* Arena::CreateMaybeMessage<::apipb::UnknownAttribute>(Arena*);
template<> ::apipb::UnknownExtended* Arena::CreateMaybeMessage<::apipb::UnknownExtended>(Arena*);
template<> ::apipb::VPNFlowSpecNLRI* Arena::CreateMaybeMessage<::apipb::VPNFlowSpecNLRI>(Arena*);
template<> ::apipb::ValidationExtended* Arena::CreateMaybeMessage<::apipb::ValidationExtended>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apipb {

enum AsSegment_Type : int {
  AsSegment_Type_UNKNOWN = 0,
  AsSegment_Type_AS_SET = 1,
  AsSegment_Type_AS_SEQUENCE = 2,
  AsSegment_Type_AS_CONFED_SEQUENCE = 3,
  AsSegment_Type_AS_CONFED_SET = 4,
  AsSegment_Type_AsSegment_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AsSegment_Type_AsSegment_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AsSegment_Type_IsValid(int value);
constexpr AsSegment_Type AsSegment_Type_Type_MIN = AsSegment_Type_UNKNOWN;
constexpr AsSegment_Type AsSegment_Type_Type_MAX = AsSegment_Type_AS_CONFED_SET;
constexpr int AsSegment_Type_Type_ARRAYSIZE = AsSegment_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsSegment_Type_descriptor();
template<typename T>
inline const std::string& AsSegment_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AsSegment_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AsSegment_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AsSegment_Type_descriptor(), enum_t_value);
}
inline bool AsSegment_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AsSegment_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AsSegment_Type>(
    AsSegment_Type_descriptor(), name, value);
}
enum LsOspfRouteType : int {
  LS_OSPF_ROUTE_TYPE_UNKNOWN = 0,
  LS_OSPF_ROUTE_TYPE_INTRA_AREA = 1,
  LS_OSPF_ROUTE_TYPE_INTER_AREA = 2,
  LS_OSPF_ROUTE_TYPE_EXTERNAL1 = 3,
  LS_OSPF_ROUTE_TYPE_EXTERNAL2 = 4,
  LS_OSPF_ROUTE_TYPE_NSSA1 = 5,
  LS_OSPF_ROUTE_TYPE_NSSA2 = 6,
  LsOspfRouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LsOspfRouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LsOspfRouteType_IsValid(int value);
constexpr LsOspfRouteType LsOspfRouteType_MIN = LS_OSPF_ROUTE_TYPE_UNKNOWN;
constexpr LsOspfRouteType LsOspfRouteType_MAX = LS_OSPF_ROUTE_TYPE_NSSA2;
constexpr int LsOspfRouteType_ARRAYSIZE = LsOspfRouteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsOspfRouteType_descriptor();
template<typename T>
inline const std::string& LsOspfRouteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LsOspfRouteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LsOspfRouteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LsOspfRouteType_descriptor(), enum_t_value);
}
inline bool LsOspfRouteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LsOspfRouteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LsOspfRouteType>(
    LsOspfRouteType_descriptor(), name, value);
}
enum LsNLRIType : int {
  LS_NLRI_UNKNOWN = 0,
  LS_NLRI_NODE = 1,
  LS_NLRI_LINK = 2,
  LS_NLRI_PREFIX_V4 = 3,
  LS_NLRI_PREFIX_V6 = 4,
  LsNLRIType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LsNLRIType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LsNLRIType_IsValid(int value);
constexpr LsNLRIType LsNLRIType_MIN = LS_NLRI_UNKNOWN;
constexpr LsNLRIType LsNLRIType_MAX = LS_NLRI_PREFIX_V6;
constexpr int LsNLRIType_ARRAYSIZE = LsNLRIType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsNLRIType_descriptor();
template<typename T>
inline const std::string& LsNLRIType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LsNLRIType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LsNLRIType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LsNLRIType_descriptor(), enum_t_value);
}
inline bool LsNLRIType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LsNLRIType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LsNLRIType>(
    LsNLRIType_descriptor(), name, value);
}
enum LsProtocolID : int {
  LS_PROTOCOL_UNKNOWN = 0,
  LS_PROTOCOL_ISIS_L1 = 1,
  LS_PROTOCOL_ISIS_L2 = 2,
  LS_PROTOCOL_OSPF_V2 = 3,
  LS_PROTOCOL_DIRECT = 4,
  LS_PROTOCOL_STATIC = 5,
  LS_PROTOCOL_OSPF_V3 = 6,
  LsProtocolID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LsProtocolID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LsProtocolID_IsValid(int value);
constexpr LsProtocolID LsProtocolID_MIN = LS_PROTOCOL_UNKNOWN;
constexpr LsProtocolID LsProtocolID_MAX = LS_PROTOCOL_OSPF_V3;
constexpr int LsProtocolID_ARRAYSIZE = LsProtocolID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsProtocolID_descriptor();
template<typename T>
inline const std::string& LsProtocolID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LsProtocolID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LsProtocolID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LsProtocolID_descriptor(), enum_t_value);
}
inline bool LsProtocolID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LsProtocolID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LsProtocolID>(
    LsProtocolID_descriptor(), name, value);
}
enum SRv6Behavior : int {
  RESERVED = 0,
  END = 1,
  END_WITH_PSP = 2,
  END_WITH_USP = 3,
  END_WITH_PSP_USP = 4,
  ENDX = 5,
  ENDX_WITH_PSP = 6,
  ENDX_WITH_USP = 7,
  ENDX_WITH_PSP_USP = 8,
  ENDT = 9,
  ENDT_WITH_PSP = 10,
  ENDT_WITH_USP = 11,
  ENDT_WITH_PSP_USP = 12,
  END_B6_ENCAPS = 14,
  END_BM = 15,
  END_DX6 = 16,
  END_DX4 = 17,
  END_DT6 = 18,
  END_DT4 = 19,
  END_DT46 = 20,
  END_DX2 = 21,
  END_DX2V = 22,
  END_DT2U = 23,
  END_DT2M = 24,
  END_B6_ENCAPS_Red = 27,
  END_WITH_USD = 28,
  END_WITH_PSP_USD = 29,
  END_WITH_USP_USD = 30,
  END_WITH_PSP_USP_USD = 31,
  ENDX_WITH_USD = 32,
  ENDX_WITH_PSP_USD = 33,
  ENDX_WITH_USP_USD = 34,
  ENDX_WITH_PSP_USP_USD = 35,
  ENDT_WITH_USD = 36,
  ENDT_WITH_PSP_USD = 37,
  ENDT_WITH_USP_USD = 38,
  ENDT_WITH_PSP_USP_USD = 39,
  ENDM_GTP6D = 69,
  ENDM_GTP6DI = 70,
  ENDM_GTP6E = 71,
  ENDM_GTP4E = 72,
  SRv6Behavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SRv6Behavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SRv6Behavior_IsValid(int value);
constexpr SRv6Behavior SRv6Behavior_MIN = RESERVED;
constexpr SRv6Behavior SRv6Behavior_MAX = ENDM_GTP4E;
constexpr int SRv6Behavior_ARRAYSIZE = SRv6Behavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRv6Behavior_descriptor();
template<typename T>
inline const std::string& SRv6Behavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SRv6Behavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SRv6Behavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SRv6Behavior_descriptor(), enum_t_value);
}
inline bool SRv6Behavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SRv6Behavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SRv6Behavior>(
    SRv6Behavior_descriptor(), name, value);
}
enum ENLPType : int {
  Reserved = 0,
  Type1 = 1,
  Type2 = 2,
  Type3 = 3,
  Type4 = 4,
  ENLPType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENLPType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENLPType_IsValid(int value);
constexpr ENLPType ENLPType_MIN = Reserved;
constexpr ENLPType ENLPType_MAX = Type4;
constexpr int ENLPType_ARRAYSIZE = ENLPType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENLPType_descriptor();
template<typename T>
inline const std::string& ENLPType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENLPType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENLPType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENLPType_descriptor(), enum_t_value);
}
inline bool ENLPType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENLPType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENLPType>(
    ENLPType_descriptor(), name, value);
}
// ===================================================================

class OriginAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.OriginAttribute) */ {
 public:
  inline OriginAttribute() : OriginAttribute(nullptr) {}
  virtual ~OriginAttribute();

  OriginAttribute(const OriginAttribute& from);
  OriginAttribute(OriginAttribute&& from) noexcept
    : OriginAttribute() {
    *this = ::std::move(from);
  }

  inline OriginAttribute& operator=(const OriginAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginAttribute& operator=(OriginAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginAttribute* internal_default_instance() {
    return reinterpret_cast<const OriginAttribute*>(
               &_OriginAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OriginAttribute& a, OriginAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginAttribute* New() const final {
    return CreateMaybeMessage<OriginAttribute>(nullptr);
  }

  OriginAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginAttribute& from);
  void MergeFrom(const OriginAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.OriginAttribute";
  }
  protected:
  explicit OriginAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
  };
  // uint32 origin = 1;
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.OriginAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AsSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AsSegment) */ {
 public:
  inline AsSegment() : AsSegment(nullptr) {}
  virtual ~AsSegment();

  AsSegment(const AsSegment& from);
  AsSegment(AsSegment&& from) noexcept
    : AsSegment() {
    *this = ::std::move(from);
  }

  inline AsSegment& operator=(const AsSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsSegment& operator=(AsSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsSegment* internal_default_instance() {
    return reinterpret_cast<const AsSegment*>(
               &_AsSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AsSegment& a, AsSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(AsSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsSegment* New() const final {
    return CreateMaybeMessage<AsSegment>(nullptr);
  }

  AsSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsSegment& from);
  void MergeFrom(const AsSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AsSegment";
  }
  protected:
  explicit AsSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AsSegment_Type Type;
  static constexpr Type UNKNOWN =
    AsSegment_Type_UNKNOWN;
  static constexpr Type AS_SET =
    AsSegment_Type_AS_SET;
  static constexpr Type AS_SEQUENCE =
    AsSegment_Type_AS_SEQUENCE;
  static constexpr Type AS_CONFED_SEQUENCE =
    AsSegment_Type_AS_CONFED_SEQUENCE;
  static constexpr Type AS_CONFED_SET =
    AsSegment_Type_AS_CONFED_SET;
  static inline bool Type_IsValid(int value) {
    return AsSegment_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AsSegment_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AsSegment_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AsSegment_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AsSegment_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AsSegment_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return AsSegment_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 numbers = 2;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_numbers() const;
  void _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_numbers();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 numbers(int index) const;
  void set_numbers(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_numbers();

  // .apipb.AsSegment.Type type = 1;
  void clear_type();
  ::apipb::AsSegment_Type type() const;
  void set_type(::apipb::AsSegment_Type value);
  private:
  ::apipb::AsSegment_Type _internal_type() const;
  void _internal_set_type(::apipb::AsSegment_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.AsSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > numbers_;
  mutable std::atomic<int> _numbers_cached_byte_size_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AsPathAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AsPathAttribute) */ {
 public:
  inline AsPathAttribute() : AsPathAttribute(nullptr) {}
  virtual ~AsPathAttribute();

  AsPathAttribute(const AsPathAttribute& from);
  AsPathAttribute(AsPathAttribute&& from) noexcept
    : AsPathAttribute() {
    *this = ::std::move(from);
  }

  inline AsPathAttribute& operator=(const AsPathAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsPathAttribute& operator=(AsPathAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsPathAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsPathAttribute* internal_default_instance() {
    return reinterpret_cast<const AsPathAttribute*>(
               &_AsPathAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AsPathAttribute& a, AsPathAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AsPathAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsPathAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsPathAttribute* New() const final {
    return CreateMaybeMessage<AsPathAttribute>(nullptr);
  }

  AsPathAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsPathAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsPathAttribute& from);
  void MergeFrom(const AsPathAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsPathAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AsPathAttribute";
  }
  protected:
  explicit AsPathAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .apipb.AsSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::apipb::AsSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >*
      mutable_segments();
  private:
  const ::apipb::AsSegment& _internal_segments(int index) const;
  ::apipb::AsSegment* _internal_add_segments();
  public:
  const ::apipb::AsSegment& segments(int index) const;
  ::apipb::AsSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:apipb.AsPathAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class NextHopAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.NextHopAttribute) */ {
 public:
  inline NextHopAttribute() : NextHopAttribute(nullptr) {}
  virtual ~NextHopAttribute();

  NextHopAttribute(const NextHopAttribute& from);
  NextHopAttribute(NextHopAttribute&& from) noexcept
    : NextHopAttribute() {
    *this = ::std::move(from);
  }

  inline NextHopAttribute& operator=(const NextHopAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopAttribute& operator=(NextHopAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextHopAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextHopAttribute* internal_default_instance() {
    return reinterpret_cast<const NextHopAttribute*>(
               &_NextHopAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NextHopAttribute& a, NextHopAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextHopAttribute* New() const final {
    return CreateMaybeMessage<NextHopAttribute>(nullptr);
  }

  NextHopAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextHopAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextHopAttribute& from);
  void MergeFrom(const NextHopAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.NextHopAttribute";
  }
  protected:
  explicit NextHopAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextHopFieldNumber = 1,
  };
  // string next_hop = 1;
  void clear_next_hop();
  const std::string& next_hop() const;
  void set_next_hop(const std::string& value);
  void set_next_hop(std::string&& value);
  void set_next_hop(const char* value);
  void set_next_hop(const char* value, size_t size);
  std::string* mutable_next_hop();
  std::string* release_next_hop();
  void set_allocated_next_hop(std::string* next_hop);
  private:
  const std::string& _internal_next_hop() const;
  void _internal_set_next_hop(const std::string& value);
  std::string* _internal_mutable_next_hop();
  public:

  // @@protoc_insertion_point(class_scope:apipb.NextHopAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_hop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MultiExitDiscAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MultiExitDiscAttribute) */ {
 public:
  inline MultiExitDiscAttribute() : MultiExitDiscAttribute(nullptr) {}
  virtual ~MultiExitDiscAttribute();

  MultiExitDiscAttribute(const MultiExitDiscAttribute& from);
  MultiExitDiscAttribute(MultiExitDiscAttribute&& from) noexcept
    : MultiExitDiscAttribute() {
    *this = ::std::move(from);
  }

  inline MultiExitDiscAttribute& operator=(const MultiExitDiscAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiExitDiscAttribute& operator=(MultiExitDiscAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiExitDiscAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiExitDiscAttribute* internal_default_instance() {
    return reinterpret_cast<const MultiExitDiscAttribute*>(
               &_MultiExitDiscAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiExitDiscAttribute& a, MultiExitDiscAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiExitDiscAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiExitDiscAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiExitDiscAttribute* New() const final {
    return CreateMaybeMessage<MultiExitDiscAttribute>(nullptr);
  }

  MultiExitDiscAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiExitDiscAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiExitDiscAttribute& from);
  void MergeFrom(const MultiExitDiscAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiExitDiscAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MultiExitDiscAttribute";
  }
  protected:
  explicit MultiExitDiscAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedFieldNumber = 1,
  };
  // uint32 med = 1;
  void clear_med();
  ::PROTOBUF_NAMESPACE_ID::uint32 med() const;
  void set_med(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_med() const;
  void _internal_set_med(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.MultiExitDiscAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 med_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LocalPrefAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LocalPrefAttribute) */ {
 public:
  inline LocalPrefAttribute() : LocalPrefAttribute(nullptr) {}
  virtual ~LocalPrefAttribute();

  LocalPrefAttribute(const LocalPrefAttribute& from);
  LocalPrefAttribute(LocalPrefAttribute&& from) noexcept
    : LocalPrefAttribute() {
    *this = ::std::move(from);
  }

  inline LocalPrefAttribute& operator=(const LocalPrefAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPrefAttribute& operator=(LocalPrefAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPrefAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPrefAttribute* internal_default_instance() {
    return reinterpret_cast<const LocalPrefAttribute*>(
               &_LocalPrefAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocalPrefAttribute& a, LocalPrefAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPrefAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPrefAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPrefAttribute* New() const final {
    return CreateMaybeMessage<LocalPrefAttribute>(nullptr);
  }

  LocalPrefAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPrefAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPrefAttribute& from);
  void MergeFrom(const LocalPrefAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPrefAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LocalPrefAttribute";
  }
  protected:
  explicit LocalPrefAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPrefFieldNumber = 1,
  };
  // uint32 local_pref = 1;
  void clear_local_pref();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_pref() const;
  void set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_pref() const;
  void _internal_set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LocalPrefAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_pref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AtomicAggregateAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AtomicAggregateAttribute) */ {
 public:
  inline AtomicAggregateAttribute() : AtomicAggregateAttribute(nullptr) {}
  virtual ~AtomicAggregateAttribute();

  AtomicAggregateAttribute(const AtomicAggregateAttribute& from);
  AtomicAggregateAttribute(AtomicAggregateAttribute&& from) noexcept
    : AtomicAggregateAttribute() {
    *this = ::std::move(from);
  }

  inline AtomicAggregateAttribute& operator=(const AtomicAggregateAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtomicAggregateAttribute& operator=(AtomicAggregateAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AtomicAggregateAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtomicAggregateAttribute* internal_default_instance() {
    return reinterpret_cast<const AtomicAggregateAttribute*>(
               &_AtomicAggregateAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AtomicAggregateAttribute& a, AtomicAggregateAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AtomicAggregateAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AtomicAggregateAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AtomicAggregateAttribute* New() const final {
    return CreateMaybeMessage<AtomicAggregateAttribute>(nullptr);
  }

  AtomicAggregateAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AtomicAggregateAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AtomicAggregateAttribute& from);
  void MergeFrom(const AtomicAggregateAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AtomicAggregateAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AtomicAggregateAttribute";
  }
  protected:
  explicit AtomicAggregateAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apipb.AtomicAggregateAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AggregatorAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AggregatorAttribute) */ {
 public:
  inline AggregatorAttribute() : AggregatorAttribute(nullptr) {}
  virtual ~AggregatorAttribute();

  AggregatorAttribute(const AggregatorAttribute& from);
  AggregatorAttribute(AggregatorAttribute&& from) noexcept
    : AggregatorAttribute() {
    *this = ::std::move(from);
  }

  inline AggregatorAttribute& operator=(const AggregatorAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatorAttribute& operator=(AggregatorAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregatorAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatorAttribute* internal_default_instance() {
    return reinterpret_cast<const AggregatorAttribute*>(
               &_AggregatorAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AggregatorAttribute& a, AggregatorAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatorAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregatorAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatorAttribute* New() const final {
    return CreateMaybeMessage<AggregatorAttribute>(nullptr);
  }

  AggregatorAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatorAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregatorAttribute& from);
  void MergeFrom(const AggregatorAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregatorAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AggregatorAttribute";
  }
  protected:
  explicit AggregatorAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kAsnFieldNumber = 1,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.AggregatorAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class CommunitiesAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.CommunitiesAttribute) */ {
 public:
  inline CommunitiesAttribute() : CommunitiesAttribute(nullptr) {}
  virtual ~CommunitiesAttribute();

  CommunitiesAttribute(const CommunitiesAttribute& from);
  CommunitiesAttribute(CommunitiesAttribute&& from) noexcept
    : CommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline CommunitiesAttribute& operator=(const CommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunitiesAttribute& operator=(CommunitiesAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const CommunitiesAttribute*>(
               &_CommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommunitiesAttribute& a, CommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunitiesAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunitiesAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunitiesAttribute* New() const final {
    return CreateMaybeMessage<CommunitiesAttribute>(nullptr);
  }

  CommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunitiesAttribute& from);
  void MergeFrom(const CommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.CommunitiesAttribute";
  }
  protected:
  explicit CommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated uint32 communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_communities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_communities() const;
  void _internal_add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_communities();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 communities(int index) const;
  void set_communities(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      communities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_communities();

  // @@protoc_insertion_point(class_scope:apipb.CommunitiesAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > communities_;
  mutable std::atomic<int> _communities_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class OriginatorIdAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.OriginatorIdAttribute) */ {
 public:
  inline OriginatorIdAttribute() : OriginatorIdAttribute(nullptr) {}
  virtual ~OriginatorIdAttribute();

  OriginatorIdAttribute(const OriginatorIdAttribute& from);
  OriginatorIdAttribute(OriginatorIdAttribute&& from) noexcept
    : OriginatorIdAttribute() {
    *this = ::std::move(from);
  }

  inline OriginatorIdAttribute& operator=(const OriginatorIdAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginatorIdAttribute& operator=(OriginatorIdAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginatorIdAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginatorIdAttribute* internal_default_instance() {
    return reinterpret_cast<const OriginatorIdAttribute*>(
               &_OriginatorIdAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OriginatorIdAttribute& a, OriginatorIdAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginatorIdAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginatorIdAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginatorIdAttribute* New() const final {
    return CreateMaybeMessage<OriginatorIdAttribute>(nullptr);
  }

  OriginatorIdAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginatorIdAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginatorIdAttribute& from);
  void MergeFrom(const OriginatorIdAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginatorIdAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.OriginatorIdAttribute";
  }
  protected:
  explicit OriginatorIdAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:apipb.OriginatorIdAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ClusterListAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.ClusterListAttribute) */ {
 public:
  inline ClusterListAttribute() : ClusterListAttribute(nullptr) {}
  virtual ~ClusterListAttribute();

  ClusterListAttribute(const ClusterListAttribute& from);
  ClusterListAttribute(ClusterListAttribute&& from) noexcept
    : ClusterListAttribute() {
    *this = ::std::move(from);
  }

  inline ClusterListAttribute& operator=(const ClusterListAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterListAttribute& operator=(ClusterListAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterListAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterListAttribute* internal_default_instance() {
    return reinterpret_cast<const ClusterListAttribute*>(
               &_ClusterListAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClusterListAttribute& a, ClusterListAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterListAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterListAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterListAttribute* New() const final {
    return CreateMaybeMessage<ClusterListAttribute>(nullptr);
  }

  ClusterListAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterListAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterListAttribute& from);
  void MergeFrom(const ClusterListAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterListAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.ClusterListAttribute";
  }
  protected:
  explicit ClusterListAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:apipb.ClusterListAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IPAddressPrefix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.IPAddressPrefix) */ {
 public:
  inline IPAddressPrefix() : IPAddressPrefix(nullptr) {}
  virtual ~IPAddressPrefix();

  IPAddressPrefix(const IPAddressPrefix& from);
  IPAddressPrefix(IPAddressPrefix&& from) noexcept
    : IPAddressPrefix() {
    *this = ::std::move(from);
  }

  inline IPAddressPrefix& operator=(const IPAddressPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPAddressPrefix& operator=(IPAddressPrefix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPAddressPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPAddressPrefix* internal_default_instance() {
    return reinterpret_cast<const IPAddressPrefix*>(
               &_IPAddressPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IPAddressPrefix& a, IPAddressPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(IPAddressPrefix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPAddressPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPAddressPrefix* New() const final {
    return CreateMaybeMessage<IPAddressPrefix>(nullptr);
  }

  IPAddressPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPAddressPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPAddressPrefix& from);
  void MergeFrom(const IPAddressPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPAddressPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.IPAddressPrefix";
  }
  protected:
  explicit IPAddressPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kPrefixLenFieldNumber = 1,
  };
  // string prefix = 2;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint32 prefix_len = 1;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.IPAddressPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LabeledIPAddressPrefix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LabeledIPAddressPrefix) */ {
 public:
  inline LabeledIPAddressPrefix() : LabeledIPAddressPrefix(nullptr) {}
  virtual ~LabeledIPAddressPrefix();

  LabeledIPAddressPrefix(const LabeledIPAddressPrefix& from);
  LabeledIPAddressPrefix(LabeledIPAddressPrefix&& from) noexcept
    : LabeledIPAddressPrefix() {
    *this = ::std::move(from);
  }

  inline LabeledIPAddressPrefix& operator=(const LabeledIPAddressPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledIPAddressPrefix& operator=(LabeledIPAddressPrefix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabeledIPAddressPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledIPAddressPrefix* internal_default_instance() {
    return reinterpret_cast<const LabeledIPAddressPrefix*>(
               &_LabeledIPAddressPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LabeledIPAddressPrefix& a, LabeledIPAddressPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledIPAddressPrefix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabeledIPAddressPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabeledIPAddressPrefix* New() const final {
    return CreateMaybeMessage<LabeledIPAddressPrefix>(nullptr);
  }

  LabeledIPAddressPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabeledIPAddressPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabeledIPAddressPrefix& from);
  void MergeFrom(const LabeledIPAddressPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledIPAddressPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LabeledIPAddressPrefix";
  }
  protected:
  explicit LabeledIPAddressPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kPrefixFieldNumber = 3,
    kPrefixLenFieldNumber = 2,
  };
  // repeated uint32 labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labels() const;
  void _internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labels(int index) const;
  void set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labels();

  // string prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LabeledIPAddressPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labels_;
  mutable std::atomic<int> _labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EncapsulationNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EncapsulationNLRI) */ {
 public:
  inline EncapsulationNLRI() : EncapsulationNLRI(nullptr) {}
  virtual ~EncapsulationNLRI();

  EncapsulationNLRI(const EncapsulationNLRI& from);
  EncapsulationNLRI(EncapsulationNLRI&& from) noexcept
    : EncapsulationNLRI() {
    *this = ::std::move(from);
  }

  inline EncapsulationNLRI& operator=(const EncapsulationNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncapsulationNLRI& operator=(EncapsulationNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncapsulationNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncapsulationNLRI* internal_default_instance() {
    return reinterpret_cast<const EncapsulationNLRI*>(
               &_EncapsulationNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EncapsulationNLRI& a, EncapsulationNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(EncapsulationNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncapsulationNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncapsulationNLRI* New() const final {
    return CreateMaybeMessage<EncapsulationNLRI>(nullptr);
  }

  EncapsulationNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncapsulationNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncapsulationNLRI& from);
  void MergeFrom(const EncapsulationNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncapsulationNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EncapsulationNLRI";
  }
  protected:
  explicit EncapsulationNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:apipb.EncapsulationNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteDistinguisherTwoOctetASN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RouteDistinguisherTwoOctetASN) */ {
 public:
  inline RouteDistinguisherTwoOctetASN() : RouteDistinguisherTwoOctetASN(nullptr) {}
  virtual ~RouteDistinguisherTwoOctetASN();

  RouteDistinguisherTwoOctetASN(const RouteDistinguisherTwoOctetASN& from);
  RouteDistinguisherTwoOctetASN(RouteDistinguisherTwoOctetASN&& from) noexcept
    : RouteDistinguisherTwoOctetASN() {
    *this = ::std::move(from);
  }

  inline RouteDistinguisherTwoOctetASN& operator=(const RouteDistinguisherTwoOctetASN& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDistinguisherTwoOctetASN& operator=(RouteDistinguisherTwoOctetASN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteDistinguisherTwoOctetASN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDistinguisherTwoOctetASN* internal_default_instance() {
    return reinterpret_cast<const RouteDistinguisherTwoOctetASN*>(
               &_RouteDistinguisherTwoOctetASN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RouteDistinguisherTwoOctetASN& a, RouteDistinguisherTwoOctetASN& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDistinguisherTwoOctetASN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteDistinguisherTwoOctetASN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteDistinguisherTwoOctetASN* New() const final {
    return CreateMaybeMessage<RouteDistinguisherTwoOctetASN>(nullptr);
  }

  RouteDistinguisherTwoOctetASN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteDistinguisherTwoOctetASN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteDistinguisherTwoOctetASN& from);
  void MergeFrom(const RouteDistinguisherTwoOctetASN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDistinguisherTwoOctetASN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RouteDistinguisherTwoOctetASN";
  }
  protected:
  explicit RouteDistinguisherTwoOctetASN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kAssignedFieldNumber = 2,
  };
  // uint32 admin = 1;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 assigned = 2;
  void clear_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned() const;
  void set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assigned() const;
  void _internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RouteDistinguisherTwoOctetASN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteDistinguisherIPAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RouteDistinguisherIPAddress) */ {
 public:
  inline RouteDistinguisherIPAddress() : RouteDistinguisherIPAddress(nullptr) {}
  virtual ~RouteDistinguisherIPAddress();

  RouteDistinguisherIPAddress(const RouteDistinguisherIPAddress& from);
  RouteDistinguisherIPAddress(RouteDistinguisherIPAddress&& from) noexcept
    : RouteDistinguisherIPAddress() {
    *this = ::std::move(from);
  }

  inline RouteDistinguisherIPAddress& operator=(const RouteDistinguisherIPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDistinguisherIPAddress& operator=(RouteDistinguisherIPAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteDistinguisherIPAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDistinguisherIPAddress* internal_default_instance() {
    return reinterpret_cast<const RouteDistinguisherIPAddress*>(
               &_RouteDistinguisherIPAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RouteDistinguisherIPAddress& a, RouteDistinguisherIPAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDistinguisherIPAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteDistinguisherIPAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteDistinguisherIPAddress* New() const final {
    return CreateMaybeMessage<RouteDistinguisherIPAddress>(nullptr);
  }

  RouteDistinguisherIPAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteDistinguisherIPAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteDistinguisherIPAddress& from);
  void MergeFrom(const RouteDistinguisherIPAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDistinguisherIPAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RouteDistinguisherIPAddress";
  }
  protected:
  explicit RouteDistinguisherIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kAssignedFieldNumber = 2,
  };
  // string admin = 1;
  void clear_admin();
  const std::string& admin() const;
  void set_admin(const std::string& value);
  void set_admin(std::string&& value);
  void set_admin(const char* value);
  void set_admin(const char* value, size_t size);
  std::string* mutable_admin();
  std::string* release_admin();
  void set_allocated_admin(std::string* admin);
  private:
  const std::string& _internal_admin() const;
  void _internal_set_admin(const std::string& value);
  std::string* _internal_mutable_admin();
  public:

  // uint32 assigned = 2;
  void clear_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned() const;
  void set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assigned() const;
  void _internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RouteDistinguisherIPAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteDistinguisherFourOctetASN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RouteDistinguisherFourOctetASN) */ {
 public:
  inline RouteDistinguisherFourOctetASN() : RouteDistinguisherFourOctetASN(nullptr) {}
  virtual ~RouteDistinguisherFourOctetASN();

  RouteDistinguisherFourOctetASN(const RouteDistinguisherFourOctetASN& from);
  RouteDistinguisherFourOctetASN(RouteDistinguisherFourOctetASN&& from) noexcept
    : RouteDistinguisherFourOctetASN() {
    *this = ::std::move(from);
  }

  inline RouteDistinguisherFourOctetASN& operator=(const RouteDistinguisherFourOctetASN& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDistinguisherFourOctetASN& operator=(RouteDistinguisherFourOctetASN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteDistinguisherFourOctetASN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDistinguisherFourOctetASN* internal_default_instance() {
    return reinterpret_cast<const RouteDistinguisherFourOctetASN*>(
               &_RouteDistinguisherFourOctetASN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RouteDistinguisherFourOctetASN& a, RouteDistinguisherFourOctetASN& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDistinguisherFourOctetASN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteDistinguisherFourOctetASN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteDistinguisherFourOctetASN* New() const final {
    return CreateMaybeMessage<RouteDistinguisherFourOctetASN>(nullptr);
  }

  RouteDistinguisherFourOctetASN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteDistinguisherFourOctetASN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteDistinguisherFourOctetASN& from);
  void MergeFrom(const RouteDistinguisherFourOctetASN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDistinguisherFourOctetASN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RouteDistinguisherFourOctetASN";
  }
  protected:
  explicit RouteDistinguisherFourOctetASN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kAssignedFieldNumber = 2,
  };
  // uint32 admin = 1;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 assigned = 2;
  void clear_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned() const;
  void set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assigned() const;
  void _internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RouteDistinguisherFourOctetASN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EthernetSegmentIdentifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EthernetSegmentIdentifier) */ {
 public:
  inline EthernetSegmentIdentifier() : EthernetSegmentIdentifier(nullptr) {}
  virtual ~EthernetSegmentIdentifier();

  EthernetSegmentIdentifier(const EthernetSegmentIdentifier& from);
  EthernetSegmentIdentifier(EthernetSegmentIdentifier&& from) noexcept
    : EthernetSegmentIdentifier() {
    *this = ::std::move(from);
  }

  inline EthernetSegmentIdentifier& operator=(const EthernetSegmentIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetSegmentIdentifier& operator=(EthernetSegmentIdentifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthernetSegmentIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EthernetSegmentIdentifier* internal_default_instance() {
    return reinterpret_cast<const EthernetSegmentIdentifier*>(
               &_EthernetSegmentIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EthernetSegmentIdentifier& a, EthernetSegmentIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetSegmentIdentifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthernetSegmentIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthernetSegmentIdentifier* New() const final {
    return CreateMaybeMessage<EthernetSegmentIdentifier>(nullptr);
  }

  EthernetSegmentIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthernetSegmentIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthernetSegmentIdentifier& from);
  void MergeFrom(const EthernetSegmentIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetSegmentIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EthernetSegmentIdentifier";
  }
  protected:
  explicit EthernetSegmentIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EthernetSegmentIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNEthernetAutoDiscoveryRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EVPNEthernetAutoDiscoveryRoute) */ {
 public:
  inline EVPNEthernetAutoDiscoveryRoute() : EVPNEthernetAutoDiscoveryRoute(nullptr) {}
  virtual ~EVPNEthernetAutoDiscoveryRoute();

  EVPNEthernetAutoDiscoveryRoute(const EVPNEthernetAutoDiscoveryRoute& from);
  EVPNEthernetAutoDiscoveryRoute(EVPNEthernetAutoDiscoveryRoute&& from) noexcept
    : EVPNEthernetAutoDiscoveryRoute() {
    *this = ::std::move(from);
  }

  inline EVPNEthernetAutoDiscoveryRoute& operator=(const EVPNEthernetAutoDiscoveryRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNEthernetAutoDiscoveryRoute& operator=(EVPNEthernetAutoDiscoveryRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNEthernetAutoDiscoveryRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNEthernetAutoDiscoveryRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNEthernetAutoDiscoveryRoute*>(
               &_EVPNEthernetAutoDiscoveryRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EVPNEthernetAutoDiscoveryRoute& a, EVPNEthernetAutoDiscoveryRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNEthernetAutoDiscoveryRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVPNEthernetAutoDiscoveryRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNEthernetAutoDiscoveryRoute* New() const final {
    return CreateMaybeMessage<EVPNEthernetAutoDiscoveryRoute>(nullptr);
  }

  EVPNEthernetAutoDiscoveryRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNEthernetAutoDiscoveryRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNEthernetAutoDiscoveryRoute& from);
  void MergeFrom(const EVPNEthernetAutoDiscoveryRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNEthernetAutoDiscoveryRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EVPNEthernetAutoDiscoveryRoute";
  }
  protected:
  explicit EVPNEthernetAutoDiscoveryRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
    kEthernetTagFieldNumber = 3,
    kLabelFieldNumber = 4,
  };
  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // .apipb.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::apipb::EthernetSegmentIdentifier& esi() const;
  ::apipb::EthernetSegmentIdentifier* release_esi();
  ::apipb::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi);
  private:
  const ::apipb::EthernetSegmentIdentifier& _internal_esi() const;
  ::apipb::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:
  void unsafe_arena_set_allocated_esi(
      ::apipb::EthernetSegmentIdentifier* esi);
  ::apipb::EthernetSegmentIdentifier* unsafe_arena_release_esi();

  // uint32 ethernet_tag = 3;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 4;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EVPNEthernetAutoDiscoveryRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::apipb::EthernetSegmentIdentifier* esi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNMACIPAdvertisementRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EVPNMACIPAdvertisementRoute) */ {
 public:
  inline EVPNMACIPAdvertisementRoute() : EVPNMACIPAdvertisementRoute(nullptr) {}
  virtual ~EVPNMACIPAdvertisementRoute();

  EVPNMACIPAdvertisementRoute(const EVPNMACIPAdvertisementRoute& from);
  EVPNMACIPAdvertisementRoute(EVPNMACIPAdvertisementRoute&& from) noexcept
    : EVPNMACIPAdvertisementRoute() {
    *this = ::std::move(from);
  }

  inline EVPNMACIPAdvertisementRoute& operator=(const EVPNMACIPAdvertisementRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNMACIPAdvertisementRoute& operator=(EVPNMACIPAdvertisementRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNMACIPAdvertisementRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNMACIPAdvertisementRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNMACIPAdvertisementRoute*>(
               &_EVPNMACIPAdvertisementRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EVPNMACIPAdvertisementRoute& a, EVPNMACIPAdvertisementRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNMACIPAdvertisementRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVPNMACIPAdvertisementRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNMACIPAdvertisementRoute* New() const final {
    return CreateMaybeMessage<EVPNMACIPAdvertisementRoute>(nullptr);
  }

  EVPNMACIPAdvertisementRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNMACIPAdvertisementRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNMACIPAdvertisementRoute& from);
  void MergeFrom(const EVPNMACIPAdvertisementRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNMACIPAdvertisementRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EVPNMACIPAdvertisementRoute";
  }
  protected:
  explicit EVPNMACIPAdvertisementRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 6,
    kMacAddressFieldNumber = 4,
    kIpAddressFieldNumber = 5,
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
    kEthernetTagFieldNumber = 3,
  };
  // repeated uint32 labels = 6;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labels() const;
  void _internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labels(int index) const;
  void set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labels();

  // string mac_address = 4;
  void clear_mac_address();
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string ip_address = 5;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // .apipb.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::apipb::EthernetSegmentIdentifier& esi() const;
  ::apipb::EthernetSegmentIdentifier* release_esi();
  ::apipb::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi);
  private:
  const ::apipb::EthernetSegmentIdentifier& _internal_esi() const;
  ::apipb::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:
  void unsafe_arena_set_allocated_esi(
      ::apipb::EthernetSegmentIdentifier* esi);
  ::apipb::EthernetSegmentIdentifier* unsafe_arena_release_esi();

  // uint32 ethernet_tag = 3;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EVPNMACIPAdvertisementRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labels_;
  mutable std::atomic<int> _labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::apipb::EthernetSegmentIdentifier* esi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNInclusiveMulticastEthernetTagRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EVPNInclusiveMulticastEthernetTagRoute) */ {
 public:
  inline EVPNInclusiveMulticastEthernetTagRoute() : EVPNInclusiveMulticastEthernetTagRoute(nullptr) {}
  virtual ~EVPNInclusiveMulticastEthernetTagRoute();

  EVPNInclusiveMulticastEthernetTagRoute(const EVPNInclusiveMulticastEthernetTagRoute& from);
  EVPNInclusiveMulticastEthernetTagRoute(EVPNInclusiveMulticastEthernetTagRoute&& from) noexcept
    : EVPNInclusiveMulticastEthernetTagRoute() {
    *this = ::std::move(from);
  }

  inline EVPNInclusiveMulticastEthernetTagRoute& operator=(const EVPNInclusiveMulticastEthernetTagRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNInclusiveMulticastEthernetTagRoute& operator=(EVPNInclusiveMulticastEthernetTagRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNInclusiveMulticastEthernetTagRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNInclusiveMulticastEthernetTagRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNInclusiveMulticastEthernetTagRoute*>(
               &_EVPNInclusiveMulticastEthernetTagRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(EVPNInclusiveMulticastEthernetTagRoute& a, EVPNInclusiveMulticastEthernetTagRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNInclusiveMulticastEthernetTagRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVPNInclusiveMulticastEthernetTagRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNInclusiveMulticastEthernetTagRoute* New() const final {
    return CreateMaybeMessage<EVPNInclusiveMulticastEthernetTagRoute>(nullptr);
  }

  EVPNInclusiveMulticastEthernetTagRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNInclusiveMulticastEthernetTagRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNInclusiveMulticastEthernetTagRoute& from);
  void MergeFrom(const EVPNInclusiveMulticastEthernetTagRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNInclusiveMulticastEthernetTagRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EVPNInclusiveMulticastEthernetTagRoute";
  }
  protected:
  explicit EVPNInclusiveMulticastEthernetTagRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 3,
    kRdFieldNumber = 1,
    kEthernetTagFieldNumber = 2,
  };
  // string ip_address = 3;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // uint32 ethernet_tag = 2;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EVPNInclusiveMulticastEthernetTagRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNEthernetSegmentRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EVPNEthernetSegmentRoute) */ {
 public:
  inline EVPNEthernetSegmentRoute() : EVPNEthernetSegmentRoute(nullptr) {}
  virtual ~EVPNEthernetSegmentRoute();

  EVPNEthernetSegmentRoute(const EVPNEthernetSegmentRoute& from);
  EVPNEthernetSegmentRoute(EVPNEthernetSegmentRoute&& from) noexcept
    : EVPNEthernetSegmentRoute() {
    *this = ::std::move(from);
  }

  inline EVPNEthernetSegmentRoute& operator=(const EVPNEthernetSegmentRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNEthernetSegmentRoute& operator=(EVPNEthernetSegmentRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNEthernetSegmentRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNEthernetSegmentRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNEthernetSegmentRoute*>(
               &_EVPNEthernetSegmentRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EVPNEthernetSegmentRoute& a, EVPNEthernetSegmentRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNEthernetSegmentRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVPNEthernetSegmentRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNEthernetSegmentRoute* New() const final {
    return CreateMaybeMessage<EVPNEthernetSegmentRoute>(nullptr);
  }

  EVPNEthernetSegmentRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNEthernetSegmentRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNEthernetSegmentRoute& from);
  void MergeFrom(const EVPNEthernetSegmentRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNEthernetSegmentRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EVPNEthernetSegmentRoute";
  }
  protected:
  explicit EVPNEthernetSegmentRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 3,
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
  };
  // string ip_address = 3;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // .apipb.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::apipb::EthernetSegmentIdentifier& esi() const;
  ::apipb::EthernetSegmentIdentifier* release_esi();
  ::apipb::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi);
  private:
  const ::apipb::EthernetSegmentIdentifier& _internal_esi() const;
  ::apipb::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:
  void unsafe_arena_set_allocated_esi(
      ::apipb::EthernetSegmentIdentifier* esi);
  ::apipb::EthernetSegmentIdentifier* unsafe_arena_release_esi();

  // @@protoc_insertion_point(class_scope:apipb.EVPNEthernetSegmentRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::apipb::EthernetSegmentIdentifier* esi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNIPPrefixRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EVPNIPPrefixRoute) */ {
 public:
  inline EVPNIPPrefixRoute() : EVPNIPPrefixRoute(nullptr) {}
  virtual ~EVPNIPPrefixRoute();

  EVPNIPPrefixRoute(const EVPNIPPrefixRoute& from);
  EVPNIPPrefixRoute(EVPNIPPrefixRoute&& from) noexcept
    : EVPNIPPrefixRoute() {
    *this = ::std::move(from);
  }

  inline EVPNIPPrefixRoute& operator=(const EVPNIPPrefixRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNIPPrefixRoute& operator=(EVPNIPPrefixRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNIPPrefixRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNIPPrefixRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNIPPrefixRoute*>(
               &_EVPNIPPrefixRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(EVPNIPPrefixRoute& a, EVPNIPPrefixRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNIPPrefixRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVPNIPPrefixRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNIPPrefixRoute* New() const final {
    return CreateMaybeMessage<EVPNIPPrefixRoute>(nullptr);
  }

  EVPNIPPrefixRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNIPPrefixRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNIPPrefixRoute& from);
  void MergeFrom(const EVPNIPPrefixRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNIPPrefixRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EVPNIPPrefixRoute";
  }
  protected:
  explicit EVPNIPPrefixRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpPrefixFieldNumber = 4,
    kGwAddressFieldNumber = 6,
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
    kEthernetTagFieldNumber = 3,
    kIpPrefixLenFieldNumber = 5,
    kLabelFieldNumber = 7,
  };
  // string ip_prefix = 4;
  void clear_ip_prefix();
  const std::string& ip_prefix() const;
  void set_ip_prefix(const std::string& value);
  void set_ip_prefix(std::string&& value);
  void set_ip_prefix(const char* value);
  void set_ip_prefix(const char* value, size_t size);
  std::string* mutable_ip_prefix();
  std::string* release_ip_prefix();
  void set_allocated_ip_prefix(std::string* ip_prefix);
  private:
  const std::string& _internal_ip_prefix() const;
  void _internal_set_ip_prefix(const std::string& value);
  std::string* _internal_mutable_ip_prefix();
  public:

  // string gw_address = 6;
  void clear_gw_address();
  const std::string& gw_address() const;
  void set_gw_address(const std::string& value);
  void set_gw_address(std::string&& value);
  void set_gw_address(const char* value);
  void set_gw_address(const char* value, size_t size);
  std::string* mutable_gw_address();
  std::string* release_gw_address();
  void set_allocated_gw_address(std::string* gw_address);
  private:
  const std::string& _internal_gw_address() const;
  void _internal_set_gw_address(const std::string& value);
  std::string* _internal_mutable_gw_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // .apipb.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::apipb::EthernetSegmentIdentifier& esi() const;
  ::apipb::EthernetSegmentIdentifier* release_esi();
  ::apipb::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi);
  private:
  const ::apipb::EthernetSegmentIdentifier& _internal_esi() const;
  ::apipb::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:
  void unsafe_arena_set_allocated_esi(
      ::apipb::EthernetSegmentIdentifier* esi);
  ::apipb::EthernetSegmentIdentifier* unsafe_arena_release_esi();

  // uint32 ethernet_tag = 3;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ip_prefix_len = 5;
  void clear_ip_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_prefix_len() const;
  void set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_prefix_len() const;
  void _internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 7;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EVPNIPPrefixRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gw_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::apipb::EthernetSegmentIdentifier* esi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNIPMSIRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EVPNIPMSIRoute) */ {
 public:
  inline EVPNIPMSIRoute() : EVPNIPMSIRoute(nullptr) {}
  virtual ~EVPNIPMSIRoute();

  EVPNIPMSIRoute(const EVPNIPMSIRoute& from);
  EVPNIPMSIRoute(EVPNIPMSIRoute&& from) noexcept
    : EVPNIPMSIRoute() {
    *this = ::std::move(from);
  }

  inline EVPNIPMSIRoute& operator=(const EVPNIPMSIRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNIPMSIRoute& operator=(EVPNIPMSIRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNIPMSIRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNIPMSIRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNIPMSIRoute*>(
               &_EVPNIPMSIRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(EVPNIPMSIRoute& a, EVPNIPMSIRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNIPMSIRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVPNIPMSIRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNIPMSIRoute* New() const final {
    return CreateMaybeMessage<EVPNIPMSIRoute>(nullptr);
  }

  EVPNIPMSIRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNIPMSIRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNIPMSIRoute& from);
  void MergeFrom(const EVPNIPMSIRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNIPMSIRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EVPNIPMSIRoute";
  }
  protected:
  explicit EVPNIPMSIRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFieldNumber = 1,
    kRtFieldNumber = 3,
    kEthernetTagFieldNumber = 2,
  };
  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // .google.protobuf.Any rt = 3;
  bool has_rt() const;
  private:
  bool _internal_has_rt() const;
  public:
  void clear_rt();
  const PROTOBUF_NAMESPACE_ID::Any& rt() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rt();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rt();
  void set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rt() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rt();
  public:
  void unsafe_arena_set_allocated_rt(
      PROTOBUF_NAMESPACE_ID::Any* rt);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rt();

  // uint32 ethernet_tag = 2;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EVPNIPMSIRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  PROTOBUF_NAMESPACE_ID::Any* rt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRPolicyNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRPolicyNLRI) */ {
 public:
  inline SRPolicyNLRI() : SRPolicyNLRI(nullptr) {}
  virtual ~SRPolicyNLRI();

  SRPolicyNLRI(const SRPolicyNLRI& from);
  SRPolicyNLRI(SRPolicyNLRI&& from) noexcept
    : SRPolicyNLRI() {
    *this = ::std::move(from);
  }

  inline SRPolicyNLRI& operator=(const SRPolicyNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRPolicyNLRI& operator=(SRPolicyNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRPolicyNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRPolicyNLRI* internal_default_instance() {
    return reinterpret_cast<const SRPolicyNLRI*>(
               &_SRPolicyNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SRPolicyNLRI& a, SRPolicyNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(SRPolicyNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRPolicyNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRPolicyNLRI* New() const final {
    return CreateMaybeMessage<SRPolicyNLRI>(nullptr);
  }

  SRPolicyNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRPolicyNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRPolicyNLRI& from);
  void MergeFrom(const SRPolicyNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRPolicyNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRPolicyNLRI";
  }
  protected:
  explicit SRPolicyNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 4,
    kLengthFieldNumber = 1,
    kDistinguisherFieldNumber = 2,
    kColorFieldNumber = 3,
  };
  // bytes endpoint = 4;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const void* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // uint32 length = 1;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 distinguisher = 2;
  void clear_distinguisher();
  ::PROTOBUF_NAMESPACE_ID::uint32 distinguisher() const;
  void set_distinguisher(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distinguisher() const;
  void _internal_set_distinguisher(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRPolicyNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distinguisher_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LabeledVPNIPAddressPrefix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LabeledVPNIPAddressPrefix) */ {
 public:
  inline LabeledVPNIPAddressPrefix() : LabeledVPNIPAddressPrefix(nullptr) {}
  virtual ~LabeledVPNIPAddressPrefix();

  LabeledVPNIPAddressPrefix(const LabeledVPNIPAddressPrefix& from);
  LabeledVPNIPAddressPrefix(LabeledVPNIPAddressPrefix&& from) noexcept
    : LabeledVPNIPAddressPrefix() {
    *this = ::std::move(from);
  }

  inline LabeledVPNIPAddressPrefix& operator=(const LabeledVPNIPAddressPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledVPNIPAddressPrefix& operator=(LabeledVPNIPAddressPrefix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabeledVPNIPAddressPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledVPNIPAddressPrefix* internal_default_instance() {
    return reinterpret_cast<const LabeledVPNIPAddressPrefix*>(
               &_LabeledVPNIPAddressPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LabeledVPNIPAddressPrefix& a, LabeledVPNIPAddressPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledVPNIPAddressPrefix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabeledVPNIPAddressPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabeledVPNIPAddressPrefix* New() const final {
    return CreateMaybeMessage<LabeledVPNIPAddressPrefix>(nullptr);
  }

  LabeledVPNIPAddressPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabeledVPNIPAddressPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabeledVPNIPAddressPrefix& from);
  void MergeFrom(const LabeledVPNIPAddressPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledVPNIPAddressPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LabeledVPNIPAddressPrefix";
  }
  protected:
  explicit LabeledVPNIPAddressPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kPrefixFieldNumber = 4,
    kRdFieldNumber = 2,
    kPrefixLenFieldNumber = 3,
  };
  // repeated uint32 labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labels() const;
  void _internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labels(int index) const;
  void set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labels();

  // string prefix = 4;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .google.protobuf.Any rd = 2;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // uint32 prefix_len = 3;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LabeledVPNIPAddressPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labels_;
  mutable std::atomic<int> _labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteTargetMembershipNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RouteTargetMembershipNLRI) */ {
 public:
  inline RouteTargetMembershipNLRI() : RouteTargetMembershipNLRI(nullptr) {}
  virtual ~RouteTargetMembershipNLRI();

  RouteTargetMembershipNLRI(const RouteTargetMembershipNLRI& from);
  RouteTargetMembershipNLRI(RouteTargetMembershipNLRI&& from) noexcept
    : RouteTargetMembershipNLRI() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembershipNLRI& operator=(const RouteTargetMembershipNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteTargetMembershipNLRI& operator=(RouteTargetMembershipNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteTargetMembershipNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembershipNLRI* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembershipNLRI*>(
               &_RouteTargetMembershipNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RouteTargetMembershipNLRI& a, RouteTargetMembershipNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteTargetMembershipNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteTargetMembershipNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembershipNLRI* New() const final {
    return CreateMaybeMessage<RouteTargetMembershipNLRI>(nullptr);
  }

  RouteTargetMembershipNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteTargetMembershipNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteTargetMembershipNLRI& from);
  void MergeFrom(const RouteTargetMembershipNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteTargetMembershipNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RouteTargetMembershipNLRI";
  }
  protected:
  explicit RouteTargetMembershipNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtFieldNumber = 2,
    kAsnFieldNumber = 1,
  };
  // .google.protobuf.Any rt = 2;
  bool has_rt() const;
  private:
  bool _internal_has_rt() const;
  public:
  void clear_rt();
  const PROTOBUF_NAMESPACE_ID::Any& rt() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rt();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rt();
  void set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rt() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rt();
  public:
  void unsafe_arena_set_allocated_rt(
      PROTOBUF_NAMESPACE_ID::Any* rt);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rt();

  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RouteTargetMembershipNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* rt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecIPPrefix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.FlowSpecIPPrefix) */ {
 public:
  inline FlowSpecIPPrefix() : FlowSpecIPPrefix(nullptr) {}
  virtual ~FlowSpecIPPrefix();

  FlowSpecIPPrefix(const FlowSpecIPPrefix& from);
  FlowSpecIPPrefix(FlowSpecIPPrefix&& from) noexcept
    : FlowSpecIPPrefix() {
    *this = ::std::move(from);
  }

  inline FlowSpecIPPrefix& operator=(const FlowSpecIPPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecIPPrefix& operator=(FlowSpecIPPrefix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecIPPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecIPPrefix* internal_default_instance() {
    return reinterpret_cast<const FlowSpecIPPrefix*>(
               &_FlowSpecIPPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FlowSpecIPPrefix& a, FlowSpecIPPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecIPPrefix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowSpecIPPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecIPPrefix* New() const final {
    return CreateMaybeMessage<FlowSpecIPPrefix>(nullptr);
  }

  FlowSpecIPPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecIPPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecIPPrefix& from);
  void MergeFrom(const FlowSpecIPPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecIPPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.FlowSpecIPPrefix";
  }
  protected:
  explicit FlowSpecIPPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 3,
    kTypeFieldNumber = 1,
    kPrefixLenFieldNumber = 2,
    kOffsetFieldNumber = 4,
  };
  // string prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.FlowSpecIPPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecMAC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.FlowSpecMAC) */ {
 public:
  inline FlowSpecMAC() : FlowSpecMAC(nullptr) {}
  virtual ~FlowSpecMAC();

  FlowSpecMAC(const FlowSpecMAC& from);
  FlowSpecMAC(FlowSpecMAC&& from) noexcept
    : FlowSpecMAC() {
    *this = ::std::move(from);
  }

  inline FlowSpecMAC& operator=(const FlowSpecMAC& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecMAC& operator=(FlowSpecMAC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecMAC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecMAC* internal_default_instance() {
    return reinterpret_cast<const FlowSpecMAC*>(
               &_FlowSpecMAC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FlowSpecMAC& a, FlowSpecMAC& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecMAC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowSpecMAC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecMAC* New() const final {
    return CreateMaybeMessage<FlowSpecMAC>(nullptr);
  }

  FlowSpecMAC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecMAC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecMAC& from);
  void MergeFrom(const FlowSpecMAC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecMAC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.FlowSpecMAC";
  }
  protected:
  explicit FlowSpecMAC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.FlowSpecMAC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecComponentItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.FlowSpecComponentItem) */ {
 public:
  inline FlowSpecComponentItem() : FlowSpecComponentItem(nullptr) {}
  virtual ~FlowSpecComponentItem();

  FlowSpecComponentItem(const FlowSpecComponentItem& from);
  FlowSpecComponentItem(FlowSpecComponentItem&& from) noexcept
    : FlowSpecComponentItem() {
    *this = ::std::move(from);
  }

  inline FlowSpecComponentItem& operator=(const FlowSpecComponentItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecComponentItem& operator=(FlowSpecComponentItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecComponentItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecComponentItem* internal_default_instance() {
    return reinterpret_cast<const FlowSpecComponentItem*>(
               &_FlowSpecComponentItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FlowSpecComponentItem& a, FlowSpecComponentItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecComponentItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowSpecComponentItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecComponentItem* New() const final {
    return CreateMaybeMessage<FlowSpecComponentItem>(nullptr);
  }

  FlowSpecComponentItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecComponentItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecComponentItem& from);
  void MergeFrom(const FlowSpecComponentItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecComponentItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.FlowSpecComponentItem";
  }
  protected:
  explicit FlowSpecComponentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 op = 1;
  void clear_op();
  ::PROTOBUF_NAMESPACE_ID::uint32 op() const;
  void set_op(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_op() const;
  void _internal_set_op(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.FlowSpecComponentItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.FlowSpecComponent) */ {
 public:
  inline FlowSpecComponent() : FlowSpecComponent(nullptr) {}
  virtual ~FlowSpecComponent();

  FlowSpecComponent(const FlowSpecComponent& from);
  FlowSpecComponent(FlowSpecComponent&& from) noexcept
    : FlowSpecComponent() {
    *this = ::std::move(from);
  }

  inline FlowSpecComponent& operator=(const FlowSpecComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecComponent& operator=(FlowSpecComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecComponent* internal_default_instance() {
    return reinterpret_cast<const FlowSpecComponent*>(
               &_FlowSpecComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FlowSpecComponent& a, FlowSpecComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowSpecComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecComponent* New() const final {
    return CreateMaybeMessage<FlowSpecComponent>(nullptr);
  }

  FlowSpecComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecComponent& from);
  void MergeFrom(const FlowSpecComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.FlowSpecComponent";
  }
  protected:
  explicit FlowSpecComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .apipb.FlowSpecComponentItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::apipb::FlowSpecComponentItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::FlowSpecComponentItem >*
      mutable_items();
  private:
  const ::apipb::FlowSpecComponentItem& _internal_items(int index) const;
  ::apipb::FlowSpecComponentItem* _internal_add_items();
  public:
  const ::apipb::FlowSpecComponentItem& items(int index) const;
  ::apipb::FlowSpecComponentItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::FlowSpecComponentItem >&
      items() const;

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.FlowSpecComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::FlowSpecComponentItem > items_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.FlowSpecNLRI) */ {
 public:
  inline FlowSpecNLRI() : FlowSpecNLRI(nullptr) {}
  virtual ~FlowSpecNLRI();

  FlowSpecNLRI(const FlowSpecNLRI& from);
  FlowSpecNLRI(FlowSpecNLRI&& from) noexcept
    : FlowSpecNLRI() {
    *this = ::std::move(from);
  }

  inline FlowSpecNLRI& operator=(const FlowSpecNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecNLRI& operator=(FlowSpecNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecNLRI* internal_default_instance() {
    return reinterpret_cast<const FlowSpecNLRI*>(
               &_FlowSpecNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FlowSpecNLRI& a, FlowSpecNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowSpecNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecNLRI* New() const final {
    return CreateMaybeMessage<FlowSpecNLRI>(nullptr);
  }

  FlowSpecNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecNLRI& from);
  void MergeFrom(const FlowSpecNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.FlowSpecNLRI";
  }
  protected:
  explicit FlowSpecNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_rules();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_rules();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      rules() const;

  // @@protoc_insertion_point(class_scope:apipb.FlowSpecNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class VPNFlowSpecNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.VPNFlowSpecNLRI) */ {
 public:
  inline VPNFlowSpecNLRI() : VPNFlowSpecNLRI(nullptr) {}
  virtual ~VPNFlowSpecNLRI();

  VPNFlowSpecNLRI(const VPNFlowSpecNLRI& from);
  VPNFlowSpecNLRI(VPNFlowSpecNLRI&& from) noexcept
    : VPNFlowSpecNLRI() {
    *this = ::std::move(from);
  }

  inline VPNFlowSpecNLRI& operator=(const VPNFlowSpecNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPNFlowSpecNLRI& operator=(VPNFlowSpecNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VPNFlowSpecNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VPNFlowSpecNLRI* internal_default_instance() {
    return reinterpret_cast<const VPNFlowSpecNLRI*>(
               &_VPNFlowSpecNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(VPNFlowSpecNLRI& a, VPNFlowSpecNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(VPNFlowSpecNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPNFlowSpecNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPNFlowSpecNLRI* New() const final {
    return CreateMaybeMessage<VPNFlowSpecNLRI>(nullptr);
  }

  VPNFlowSpecNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPNFlowSpecNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VPNFlowSpecNLRI& from);
  void MergeFrom(const VPNFlowSpecNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPNFlowSpecNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.VPNFlowSpecNLRI";
  }
  protected:
  explicit VPNFlowSpecNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kRdFieldNumber = 1,
  };
  // repeated .google.protobuf.Any rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_rules();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_rules();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      rules() const;

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // @@protoc_insertion_point(class_scope:apipb.VPNFlowSpecNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > rules_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class OpaqueNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.OpaqueNLRI) */ {
 public:
  inline OpaqueNLRI() : OpaqueNLRI(nullptr) {}
  virtual ~OpaqueNLRI();

  OpaqueNLRI(const OpaqueNLRI& from);
  OpaqueNLRI(OpaqueNLRI&& from) noexcept
    : OpaqueNLRI() {
    *this = ::std::move(from);
  }

  inline OpaqueNLRI& operator=(const OpaqueNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpaqueNLRI& operator=(OpaqueNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpaqueNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpaqueNLRI* internal_default_instance() {
    return reinterpret_cast<const OpaqueNLRI*>(
               &_OpaqueNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(OpaqueNLRI& a, OpaqueNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(OpaqueNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpaqueNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpaqueNLRI* New() const final {
    return CreateMaybeMessage<OpaqueNLRI>(nullptr);
  }

  OpaqueNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpaqueNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpaqueNLRI& from);
  void MergeFrom(const OpaqueNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpaqueNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.OpaqueNLRI";
  }
  protected:
  explicit OpaqueNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:apipb.OpaqueNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsNodeDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsNodeDescriptor) */ {
 public:
  inline LsNodeDescriptor() : LsNodeDescriptor(nullptr) {}
  virtual ~LsNodeDescriptor();

  LsNodeDescriptor(const LsNodeDescriptor& from);
  LsNodeDescriptor(LsNodeDescriptor&& from) noexcept
    : LsNodeDescriptor() {
    *this = ::std::move(from);
  }

  inline LsNodeDescriptor& operator=(const LsNodeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsNodeDescriptor& operator=(LsNodeDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsNodeDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsNodeDescriptor* internal_default_instance() {
    return reinterpret_cast<const LsNodeDescriptor*>(
               &_LsNodeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LsNodeDescriptor& a, LsNodeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LsNodeDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsNodeDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsNodeDescriptor* New() const final {
    return CreateMaybeMessage<LsNodeDescriptor>(nullptr);
  }

  LsNodeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsNodeDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsNodeDescriptor& from);
  void MergeFrom(const LsNodeDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsNodeDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsNodeDescriptor";
  }
  protected:
  explicit LsNodeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgpRouterIdFieldNumber = 5,
    kBgpRouterIdFieldNumber = 6,
    kAsnFieldNumber = 1,
    kBgpLsIdFieldNumber = 2,
    kOspfAreaIdFieldNumber = 3,
    kPseudonodeFieldNumber = 4,
    kBgpConfederationMemberFieldNumber = 7,
  };
  // string igp_router_id = 5;
  void clear_igp_router_id();
  const std::string& igp_router_id() const;
  void set_igp_router_id(const std::string& value);
  void set_igp_router_id(std::string&& value);
  void set_igp_router_id(const char* value);
  void set_igp_router_id(const char* value, size_t size);
  std::string* mutable_igp_router_id();
  std::string* release_igp_router_id();
  void set_allocated_igp_router_id(std::string* igp_router_id);
  private:
  const std::string& _internal_igp_router_id() const;
  void _internal_set_igp_router_id(const std::string& value);
  std::string* _internal_mutable_igp_router_id();
  public:

  // string bgp_router_id = 6;
  void clear_bgp_router_id();
  const std::string& bgp_router_id() const;
  void set_bgp_router_id(const std::string& value);
  void set_bgp_router_id(std::string&& value);
  void set_bgp_router_id(const char* value);
  void set_bgp_router_id(const char* value, size_t size);
  std::string* mutable_bgp_router_id();
  std::string* release_bgp_router_id();
  void set_allocated_bgp_router_id(std::string* bgp_router_id);
  private:
  const std::string& _internal_bgp_router_id() const;
  void _internal_set_bgp_router_id(const std::string& value);
  std::string* _internal_mutable_bgp_router_id();
  public:

  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bgp_ls_id = 2;
  void clear_bgp_ls_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 bgp_ls_id() const;
  void set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bgp_ls_id() const;
  void _internal_set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ospf_area_id = 3;
  void clear_ospf_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ospf_area_id() const;
  void set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ospf_area_id() const;
  void _internal_set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool pseudonode = 4;
  void clear_pseudonode();
  bool pseudonode() const;
  void set_pseudonode(bool value);
  private:
  bool _internal_pseudonode() const;
  void _internal_set_pseudonode(bool value);
  public:

  // uint32 bgp_confederation_member = 7;
  void clear_bgp_confederation_member();
  ::PROTOBUF_NAMESPACE_ID::uint32 bgp_confederation_member() const;
  void set_bgp_confederation_member(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bgp_confederation_member() const;
  void _internal_set_bgp_confederation_member(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsNodeDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr igp_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_router_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bgp_ls_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ospf_area_id_;
  bool pseudonode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bgp_confederation_member_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsLinkDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsLinkDescriptor) */ {
 public:
  inline LsLinkDescriptor() : LsLinkDescriptor(nullptr) {}
  virtual ~LsLinkDescriptor();

  LsLinkDescriptor(const LsLinkDescriptor& from);
  LsLinkDescriptor(LsLinkDescriptor&& from) noexcept
    : LsLinkDescriptor() {
    *this = ::std::move(from);
  }

  inline LsLinkDescriptor& operator=(const LsLinkDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsLinkDescriptor& operator=(LsLinkDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsLinkDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsLinkDescriptor* internal_default_instance() {
    return reinterpret_cast<const LsLinkDescriptor*>(
               &_LsLinkDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LsLinkDescriptor& a, LsLinkDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LsLinkDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsLinkDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsLinkDescriptor* New() const final {
    return CreateMaybeMessage<LsLinkDescriptor>(nullptr);
  }

  LsLinkDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsLinkDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsLinkDescriptor& from);
  void MergeFrom(const LsLinkDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsLinkDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsLinkDescriptor";
  }
  protected:
  explicit LsLinkDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceAddrIpv4FieldNumber = 3,
    kNeighborAddrIpv4FieldNumber = 4,
    kInterfaceAddrIpv6FieldNumber = 5,
    kNeighborAddrIpv6FieldNumber = 6,
    kLinkLocalIdFieldNumber = 1,
    kLinkRemoteIdFieldNumber = 2,
  };
  // string interface_addr_ipv4 = 3;
  void clear_interface_addr_ipv4();
  const std::string& interface_addr_ipv4() const;
  void set_interface_addr_ipv4(const std::string& value);
  void set_interface_addr_ipv4(std::string&& value);
  void set_interface_addr_ipv4(const char* value);
  void set_interface_addr_ipv4(const char* value, size_t size);
  std::string* mutable_interface_addr_ipv4();
  std::string* release_interface_addr_ipv4();
  void set_allocated_interface_addr_ipv4(std::string* interface_addr_ipv4);
  private:
  const std::string& _internal_interface_addr_ipv4() const;
  void _internal_set_interface_addr_ipv4(const std::string& value);
  std::string* _internal_mutable_interface_addr_ipv4();
  public:

  // string neighbor_addr_ipv4 = 4;
  void clear_neighbor_addr_ipv4();
  const std::string& neighbor_addr_ipv4() const;
  void set_neighbor_addr_ipv4(const std::string& value);
  void set_neighbor_addr_ipv4(std::string&& value);
  void set_neighbor_addr_ipv4(const char* value);
  void set_neighbor_addr_ipv4(const char* value, size_t size);
  std::string* mutable_neighbor_addr_ipv4();
  std::string* release_neighbor_addr_ipv4();
  void set_allocated_neighbor_addr_ipv4(std::string* neighbor_addr_ipv4);
  private:
  const std::string& _internal_neighbor_addr_ipv4() const;
  void _internal_set_neighbor_addr_ipv4(const std::string& value);
  std::string* _internal_mutable_neighbor_addr_ipv4();
  public:

  // string interface_addr_ipv6 = 5;
  void clear_interface_addr_ipv6();
  const std::string& interface_addr_ipv6() const;
  void set_interface_addr_ipv6(const std::string& value);
  void set_interface_addr_ipv6(std::string&& value);
  void set_interface_addr_ipv6(const char* value);
  void set_interface_addr_ipv6(const char* value, size_t size);
  std::string* mutable_interface_addr_ipv6();
  std::string* release_interface_addr_ipv6();
  void set_allocated_interface_addr_ipv6(std::string* interface_addr_ipv6);
  private:
  const std::string& _internal_interface_addr_ipv6() const;
  void _internal_set_interface_addr_ipv6(const std::string& value);
  std::string* _internal_mutable_interface_addr_ipv6();
  public:

  // string neighbor_addr_ipv6 = 6;
  void clear_neighbor_addr_ipv6();
  const std::string& neighbor_addr_ipv6() const;
  void set_neighbor_addr_ipv6(const std::string& value);
  void set_neighbor_addr_ipv6(std::string&& value);
  void set_neighbor_addr_ipv6(const char* value);
  void set_neighbor_addr_ipv6(const char* value, size_t size);
  std::string* mutable_neighbor_addr_ipv6();
  std::string* release_neighbor_addr_ipv6();
  void set_allocated_neighbor_addr_ipv6(std::string* neighbor_addr_ipv6);
  private:
  const std::string& _internal_neighbor_addr_ipv6() const;
  void _internal_set_neighbor_addr_ipv6(const std::string& value);
  std::string* _internal_mutable_neighbor_addr_ipv6();
  public:

  // uint32 link_local_id = 1;
  void clear_link_local_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_local_id() const;
  void set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_local_id() const;
  void _internal_set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 link_remote_id = 2;
  void clear_link_remote_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_remote_id() const;
  void set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_remote_id() const;
  void _internal_set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsLinkDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_addr_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_addr_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_addr_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_addr_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_local_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_remote_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsPrefixDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsPrefixDescriptor) */ {
 public:
  inline LsPrefixDescriptor() : LsPrefixDescriptor(nullptr) {}
  virtual ~LsPrefixDescriptor();

  LsPrefixDescriptor(const LsPrefixDescriptor& from);
  LsPrefixDescriptor(LsPrefixDescriptor&& from) noexcept
    : LsPrefixDescriptor() {
    *this = ::std::move(from);
  }

  inline LsPrefixDescriptor& operator=(const LsPrefixDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsPrefixDescriptor& operator=(LsPrefixDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsPrefixDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsPrefixDescriptor* internal_default_instance() {
    return reinterpret_cast<const LsPrefixDescriptor*>(
               &_LsPrefixDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LsPrefixDescriptor& a, LsPrefixDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LsPrefixDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsPrefixDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsPrefixDescriptor* New() const final {
    return CreateMaybeMessage<LsPrefixDescriptor>(nullptr);
  }

  LsPrefixDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsPrefixDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsPrefixDescriptor& from);
  void MergeFrom(const LsPrefixDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsPrefixDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsPrefixDescriptor";
  }
  protected:
  explicit LsPrefixDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpReachabilityFieldNumber = 1,
    kOspfRouteTypeFieldNumber = 2,
  };
  // repeated string ip_reachability = 1;
  int ip_reachability_size() const;
  private:
  int _internal_ip_reachability_size() const;
  public:
  void clear_ip_reachability();
  const std::string& ip_reachability(int index) const;
  std::string* mutable_ip_reachability(int index);
  void set_ip_reachability(int index, const std::string& value);
  void set_ip_reachability(int index, std::string&& value);
  void set_ip_reachability(int index, const char* value);
  void set_ip_reachability(int index, const char* value, size_t size);
  std::string* add_ip_reachability();
  void add_ip_reachability(const std::string& value);
  void add_ip_reachability(std::string&& value);
  void add_ip_reachability(const char* value);
  void add_ip_reachability(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip_reachability() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip_reachability();
  private:
  const std::string& _internal_ip_reachability(int index) const;
  std::string* _internal_add_ip_reachability();
  public:

  // .apipb.LsOspfRouteType ospf_route_type = 2;
  void clear_ospf_route_type();
  ::apipb::LsOspfRouteType ospf_route_type() const;
  void set_ospf_route_type(::apipb::LsOspfRouteType value);
  private:
  ::apipb::LsOspfRouteType _internal_ospf_route_type() const;
  void _internal_set_ospf_route_type(::apipb::LsOspfRouteType value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsPrefixDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_reachability_;
  int ospf_route_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsNodeNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsNodeNLRI) */ {
 public:
  inline LsNodeNLRI() : LsNodeNLRI(nullptr) {}
  virtual ~LsNodeNLRI();

  LsNodeNLRI(const LsNodeNLRI& from);
  LsNodeNLRI(LsNodeNLRI&& from) noexcept
    : LsNodeNLRI() {
    *this = ::std::move(from);
  }

  inline LsNodeNLRI& operator=(const LsNodeNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsNodeNLRI& operator=(LsNodeNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsNodeNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsNodeNLRI* internal_default_instance() {
    return reinterpret_cast<const LsNodeNLRI*>(
               &_LsNodeNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LsNodeNLRI& a, LsNodeNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsNodeNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsNodeNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsNodeNLRI* New() const final {
    return CreateMaybeMessage<LsNodeNLRI>(nullptr);
  }

  LsNodeNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsNodeNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsNodeNLRI& from);
  void MergeFrom(const LsNodeNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsNodeNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsNodeNLRI";
  }
  protected:
  explicit LsNodeNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
  };
  // .apipb.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::apipb::LsNodeDescriptor& local_node() const;
  ::apipb::LsNodeDescriptor* release_local_node();
  ::apipb::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::apipb::LsNodeDescriptor* local_node);
  private:
  const ::apipb::LsNodeDescriptor& _internal_local_node() const;
  ::apipb::LsNodeDescriptor* _internal_mutable_local_node();
  public:
  void unsafe_arena_set_allocated_local_node(
      ::apipb::LsNodeDescriptor* local_node);
  ::apipb::LsNodeDescriptor* unsafe_arena_release_local_node();

  // @@protoc_insertion_point(class_scope:apipb.LsNodeNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsNodeDescriptor* local_node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsLinkNLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsLinkNLRI) */ {
 public:
  inline LsLinkNLRI() : LsLinkNLRI(nullptr) {}
  virtual ~LsLinkNLRI();

  LsLinkNLRI(const LsLinkNLRI& from);
  LsLinkNLRI(LsLinkNLRI&& from) noexcept
    : LsLinkNLRI() {
    *this = ::std::move(from);
  }

  inline LsLinkNLRI& operator=(const LsLinkNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsLinkNLRI& operator=(LsLinkNLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsLinkNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsLinkNLRI* internal_default_instance() {
    return reinterpret_cast<const LsLinkNLRI*>(
               &_LsLinkNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LsLinkNLRI& a, LsLinkNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsLinkNLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsLinkNLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsLinkNLRI* New() const final {
    return CreateMaybeMessage<LsLinkNLRI>(nullptr);
  }

  LsLinkNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsLinkNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsLinkNLRI& from);
  void MergeFrom(const LsLinkNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsLinkNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsLinkNLRI";
  }
  protected:
  explicit LsLinkNLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
    kRemoteNodeFieldNumber = 2,
    kLinkDescriptorFieldNumber = 3,
  };
  // .apipb.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::apipb::LsNodeDescriptor& local_node() const;
  ::apipb::LsNodeDescriptor* release_local_node();
  ::apipb::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::apipb::LsNodeDescriptor* local_node);
  private:
  const ::apipb::LsNodeDescriptor& _internal_local_node() const;
  ::apipb::LsNodeDescriptor* _internal_mutable_local_node();
  public:
  void unsafe_arena_set_allocated_local_node(
      ::apipb::LsNodeDescriptor* local_node);
  ::apipb::LsNodeDescriptor* unsafe_arena_release_local_node();

  // .apipb.LsNodeDescriptor remote_node = 2;
  bool has_remote_node() const;
  private:
  bool _internal_has_remote_node() const;
  public:
  void clear_remote_node();
  const ::apipb::LsNodeDescriptor& remote_node() const;
  ::apipb::LsNodeDescriptor* release_remote_node();
  ::apipb::LsNodeDescriptor* mutable_remote_node();
  void set_allocated_remote_node(::apipb::LsNodeDescriptor* remote_node);
  private:
  const ::apipb::LsNodeDescriptor& _internal_remote_node() const;
  ::apipb::LsNodeDescriptor* _internal_mutable_remote_node();
  public:
  void unsafe_arena_set_allocated_remote_node(
      ::apipb::LsNodeDescriptor* remote_node);
  ::apipb::LsNodeDescriptor* unsafe_arena_release_remote_node();

  // .apipb.LsLinkDescriptor link_descriptor = 3;
  bool has_link_descriptor() const;
  private:
  bool _internal_has_link_descriptor() const;
  public:
  void clear_link_descriptor();
  const ::apipb::LsLinkDescriptor& link_descriptor() const;
  ::apipb::LsLinkDescriptor* release_link_descriptor();
  ::apipb::LsLinkDescriptor* mutable_link_descriptor();
  void set_allocated_link_descriptor(::apipb::LsLinkDescriptor* link_descriptor);
  private:
  const ::apipb::LsLinkDescriptor& _internal_link_descriptor() const;
  ::apipb::LsLinkDescriptor* _internal_mutable_link_descriptor();
  public:
  void unsafe_arena_set_allocated_link_descriptor(
      ::apipb::LsLinkDescriptor* link_descriptor);
  ::apipb::LsLinkDescriptor* unsafe_arena_release_link_descriptor();

  // @@protoc_insertion_point(class_scope:apipb.LsLinkNLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsNodeDescriptor* local_node_;
  ::apipb::LsNodeDescriptor* remote_node_;
  ::apipb::LsLinkDescriptor* link_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsPrefixV4NLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsPrefixV4NLRI) */ {
 public:
  inline LsPrefixV4NLRI() : LsPrefixV4NLRI(nullptr) {}
  virtual ~LsPrefixV4NLRI();

  LsPrefixV4NLRI(const LsPrefixV4NLRI& from);
  LsPrefixV4NLRI(LsPrefixV4NLRI&& from) noexcept
    : LsPrefixV4NLRI() {
    *this = ::std::move(from);
  }

  inline LsPrefixV4NLRI& operator=(const LsPrefixV4NLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsPrefixV4NLRI& operator=(LsPrefixV4NLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsPrefixV4NLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsPrefixV4NLRI* internal_default_instance() {
    return reinterpret_cast<const LsPrefixV4NLRI*>(
               &_LsPrefixV4NLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LsPrefixV4NLRI& a, LsPrefixV4NLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsPrefixV4NLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsPrefixV4NLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsPrefixV4NLRI* New() const final {
    return CreateMaybeMessage<LsPrefixV4NLRI>(nullptr);
  }

  LsPrefixV4NLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsPrefixV4NLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsPrefixV4NLRI& from);
  void MergeFrom(const LsPrefixV4NLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsPrefixV4NLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsPrefixV4NLRI";
  }
  protected:
  explicit LsPrefixV4NLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
    kPrefixDescriptorFieldNumber = 2,
  };
  // .apipb.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::apipb::LsNodeDescriptor& local_node() const;
  ::apipb::LsNodeDescriptor* release_local_node();
  ::apipb::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::apipb::LsNodeDescriptor* local_node);
  private:
  const ::apipb::LsNodeDescriptor& _internal_local_node() const;
  ::apipb::LsNodeDescriptor* _internal_mutable_local_node();
  public:
  void unsafe_arena_set_allocated_local_node(
      ::apipb::LsNodeDescriptor* local_node);
  ::apipb::LsNodeDescriptor* unsafe_arena_release_local_node();

  // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
  bool has_prefix_descriptor() const;
  private:
  bool _internal_has_prefix_descriptor() const;
  public:
  void clear_prefix_descriptor();
  const ::apipb::LsPrefixDescriptor& prefix_descriptor() const;
  ::apipb::LsPrefixDescriptor* release_prefix_descriptor();
  ::apipb::LsPrefixDescriptor* mutable_prefix_descriptor();
  void set_allocated_prefix_descriptor(::apipb::LsPrefixDescriptor* prefix_descriptor);
  private:
  const ::apipb::LsPrefixDescriptor& _internal_prefix_descriptor() const;
  ::apipb::LsPrefixDescriptor* _internal_mutable_prefix_descriptor();
  public:
  void unsafe_arena_set_allocated_prefix_descriptor(
      ::apipb::LsPrefixDescriptor* prefix_descriptor);
  ::apipb::LsPrefixDescriptor* unsafe_arena_release_prefix_descriptor();

  // @@protoc_insertion_point(class_scope:apipb.LsPrefixV4NLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsNodeDescriptor* local_node_;
  ::apipb::LsPrefixDescriptor* prefix_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsPrefixV6NLRI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsPrefixV6NLRI) */ {
 public:
  inline LsPrefixV6NLRI() : LsPrefixV6NLRI(nullptr) {}
  virtual ~LsPrefixV6NLRI();

  LsPrefixV6NLRI(const LsPrefixV6NLRI& from);
  LsPrefixV6NLRI(LsPrefixV6NLRI&& from) noexcept
    : LsPrefixV6NLRI() {
    *this = ::std::move(from);
  }

  inline LsPrefixV6NLRI& operator=(const LsPrefixV6NLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsPrefixV6NLRI& operator=(LsPrefixV6NLRI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsPrefixV6NLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsPrefixV6NLRI* internal_default_instance() {
    return reinterpret_cast<const LsPrefixV6NLRI*>(
               &_LsPrefixV6NLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LsPrefixV6NLRI& a, LsPrefixV6NLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsPrefixV6NLRI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsPrefixV6NLRI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsPrefixV6NLRI* New() const final {
    return CreateMaybeMessage<LsPrefixV6NLRI>(nullptr);
  }

  LsPrefixV6NLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsPrefixV6NLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsPrefixV6NLRI& from);
  void MergeFrom(const LsPrefixV6NLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsPrefixV6NLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsPrefixV6NLRI";
  }
  protected:
  explicit LsPrefixV6NLRI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
    kPrefixDescriptorFieldNumber = 2,
  };
  // .apipb.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::apipb::LsNodeDescriptor& local_node() const;
  ::apipb::LsNodeDescriptor* release_local_node();
  ::apipb::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::apipb::LsNodeDescriptor* local_node);
  private:
  const ::apipb::LsNodeDescriptor& _internal_local_node() const;
  ::apipb::LsNodeDescriptor* _internal_mutable_local_node();
  public:
  void unsafe_arena_set_allocated_local_node(
      ::apipb::LsNodeDescriptor* local_node);
  ::apipb::LsNodeDescriptor* unsafe_arena_release_local_node();

  // .apipb.LsPrefixDescriptor prefix_descriptor = 2;
  bool has_prefix_descriptor() const;
  private:
  bool _internal_has_prefix_descriptor() const;
  public:
  void clear_prefix_descriptor();
  const ::apipb::LsPrefixDescriptor& prefix_descriptor() const;
  ::apipb::LsPrefixDescriptor* release_prefix_descriptor();
  ::apipb::LsPrefixDescriptor* mutable_prefix_descriptor();
  void set_allocated_prefix_descriptor(::apipb::LsPrefixDescriptor* prefix_descriptor);
  private:
  const ::apipb::LsPrefixDescriptor& _internal_prefix_descriptor() const;
  ::apipb::LsPrefixDescriptor* _internal_mutable_prefix_descriptor();
  public:
  void unsafe_arena_set_allocated_prefix_descriptor(
      ::apipb::LsPrefixDescriptor* prefix_descriptor);
  ::apipb::LsPrefixDescriptor* unsafe_arena_release_prefix_descriptor();

  // @@protoc_insertion_point(class_scope:apipb.LsPrefixV6NLRI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsNodeDescriptor* local_node_;
  ::apipb::LsPrefixDescriptor* prefix_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAddrPrefix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsAddrPrefix) */ {
 public:
  inline LsAddrPrefix() : LsAddrPrefix(nullptr) {}
  virtual ~LsAddrPrefix();

  LsAddrPrefix(const LsAddrPrefix& from);
  LsAddrPrefix(LsAddrPrefix&& from) noexcept
    : LsAddrPrefix() {
    *this = ::std::move(from);
  }

  inline LsAddrPrefix& operator=(const LsAddrPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAddrPrefix& operator=(LsAddrPrefix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAddrPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAddrPrefix* internal_default_instance() {
    return reinterpret_cast<const LsAddrPrefix*>(
               &_LsAddrPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(LsAddrPrefix& a, LsAddrPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAddrPrefix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsAddrPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAddrPrefix* New() const final {
    return CreateMaybeMessage<LsAddrPrefix>(nullptr);
  }

  LsAddrPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAddrPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAddrPrefix& from);
  void MergeFrom(const LsAddrPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAddrPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsAddrPrefix";
  }
  protected:
  explicit LsAddrPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNlriFieldNumber = 2,
    kTypeFieldNumber = 1,
    kLengthFieldNumber = 3,
    kIdentifierFieldNumber = 5,
    kProtocolIdFieldNumber = 4,
  };
  // .google.protobuf.Any nlri = 2;
  bool has_nlri() const;
  private:
  bool _internal_has_nlri() const;
  public:
  void clear_nlri();
  const PROTOBUF_NAMESPACE_ID::Any& nlri() const;
  PROTOBUF_NAMESPACE_ID::Any* release_nlri();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlri();
  void set_allocated_nlri(PROTOBUF_NAMESPACE_ID::Any* nlri);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlri() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_nlri();
  public:
  void unsafe_arena_set_allocated_nlri(
      PROTOBUF_NAMESPACE_ID::Any* nlri);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_nlri();

  // .apipb.LsNLRIType type = 1;
  void clear_type();
  ::apipb::LsNLRIType type() const;
  void set_type(::apipb::LsNLRIType value);
  private:
  ::apipb::LsNLRIType _internal_type() const;
  void _internal_set_type(::apipb::LsNLRIType value);
  public:

  // uint32 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 identifier = 5;
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint64 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_identifier() const;
  void _internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .apipb.LsProtocolID protocol_id = 4;
  void clear_protocol_id();
  ::apipb::LsProtocolID protocol_id() const;
  void set_protocol_id(::apipb::LsProtocolID value);
  private:
  ::apipb::LsProtocolID _internal_protocol_id() const;
  void _internal_set_protocol_id(::apipb::LsProtocolID value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsAddrPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* nlri_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 identifier_;
  int protocol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MUPInterworkSegmentDiscoveryRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MUPInterworkSegmentDiscoveryRoute) */ {
 public:
  inline MUPInterworkSegmentDiscoveryRoute() : MUPInterworkSegmentDiscoveryRoute(nullptr) {}
  virtual ~MUPInterworkSegmentDiscoveryRoute();

  MUPInterworkSegmentDiscoveryRoute(const MUPInterworkSegmentDiscoveryRoute& from);
  MUPInterworkSegmentDiscoveryRoute(MUPInterworkSegmentDiscoveryRoute&& from) noexcept
    : MUPInterworkSegmentDiscoveryRoute() {
    *this = ::std::move(from);
  }

  inline MUPInterworkSegmentDiscoveryRoute& operator=(const MUPInterworkSegmentDiscoveryRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MUPInterworkSegmentDiscoveryRoute& operator=(MUPInterworkSegmentDiscoveryRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MUPInterworkSegmentDiscoveryRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MUPInterworkSegmentDiscoveryRoute* internal_default_instance() {
    return reinterpret_cast<const MUPInterworkSegmentDiscoveryRoute*>(
               &_MUPInterworkSegmentDiscoveryRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(MUPInterworkSegmentDiscoveryRoute& a, MUPInterworkSegmentDiscoveryRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(MUPInterworkSegmentDiscoveryRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MUPInterworkSegmentDiscoveryRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MUPInterworkSegmentDiscoveryRoute* New() const final {
    return CreateMaybeMessage<MUPInterworkSegmentDiscoveryRoute>(nullptr);
  }

  MUPInterworkSegmentDiscoveryRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MUPInterworkSegmentDiscoveryRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MUPInterworkSegmentDiscoveryRoute& from);
  void MergeFrom(const MUPInterworkSegmentDiscoveryRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MUPInterworkSegmentDiscoveryRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MUPInterworkSegmentDiscoveryRoute";
  }
  protected:
  explicit MUPInterworkSegmentDiscoveryRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kRdFieldNumber = 1,
  };
  // string prefix = 2;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // @@protoc_insertion_point(class_scope:apipb.MUPInterworkSegmentDiscoveryRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MUPDirectSegmentDiscoveryRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MUPDirectSegmentDiscoveryRoute) */ {
 public:
  inline MUPDirectSegmentDiscoveryRoute() : MUPDirectSegmentDiscoveryRoute(nullptr) {}
  virtual ~MUPDirectSegmentDiscoveryRoute();

  MUPDirectSegmentDiscoveryRoute(const MUPDirectSegmentDiscoveryRoute& from);
  MUPDirectSegmentDiscoveryRoute(MUPDirectSegmentDiscoveryRoute&& from) noexcept
    : MUPDirectSegmentDiscoveryRoute() {
    *this = ::std::move(from);
  }

  inline MUPDirectSegmentDiscoveryRoute& operator=(const MUPDirectSegmentDiscoveryRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MUPDirectSegmentDiscoveryRoute& operator=(MUPDirectSegmentDiscoveryRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MUPDirectSegmentDiscoveryRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MUPDirectSegmentDiscoveryRoute* internal_default_instance() {
    return reinterpret_cast<const MUPDirectSegmentDiscoveryRoute*>(
               &_MUPDirectSegmentDiscoveryRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MUPDirectSegmentDiscoveryRoute& a, MUPDirectSegmentDiscoveryRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(MUPDirectSegmentDiscoveryRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MUPDirectSegmentDiscoveryRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MUPDirectSegmentDiscoveryRoute* New() const final {
    return CreateMaybeMessage<MUPDirectSegmentDiscoveryRoute>(nullptr);
  }

  MUPDirectSegmentDiscoveryRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MUPDirectSegmentDiscoveryRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MUPDirectSegmentDiscoveryRoute& from);
  void MergeFrom(const MUPDirectSegmentDiscoveryRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MUPDirectSegmentDiscoveryRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MUPDirectSegmentDiscoveryRoute";
  }
  protected:
  explicit MUPDirectSegmentDiscoveryRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kRdFieldNumber = 1,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // @@protoc_insertion_point(class_scope:apipb.MUPDirectSegmentDiscoveryRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MUPType1SessionTransformedRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MUPType1SessionTransformedRoute) */ {
 public:
  inline MUPType1SessionTransformedRoute() : MUPType1SessionTransformedRoute(nullptr) {}
  virtual ~MUPType1SessionTransformedRoute();

  MUPType1SessionTransformedRoute(const MUPType1SessionTransformedRoute& from);
  MUPType1SessionTransformedRoute(MUPType1SessionTransformedRoute&& from) noexcept
    : MUPType1SessionTransformedRoute() {
    *this = ::std::move(from);
  }

  inline MUPType1SessionTransformedRoute& operator=(const MUPType1SessionTransformedRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MUPType1SessionTransformedRoute& operator=(MUPType1SessionTransformedRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MUPType1SessionTransformedRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MUPType1SessionTransformedRoute* internal_default_instance() {
    return reinterpret_cast<const MUPType1SessionTransformedRoute*>(
               &_MUPType1SessionTransformedRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MUPType1SessionTransformedRoute& a, MUPType1SessionTransformedRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(MUPType1SessionTransformedRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MUPType1SessionTransformedRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MUPType1SessionTransformedRoute* New() const final {
    return CreateMaybeMessage<MUPType1SessionTransformedRoute>(nullptr);
  }

  MUPType1SessionTransformedRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MUPType1SessionTransformedRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MUPType1SessionTransformedRoute& from);
  void MergeFrom(const MUPType1SessionTransformedRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MUPType1SessionTransformedRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MUPType1SessionTransformedRoute";
  }
  protected:
  explicit MUPType1SessionTransformedRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 3,
    kEndpointAddressFieldNumber = 7,
    kRdFieldNumber = 1,
    kPrefixLengthFieldNumber = 2,
    kTeidFieldNumber = 4,
    kQfiFieldNumber = 5,
    kEndpointAddressLengthFieldNumber = 6,
  };
  // string prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string endpoint_address = 7;
  void clear_endpoint_address();
  const std::string& endpoint_address() const;
  void set_endpoint_address(const std::string& value);
  void set_endpoint_address(std::string&& value);
  void set_endpoint_address(const char* value);
  void set_endpoint_address(const char* value, size_t size);
  std::string* mutable_endpoint_address();
  std::string* release_endpoint_address();
  void set_allocated_endpoint_address(std::string* endpoint_address);
  private:
  const std::string& _internal_endpoint_address() const;
  void _internal_set_endpoint_address(const std::string& value);
  std::string* _internal_mutable_endpoint_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // uint32 prefix_length = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_prefix_length();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 prefix_length() const;
  PROTOBUF_DEPRECATED void set_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_length() const;
  void _internal_set_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 teid = 4;
  void clear_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teid() const;
  void set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teid() const;
  void _internal_set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 qfi = 5;
  void clear_qfi();
  ::PROTOBUF_NAMESPACE_ID::uint32 qfi() const;
  void set_qfi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qfi() const;
  void _internal_set_qfi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 endpoint_address_length = 6;
  void clear_endpoint_address_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 endpoint_address_length() const;
  void set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endpoint_address_length() const;
  void _internal_set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.MUPType1SessionTransformedRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qfi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endpoint_address_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MUPType2SessionTransformedRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MUPType2SessionTransformedRoute) */ {
 public:
  inline MUPType2SessionTransformedRoute() : MUPType2SessionTransformedRoute(nullptr) {}
  virtual ~MUPType2SessionTransformedRoute();

  MUPType2SessionTransformedRoute(const MUPType2SessionTransformedRoute& from);
  MUPType2SessionTransformedRoute(MUPType2SessionTransformedRoute&& from) noexcept
    : MUPType2SessionTransformedRoute() {
    *this = ::std::move(from);
  }

  inline MUPType2SessionTransformedRoute& operator=(const MUPType2SessionTransformedRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MUPType2SessionTransformedRoute& operator=(MUPType2SessionTransformedRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MUPType2SessionTransformedRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MUPType2SessionTransformedRoute* internal_default_instance() {
    return reinterpret_cast<const MUPType2SessionTransformedRoute*>(
               &_MUPType2SessionTransformedRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MUPType2SessionTransformedRoute& a, MUPType2SessionTransformedRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(MUPType2SessionTransformedRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MUPType2SessionTransformedRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MUPType2SessionTransformedRoute* New() const final {
    return CreateMaybeMessage<MUPType2SessionTransformedRoute>(nullptr);
  }

  MUPType2SessionTransformedRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MUPType2SessionTransformedRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MUPType2SessionTransformedRoute& from);
  void MergeFrom(const MUPType2SessionTransformedRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MUPType2SessionTransformedRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MUPType2SessionTransformedRoute";
  }
  protected:
  explicit MUPType2SessionTransformedRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointAddressFieldNumber = 3,
    kRdFieldNumber = 1,
    kEndpointAddressLengthFieldNumber = 2,
    kTeidFieldNumber = 4,
  };
  // string endpoint_address = 3;
  void clear_endpoint_address();
  const std::string& endpoint_address() const;
  void set_endpoint_address(const std::string& value);
  void set_endpoint_address(std::string&& value);
  void set_endpoint_address(const char* value);
  void set_endpoint_address(const char* value, size_t size);
  std::string* mutable_endpoint_address();
  std::string* release_endpoint_address();
  void set_allocated_endpoint_address(std::string* endpoint_address);
  private:
  const std::string& _internal_endpoint_address() const;
  void _internal_set_endpoint_address(const std::string& value);
  std::string* _internal_mutable_endpoint_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:
  void unsafe_arena_set_allocated_rd(
      PROTOBUF_NAMESPACE_ID::Any* rd);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_rd();

  // uint32 endpoint_address_length = 2;
  void clear_endpoint_address_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 endpoint_address_length() const;
  void set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endpoint_address_length() const;
  void _internal_set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 teid = 4;
  void clear_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teid() const;
  void set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teid() const;
  void _internal_set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.MUPType2SessionTransformedRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endpoint_address_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MpReachNLRIAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MpReachNLRIAttribute) */ {
 public:
  inline MpReachNLRIAttribute() : MpReachNLRIAttribute(nullptr) {}
  virtual ~MpReachNLRIAttribute();

  MpReachNLRIAttribute(const MpReachNLRIAttribute& from);
  MpReachNLRIAttribute(MpReachNLRIAttribute&& from) noexcept
    : MpReachNLRIAttribute() {
    *this = ::std::move(from);
  }

  inline MpReachNLRIAttribute& operator=(const MpReachNLRIAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpReachNLRIAttribute& operator=(MpReachNLRIAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpReachNLRIAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpReachNLRIAttribute* internal_default_instance() {
    return reinterpret_cast<const MpReachNLRIAttribute*>(
               &_MpReachNLRIAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MpReachNLRIAttribute& a, MpReachNLRIAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MpReachNLRIAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MpReachNLRIAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpReachNLRIAttribute* New() const final {
    return CreateMaybeMessage<MpReachNLRIAttribute>(nullptr);
  }

  MpReachNLRIAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpReachNLRIAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpReachNLRIAttribute& from);
  void MergeFrom(const MpReachNLRIAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpReachNLRIAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MpReachNLRIAttribute";
  }
  protected:
  explicit MpReachNLRIAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextHopsFieldNumber = 2,
    kNlrisFieldNumber = 3,
    kFamilyFieldNumber = 1,
  };
  // repeated string next_hops = 2;
  int next_hops_size() const;
  private:
  int _internal_next_hops_size() const;
  public:
  void clear_next_hops();
  const std::string& next_hops(int index) const;
  std::string* mutable_next_hops(int index);
  void set_next_hops(int index, const std::string& value);
  void set_next_hops(int index, std::string&& value);
  void set_next_hops(int index, const char* value);
  void set_next_hops(int index, const char* value, size_t size);
  std::string* add_next_hops();
  void add_next_hops(const std::string& value);
  void add_next_hops(std::string&& value);
  void add_next_hops(const char* value);
  void add_next_hops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& next_hops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_next_hops();
  private:
  const std::string& _internal_next_hops(int index) const;
  std::string* _internal_add_next_hops();
  public:

  // repeated .google.protobuf.Any nlris = 3;
  int nlris_size() const;
  private:
  int _internal_nlris_size() const;
  public:
  void clear_nlris();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_nlris();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_nlris();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_nlris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      nlris() const;

  // .apipb.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::apipb::Family& family() const;
  ::apipb::Family* release_family();
  ::apipb::Family* mutable_family();
  void set_allocated_family(::apipb::Family* family);
  private:
  const ::apipb::Family& _internal_family() const;
  ::apipb::Family* _internal_mutable_family();
  public:
  void unsafe_arena_set_allocated_family(
      ::apipb::Family* family);
  ::apipb::Family* unsafe_arena_release_family();

  // @@protoc_insertion_point(class_scope:apipb.MpReachNLRIAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> next_hops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > nlris_;
  ::apipb::Family* family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MpUnreachNLRIAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MpUnreachNLRIAttribute) */ {
 public:
  inline MpUnreachNLRIAttribute() : MpUnreachNLRIAttribute(nullptr) {}
  virtual ~MpUnreachNLRIAttribute();

  MpUnreachNLRIAttribute(const MpUnreachNLRIAttribute& from);
  MpUnreachNLRIAttribute(MpUnreachNLRIAttribute&& from) noexcept
    : MpUnreachNLRIAttribute() {
    *this = ::std::move(from);
  }

  inline MpUnreachNLRIAttribute& operator=(const MpUnreachNLRIAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpUnreachNLRIAttribute& operator=(MpUnreachNLRIAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpUnreachNLRIAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpUnreachNLRIAttribute* internal_default_instance() {
    return reinterpret_cast<const MpUnreachNLRIAttribute*>(
               &_MpUnreachNLRIAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MpUnreachNLRIAttribute& a, MpUnreachNLRIAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MpUnreachNLRIAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MpUnreachNLRIAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpUnreachNLRIAttribute* New() const final {
    return CreateMaybeMessage<MpUnreachNLRIAttribute>(nullptr);
  }

  MpUnreachNLRIAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpUnreachNLRIAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpUnreachNLRIAttribute& from);
  void MergeFrom(const MpUnreachNLRIAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpUnreachNLRIAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MpUnreachNLRIAttribute";
  }
  protected:
  explicit MpUnreachNLRIAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNlrisFieldNumber = 3,
    kFamilyFieldNumber = 1,
  };
  // repeated .google.protobuf.Any nlris = 3;
  int nlris_size() const;
  private:
  int _internal_nlris_size() const;
  public:
  void clear_nlris();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_nlris();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_nlris();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_nlris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      nlris() const;

  // .apipb.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::apipb::Family& family() const;
  ::apipb::Family* release_family();
  ::apipb::Family* mutable_family();
  void set_allocated_family(::apipb::Family* family);
  private:
  const ::apipb::Family& _internal_family() const;
  ::apipb::Family* _internal_mutable_family();
  public:
  void unsafe_arena_set_allocated_family(
      ::apipb::Family* family);
  ::apipb::Family* unsafe_arena_release_family();

  // @@protoc_insertion_point(class_scope:apipb.MpUnreachNLRIAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > nlris_;
  ::apipb::Family* family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TwoOctetAsSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TwoOctetAsSpecificExtended) */ {
 public:
  inline TwoOctetAsSpecificExtended() : TwoOctetAsSpecificExtended(nullptr) {}
  virtual ~TwoOctetAsSpecificExtended();

  TwoOctetAsSpecificExtended(const TwoOctetAsSpecificExtended& from);
  TwoOctetAsSpecificExtended(TwoOctetAsSpecificExtended&& from) noexcept
    : TwoOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline TwoOctetAsSpecificExtended& operator=(const TwoOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoOctetAsSpecificExtended& operator=(TwoOctetAsSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwoOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwoOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const TwoOctetAsSpecificExtended*>(
               &_TwoOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TwoOctetAsSpecificExtended& a, TwoOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoOctetAsSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwoOctetAsSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwoOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<TwoOctetAsSpecificExtended>(nullptr);
  }

  TwoOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwoOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwoOctetAsSpecificExtended& from);
  void MergeFrom(const TwoOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TwoOctetAsSpecificExtended";
  }
  protected:
  explicit TwoOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kAsnFieldNumber = 3,
    kLocalAdminFieldNumber = 4,
  };
  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 asn = 3;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TwoOctetAsSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IPv4AddressSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.IPv4AddressSpecificExtended) */ {
 public:
  inline IPv4AddressSpecificExtended() : IPv4AddressSpecificExtended(nullptr) {}
  virtual ~IPv4AddressSpecificExtended();

  IPv4AddressSpecificExtended(const IPv4AddressSpecificExtended& from);
  IPv4AddressSpecificExtended(IPv4AddressSpecificExtended&& from) noexcept
    : IPv4AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline IPv4AddressSpecificExtended& operator=(const IPv4AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPv4AddressSpecificExtended& operator=(IPv4AddressSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPv4AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPv4AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const IPv4AddressSpecificExtended*>(
               &_IPv4AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(IPv4AddressSpecificExtended& a, IPv4AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(IPv4AddressSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPv4AddressSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPv4AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<IPv4AddressSpecificExtended>(nullptr);
  }

  IPv4AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPv4AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPv4AddressSpecificExtended& from);
  void MergeFrom(const IPv4AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPv4AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.IPv4AddressSpecificExtended";
  }
  protected:
  explicit IPv4AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kLocalAdminFieldNumber = 4,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.IPv4AddressSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FourOctetAsSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.FourOctetAsSpecificExtended) */ {
 public:
  inline FourOctetAsSpecificExtended() : FourOctetAsSpecificExtended(nullptr) {}
  virtual ~FourOctetAsSpecificExtended();

  FourOctetAsSpecificExtended(const FourOctetAsSpecificExtended& from);
  FourOctetAsSpecificExtended(FourOctetAsSpecificExtended&& from) noexcept
    : FourOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline FourOctetAsSpecificExtended& operator=(const FourOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline FourOctetAsSpecificExtended& operator=(FourOctetAsSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FourOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FourOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const FourOctetAsSpecificExtended*>(
               &_FourOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(FourOctetAsSpecificExtended& a, FourOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(FourOctetAsSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FourOctetAsSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FourOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<FourOctetAsSpecificExtended>(nullptr);
  }

  FourOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FourOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FourOctetAsSpecificExtended& from);
  void MergeFrom(const FourOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FourOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.FourOctetAsSpecificExtended";
  }
  protected:
  explicit FourOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kAsnFieldNumber = 3,
    kLocalAdminFieldNumber = 4,
  };
  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 asn = 3;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.FourOctetAsSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LinkBandwidthExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LinkBandwidthExtended) */ {
 public:
  inline LinkBandwidthExtended() : LinkBandwidthExtended(nullptr) {}
  virtual ~LinkBandwidthExtended();

  LinkBandwidthExtended(const LinkBandwidthExtended& from);
  LinkBandwidthExtended(LinkBandwidthExtended&& from) noexcept
    : LinkBandwidthExtended() {
    *this = ::std::move(from);
  }

  inline LinkBandwidthExtended& operator=(const LinkBandwidthExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkBandwidthExtended& operator=(LinkBandwidthExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkBandwidthExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkBandwidthExtended* internal_default_instance() {
    return reinterpret_cast<const LinkBandwidthExtended*>(
               &_LinkBandwidthExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(LinkBandwidthExtended& a, LinkBandwidthExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkBandwidthExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkBandwidthExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkBandwidthExtended* New() const final {
    return CreateMaybeMessage<LinkBandwidthExtended>(nullptr);
  }

  LinkBandwidthExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkBandwidthExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkBandwidthExtended& from);
  void MergeFrom(const LinkBandwidthExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkBandwidthExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LinkBandwidthExtended";
  }
  protected:
  explicit LinkBandwidthExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 1,
    kBandwidthFieldNumber = 2,
  };
  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float bandwidth = 2;
  void clear_bandwidth();
  float bandwidth() const;
  void set_bandwidth(float value);
  private:
  float _internal_bandwidth() const;
  void _internal_set_bandwidth(float value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LinkBandwidthExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  float bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ValidationExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.ValidationExtended) */ {
 public:
  inline ValidationExtended() : ValidationExtended(nullptr) {}
  virtual ~ValidationExtended();

  ValidationExtended(const ValidationExtended& from);
  ValidationExtended(ValidationExtended&& from) noexcept
    : ValidationExtended() {
    *this = ::std::move(from);
  }

  inline ValidationExtended& operator=(const ValidationExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationExtended& operator=(ValidationExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidationExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidationExtended* internal_default_instance() {
    return reinterpret_cast<const ValidationExtended*>(
               &_ValidationExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ValidationExtended& a, ValidationExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidationExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidationExtended* New() const final {
    return CreateMaybeMessage<ValidationExtended>(nullptr);
  }

  ValidationExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidationExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidationExtended& from);
  void MergeFrom(const ValidationExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.ValidationExtended";
  }
  protected:
  explicit ValidationExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // uint32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.ValidationExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ColorExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.ColorExtended) */ {
 public:
  inline ColorExtended() : ColorExtended(nullptr) {}
  virtual ~ColorExtended();

  ColorExtended(const ColorExtended& from);
  ColorExtended(ColorExtended&& from) noexcept
    : ColorExtended() {
    *this = ::std::move(from);
  }

  inline ColorExtended& operator=(const ColorExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorExtended& operator=(ColorExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorExtended* internal_default_instance() {
    return reinterpret_cast<const ColorExtended*>(
               &_ColorExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ColorExtended& a, ColorExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorExtended* New() const final {
    return CreateMaybeMessage<ColorExtended>(nullptr);
  }

  ColorExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorExtended& from);
  void MergeFrom(const ColorExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.ColorExtended";
  }
  protected:
  explicit ColorExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // uint32 color = 1;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.ColorExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EncapExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.EncapExtended) */ {
 public:
  inline EncapExtended() : EncapExtended(nullptr) {}
  virtual ~EncapExtended();

  EncapExtended(const EncapExtended& from);
  EncapExtended(EncapExtended&& from) noexcept
    : EncapExtended() {
    *this = ::std::move(from);
  }

  inline EncapExtended& operator=(const EncapExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncapExtended& operator=(EncapExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncapExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncapExtended* internal_default_instance() {
    return reinterpret_cast<const EncapExtended*>(
               &_EncapExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(EncapExtended& a, EncapExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(EncapExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncapExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncapExtended* New() const final {
    return CreateMaybeMessage<EncapExtended>(nullptr);
  }

  EncapExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncapExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncapExtended& from);
  void MergeFrom(const EncapExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncapExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.EncapExtended";
  }
  protected:
  explicit EncapExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelTypeFieldNumber = 1,
  };
  // uint32 tunnel_type = 1;
  void clear_tunnel_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 tunnel_type() const;
  void set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tunnel_type() const;
  void _internal_set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.EncapExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tunnel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class DefaultGatewayExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.DefaultGatewayExtended) */ {
 public:
  inline DefaultGatewayExtended() : DefaultGatewayExtended(nullptr) {}
  virtual ~DefaultGatewayExtended();

  DefaultGatewayExtended(const DefaultGatewayExtended& from);
  DefaultGatewayExtended(DefaultGatewayExtended&& from) noexcept
    : DefaultGatewayExtended() {
    *this = ::std::move(from);
  }

  inline DefaultGatewayExtended& operator=(const DefaultGatewayExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultGatewayExtended& operator=(DefaultGatewayExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultGatewayExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultGatewayExtended* internal_default_instance() {
    return reinterpret_cast<const DefaultGatewayExtended*>(
               &_DefaultGatewayExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DefaultGatewayExtended& a, DefaultGatewayExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultGatewayExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultGatewayExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultGatewayExtended* New() const final {
    return CreateMaybeMessage<DefaultGatewayExtended>(nullptr);
  }

  DefaultGatewayExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultGatewayExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultGatewayExtended& from);
  void MergeFrom(const DefaultGatewayExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultGatewayExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.DefaultGatewayExtended";
  }
  protected:
  explicit DefaultGatewayExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apipb.DefaultGatewayExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class OpaqueExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.OpaqueExtended) */ {
 public:
  inline OpaqueExtended() : OpaqueExtended(nullptr) {}
  virtual ~OpaqueExtended();

  OpaqueExtended(const OpaqueExtended& from);
  OpaqueExtended(OpaqueExtended&& from) noexcept
    : OpaqueExtended() {
    *this = ::std::move(from);
  }

  inline OpaqueExtended& operator=(const OpaqueExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpaqueExtended& operator=(OpaqueExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpaqueExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpaqueExtended* internal_default_instance() {
    return reinterpret_cast<const OpaqueExtended*>(
               &_OpaqueExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(OpaqueExtended& a, OpaqueExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(OpaqueExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpaqueExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpaqueExtended* New() const final {
    return CreateMaybeMessage<OpaqueExtended>(nullptr);
  }

  OpaqueExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpaqueExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpaqueExtended& from);
  void MergeFrom(const OpaqueExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpaqueExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.OpaqueExtended";
  }
  protected:
  explicit OpaqueExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIsTransitiveFieldNumber = 1,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.OpaqueExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool is_transitive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ESILabelExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.ESILabelExtended) */ {
 public:
  inline ESILabelExtended() : ESILabelExtended(nullptr) {}
  virtual ~ESILabelExtended();

  ESILabelExtended(const ESILabelExtended& from);
  ESILabelExtended(ESILabelExtended&& from) noexcept
    : ESILabelExtended() {
    *this = ::std::move(from);
  }

  inline ESILabelExtended& operator=(const ESILabelExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESILabelExtended& operator=(ESILabelExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESILabelExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ESILabelExtended* internal_default_instance() {
    return reinterpret_cast<const ESILabelExtended*>(
               &_ESILabelExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ESILabelExtended& a, ESILabelExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(ESILabelExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESILabelExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESILabelExtended* New() const final {
    return CreateMaybeMessage<ESILabelExtended>(nullptr);
  }

  ESILabelExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESILabelExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESILabelExtended& from);
  void MergeFrom(const ESILabelExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESILabelExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.ESILabelExtended";
  }
  protected:
  explicit ESILabelExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSingleActiveFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // bool is_single_active = 1;
  void clear_is_single_active();
  bool is_single_active() const;
  void set_is_single_active(bool value);
  private:
  bool _internal_is_single_active() const;
  void _internal_set_is_single_active(bool value);
  public:

  // uint32 label = 2;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.ESILabelExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_single_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ESImportRouteTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.ESImportRouteTarget) */ {
 public:
  inline ESImportRouteTarget() : ESImportRouteTarget(nullptr) {}
  virtual ~ESImportRouteTarget();

  ESImportRouteTarget(const ESImportRouteTarget& from);
  ESImportRouteTarget(ESImportRouteTarget&& from) noexcept
    : ESImportRouteTarget() {
    *this = ::std::move(from);
  }

  inline ESImportRouteTarget& operator=(const ESImportRouteTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESImportRouteTarget& operator=(ESImportRouteTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESImportRouteTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ESImportRouteTarget* internal_default_instance() {
    return reinterpret_cast<const ESImportRouteTarget*>(
               &_ESImportRouteTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ESImportRouteTarget& a, ESImportRouteTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ESImportRouteTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESImportRouteTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESImportRouteTarget* New() const final {
    return CreateMaybeMessage<ESImportRouteTarget>(nullptr);
  }

  ESImportRouteTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESImportRouteTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESImportRouteTarget& from);
  void MergeFrom(const ESImportRouteTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESImportRouteTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.ESImportRouteTarget";
  }
  protected:
  explicit ESImportRouteTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEsImportFieldNumber = 1,
  };
  // string es_import = 1;
  void clear_es_import();
  const std::string& es_import() const;
  void set_es_import(const std::string& value);
  void set_es_import(std::string&& value);
  void set_es_import(const char* value);
  void set_es_import(const char* value, size_t size);
  std::string* mutable_es_import();
  std::string* release_es_import();
  void set_allocated_es_import(std::string* es_import);
  private:
  const std::string& _internal_es_import() const;
  void _internal_set_es_import(const std::string& value);
  std::string* _internal_mutable_es_import();
  public:

  // @@protoc_insertion_point(class_scope:apipb.ESImportRouteTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr es_import_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MacMobilityExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MacMobilityExtended) */ {
 public:
  inline MacMobilityExtended() : MacMobilityExtended(nullptr) {}
  virtual ~MacMobilityExtended();

  MacMobilityExtended(const MacMobilityExtended& from);
  MacMobilityExtended(MacMobilityExtended&& from) noexcept
    : MacMobilityExtended() {
    *this = ::std::move(from);
  }

  inline MacMobilityExtended& operator=(const MacMobilityExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacMobilityExtended& operator=(MacMobilityExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacMobilityExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacMobilityExtended* internal_default_instance() {
    return reinterpret_cast<const MacMobilityExtended*>(
               &_MacMobilityExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(MacMobilityExtended& a, MacMobilityExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(MacMobilityExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MacMobilityExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacMobilityExtended* New() const final {
    return CreateMaybeMessage<MacMobilityExtended>(nullptr);
  }

  MacMobilityExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacMobilityExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacMobilityExtended& from);
  void MergeFrom(const MacMobilityExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacMobilityExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MacMobilityExtended";
  }
  protected:
  explicit MacMobilityExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsStickyFieldNumber = 1,
    kSequenceNumFieldNumber = 2,
  };
  // bool is_sticky = 1;
  void clear_is_sticky();
  bool is_sticky() const;
  void set_is_sticky(bool value);
  private:
  bool _internal_is_sticky() const;
  void _internal_set_is_sticky(bool value);
  public:

  // uint32 sequence_num = 2;
  void clear_sequence_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num() const;
  void set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_num() const;
  void _internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.MacMobilityExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_sticky_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouterMacExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RouterMacExtended) */ {
 public:
  inline RouterMacExtended() : RouterMacExtended(nullptr) {}
  virtual ~RouterMacExtended();

  RouterMacExtended(const RouterMacExtended& from);
  RouterMacExtended(RouterMacExtended&& from) noexcept
    : RouterMacExtended() {
    *this = ::std::move(from);
  }

  inline RouterMacExtended& operator=(const RouterMacExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterMacExtended& operator=(RouterMacExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouterMacExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouterMacExtended* internal_default_instance() {
    return reinterpret_cast<const RouterMacExtended*>(
               &_RouterMacExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RouterMacExtended& a, RouterMacExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterMacExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouterMacExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouterMacExtended* New() const final {
    return CreateMaybeMessage<RouterMacExtended>(nullptr);
  }

  RouterMacExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouterMacExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouterMacExtended& from);
  void MergeFrom(const RouterMacExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterMacExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RouterMacExtended";
  }
  protected:
  explicit RouterMacExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 1,
  };
  // string mac = 1;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // @@protoc_insertion_point(class_scope:apipb.RouterMacExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TrafficRateExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TrafficRateExtended) */ {
 public:
  inline TrafficRateExtended() : TrafficRateExtended(nullptr) {}
  virtual ~TrafficRateExtended();

  TrafficRateExtended(const TrafficRateExtended& from);
  TrafficRateExtended(TrafficRateExtended&& from) noexcept
    : TrafficRateExtended() {
    *this = ::std::move(from);
  }

  inline TrafficRateExtended& operator=(const TrafficRateExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRateExtended& operator=(TrafficRateExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRateExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRateExtended* internal_default_instance() {
    return reinterpret_cast<const TrafficRateExtended*>(
               &_TrafficRateExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TrafficRateExtended& a, TrafficRateExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRateExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficRateExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRateExtended* New() const final {
    return CreateMaybeMessage<TrafficRateExtended>(nullptr);
  }

  TrafficRateExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRateExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRateExtended& from);
  void MergeFrom(const TrafficRateExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRateExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TrafficRateExtended";
  }
  protected:
  explicit TrafficRateExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 1,
    kRateFieldNumber = 2,
  };
  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float rate = 2;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TrafficRateExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TrafficActionExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TrafficActionExtended) */ {
 public:
  inline TrafficActionExtended() : TrafficActionExtended(nullptr) {}
  virtual ~TrafficActionExtended();

  TrafficActionExtended(const TrafficActionExtended& from);
  TrafficActionExtended(TrafficActionExtended&& from) noexcept
    : TrafficActionExtended() {
    *this = ::std::move(from);
  }

  inline TrafficActionExtended& operator=(const TrafficActionExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficActionExtended& operator=(TrafficActionExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficActionExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficActionExtended* internal_default_instance() {
    return reinterpret_cast<const TrafficActionExtended*>(
               &_TrafficActionExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TrafficActionExtended& a, TrafficActionExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficActionExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficActionExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficActionExtended* New() const final {
    return CreateMaybeMessage<TrafficActionExtended>(nullptr);
  }

  TrafficActionExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficActionExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficActionExtended& from);
  void MergeFrom(const TrafficActionExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficActionExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TrafficActionExtended";
  }
  protected:
  explicit TrafficActionExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalFieldNumber = 1,
    kSampleFieldNumber = 2,
  };
  // bool terminal = 1;
  void clear_terminal();
  bool terminal() const;
  void set_terminal(bool value);
  private:
  bool _internal_terminal() const;
  void _internal_set_terminal(bool value);
  public:

  // bool sample = 2;
  void clear_sample();
  bool sample() const;
  void set_sample(bool value);
  private:
  bool _internal_sample() const;
  void _internal_set_sample(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TrafficActionExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool terminal_;
  bool sample_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectTwoOctetAsSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RedirectTwoOctetAsSpecificExtended) */ {
 public:
  inline RedirectTwoOctetAsSpecificExtended() : RedirectTwoOctetAsSpecificExtended(nullptr) {}
  virtual ~RedirectTwoOctetAsSpecificExtended();

  RedirectTwoOctetAsSpecificExtended(const RedirectTwoOctetAsSpecificExtended& from);
  RedirectTwoOctetAsSpecificExtended(RedirectTwoOctetAsSpecificExtended&& from) noexcept
    : RedirectTwoOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectTwoOctetAsSpecificExtended& operator=(const RedirectTwoOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectTwoOctetAsSpecificExtended& operator=(RedirectTwoOctetAsSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectTwoOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectTwoOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectTwoOctetAsSpecificExtended*>(
               &_RedirectTwoOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RedirectTwoOctetAsSpecificExtended& a, RedirectTwoOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectTwoOctetAsSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectTwoOctetAsSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectTwoOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectTwoOctetAsSpecificExtended>(nullptr);
  }

  RedirectTwoOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectTwoOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectTwoOctetAsSpecificExtended& from);
  void MergeFrom(const RedirectTwoOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectTwoOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RedirectTwoOctetAsSpecificExtended";
  }
  protected:
  explicit RedirectTwoOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RedirectTwoOctetAsSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectIPv4AddressSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RedirectIPv4AddressSpecificExtended) */ {
 public:
  inline RedirectIPv4AddressSpecificExtended() : RedirectIPv4AddressSpecificExtended(nullptr) {}
  virtual ~RedirectIPv4AddressSpecificExtended();

  RedirectIPv4AddressSpecificExtended(const RedirectIPv4AddressSpecificExtended& from);
  RedirectIPv4AddressSpecificExtended(RedirectIPv4AddressSpecificExtended&& from) noexcept
    : RedirectIPv4AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectIPv4AddressSpecificExtended& operator=(const RedirectIPv4AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectIPv4AddressSpecificExtended& operator=(RedirectIPv4AddressSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectIPv4AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectIPv4AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectIPv4AddressSpecificExtended*>(
               &_RedirectIPv4AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(RedirectIPv4AddressSpecificExtended& a, RedirectIPv4AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectIPv4AddressSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectIPv4AddressSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectIPv4AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectIPv4AddressSpecificExtended>(nullptr);
  }

  RedirectIPv4AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectIPv4AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectIPv4AddressSpecificExtended& from);
  void MergeFrom(const RedirectIPv4AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectIPv4AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RedirectIPv4AddressSpecificExtended";
  }
  protected:
  explicit RedirectIPv4AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RedirectIPv4AddressSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectFourOctetAsSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RedirectFourOctetAsSpecificExtended) */ {
 public:
  inline RedirectFourOctetAsSpecificExtended() : RedirectFourOctetAsSpecificExtended(nullptr) {}
  virtual ~RedirectFourOctetAsSpecificExtended();

  RedirectFourOctetAsSpecificExtended(const RedirectFourOctetAsSpecificExtended& from);
  RedirectFourOctetAsSpecificExtended(RedirectFourOctetAsSpecificExtended&& from) noexcept
    : RedirectFourOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectFourOctetAsSpecificExtended& operator=(const RedirectFourOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectFourOctetAsSpecificExtended& operator=(RedirectFourOctetAsSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectFourOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectFourOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectFourOctetAsSpecificExtended*>(
               &_RedirectFourOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RedirectFourOctetAsSpecificExtended& a, RedirectFourOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectFourOctetAsSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectFourOctetAsSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectFourOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectFourOctetAsSpecificExtended>(nullptr);
  }

  RedirectFourOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectFourOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectFourOctetAsSpecificExtended& from);
  void MergeFrom(const RedirectFourOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectFourOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RedirectFourOctetAsSpecificExtended";
  }
  protected:
  explicit RedirectFourOctetAsSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RedirectFourOctetAsSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TrafficRemarkExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TrafficRemarkExtended) */ {
 public:
  inline TrafficRemarkExtended() : TrafficRemarkExtended(nullptr) {}
  virtual ~TrafficRemarkExtended();

  TrafficRemarkExtended(const TrafficRemarkExtended& from);
  TrafficRemarkExtended(TrafficRemarkExtended&& from) noexcept
    : TrafficRemarkExtended() {
    *this = ::std::move(from);
  }

  inline TrafficRemarkExtended& operator=(const TrafficRemarkExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRemarkExtended& operator=(TrafficRemarkExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRemarkExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRemarkExtended* internal_default_instance() {
    return reinterpret_cast<const TrafficRemarkExtended*>(
               &_TrafficRemarkExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(TrafficRemarkExtended& a, TrafficRemarkExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRemarkExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficRemarkExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRemarkExtended* New() const final {
    return CreateMaybeMessage<TrafficRemarkExtended>(nullptr);
  }

  TrafficRemarkExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRemarkExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRemarkExtended& from);
  void MergeFrom(const TrafficRemarkExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRemarkExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TrafficRemarkExtended";
  }
  protected:
  explicit TrafficRemarkExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDscpFieldNumber = 1,
  };
  // uint32 dscp = 1;
  void clear_dscp();
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp() const;
  void set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dscp() const;
  void _internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TrafficRemarkExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MUPExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.MUPExtended) */ {
 public:
  inline MUPExtended() : MUPExtended(nullptr) {}
  virtual ~MUPExtended();

  MUPExtended(const MUPExtended& from);
  MUPExtended(MUPExtended&& from) noexcept
    : MUPExtended() {
    *this = ::std::move(from);
  }

  inline MUPExtended& operator=(const MUPExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline MUPExtended& operator=(MUPExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MUPExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MUPExtended* internal_default_instance() {
    return reinterpret_cast<const MUPExtended*>(
               &_MUPExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(MUPExtended& a, MUPExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(MUPExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MUPExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MUPExtended* New() const final {
    return CreateMaybeMessage<MUPExtended>(nullptr);
  }

  MUPExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MUPExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MUPExtended& from);
  void MergeFrom(const MUPExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MUPExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.MUPExtended";
  }
  protected:
  explicit MUPExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 1,
    kSegmentId2FieldNumber = 2,
    kSegmentId4FieldNumber = 3,
  };
  // uint32 sub_type = 1;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 segment_id2 = 2;
  void clear_segment_id2();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_id2() const;
  void set_segment_id2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_id2() const;
  void _internal_set_segment_id2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 segment_id4 = 3;
  void clear_segment_id4();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_id4() const;
  void set_segment_id4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_id4() const;
  void _internal_set_segment_id4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.MUPExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_id2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_id4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class UnknownExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.UnknownExtended) */ {
 public:
  inline UnknownExtended() : UnknownExtended(nullptr) {}
  virtual ~UnknownExtended();

  UnknownExtended(const UnknownExtended& from);
  UnknownExtended(UnknownExtended&& from) noexcept
    : UnknownExtended() {
    *this = ::std::move(from);
  }

  inline UnknownExtended& operator=(const UnknownExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownExtended& operator=(UnknownExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnknownExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnknownExtended* internal_default_instance() {
    return reinterpret_cast<const UnknownExtended*>(
               &_UnknownExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(UnknownExtended& a, UnknownExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnknownExtended* New() const final {
    return CreateMaybeMessage<UnknownExtended>(nullptr);
  }

  UnknownExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnknownExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnknownExtended& from);
  void MergeFrom(const UnknownExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.UnknownExtended";
  }
  protected:
  explicit UnknownExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.UnknownExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ExtendedCommunitiesAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.ExtendedCommunitiesAttribute) */ {
 public:
  inline ExtendedCommunitiesAttribute() : ExtendedCommunitiesAttribute(nullptr) {}
  virtual ~ExtendedCommunitiesAttribute();

  ExtendedCommunitiesAttribute(const ExtendedCommunitiesAttribute& from);
  ExtendedCommunitiesAttribute(ExtendedCommunitiesAttribute&& from) noexcept
    : ExtendedCommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline ExtendedCommunitiesAttribute& operator=(const ExtendedCommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedCommunitiesAttribute& operator=(ExtendedCommunitiesAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtendedCommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtendedCommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const ExtendedCommunitiesAttribute*>(
               &_ExtendedCommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ExtendedCommunitiesAttribute& a, ExtendedCommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedCommunitiesAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedCommunitiesAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtendedCommunitiesAttribute* New() const final {
    return CreateMaybeMessage<ExtendedCommunitiesAttribute>(nullptr);
  }

  ExtendedCommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtendedCommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtendedCommunitiesAttribute& from);
  void MergeFrom(const ExtendedCommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedCommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.ExtendedCommunitiesAttribute";
  }
  protected:
  explicit ExtendedCommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  PROTOBUF_NAMESPACE_ID::Any* mutable_communities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_communities();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_communities();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_communities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      communities() const;

  // @@protoc_insertion_point(class_scope:apipb.ExtendedCommunitiesAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > communities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class As4PathAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.As4PathAttribute) */ {
 public:
  inline As4PathAttribute() : As4PathAttribute(nullptr) {}
  virtual ~As4PathAttribute();

  As4PathAttribute(const As4PathAttribute& from);
  As4PathAttribute(As4PathAttribute&& from) noexcept
    : As4PathAttribute() {
    *this = ::std::move(from);
  }

  inline As4PathAttribute& operator=(const As4PathAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline As4PathAttribute& operator=(As4PathAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const As4PathAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const As4PathAttribute* internal_default_instance() {
    return reinterpret_cast<const As4PathAttribute*>(
               &_As4PathAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(As4PathAttribute& a, As4PathAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(As4PathAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(As4PathAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline As4PathAttribute* New() const final {
    return CreateMaybeMessage<As4PathAttribute>(nullptr);
  }

  As4PathAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<As4PathAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const As4PathAttribute& from);
  void MergeFrom(const As4PathAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(As4PathAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.As4PathAttribute";
  }
  protected:
  explicit As4PathAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .apipb.AsSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::apipb::AsSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >*
      mutable_segments();
  private:
  const ::apipb::AsSegment& _internal_segments(int index) const;
  ::apipb::AsSegment* _internal_add_segments();
  public:
  const ::apipb::AsSegment& segments(int index) const;
  ::apipb::AsSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:apipb.As4PathAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class As4AggregatorAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.As4AggregatorAttribute) */ {
 public:
  inline As4AggregatorAttribute() : As4AggregatorAttribute(nullptr) {}
  virtual ~As4AggregatorAttribute();

  As4AggregatorAttribute(const As4AggregatorAttribute& from);
  As4AggregatorAttribute(As4AggregatorAttribute&& from) noexcept
    : As4AggregatorAttribute() {
    *this = ::std::move(from);
  }

  inline As4AggregatorAttribute& operator=(const As4AggregatorAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline As4AggregatorAttribute& operator=(As4AggregatorAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const As4AggregatorAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const As4AggregatorAttribute* internal_default_instance() {
    return reinterpret_cast<const As4AggregatorAttribute*>(
               &_As4AggregatorAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(As4AggregatorAttribute& a, As4AggregatorAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(As4AggregatorAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(As4AggregatorAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline As4AggregatorAttribute* New() const final {
    return CreateMaybeMessage<As4AggregatorAttribute>(nullptr);
  }

  As4AggregatorAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<As4AggregatorAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const As4AggregatorAttribute& from);
  void MergeFrom(const As4AggregatorAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(As4AggregatorAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.As4AggregatorAttribute";
  }
  protected:
  explicit As4AggregatorAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kAsnFieldNumber = 2,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 asn = 2;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.As4AggregatorAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class PmsiTunnelAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.PmsiTunnelAttribute) */ {
 public:
  inline PmsiTunnelAttribute() : PmsiTunnelAttribute(nullptr) {}
  virtual ~PmsiTunnelAttribute();

  PmsiTunnelAttribute(const PmsiTunnelAttribute& from);
  PmsiTunnelAttribute(PmsiTunnelAttribute&& from) noexcept
    : PmsiTunnelAttribute() {
    *this = ::std::move(from);
  }

  inline PmsiTunnelAttribute& operator=(const PmsiTunnelAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmsiTunnelAttribute& operator=(PmsiTunnelAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmsiTunnelAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PmsiTunnelAttribute* internal_default_instance() {
    return reinterpret_cast<const PmsiTunnelAttribute*>(
               &_PmsiTunnelAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(PmsiTunnelAttribute& a, PmsiTunnelAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PmsiTunnelAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PmsiTunnelAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmsiTunnelAttribute* New() const final {
    return CreateMaybeMessage<PmsiTunnelAttribute>(nullptr);
  }

  PmsiTunnelAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmsiTunnelAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmsiTunnelAttribute& from);
  void MergeFrom(const PmsiTunnelAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmsiTunnelAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.PmsiTunnelAttribute";
  }
  protected:
  explicit PmsiTunnelAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 4,
    kFlagsFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLabelFieldNumber = 3,
  };
  // bytes id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 3;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.PmsiTunnelAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVEncapsulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVEncapsulation) */ {
 public:
  inline TunnelEncapSubTLVEncapsulation() : TunnelEncapSubTLVEncapsulation(nullptr) {}
  virtual ~TunnelEncapSubTLVEncapsulation();

  TunnelEncapSubTLVEncapsulation(const TunnelEncapSubTLVEncapsulation& from);
  TunnelEncapSubTLVEncapsulation(TunnelEncapSubTLVEncapsulation&& from) noexcept
    : TunnelEncapSubTLVEncapsulation() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVEncapsulation& operator=(const TunnelEncapSubTLVEncapsulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVEncapsulation& operator=(TunnelEncapSubTLVEncapsulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVEncapsulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVEncapsulation* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVEncapsulation*>(
               &_TunnelEncapSubTLVEncapsulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(TunnelEncapSubTLVEncapsulation& a, TunnelEncapSubTLVEncapsulation& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVEncapsulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVEncapsulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVEncapsulation* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVEncapsulation>(nullptr);
  }

  TunnelEncapSubTLVEncapsulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVEncapsulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVEncapsulation& from);
  void MergeFrom(const TunnelEncapSubTLVEncapsulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVEncapsulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVEncapsulation";
  }
  protected:
  explicit TunnelEncapSubTLVEncapsulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // bytes cookie = 2;
  void clear_cookie();
  const std::string& cookie() const;
  void set_cookie(const std::string& value);
  void set_cookie(std::string&& value);
  void set_cookie(const char* value);
  void set_cookie(const void* value, size_t size);
  std::string* mutable_cookie();
  std::string* release_cookie();
  void set_allocated_cookie(std::string* cookie);
  private:
  const std::string& _internal_cookie() const;
  void _internal_set_cookie(const std::string& value);
  std::string* _internal_mutable_cookie();
  public:

  // uint32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVEncapsulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookie_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVProtocol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVProtocol) */ {
 public:
  inline TunnelEncapSubTLVProtocol() : TunnelEncapSubTLVProtocol(nullptr) {}
  virtual ~TunnelEncapSubTLVProtocol();

  TunnelEncapSubTLVProtocol(const TunnelEncapSubTLVProtocol& from);
  TunnelEncapSubTLVProtocol(TunnelEncapSubTLVProtocol&& from) noexcept
    : TunnelEncapSubTLVProtocol() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVProtocol& operator=(const TunnelEncapSubTLVProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVProtocol& operator=(TunnelEncapSubTLVProtocol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVProtocol* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVProtocol*>(
               &_TunnelEncapSubTLVProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TunnelEncapSubTLVProtocol& a, TunnelEncapSubTLVProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVProtocol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVProtocol* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVProtocol>(nullptr);
  }

  TunnelEncapSubTLVProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVProtocol& from);
  void MergeFrom(const TunnelEncapSubTLVProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVProtocol";
  }
  protected:
  explicit TunnelEncapSubTLVProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 1,
  };
  // uint32 protocol = 1;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol() const;
  void _internal_set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVColor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVColor) */ {
 public:
  inline TunnelEncapSubTLVColor() : TunnelEncapSubTLVColor(nullptr) {}
  virtual ~TunnelEncapSubTLVColor();

  TunnelEncapSubTLVColor(const TunnelEncapSubTLVColor& from);
  TunnelEncapSubTLVColor(TunnelEncapSubTLVColor&& from) noexcept
    : TunnelEncapSubTLVColor() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVColor& operator=(const TunnelEncapSubTLVColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVColor& operator=(TunnelEncapSubTLVColor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVColor* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVColor*>(
               &_TunnelEncapSubTLVColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(TunnelEncapSubTLVColor& a, TunnelEncapSubTLVColor& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVColor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVColor* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVColor>(nullptr);
  }

  TunnelEncapSubTLVColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVColor& from);
  void MergeFrom(const TunnelEncapSubTLVColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVColor";
  }
  protected:
  explicit TunnelEncapSubTLVColor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // uint32 color = 1;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVSRPreference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVSRPreference) */ {
 public:
  inline TunnelEncapSubTLVSRPreference() : TunnelEncapSubTLVSRPreference(nullptr) {}
  virtual ~TunnelEncapSubTLVSRPreference();

  TunnelEncapSubTLVSRPreference(const TunnelEncapSubTLVSRPreference& from);
  TunnelEncapSubTLVSRPreference(TunnelEncapSubTLVSRPreference&& from) noexcept
    : TunnelEncapSubTLVSRPreference() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVSRPreference& operator=(const TunnelEncapSubTLVSRPreference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVSRPreference& operator=(TunnelEncapSubTLVSRPreference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVSRPreference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVSRPreference* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVSRPreference*>(
               &_TunnelEncapSubTLVSRPreference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(TunnelEncapSubTLVSRPreference& a, TunnelEncapSubTLVSRPreference& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVSRPreference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVSRPreference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVSRPreference* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRPreference>(nullptr);
  }

  TunnelEncapSubTLVSRPreference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRPreference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVSRPreference& from);
  void MergeFrom(const TunnelEncapSubTLVSRPreference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVSRPreference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVSRPreference";
  }
  protected:
  explicit TunnelEncapSubTLVSRPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kPreferenceFieldNumber = 2,
  };
  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 preference = 2;
  void clear_preference();
  ::PROTOBUF_NAMESPACE_ID::uint32 preference() const;
  void set_preference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preference() const;
  void _internal_set_preference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVSRPreference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVSRCandidatePathName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVSRCandidatePathName) */ {
 public:
  inline TunnelEncapSubTLVSRCandidatePathName() : TunnelEncapSubTLVSRCandidatePathName(nullptr) {}
  virtual ~TunnelEncapSubTLVSRCandidatePathName();

  TunnelEncapSubTLVSRCandidatePathName(const TunnelEncapSubTLVSRCandidatePathName& from);
  TunnelEncapSubTLVSRCandidatePathName(TunnelEncapSubTLVSRCandidatePathName&& from) noexcept
    : TunnelEncapSubTLVSRCandidatePathName() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVSRCandidatePathName& operator=(const TunnelEncapSubTLVSRCandidatePathName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVSRCandidatePathName& operator=(TunnelEncapSubTLVSRCandidatePathName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVSRCandidatePathName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVSRCandidatePathName* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVSRCandidatePathName*>(
               &_TunnelEncapSubTLVSRCandidatePathName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(TunnelEncapSubTLVSRCandidatePathName& a, TunnelEncapSubTLVSRCandidatePathName& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVSRCandidatePathName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVSRCandidatePathName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVSRCandidatePathName* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRCandidatePathName>(nullptr);
  }

  TunnelEncapSubTLVSRCandidatePathName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRCandidatePathName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVSRCandidatePathName& from);
  void MergeFrom(const TunnelEncapSubTLVSRCandidatePathName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVSRCandidatePathName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVSRCandidatePathName";
  }
  protected:
  explicit TunnelEncapSubTLVSRCandidatePathName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatePathNameFieldNumber = 1,
  };
  // string candidate_path_name = 1;
  void clear_candidate_path_name();
  const std::string& candidate_path_name() const;
  void set_candidate_path_name(const std::string& value);
  void set_candidate_path_name(std::string&& value);
  void set_candidate_path_name(const char* value);
  void set_candidate_path_name(const char* value, size_t size);
  std::string* mutable_candidate_path_name();
  std::string* release_candidate_path_name();
  void set_allocated_candidate_path_name(std::string* candidate_path_name);
  private:
  const std::string& _internal_candidate_path_name() const;
  void _internal_set_candidate_path_name(const std::string& value);
  std::string* _internal_mutable_candidate_path_name();
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVSRCandidatePathName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_path_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVSRPriority PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVSRPriority) */ {
 public:
  inline TunnelEncapSubTLVSRPriority() : TunnelEncapSubTLVSRPriority(nullptr) {}
  virtual ~TunnelEncapSubTLVSRPriority();

  TunnelEncapSubTLVSRPriority(const TunnelEncapSubTLVSRPriority& from);
  TunnelEncapSubTLVSRPriority(TunnelEncapSubTLVSRPriority&& from) noexcept
    : TunnelEncapSubTLVSRPriority() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVSRPriority& operator=(const TunnelEncapSubTLVSRPriority& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVSRPriority& operator=(TunnelEncapSubTLVSRPriority&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVSRPriority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVSRPriority* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVSRPriority*>(
               &_TunnelEncapSubTLVSRPriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TunnelEncapSubTLVSRPriority& a, TunnelEncapSubTLVSRPriority& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVSRPriority* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVSRPriority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVSRPriority* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRPriority>(nullptr);
  }

  TunnelEncapSubTLVSRPriority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRPriority>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVSRPriority& from);
  void MergeFrom(const TunnelEncapSubTLVSRPriority& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVSRPriority* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVSRPriority";
  }
  protected:
  explicit TunnelEncapSubTLVSRPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
  };
  // uint32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVSRPriority)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVSRBindingSID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVSRBindingSID) */ {
 public:
  inline TunnelEncapSubTLVSRBindingSID() : TunnelEncapSubTLVSRBindingSID(nullptr) {}
  virtual ~TunnelEncapSubTLVSRBindingSID();

  TunnelEncapSubTLVSRBindingSID(const TunnelEncapSubTLVSRBindingSID& from);
  TunnelEncapSubTLVSRBindingSID(TunnelEncapSubTLVSRBindingSID&& from) noexcept
    : TunnelEncapSubTLVSRBindingSID() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVSRBindingSID& operator=(const TunnelEncapSubTLVSRBindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVSRBindingSID& operator=(TunnelEncapSubTLVSRBindingSID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVSRBindingSID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVSRBindingSID* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVSRBindingSID*>(
               &_TunnelEncapSubTLVSRBindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TunnelEncapSubTLVSRBindingSID& a, TunnelEncapSubTLVSRBindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVSRBindingSID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVSRBindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVSRBindingSID* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRBindingSID>(nullptr);
  }

  TunnelEncapSubTLVSRBindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRBindingSID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVSRBindingSID& from);
  void MergeFrom(const TunnelEncapSubTLVSRBindingSID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVSRBindingSID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVSRBindingSID";
  }
  protected:
  explicit TunnelEncapSubTLVSRBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsidFieldNumber = 1,
  };
  // .google.protobuf.Any bsid = 1;
  bool has_bsid() const;
  private:
  bool _internal_has_bsid() const;
  public:
  void clear_bsid();
  const PROTOBUF_NAMESPACE_ID::Any& bsid() const;
  PROTOBUF_NAMESPACE_ID::Any* release_bsid();
  PROTOBUF_NAMESPACE_ID::Any* mutable_bsid();
  void set_allocated_bsid(PROTOBUF_NAMESPACE_ID::Any* bsid);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_bsid() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_bsid();
  public:
  void unsafe_arena_set_allocated_bsid(
      PROTOBUF_NAMESPACE_ID::Any* bsid);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_bsid();

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVSRBindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* bsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRBindingSID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRBindingSID) */ {
 public:
  inline SRBindingSID() : SRBindingSID(nullptr) {}
  virtual ~SRBindingSID();

  SRBindingSID(const SRBindingSID& from);
  SRBindingSID(SRBindingSID&& from) noexcept
    : SRBindingSID() {
    *this = ::std::move(from);
  }

  inline SRBindingSID& operator=(const SRBindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRBindingSID& operator=(SRBindingSID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRBindingSID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRBindingSID* internal_default_instance() {
    return reinterpret_cast<const SRBindingSID*>(
               &_SRBindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SRBindingSID& a, SRBindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SRBindingSID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRBindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRBindingSID* New() const final {
    return CreateMaybeMessage<SRBindingSID>(nullptr);
  }

  SRBindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRBindingSID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRBindingSID& from);
  void MergeFrom(const SRBindingSID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRBindingSID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRBindingSID";
  }
  protected:
  explicit SRBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 3,
    kSFlagFieldNumber = 1,
    kIFlagFieldNumber = 2,
  };
  // bytes sid = 3;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const void* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // bool s_flag = 1;
  void clear_s_flag();
  bool s_flag() const;
  void set_s_flag(bool value);
  private:
  bool _internal_s_flag() const;
  void _internal_set_s_flag(bool value);
  public:

  // bool i_flag = 2;
  void clear_i_flag();
  bool i_flag() const;
  void set_i_flag(bool value);
  private:
  bool _internal_i_flag() const;
  void _internal_set_i_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRBindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  bool s_flag_;
  bool i_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6EndPointBehavior PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6EndPointBehavior) */ {
 public:
  inline SRv6EndPointBehavior() : SRv6EndPointBehavior(nullptr) {}
  virtual ~SRv6EndPointBehavior();

  SRv6EndPointBehavior(const SRv6EndPointBehavior& from);
  SRv6EndPointBehavior(SRv6EndPointBehavior&& from) noexcept
    : SRv6EndPointBehavior() {
    *this = ::std::move(from);
  }

  inline SRv6EndPointBehavior& operator=(const SRv6EndPointBehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6EndPointBehavior& operator=(SRv6EndPointBehavior&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6EndPointBehavior& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6EndPointBehavior* internal_default_instance() {
    return reinterpret_cast<const SRv6EndPointBehavior*>(
               &_SRv6EndPointBehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SRv6EndPointBehavior& a, SRv6EndPointBehavior& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6EndPointBehavior* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6EndPointBehavior* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6EndPointBehavior* New() const final {
    return CreateMaybeMessage<SRv6EndPointBehavior>(nullptr);
  }

  SRv6EndPointBehavior* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6EndPointBehavior>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6EndPointBehavior& from);
  void MergeFrom(const SRv6EndPointBehavior& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6EndPointBehavior* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6EndPointBehavior";
  }
  protected:
  explicit SRv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviorFieldNumber = 1,
    kBlockLenFieldNumber = 2,
    kNodeLenFieldNumber = 3,
    kFuncLenFieldNumber = 4,
    kArgLenFieldNumber = 5,
  };
  // .apipb.SRv6Behavior behavior = 1;
  void clear_behavior();
  ::apipb::SRv6Behavior behavior() const;
  void set_behavior(::apipb::SRv6Behavior value);
  private:
  ::apipb::SRv6Behavior _internal_behavior() const;
  void _internal_set_behavior(::apipb::SRv6Behavior value);
  public:

  // uint32 block_len = 2;
  void clear_block_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_len() const;
  void set_block_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_len() const;
  void _internal_set_block_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node_len = 3;
  void clear_node_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_len() const;
  void set_node_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_len() const;
  void _internal_set_node_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 func_len = 4;
  void clear_func_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 func_len() const;
  void set_func_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_func_len() const;
  void _internal_set_func_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 arg_len = 5;
  void clear_arg_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 arg_len() const;
  void set_arg_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_arg_len() const;
  void _internal_set_arg_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRv6EndPointBehavior)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int behavior_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 func_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 arg_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6BindingSID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6BindingSID) */ {
 public:
  inline SRv6BindingSID() : SRv6BindingSID(nullptr) {}
  virtual ~SRv6BindingSID();

  SRv6BindingSID(const SRv6BindingSID& from);
  SRv6BindingSID(SRv6BindingSID&& from) noexcept
    : SRv6BindingSID() {
    *this = ::std::move(from);
  }

  inline SRv6BindingSID& operator=(const SRv6BindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6BindingSID& operator=(SRv6BindingSID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6BindingSID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6BindingSID* internal_default_instance() {
    return reinterpret_cast<const SRv6BindingSID*>(
               &_SRv6BindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SRv6BindingSID& a, SRv6BindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6BindingSID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6BindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6BindingSID* New() const final {
    return CreateMaybeMessage<SRv6BindingSID>(nullptr);
  }

  SRv6BindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6BindingSID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6BindingSID& from);
  void MergeFrom(const SRv6BindingSID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6BindingSID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6BindingSID";
  }
  protected:
  explicit SRv6BindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 4,
    kEndpointBehaviorStructureFieldNumber = 5,
    kSFlagFieldNumber = 1,
    kIFlagFieldNumber = 2,
    kBFlagFieldNumber = 3,
  };
  // bytes sid = 4;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const void* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 5;
  bool has_endpoint_behavior_structure() const;
  private:
  bool _internal_has_endpoint_behavior_structure() const;
  public:
  void clear_endpoint_behavior_structure();
  const ::apipb::SRv6EndPointBehavior& endpoint_behavior_structure() const;
  ::apipb::SRv6EndPointBehavior* release_endpoint_behavior_structure();
  ::apipb::SRv6EndPointBehavior* mutable_endpoint_behavior_structure();
  void set_allocated_endpoint_behavior_structure(::apipb::SRv6EndPointBehavior* endpoint_behavior_structure);
  private:
  const ::apipb::SRv6EndPointBehavior& _internal_endpoint_behavior_structure() const;
  ::apipb::SRv6EndPointBehavior* _internal_mutable_endpoint_behavior_structure();
  public:
  void unsafe_arena_set_allocated_endpoint_behavior_structure(
      ::apipb::SRv6EndPointBehavior* endpoint_behavior_structure);
  ::apipb::SRv6EndPointBehavior* unsafe_arena_release_endpoint_behavior_structure();

  // bool s_flag = 1;
  void clear_s_flag();
  bool s_flag() const;
  void set_s_flag(bool value);
  private:
  bool _internal_s_flag() const;
  void _internal_set_s_flag(bool value);
  public:

  // bool i_flag = 2;
  void clear_i_flag();
  bool i_flag() const;
  void set_i_flag(bool value);
  private:
  bool _internal_i_flag() const;
  void _internal_set_i_flag(bool value);
  public:

  // bool b_flag = 3;
  void clear_b_flag();
  bool b_flag() const;
  void set_b_flag(bool value);
  private:
  bool _internal_b_flag() const;
  void _internal_set_b_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRv6BindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::apipb::SRv6EndPointBehavior* endpoint_behavior_structure_;
  bool s_flag_;
  bool i_flag_;
  bool b_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVSRENLP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVSRENLP) */ {
 public:
  inline TunnelEncapSubTLVSRENLP() : TunnelEncapSubTLVSRENLP(nullptr) {}
  virtual ~TunnelEncapSubTLVSRENLP();

  TunnelEncapSubTLVSRENLP(const TunnelEncapSubTLVSRENLP& from);
  TunnelEncapSubTLVSRENLP(TunnelEncapSubTLVSRENLP&& from) noexcept
    : TunnelEncapSubTLVSRENLP() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVSRENLP& operator=(const TunnelEncapSubTLVSRENLP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVSRENLP& operator=(TunnelEncapSubTLVSRENLP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVSRENLP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVSRENLP* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVSRENLP*>(
               &_TunnelEncapSubTLVSRENLP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(TunnelEncapSubTLVSRENLP& a, TunnelEncapSubTLVSRENLP& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVSRENLP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVSRENLP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVSRENLP* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRENLP>(nullptr);
  }

  TunnelEncapSubTLVSRENLP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRENLP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVSRENLP& from);
  void MergeFrom(const TunnelEncapSubTLVSRENLP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVSRENLP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVSRENLP";
  }
  protected:
  explicit TunnelEncapSubTLVSRENLP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kEnlpFieldNumber = 2,
  };
  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .apipb.ENLPType enlp = 2;
  void clear_enlp();
  ::apipb::ENLPType enlp() const;
  void set_enlp(::apipb::ENLPType value);
  private:
  ::apipb::ENLPType _internal_enlp() const;
  void _internal_set_enlp(::apipb::ENLPType value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVSRENLP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  int enlp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRWeight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRWeight) */ {
 public:
  inline SRWeight() : SRWeight(nullptr) {}
  virtual ~SRWeight();

  SRWeight(const SRWeight& from);
  SRWeight(SRWeight&& from) noexcept
    : SRWeight() {
    *this = ::std::move(from);
  }

  inline SRWeight& operator=(const SRWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRWeight& operator=(SRWeight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRWeight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRWeight* internal_default_instance() {
    return reinterpret_cast<const SRWeight*>(
               &_SRWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SRWeight& a, SRWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(SRWeight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRWeight* New() const final {
    return CreateMaybeMessage<SRWeight>(nullptr);
  }

  SRWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRWeight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRWeight& from);
  void MergeFrom(const SRWeight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRWeight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRWeight";
  }
  protected:
  explicit SRWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SegmentFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SegmentFlags) */ {
 public:
  inline SegmentFlags() : SegmentFlags(nullptr) {}
  virtual ~SegmentFlags();

  SegmentFlags(const SegmentFlags& from);
  SegmentFlags(SegmentFlags&& from) noexcept
    : SegmentFlags() {
    *this = ::std::move(from);
  }

  inline SegmentFlags& operator=(const SegmentFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentFlags& operator=(SegmentFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentFlags* internal_default_instance() {
    return reinterpret_cast<const SegmentFlags*>(
               &_SegmentFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SegmentFlags& a, SegmentFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentFlags* New() const final {
    return CreateMaybeMessage<SegmentFlags>(nullptr);
  }

  SegmentFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentFlags& from);
  void MergeFrom(const SegmentFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SegmentFlags";
  }
  protected:
  explicit SegmentFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVFlagFieldNumber = 1,
    kAFlagFieldNumber = 2,
    kSFlagFieldNumber = 3,
    kBFlagFieldNumber = 4,
  };
  // bool v_flag = 1;
  void clear_v_flag();
  bool v_flag() const;
  void set_v_flag(bool value);
  private:
  bool _internal_v_flag() const;
  void _internal_set_v_flag(bool value);
  public:

  // bool a_flag = 2;
  void clear_a_flag();
  bool a_flag() const;
  void set_a_flag(bool value);
  private:
  bool _internal_a_flag() const;
  void _internal_set_a_flag(bool value);
  public:

  // bool s_flag = 3;
  void clear_s_flag();
  bool s_flag() const;
  void set_s_flag(bool value);
  private:
  bool _internal_s_flag() const;
  void _internal_set_s_flag(bool value);
  public:

  // bool b_flag = 4;
  void clear_b_flag();
  bool b_flag() const;
  void set_b_flag(bool value);
  private:
  bool _internal_b_flag() const;
  void _internal_set_b_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SegmentFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool v_flag_;
  bool a_flag_;
  bool s_flag_;
  bool b_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SegmentTypeA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SegmentTypeA) */ {
 public:
  inline SegmentTypeA() : SegmentTypeA(nullptr) {}
  virtual ~SegmentTypeA();

  SegmentTypeA(const SegmentTypeA& from);
  SegmentTypeA(SegmentTypeA&& from) noexcept
    : SegmentTypeA() {
    *this = ::std::move(from);
  }

  inline SegmentTypeA& operator=(const SegmentTypeA& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentTypeA& operator=(SegmentTypeA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentTypeA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentTypeA* internal_default_instance() {
    return reinterpret_cast<const SegmentTypeA*>(
               &_SegmentTypeA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SegmentTypeA& a, SegmentTypeA& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentTypeA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentTypeA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentTypeA* New() const final {
    return CreateMaybeMessage<SegmentTypeA>(nullptr);
  }

  SegmentTypeA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentTypeA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentTypeA& from);
  void MergeFrom(const SegmentTypeA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentTypeA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SegmentTypeA";
  }
  protected:
  explicit SegmentTypeA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // .apipb.SegmentFlags flags = 1;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::apipb::SegmentFlags& flags() const;
  ::apipb::SegmentFlags* release_flags();
  ::apipb::SegmentFlags* mutable_flags();
  void set_allocated_flags(::apipb::SegmentFlags* flags);
  private:
  const ::apipb::SegmentFlags& _internal_flags() const;
  ::apipb::SegmentFlags* _internal_mutable_flags();
  public:
  void unsafe_arena_set_allocated_flags(
      ::apipb::SegmentFlags* flags);
  ::apipb::SegmentFlags* unsafe_arena_release_flags();

  // uint32 label = 2;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SegmentTypeA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::SegmentFlags* flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SegmentTypeB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SegmentTypeB) */ {
 public:
  inline SegmentTypeB() : SegmentTypeB(nullptr) {}
  virtual ~SegmentTypeB();

  SegmentTypeB(const SegmentTypeB& from);
  SegmentTypeB(SegmentTypeB&& from) noexcept
    : SegmentTypeB() {
    *this = ::std::move(from);
  }

  inline SegmentTypeB& operator=(const SegmentTypeB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentTypeB& operator=(SegmentTypeB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentTypeB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentTypeB* internal_default_instance() {
    return reinterpret_cast<const SegmentTypeB*>(
               &_SegmentTypeB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SegmentTypeB& a, SegmentTypeB& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentTypeB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentTypeB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentTypeB* New() const final {
    return CreateMaybeMessage<SegmentTypeB>(nullptr);
  }

  SegmentTypeB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentTypeB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentTypeB& from);
  void MergeFrom(const SegmentTypeB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentTypeB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SegmentTypeB";
  }
  protected:
  explicit SegmentTypeB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 2,
    kFlagsFieldNumber = 1,
    kEndpointBehaviorStructureFieldNumber = 3,
  };
  // bytes sid = 2;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const void* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // .apipb.SegmentFlags flags = 1;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::apipb::SegmentFlags& flags() const;
  ::apipb::SegmentFlags* release_flags();
  ::apipb::SegmentFlags* mutable_flags();
  void set_allocated_flags(::apipb::SegmentFlags* flags);
  private:
  const ::apipb::SegmentFlags& _internal_flags() const;
  ::apipb::SegmentFlags* _internal_mutable_flags();
  public:
  void unsafe_arena_set_allocated_flags(
      ::apipb::SegmentFlags* flags);
  ::apipb::SegmentFlags* unsafe_arena_release_flags();

  // .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 3;
  bool has_endpoint_behavior_structure() const;
  private:
  bool _internal_has_endpoint_behavior_structure() const;
  public:
  void clear_endpoint_behavior_structure();
  const ::apipb::SRv6EndPointBehavior& endpoint_behavior_structure() const;
  ::apipb::SRv6EndPointBehavior* release_endpoint_behavior_structure();
  ::apipb::SRv6EndPointBehavior* mutable_endpoint_behavior_structure();
  void set_allocated_endpoint_behavior_structure(::apipb::SRv6EndPointBehavior* endpoint_behavior_structure);
  private:
  const ::apipb::SRv6EndPointBehavior& _internal_endpoint_behavior_structure() const;
  ::apipb::SRv6EndPointBehavior* _internal_mutable_endpoint_behavior_structure();
  public:
  void unsafe_arena_set_allocated_endpoint_behavior_structure(
      ::apipb::SRv6EndPointBehavior* endpoint_behavior_structure);
  ::apipb::SRv6EndPointBehavior* unsafe_arena_release_endpoint_behavior_structure();

  // @@protoc_insertion_point(class_scope:apipb.SegmentTypeB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::apipb::SegmentFlags* flags_;
  ::apipb::SRv6EndPointBehavior* endpoint_behavior_structure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVSRSegmentList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVSRSegmentList) */ {
 public:
  inline TunnelEncapSubTLVSRSegmentList() : TunnelEncapSubTLVSRSegmentList(nullptr) {}
  virtual ~TunnelEncapSubTLVSRSegmentList();

  TunnelEncapSubTLVSRSegmentList(const TunnelEncapSubTLVSRSegmentList& from);
  TunnelEncapSubTLVSRSegmentList(TunnelEncapSubTLVSRSegmentList&& from) noexcept
    : TunnelEncapSubTLVSRSegmentList() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVSRSegmentList& operator=(const TunnelEncapSubTLVSRSegmentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVSRSegmentList& operator=(TunnelEncapSubTLVSRSegmentList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVSRSegmentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVSRSegmentList* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVSRSegmentList*>(
               &_TunnelEncapSubTLVSRSegmentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TunnelEncapSubTLVSRSegmentList& a, TunnelEncapSubTLVSRSegmentList& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVSRSegmentList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVSRSegmentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVSRSegmentList* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRSegmentList>(nullptr);
  }

  TunnelEncapSubTLVSRSegmentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVSRSegmentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVSRSegmentList& from);
  void MergeFrom(const TunnelEncapSubTLVSRSegmentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVSRSegmentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVSRSegmentList";
  }
  protected:
  explicit TunnelEncapSubTLVSRSegmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 2,
    kWeightFieldNumber = 1,
  };
  // repeated .google.protobuf.Any segments = 2;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  PROTOBUF_NAMESPACE_ID::Any* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_segments();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_segments(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_segments();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& segments(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      segments() const;

  // .apipb.SRWeight weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::apipb::SRWeight& weight() const;
  ::apipb::SRWeight* release_weight();
  ::apipb::SRWeight* mutable_weight();
  void set_allocated_weight(::apipb::SRWeight* weight);
  private:
  const ::apipb::SRWeight& _internal_weight() const;
  ::apipb::SRWeight* _internal_mutable_weight();
  public:
  void unsafe_arena_set_allocated_weight(
      ::apipb::SRWeight* weight);
  ::apipb::SRWeight* unsafe_arena_release_weight();

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVSRSegmentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > segments_;
  ::apipb::SRWeight* weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVEgressEndpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVEgressEndpoint) */ {
 public:
  inline TunnelEncapSubTLVEgressEndpoint() : TunnelEncapSubTLVEgressEndpoint(nullptr) {}
  virtual ~TunnelEncapSubTLVEgressEndpoint();

  TunnelEncapSubTLVEgressEndpoint(const TunnelEncapSubTLVEgressEndpoint& from);
  TunnelEncapSubTLVEgressEndpoint(TunnelEncapSubTLVEgressEndpoint&& from) noexcept
    : TunnelEncapSubTLVEgressEndpoint() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVEgressEndpoint& operator=(const TunnelEncapSubTLVEgressEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVEgressEndpoint& operator=(TunnelEncapSubTLVEgressEndpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVEgressEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVEgressEndpoint* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVEgressEndpoint*>(
               &_TunnelEncapSubTLVEgressEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(TunnelEncapSubTLVEgressEndpoint& a, TunnelEncapSubTLVEgressEndpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVEgressEndpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVEgressEndpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVEgressEndpoint* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVEgressEndpoint>(nullptr);
  }

  TunnelEncapSubTLVEgressEndpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVEgressEndpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVEgressEndpoint& from);
  void MergeFrom(const TunnelEncapSubTLVEgressEndpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVEgressEndpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVEgressEndpoint";
  }
  protected:
  explicit TunnelEncapSubTLVEgressEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVEgressEndpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVUDPDestPort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVUDPDestPort) */ {
 public:
  inline TunnelEncapSubTLVUDPDestPort() : TunnelEncapSubTLVUDPDestPort(nullptr) {}
  virtual ~TunnelEncapSubTLVUDPDestPort();

  TunnelEncapSubTLVUDPDestPort(const TunnelEncapSubTLVUDPDestPort& from);
  TunnelEncapSubTLVUDPDestPort(TunnelEncapSubTLVUDPDestPort&& from) noexcept
    : TunnelEncapSubTLVUDPDestPort() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVUDPDestPort& operator=(const TunnelEncapSubTLVUDPDestPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVUDPDestPort& operator=(TunnelEncapSubTLVUDPDestPort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVUDPDestPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVUDPDestPort* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVUDPDestPort*>(
               &_TunnelEncapSubTLVUDPDestPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TunnelEncapSubTLVUDPDestPort& a, TunnelEncapSubTLVUDPDestPort& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVUDPDestPort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVUDPDestPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVUDPDestPort* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVUDPDestPort>(nullptr);
  }

  TunnelEncapSubTLVUDPDestPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVUDPDestPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVUDPDestPort& from);
  void MergeFrom(const TunnelEncapSubTLVUDPDestPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVUDPDestPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVUDPDestPort";
  }
  protected:
  explicit TunnelEncapSubTLVUDPDestPort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
  };
  // uint32 port = 1;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVUDPDestPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVUnknown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapSubTLVUnknown) */ {
 public:
  inline TunnelEncapSubTLVUnknown() : TunnelEncapSubTLVUnknown(nullptr) {}
  virtual ~TunnelEncapSubTLVUnknown();

  TunnelEncapSubTLVUnknown(const TunnelEncapSubTLVUnknown& from);
  TunnelEncapSubTLVUnknown(TunnelEncapSubTLVUnknown&& from) noexcept
    : TunnelEncapSubTLVUnknown() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVUnknown& operator=(const TunnelEncapSubTLVUnknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVUnknown& operator=(TunnelEncapSubTLVUnknown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVUnknown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVUnknown* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVUnknown*>(
               &_TunnelEncapSubTLVUnknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(TunnelEncapSubTLVUnknown& a, TunnelEncapSubTLVUnknown& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVUnknown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapSubTLVUnknown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVUnknown* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVUnknown>(nullptr);
  }

  TunnelEncapSubTLVUnknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVUnknown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVUnknown& from);
  void MergeFrom(const TunnelEncapSubTLVUnknown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVUnknown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapSubTLVUnknown";
  }
  protected:
  explicit TunnelEncapSubTLVUnknown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapSubTLVUnknown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapTLV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapTLV) */ {
 public:
  inline TunnelEncapTLV() : TunnelEncapTLV(nullptr) {}
  virtual ~TunnelEncapTLV();

  TunnelEncapTLV(const TunnelEncapTLV& from);
  TunnelEncapTLV(TunnelEncapTLV&& from) noexcept
    : TunnelEncapTLV() {
    *this = ::std::move(from);
  }

  inline TunnelEncapTLV& operator=(const TunnelEncapTLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapTLV& operator=(TunnelEncapTLV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapTLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapTLV* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapTLV*>(
               &_TunnelEncapTLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(TunnelEncapTLV& a, TunnelEncapTLV& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapTLV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapTLV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapTLV* New() const final {
    return CreateMaybeMessage<TunnelEncapTLV>(nullptr);
  }

  TunnelEncapTLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapTLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapTLV& from);
  void MergeFrom(const TunnelEncapTLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapTLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapTLV";
  }
  protected:
  explicit TunnelEncapTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .google.protobuf.Any tlvs = 2;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  PROTOBUF_NAMESPACE_ID::Any* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_tlvs();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_tlvs();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      tlvs() const;

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapTLV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > tlvs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.TunnelEncapAttribute) */ {
 public:
  inline TunnelEncapAttribute() : TunnelEncapAttribute(nullptr) {}
  virtual ~TunnelEncapAttribute();

  TunnelEncapAttribute(const TunnelEncapAttribute& from);
  TunnelEncapAttribute(TunnelEncapAttribute&& from) noexcept
    : TunnelEncapAttribute() {
    *this = ::std::move(from);
  }

  inline TunnelEncapAttribute& operator=(const TunnelEncapAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapAttribute& operator=(TunnelEncapAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapAttribute* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapAttribute*>(
               &_TunnelEncapAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(TunnelEncapAttribute& a, TunnelEncapAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelEncapAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapAttribute* New() const final {
    return CreateMaybeMessage<TunnelEncapAttribute>(nullptr);
  }

  TunnelEncapAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapAttribute& from);
  void MergeFrom(const TunnelEncapAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.TunnelEncapAttribute";
  }
  protected:
  explicit TunnelEncapAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 1,
  };
  // repeated .apipb.TunnelEncapTLV tlvs = 1;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  ::apipb::TunnelEncapTLV* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::TunnelEncapTLV >*
      mutable_tlvs();
  private:
  const ::apipb::TunnelEncapTLV& _internal_tlvs(int index) const;
  ::apipb::TunnelEncapTLV* _internal_add_tlvs();
  public:
  const ::apipb::TunnelEncapTLV& tlvs(int index) const;
  ::apipb::TunnelEncapTLV* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::TunnelEncapTLV >&
      tlvs() const;

  // @@protoc_insertion_point(class_scope:apipb.TunnelEncapAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::TunnelEncapTLV > tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IPv6AddressSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.IPv6AddressSpecificExtended) */ {
 public:
  inline IPv6AddressSpecificExtended() : IPv6AddressSpecificExtended(nullptr) {}
  virtual ~IPv6AddressSpecificExtended();

  IPv6AddressSpecificExtended(const IPv6AddressSpecificExtended& from);
  IPv6AddressSpecificExtended(IPv6AddressSpecificExtended&& from) noexcept
    : IPv6AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline IPv6AddressSpecificExtended& operator=(const IPv6AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPv6AddressSpecificExtended& operator=(IPv6AddressSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPv6AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPv6AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const IPv6AddressSpecificExtended*>(
               &_IPv6AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(IPv6AddressSpecificExtended& a, IPv6AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(IPv6AddressSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPv6AddressSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPv6AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<IPv6AddressSpecificExtended>(nullptr);
  }

  IPv6AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPv6AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPv6AddressSpecificExtended& from);
  void MergeFrom(const IPv6AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPv6AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.IPv6AddressSpecificExtended";
  }
  protected:
  explicit IPv6AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kLocalAdminFieldNumber = 4,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.IPv6AddressSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectIPv6AddressSpecificExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.RedirectIPv6AddressSpecificExtended) */ {
 public:
  inline RedirectIPv6AddressSpecificExtended() : RedirectIPv6AddressSpecificExtended(nullptr) {}
  virtual ~RedirectIPv6AddressSpecificExtended();

  RedirectIPv6AddressSpecificExtended(const RedirectIPv6AddressSpecificExtended& from);
  RedirectIPv6AddressSpecificExtended(RedirectIPv6AddressSpecificExtended&& from) noexcept
    : RedirectIPv6AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectIPv6AddressSpecificExtended& operator=(const RedirectIPv6AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectIPv6AddressSpecificExtended& operator=(RedirectIPv6AddressSpecificExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectIPv6AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectIPv6AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectIPv6AddressSpecificExtended*>(
               &_RedirectIPv6AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RedirectIPv6AddressSpecificExtended& a, RedirectIPv6AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectIPv6AddressSpecificExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectIPv6AddressSpecificExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectIPv6AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectIPv6AddressSpecificExtended>(nullptr);
  }

  RedirectIPv6AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectIPv6AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectIPv6AddressSpecificExtended& from);
  void MergeFrom(const RedirectIPv6AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectIPv6AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.RedirectIPv6AddressSpecificExtended";
  }
  protected:
  explicit RedirectIPv6AddressSpecificExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.RedirectIPv6AddressSpecificExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IP6ExtendedCommunitiesAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.IP6ExtendedCommunitiesAttribute) */ {
 public:
  inline IP6ExtendedCommunitiesAttribute() : IP6ExtendedCommunitiesAttribute(nullptr) {}
  virtual ~IP6ExtendedCommunitiesAttribute();

  IP6ExtendedCommunitiesAttribute(const IP6ExtendedCommunitiesAttribute& from);
  IP6ExtendedCommunitiesAttribute(IP6ExtendedCommunitiesAttribute&& from) noexcept
    : IP6ExtendedCommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline IP6ExtendedCommunitiesAttribute& operator=(const IP6ExtendedCommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline IP6ExtendedCommunitiesAttribute& operator=(IP6ExtendedCommunitiesAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IP6ExtendedCommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IP6ExtendedCommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const IP6ExtendedCommunitiesAttribute*>(
               &_IP6ExtendedCommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(IP6ExtendedCommunitiesAttribute& a, IP6ExtendedCommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(IP6ExtendedCommunitiesAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IP6ExtendedCommunitiesAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IP6ExtendedCommunitiesAttribute* New() const final {
    return CreateMaybeMessage<IP6ExtendedCommunitiesAttribute>(nullptr);
  }

  IP6ExtendedCommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IP6ExtendedCommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IP6ExtendedCommunitiesAttribute& from);
  void MergeFrom(const IP6ExtendedCommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IP6ExtendedCommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.IP6ExtendedCommunitiesAttribute";
  }
  protected:
  explicit IP6ExtendedCommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  PROTOBUF_NAMESPACE_ID::Any* mutable_communities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_communities();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_communities();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_communities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      communities() const;

  // @@protoc_insertion_point(class_scope:apipb.IP6ExtendedCommunitiesAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > communities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AigpTLVIGPMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AigpTLVIGPMetric) */ {
 public:
  inline AigpTLVIGPMetric() : AigpTLVIGPMetric(nullptr) {}
  virtual ~AigpTLVIGPMetric();

  AigpTLVIGPMetric(const AigpTLVIGPMetric& from);
  AigpTLVIGPMetric(AigpTLVIGPMetric&& from) noexcept
    : AigpTLVIGPMetric() {
    *this = ::std::move(from);
  }

  inline AigpTLVIGPMetric& operator=(const AigpTLVIGPMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline AigpTLVIGPMetric& operator=(AigpTLVIGPMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AigpTLVIGPMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AigpTLVIGPMetric* internal_default_instance() {
    return reinterpret_cast<const AigpTLVIGPMetric*>(
               &_AigpTLVIGPMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(AigpTLVIGPMetric& a, AigpTLVIGPMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(AigpTLVIGPMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AigpTLVIGPMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AigpTLVIGPMetric* New() const final {
    return CreateMaybeMessage<AigpTLVIGPMetric>(nullptr);
  }

  AigpTLVIGPMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AigpTLVIGPMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AigpTLVIGPMetric& from);
  void MergeFrom(const AigpTLVIGPMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AigpTLVIGPMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AigpTLVIGPMetric";
  }
  protected:
  explicit AigpTLVIGPMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 1,
  };
  // uint64 metric = 1;
  void clear_metric();
  ::PROTOBUF_NAMESPACE_ID::uint64 metric() const;
  void set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_metric() const;
  void _internal_set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.AigpTLVIGPMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AigpTLVUnknown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AigpTLVUnknown) */ {
 public:
  inline AigpTLVUnknown() : AigpTLVUnknown(nullptr) {}
  virtual ~AigpTLVUnknown();

  AigpTLVUnknown(const AigpTLVUnknown& from);
  AigpTLVUnknown(AigpTLVUnknown&& from) noexcept
    : AigpTLVUnknown() {
    *this = ::std::move(from);
  }

  inline AigpTLVUnknown& operator=(const AigpTLVUnknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline AigpTLVUnknown& operator=(AigpTLVUnknown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AigpTLVUnknown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AigpTLVUnknown* internal_default_instance() {
    return reinterpret_cast<const AigpTLVUnknown*>(
               &_AigpTLVUnknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(AigpTLVUnknown& a, AigpTLVUnknown& b) {
    a.Swap(&b);
  }
  inline void Swap(AigpTLVUnknown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AigpTLVUnknown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AigpTLVUnknown* New() const final {
    return CreateMaybeMessage<AigpTLVUnknown>(nullptr);
  }

  AigpTLVUnknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AigpTLVUnknown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AigpTLVUnknown& from);
  void MergeFrom(const AigpTLVUnknown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AigpTLVUnknown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AigpTLVUnknown";
  }
  protected:
  explicit AigpTLVUnknown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.AigpTLVUnknown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AigpAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.AigpAttribute) */ {
 public:
  inline AigpAttribute() : AigpAttribute(nullptr) {}
  virtual ~AigpAttribute();

  AigpAttribute(const AigpAttribute& from);
  AigpAttribute(AigpAttribute&& from) noexcept
    : AigpAttribute() {
    *this = ::std::move(from);
  }

  inline AigpAttribute& operator=(const AigpAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AigpAttribute& operator=(AigpAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AigpAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AigpAttribute* internal_default_instance() {
    return reinterpret_cast<const AigpAttribute*>(
               &_AigpAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(AigpAttribute& a, AigpAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AigpAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AigpAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AigpAttribute* New() const final {
    return CreateMaybeMessage<AigpAttribute>(nullptr);
  }

  AigpAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AigpAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AigpAttribute& from);
  void MergeFrom(const AigpAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AigpAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.AigpAttribute";
  }
  protected:
  explicit AigpAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 1,
  };
  // repeated .google.protobuf.Any tlvs = 1;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  PROTOBUF_NAMESPACE_ID::Any* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_tlvs();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_tlvs();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      tlvs() const;

  // @@protoc_insertion_point(class_scope:apipb.AigpAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LargeCommunity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LargeCommunity) */ {
 public:
  inline LargeCommunity() : LargeCommunity(nullptr) {}
  virtual ~LargeCommunity();

  LargeCommunity(const LargeCommunity& from);
  LargeCommunity(LargeCommunity&& from) noexcept
    : LargeCommunity() {
    *this = ::std::move(from);
  }

  inline LargeCommunity& operator=(const LargeCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeCommunity& operator=(LargeCommunity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LargeCommunity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LargeCommunity* internal_default_instance() {
    return reinterpret_cast<const LargeCommunity*>(
               &_LargeCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(LargeCommunity& a, LargeCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeCommunity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeCommunity* New() const final {
    return CreateMaybeMessage<LargeCommunity>(nullptr);
  }

  LargeCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeCommunity& from);
  void MergeFrom(const LargeCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LargeCommunity";
  }
  protected:
  explicit LargeCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalAdminFieldNumber = 1,
    kLocalData1FieldNumber = 2,
    kLocalData2FieldNumber = 3,
  };
  // uint32 global_admin = 1;
  void clear_global_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_admin() const;
  void set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_admin() const;
  void _internal_set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_data1 = 2;
  void clear_local_data1();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data1() const;
  void set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_data1() const;
  void _internal_set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_data2 = 3;
  void clear_local_data2();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data2() const;
  void set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_data2() const;
  void _internal_set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LargeCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LargeCommunitiesAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LargeCommunitiesAttribute) */ {
 public:
  inline LargeCommunitiesAttribute() : LargeCommunitiesAttribute(nullptr) {}
  virtual ~LargeCommunitiesAttribute();

  LargeCommunitiesAttribute(const LargeCommunitiesAttribute& from);
  LargeCommunitiesAttribute(LargeCommunitiesAttribute&& from) noexcept
    : LargeCommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline LargeCommunitiesAttribute& operator=(const LargeCommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeCommunitiesAttribute& operator=(LargeCommunitiesAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LargeCommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LargeCommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const LargeCommunitiesAttribute*>(
               &_LargeCommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(LargeCommunitiesAttribute& a, LargeCommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeCommunitiesAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeCommunitiesAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeCommunitiesAttribute* New() const final {
    return CreateMaybeMessage<LargeCommunitiesAttribute>(nullptr);
  }

  LargeCommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeCommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeCommunitiesAttribute& from);
  void MergeFrom(const LargeCommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeCommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LargeCommunitiesAttribute";
  }
  protected:
  explicit LargeCommunitiesAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated .apipb.LargeCommunity communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  ::apipb::LargeCommunity* mutable_communities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LargeCommunity >*
      mutable_communities();
  private:
  const ::apipb::LargeCommunity& _internal_communities(int index) const;
  ::apipb::LargeCommunity* _internal_add_communities();
  public:
  const ::apipb::LargeCommunity& communities(int index) const;
  ::apipb::LargeCommunity* add_communities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LargeCommunity >&
      communities() const;

  // @@protoc_insertion_point(class_scope:apipb.LargeCommunitiesAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LargeCommunity > communities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsNodeFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsNodeFlags) */ {
 public:
  inline LsNodeFlags() : LsNodeFlags(nullptr) {}
  virtual ~LsNodeFlags();

  LsNodeFlags(const LsNodeFlags& from);
  LsNodeFlags(LsNodeFlags&& from) noexcept
    : LsNodeFlags() {
    *this = ::std::move(from);
  }

  inline LsNodeFlags& operator=(const LsNodeFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsNodeFlags& operator=(LsNodeFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsNodeFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsNodeFlags* internal_default_instance() {
    return reinterpret_cast<const LsNodeFlags*>(
               &_LsNodeFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(LsNodeFlags& a, LsNodeFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(LsNodeFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsNodeFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsNodeFlags* New() const final {
    return CreateMaybeMessage<LsNodeFlags>(nullptr);
  }

  LsNodeFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsNodeFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsNodeFlags& from);
  void MergeFrom(const LsNodeFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsNodeFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsNodeFlags";
  }
  protected:
  explicit LsNodeFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverloadFieldNumber = 1,
    kAttachedFieldNumber = 2,
    kExternalFieldNumber = 3,
    kAbrFieldNumber = 4,
    kRouterFieldNumber = 5,
    kV6FieldNumber = 6,
  };
  // bool overload = 1;
  void clear_overload();
  bool overload() const;
  void set_overload(bool value);
  private:
  bool _internal_overload() const;
  void _internal_set_overload(bool value);
  public:

  // bool attached = 2;
  void clear_attached();
  bool attached() const;
  void set_attached(bool value);
  private:
  bool _internal_attached() const;
  void _internal_set_attached(bool value);
  public:

  // bool external = 3;
  void clear_external();
  bool external() const;
  void set_external(bool value);
  private:
  bool _internal_external() const;
  void _internal_set_external(bool value);
  public:

  // bool abr = 4;
  void clear_abr();
  bool abr() const;
  void set_abr(bool value);
  private:
  bool _internal_abr() const;
  void _internal_set_abr(bool value);
  public:

  // bool router = 5;
  void clear_router();
  bool router() const;
  void set_router(bool value);
  private:
  bool _internal_router() const;
  void _internal_set_router(bool value);
  public:

  // bool v6 = 6;
  void clear_v6();
  bool v6() const;
  void set_v6(bool value);
  private:
  bool _internal_v6() const;
  void _internal_set_v6(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsNodeFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool overload_;
  bool attached_;
  bool external_;
  bool abr_;
  bool router_;
  bool v6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsIGPFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsIGPFlags) */ {
 public:
  inline LsIGPFlags() : LsIGPFlags(nullptr) {}
  virtual ~LsIGPFlags();

  LsIGPFlags(const LsIGPFlags& from);
  LsIGPFlags(LsIGPFlags&& from) noexcept
    : LsIGPFlags() {
    *this = ::std::move(from);
  }

  inline LsIGPFlags& operator=(const LsIGPFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsIGPFlags& operator=(LsIGPFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsIGPFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsIGPFlags* internal_default_instance() {
    return reinterpret_cast<const LsIGPFlags*>(
               &_LsIGPFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(LsIGPFlags& a, LsIGPFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(LsIGPFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsIGPFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsIGPFlags* New() const final {
    return CreateMaybeMessage<LsIGPFlags>(nullptr);
  }

  LsIGPFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsIGPFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsIGPFlags& from);
  void MergeFrom(const LsIGPFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsIGPFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsIGPFlags";
  }
  protected:
  explicit LsIGPFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownFieldNumber = 1,
    kNoUnicastFieldNumber = 2,
    kLocalAddressFieldNumber = 3,
    kPropagateNssaFieldNumber = 4,
  };
  // bool down = 1;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // bool no_unicast = 2;
  void clear_no_unicast();
  bool no_unicast() const;
  void set_no_unicast(bool value);
  private:
  bool _internal_no_unicast() const;
  void _internal_set_no_unicast(bool value);
  public:

  // bool local_address = 3;
  void clear_local_address();
  bool local_address() const;
  void set_local_address(bool value);
  private:
  bool _internal_local_address() const;
  void _internal_set_local_address(bool value);
  public:

  // bool propagate_nssa = 4;
  void clear_propagate_nssa();
  bool propagate_nssa() const;
  void set_propagate_nssa(bool value);
  private:
  bool _internal_propagate_nssa() const;
  void _internal_set_propagate_nssa(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsIGPFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool down_;
  bool no_unicast_;
  bool local_address_;
  bool propagate_nssa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsSrRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsSrRange) */ {
 public:
  inline LsSrRange() : LsSrRange(nullptr) {}
  virtual ~LsSrRange();

  LsSrRange(const LsSrRange& from);
  LsSrRange(LsSrRange&& from) noexcept
    : LsSrRange() {
    *this = ::std::move(from);
  }

  inline LsSrRange& operator=(const LsSrRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsSrRange& operator=(LsSrRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsSrRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsSrRange* internal_default_instance() {
    return reinterpret_cast<const LsSrRange*>(
               &_LsSrRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(LsSrRange& a, LsSrRange& b) {
    a.Swap(&b);
  }
  inline void Swap(LsSrRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsSrRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsSrRange* New() const final {
    return CreateMaybeMessage<LsSrRange>(nullptr);
  }

  LsSrRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsSrRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsSrRange& from);
  void MergeFrom(const LsSrRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsSrRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsSrRange";
  }
  protected:
  explicit LsSrRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // uint32 begin = 1;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsSrRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsSrCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsSrCapabilities) */ {
 public:
  inline LsSrCapabilities() : LsSrCapabilities(nullptr) {}
  virtual ~LsSrCapabilities();

  LsSrCapabilities(const LsSrCapabilities& from);
  LsSrCapabilities(LsSrCapabilities&& from) noexcept
    : LsSrCapabilities() {
    *this = ::std::move(from);
  }

  inline LsSrCapabilities& operator=(const LsSrCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsSrCapabilities& operator=(LsSrCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsSrCapabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsSrCapabilities* internal_default_instance() {
    return reinterpret_cast<const LsSrCapabilities*>(
               &_LsSrCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(LsSrCapabilities& a, LsSrCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(LsSrCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsSrCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsSrCapabilities* New() const final {
    return CreateMaybeMessage<LsSrCapabilities>(nullptr);
  }

  LsSrCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsSrCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsSrCapabilities& from);
  void MergeFrom(const LsSrCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsSrCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsSrCapabilities";
  }
  protected:
  explicit LsSrCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 3,
    kIpv4SupportedFieldNumber = 1,
    kIpv6SupportedFieldNumber = 2,
  };
  // repeated .apipb.LsSrRange ranges = 3;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::apipb::LsSrRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >*
      mutable_ranges();
  private:
  const ::apipb::LsSrRange& _internal_ranges(int index) const;
  ::apipb::LsSrRange* _internal_add_ranges();
  public:
  const ::apipb::LsSrRange& ranges(int index) const;
  ::apipb::LsSrRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >&
      ranges() const;

  // bool ipv4_supported = 1;
  void clear_ipv4_supported();
  bool ipv4_supported() const;
  void set_ipv4_supported(bool value);
  private:
  bool _internal_ipv4_supported() const;
  void _internal_set_ipv4_supported(bool value);
  public:

  // bool ipv6_supported = 2;
  void clear_ipv6_supported();
  bool ipv6_supported() const;
  void set_ipv6_supported(bool value);
  private:
  bool _internal_ipv6_supported() const;
  void _internal_set_ipv6_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsSrCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange > ranges_;
  bool ipv4_supported_;
  bool ipv6_supported_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsSrLocalBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsSrLocalBlock) */ {
 public:
  inline LsSrLocalBlock() : LsSrLocalBlock(nullptr) {}
  virtual ~LsSrLocalBlock();

  LsSrLocalBlock(const LsSrLocalBlock& from);
  LsSrLocalBlock(LsSrLocalBlock&& from) noexcept
    : LsSrLocalBlock() {
    *this = ::std::move(from);
  }

  inline LsSrLocalBlock& operator=(const LsSrLocalBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsSrLocalBlock& operator=(LsSrLocalBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsSrLocalBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsSrLocalBlock* internal_default_instance() {
    return reinterpret_cast<const LsSrLocalBlock*>(
               &_LsSrLocalBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(LsSrLocalBlock& a, LsSrLocalBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(LsSrLocalBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsSrLocalBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsSrLocalBlock* New() const final {
    return CreateMaybeMessage<LsSrLocalBlock>(nullptr);
  }

  LsSrLocalBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsSrLocalBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsSrLocalBlock& from);
  void MergeFrom(const LsSrLocalBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsSrLocalBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsSrLocalBlock";
  }
  protected:
  explicit LsSrLocalBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .apipb.LsSrRange ranges = 1;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::apipb::LsSrRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >*
      mutable_ranges();
  private:
  const ::apipb::LsSrRange& _internal_ranges(int index) const;
  ::apipb::LsSrRange* _internal_add_ranges();
  public:
  const ::apipb::LsSrRange& ranges(int index) const;
  ::apipb::LsSrRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >&
      ranges() const;

  // @@protoc_insertion_point(class_scope:apipb.LsSrLocalBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange > ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributeNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsAttributeNode) */ {
 public:
  inline LsAttributeNode() : LsAttributeNode(nullptr) {}
  virtual ~LsAttributeNode();

  LsAttributeNode(const LsAttributeNode& from);
  LsAttributeNode(LsAttributeNode&& from) noexcept
    : LsAttributeNode() {
    *this = ::std::move(from);
  }

  inline LsAttributeNode& operator=(const LsAttributeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributeNode& operator=(LsAttributeNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributeNode* internal_default_instance() {
    return reinterpret_cast<const LsAttributeNode*>(
               &_LsAttributeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(LsAttributeNode& a, LsAttributeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributeNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsAttributeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributeNode* New() const final {
    return CreateMaybeMessage<LsAttributeNode>(nullptr);
  }

  LsAttributeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributeNode& from);
  void MergeFrom(const LsAttributeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsAttributeNode";
  }
  protected:
  explicit LsAttributeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocalRouterIdFieldNumber = 3,
    kLocalRouterIdV6FieldNumber = 4,
    kIsisAreaFieldNumber = 5,
    kOpaqueFieldNumber = 6,
    kSrAlgorithmsFieldNumber = 8,
    kFlagsFieldNumber = 2,
    kSrCapabilitiesFieldNumber = 7,
    kSrLocalBlockFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string local_router_id = 3;
  void clear_local_router_id();
  const std::string& local_router_id() const;
  void set_local_router_id(const std::string& value);
  void set_local_router_id(std::string&& value);
  void set_local_router_id(const char* value);
  void set_local_router_id(const char* value, size_t size);
  std::string* mutable_local_router_id();
  std::string* release_local_router_id();
  void set_allocated_local_router_id(std::string* local_router_id);
  private:
  const std::string& _internal_local_router_id() const;
  void _internal_set_local_router_id(const std::string& value);
  std::string* _internal_mutable_local_router_id();
  public:

  // string local_router_id_v6 = 4;
  void clear_local_router_id_v6();
  const std::string& local_router_id_v6() const;
  void set_local_router_id_v6(const std::string& value);
  void set_local_router_id_v6(std::string&& value);
  void set_local_router_id_v6(const char* value);
  void set_local_router_id_v6(const char* value, size_t size);
  std::string* mutable_local_router_id_v6();
  std::string* release_local_router_id_v6();
  void set_allocated_local_router_id_v6(std::string* local_router_id_v6);
  private:
  const std::string& _internal_local_router_id_v6() const;
  void _internal_set_local_router_id_v6(const std::string& value);
  std::string* _internal_mutable_local_router_id_v6();
  public:

  // bytes isis_area = 5;
  void clear_isis_area();
  const std::string& isis_area() const;
  void set_isis_area(const std::string& value);
  void set_isis_area(std::string&& value);
  void set_isis_area(const char* value);
  void set_isis_area(const void* value, size_t size);
  std::string* mutable_isis_area();
  std::string* release_isis_area();
  void set_allocated_isis_area(std::string* isis_area);
  private:
  const std::string& _internal_isis_area() const;
  void _internal_set_isis_area(const std::string& value);
  std::string* _internal_mutable_isis_area();
  public:

  // bytes opaque = 6;
  void clear_opaque();
  const std::string& opaque() const;
  void set_opaque(const std::string& value);
  void set_opaque(std::string&& value);
  void set_opaque(const char* value);
  void set_opaque(const void* value, size_t size);
  std::string* mutable_opaque();
  std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // bytes sr_algorithms = 8;
  void clear_sr_algorithms();
  const std::string& sr_algorithms() const;
  void set_sr_algorithms(const std::string& value);
  void set_sr_algorithms(std::string&& value);
  void set_sr_algorithms(const char* value);
  void set_sr_algorithms(const void* value, size_t size);
  std::string* mutable_sr_algorithms();
  std::string* release_sr_algorithms();
  void set_allocated_sr_algorithms(std::string* sr_algorithms);
  private:
  const std::string& _internal_sr_algorithms() const;
  void _internal_set_sr_algorithms(const std::string& value);
  std::string* _internal_mutable_sr_algorithms();
  public:

  // .apipb.LsNodeFlags flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::apipb::LsNodeFlags& flags() const;
  ::apipb::LsNodeFlags* release_flags();
  ::apipb::LsNodeFlags* mutable_flags();
  void set_allocated_flags(::apipb::LsNodeFlags* flags);
  private:
  const ::apipb::LsNodeFlags& _internal_flags() const;
  ::apipb::LsNodeFlags* _internal_mutable_flags();
  public:
  void unsafe_arena_set_allocated_flags(
      ::apipb::LsNodeFlags* flags);
  ::apipb::LsNodeFlags* unsafe_arena_release_flags();

  // .apipb.LsSrCapabilities sr_capabilities = 7;
  bool has_sr_capabilities() const;
  private:
  bool _internal_has_sr_capabilities() const;
  public:
  void clear_sr_capabilities();
  const ::apipb::LsSrCapabilities& sr_capabilities() const;
  ::apipb::LsSrCapabilities* release_sr_capabilities();
  ::apipb::LsSrCapabilities* mutable_sr_capabilities();
  void set_allocated_sr_capabilities(::apipb::LsSrCapabilities* sr_capabilities);
  private:
  const ::apipb::LsSrCapabilities& _internal_sr_capabilities() const;
  ::apipb::LsSrCapabilities* _internal_mutable_sr_capabilities();
  public:
  void unsafe_arena_set_allocated_sr_capabilities(
      ::apipb::LsSrCapabilities* sr_capabilities);
  ::apipb::LsSrCapabilities* unsafe_arena_release_sr_capabilities();

  // .apipb.LsSrLocalBlock sr_local_block = 9;
  bool has_sr_local_block() const;
  private:
  bool _internal_has_sr_local_block() const;
  public:
  void clear_sr_local_block();
  const ::apipb::LsSrLocalBlock& sr_local_block() const;
  ::apipb::LsSrLocalBlock* release_sr_local_block();
  ::apipb::LsSrLocalBlock* mutable_sr_local_block();
  void set_allocated_sr_local_block(::apipb::LsSrLocalBlock* sr_local_block);
  private:
  const ::apipb::LsSrLocalBlock& _internal_sr_local_block() const;
  ::apipb::LsSrLocalBlock* _internal_mutable_sr_local_block();
  public:
  void unsafe_arena_set_allocated_sr_local_block(
      ::apipb::LsSrLocalBlock* sr_local_block);
  ::apipb::LsSrLocalBlock* unsafe_arena_release_sr_local_block();

  // @@protoc_insertion_point(class_scope:apipb.LsAttributeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_v6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isis_area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sr_algorithms_;
  ::apipb::LsNodeFlags* flags_;
  ::apipb::LsSrCapabilities* sr_capabilities_;
  ::apipb::LsSrLocalBlock* sr_local_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributeLink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsAttributeLink) */ {
 public:
  inline LsAttributeLink() : LsAttributeLink(nullptr) {}
  virtual ~LsAttributeLink();

  LsAttributeLink(const LsAttributeLink& from);
  LsAttributeLink(LsAttributeLink&& from) noexcept
    : LsAttributeLink() {
    *this = ::std::move(from);
  }

  inline LsAttributeLink& operator=(const LsAttributeLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributeLink& operator=(LsAttributeLink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributeLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributeLink* internal_default_instance() {
    return reinterpret_cast<const LsAttributeLink*>(
               &_LsAttributeLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(LsAttributeLink& a, LsAttributeLink& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributeLink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsAttributeLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributeLink* New() const final {
    return CreateMaybeMessage<LsAttributeLink>(nullptr);
  }

  LsAttributeLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributeLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributeLink& from);
  void MergeFrom(const LsAttributeLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributeLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsAttributeLink";
  }
  protected:
  explicit LsAttributeLink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnreservedBandwidthFieldNumber = 12,
    kSrlgsFieldNumber = 14,
    kNameFieldNumber = 1,
    kLocalRouterIdFieldNumber = 2,
    kLocalRouterIdV6FieldNumber = 3,
    kRemoteRouterIdFieldNumber = 4,
    kRemoteRouterIdV6FieldNumber = 5,
    kOpaqueFieldNumber = 9,
    kAdminGroupFieldNumber = 6,
    kDefaultTeMetricFieldNumber = 7,
    kIgpMetricFieldNumber = 8,
    kBandwidthFieldNumber = 10,
    kReservableBandwidthFieldNumber = 11,
    kSrAdjacencySidFieldNumber = 13,
  };
  // repeated float unreserved_bandwidth = 12;
  int unreserved_bandwidth_size() const;
  private:
  int _internal_unreserved_bandwidth_size() const;
  public:
  void clear_unreserved_bandwidth();
  private:
  float _internal_unreserved_bandwidth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unreserved_bandwidth() const;
  void _internal_add_unreserved_bandwidth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unreserved_bandwidth();
  public:
  float unreserved_bandwidth(int index) const;
  void set_unreserved_bandwidth(int index, float value);
  void add_unreserved_bandwidth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unreserved_bandwidth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unreserved_bandwidth();

  // repeated uint32 srlgs = 14;
  int srlgs_size() const;
  private:
  int _internal_srlgs_size() const;
  public:
  void clear_srlgs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srlgs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_srlgs() const;
  void _internal_add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_srlgs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 srlgs(int index) const;
  void set_srlgs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      srlgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_srlgs();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string local_router_id = 2;
  void clear_local_router_id();
  const std::string& local_router_id() const;
  void set_local_router_id(const std::string& value);
  void set_local_router_id(std::string&& value);
  void set_local_router_id(const char* value);
  void set_local_router_id(const char* value, size_t size);
  std::string* mutable_local_router_id();
  std::string* release_local_router_id();
  void set_allocated_local_router_id(std::string* local_router_id);
  private:
  const std::string& _internal_local_router_id() const;
  void _internal_set_local_router_id(const std::string& value);
  std::string* _internal_mutable_local_router_id();
  public:

  // string local_router_id_v6 = 3;
  void clear_local_router_id_v6();
  const std::string& local_router_id_v6() const;
  void set_local_router_id_v6(const std::string& value);
  void set_local_router_id_v6(std::string&& value);
  void set_local_router_id_v6(const char* value);
  void set_local_router_id_v6(const char* value, size_t size);
  std::string* mutable_local_router_id_v6();
  std::string* release_local_router_id_v6();
  void set_allocated_local_router_id_v6(std::string* local_router_id_v6);
  private:
  const std::string& _internal_local_router_id_v6() const;
  void _internal_set_local_router_id_v6(const std::string& value);
  std::string* _internal_mutable_local_router_id_v6();
  public:

  // string remote_router_id = 4;
  void clear_remote_router_id();
  const std::string& remote_router_id() const;
  void set_remote_router_id(const std::string& value);
  void set_remote_router_id(std::string&& value);
  void set_remote_router_id(const char* value);
  void set_remote_router_id(const char* value, size_t size);
  std::string* mutable_remote_router_id();
  std::string* release_remote_router_id();
  void set_allocated_remote_router_id(std::string* remote_router_id);
  private:
  const std::string& _internal_remote_router_id() const;
  void _internal_set_remote_router_id(const std::string& value);
  std::string* _internal_mutable_remote_router_id();
  public:

  // string remote_router_id_v6 = 5;
  void clear_remote_router_id_v6();
  const std::string& remote_router_id_v6() const;
  void set_remote_router_id_v6(const std::string& value);
  void set_remote_router_id_v6(std::string&& value);
  void set_remote_router_id_v6(const char* value);
  void set_remote_router_id_v6(const char* value, size_t size);
  std::string* mutable_remote_router_id_v6();
  std::string* release_remote_router_id_v6();
  void set_allocated_remote_router_id_v6(std::string* remote_router_id_v6);
  private:
  const std::string& _internal_remote_router_id_v6() const;
  void _internal_set_remote_router_id_v6(const std::string& value);
  std::string* _internal_mutable_remote_router_id_v6();
  public:

  // bytes opaque = 9;
  void clear_opaque();
  const std::string& opaque() const;
  void set_opaque(const std::string& value);
  void set_opaque(std::string&& value);
  void set_opaque(const char* value);
  void set_opaque(const void* value, size_t size);
  std::string* mutable_opaque();
  std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // uint32 admin_group = 6;
  void clear_admin_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_group() const;
  void set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin_group() const;
  void _internal_set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 default_te_metric = 7;
  void clear_default_te_metric();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_te_metric() const;
  void set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_te_metric() const;
  void _internal_set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 igp_metric = 8;
  void clear_igp_metric();
  ::PROTOBUF_NAMESPACE_ID::uint32 igp_metric() const;
  void set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_igp_metric() const;
  void _internal_set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float bandwidth = 10;
  void clear_bandwidth();
  float bandwidth() const;
  void set_bandwidth(float value);
  private:
  float _internal_bandwidth() const;
  void _internal_set_bandwidth(float value);
  public:

  // float reservable_bandwidth = 11;
  void clear_reservable_bandwidth();
  float reservable_bandwidth() const;
  void set_reservable_bandwidth(float value);
  private:
  float _internal_reservable_bandwidth() const;
  void _internal_set_reservable_bandwidth(float value);
  public:

  // uint32 sr_adjacency_sid = 13;
  void clear_sr_adjacency_sid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_adjacency_sid() const;
  void set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sr_adjacency_sid() const;
  void _internal_set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsAttributeLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unreserved_bandwidth_;
  mutable std::atomic<int> _unreserved_bandwidth_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > srlgs_;
  mutable std::atomic<int> _srlgs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_v6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_router_id_v6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_te_metric_;
  ::PROTOBUF_NAMESPACE_ID::uint32 igp_metric_;
  float bandwidth_;
  float reservable_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_adjacency_sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributePrefix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsAttributePrefix) */ {
 public:
  inline LsAttributePrefix() : LsAttributePrefix(nullptr) {}
  virtual ~LsAttributePrefix();

  LsAttributePrefix(const LsAttributePrefix& from);
  LsAttributePrefix(LsAttributePrefix&& from) noexcept
    : LsAttributePrefix() {
    *this = ::std::move(from);
  }

  inline LsAttributePrefix& operator=(const LsAttributePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributePrefix& operator=(LsAttributePrefix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributePrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributePrefix* internal_default_instance() {
    return reinterpret_cast<const LsAttributePrefix*>(
               &_LsAttributePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(LsAttributePrefix& a, LsAttributePrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributePrefix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsAttributePrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributePrefix* New() const final {
    return CreateMaybeMessage<LsAttributePrefix>(nullptr);
  }

  LsAttributePrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributePrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributePrefix& from);
  void MergeFrom(const LsAttributePrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributePrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsAttributePrefix";
  }
  protected:
  explicit LsAttributePrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueFieldNumber = 2,
    kIgpFlagsFieldNumber = 1,
    kSrPrefixSidFieldNumber = 3,
  };
  // bytes opaque = 2;
  void clear_opaque();
  const std::string& opaque() const;
  void set_opaque(const std::string& value);
  void set_opaque(std::string&& value);
  void set_opaque(const char* value);
  void set_opaque(const void* value, size_t size);
  std::string* mutable_opaque();
  std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // .apipb.LsIGPFlags igp_flags = 1;
  bool has_igp_flags() const;
  private:
  bool _internal_has_igp_flags() const;
  public:
  void clear_igp_flags();
  const ::apipb::LsIGPFlags& igp_flags() const;
  ::apipb::LsIGPFlags* release_igp_flags();
  ::apipb::LsIGPFlags* mutable_igp_flags();
  void set_allocated_igp_flags(::apipb::LsIGPFlags* igp_flags);
  private:
  const ::apipb::LsIGPFlags& _internal_igp_flags() const;
  ::apipb::LsIGPFlags* _internal_mutable_igp_flags();
  public:
  void unsafe_arena_set_allocated_igp_flags(
      ::apipb::LsIGPFlags* igp_flags);
  ::apipb::LsIGPFlags* unsafe_arena_release_igp_flags();

  // uint32 sr_prefix_sid = 3;
  void clear_sr_prefix_sid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_prefix_sid() const;
  void set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sr_prefix_sid() const;
  void _internal_set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsAttributePrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::apipb::LsIGPFlags* igp_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_prefix_sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsBgpPeerSegmentSIDFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsBgpPeerSegmentSIDFlags) */ {
 public:
  inline LsBgpPeerSegmentSIDFlags() : LsBgpPeerSegmentSIDFlags(nullptr) {}
  virtual ~LsBgpPeerSegmentSIDFlags();

  LsBgpPeerSegmentSIDFlags(const LsBgpPeerSegmentSIDFlags& from);
  LsBgpPeerSegmentSIDFlags(LsBgpPeerSegmentSIDFlags&& from) noexcept
    : LsBgpPeerSegmentSIDFlags() {
    *this = ::std::move(from);
  }

  inline LsBgpPeerSegmentSIDFlags& operator=(const LsBgpPeerSegmentSIDFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsBgpPeerSegmentSIDFlags& operator=(LsBgpPeerSegmentSIDFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsBgpPeerSegmentSIDFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsBgpPeerSegmentSIDFlags* internal_default_instance() {
    return reinterpret_cast<const LsBgpPeerSegmentSIDFlags*>(
               &_LsBgpPeerSegmentSIDFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(LsBgpPeerSegmentSIDFlags& a, LsBgpPeerSegmentSIDFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(LsBgpPeerSegmentSIDFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsBgpPeerSegmentSIDFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsBgpPeerSegmentSIDFlags* New() const final {
    return CreateMaybeMessage<LsBgpPeerSegmentSIDFlags>(nullptr);
  }

  LsBgpPeerSegmentSIDFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsBgpPeerSegmentSIDFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsBgpPeerSegmentSIDFlags& from);
  void MergeFrom(const LsBgpPeerSegmentSIDFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsBgpPeerSegmentSIDFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsBgpPeerSegmentSIDFlags";
  }
  protected:
  explicit LsBgpPeerSegmentSIDFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kLocalFieldNumber = 2,
    kBackupFieldNumber = 3,
    kPersistentFieldNumber = 4,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // bool local = 2;
  void clear_local();
  bool local() const;
  void set_local(bool value);
  private:
  bool _internal_local() const;
  void _internal_set_local(bool value);
  public:

  // bool backup = 3;
  void clear_backup();
  bool backup() const;
  void set_backup(bool value);
  private:
  bool _internal_backup() const;
  void _internal_set_backup(bool value);
  public:

  // bool persistent = 4;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);
  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsBgpPeerSegmentSIDFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  bool local_;
  bool backup_;
  bool persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsBgpPeerSegmentSID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsBgpPeerSegmentSID) */ {
 public:
  inline LsBgpPeerSegmentSID() : LsBgpPeerSegmentSID(nullptr) {}
  virtual ~LsBgpPeerSegmentSID();

  LsBgpPeerSegmentSID(const LsBgpPeerSegmentSID& from);
  LsBgpPeerSegmentSID(LsBgpPeerSegmentSID&& from) noexcept
    : LsBgpPeerSegmentSID() {
    *this = ::std::move(from);
  }

  inline LsBgpPeerSegmentSID& operator=(const LsBgpPeerSegmentSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsBgpPeerSegmentSID& operator=(LsBgpPeerSegmentSID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsBgpPeerSegmentSID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsBgpPeerSegmentSID* internal_default_instance() {
    return reinterpret_cast<const LsBgpPeerSegmentSID*>(
               &_LsBgpPeerSegmentSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(LsBgpPeerSegmentSID& a, LsBgpPeerSegmentSID& b) {
    a.Swap(&b);
  }
  inline void Swap(LsBgpPeerSegmentSID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsBgpPeerSegmentSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsBgpPeerSegmentSID* New() const final {
    return CreateMaybeMessage<LsBgpPeerSegmentSID>(nullptr);
  }

  LsBgpPeerSegmentSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsBgpPeerSegmentSID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsBgpPeerSegmentSID& from);
  void MergeFrom(const LsBgpPeerSegmentSID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsBgpPeerSegmentSID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsBgpPeerSegmentSID";
  }
  protected:
  explicit LsBgpPeerSegmentSID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kWeightFieldNumber = 2,
    kSidFieldNumber = 3,
  };
  // .apipb.LsBgpPeerSegmentSIDFlags flags = 1;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::apipb::LsBgpPeerSegmentSIDFlags& flags() const;
  ::apipb::LsBgpPeerSegmentSIDFlags* release_flags();
  ::apipb::LsBgpPeerSegmentSIDFlags* mutable_flags();
  void set_allocated_flags(::apipb::LsBgpPeerSegmentSIDFlags* flags);
  private:
  const ::apipb::LsBgpPeerSegmentSIDFlags& _internal_flags() const;
  ::apipb::LsBgpPeerSegmentSIDFlags* _internal_mutable_flags();
  public:
  void unsafe_arena_set_allocated_flags(
      ::apipb::LsBgpPeerSegmentSIDFlags* flags);
  ::apipb::LsBgpPeerSegmentSIDFlags* unsafe_arena_release_flags();

  // uint32 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sid = 3;
  void clear_sid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sid() const;
  void _internal_set_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.LsBgpPeerSegmentSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsBgpPeerSegmentSIDFlags* flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributeBgpPeerSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsAttributeBgpPeerSegment) */ {
 public:
  inline LsAttributeBgpPeerSegment() : LsAttributeBgpPeerSegment(nullptr) {}
  virtual ~LsAttributeBgpPeerSegment();

  LsAttributeBgpPeerSegment(const LsAttributeBgpPeerSegment& from);
  LsAttributeBgpPeerSegment(LsAttributeBgpPeerSegment&& from) noexcept
    : LsAttributeBgpPeerSegment() {
    *this = ::std::move(from);
  }

  inline LsAttributeBgpPeerSegment& operator=(const LsAttributeBgpPeerSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributeBgpPeerSegment& operator=(LsAttributeBgpPeerSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributeBgpPeerSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributeBgpPeerSegment* internal_default_instance() {
    return reinterpret_cast<const LsAttributeBgpPeerSegment*>(
               &_LsAttributeBgpPeerSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(LsAttributeBgpPeerSegment& a, LsAttributeBgpPeerSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributeBgpPeerSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsAttributeBgpPeerSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributeBgpPeerSegment* New() const final {
    return CreateMaybeMessage<LsAttributeBgpPeerSegment>(nullptr);
  }

  LsAttributeBgpPeerSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributeBgpPeerSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributeBgpPeerSegment& from);
  void MergeFrom(const LsAttributeBgpPeerSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributeBgpPeerSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsAttributeBgpPeerSegment";
  }
  protected:
  explicit LsAttributeBgpPeerSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpPeerNodeSidFieldNumber = 1,
    kBgpPeerAdjacencySidFieldNumber = 2,
    kBgpPeerSetSidFieldNumber = 3,
  };
  // .apipb.LsBgpPeerSegmentSID bgp_peer_node_sid = 1;
  bool has_bgp_peer_node_sid() const;
  private:
  bool _internal_has_bgp_peer_node_sid() const;
  public:
  void clear_bgp_peer_node_sid();
  const ::apipb::LsBgpPeerSegmentSID& bgp_peer_node_sid() const;
  ::apipb::LsBgpPeerSegmentSID* release_bgp_peer_node_sid();
  ::apipb::LsBgpPeerSegmentSID* mutable_bgp_peer_node_sid();
  void set_allocated_bgp_peer_node_sid(::apipb::LsBgpPeerSegmentSID* bgp_peer_node_sid);
  private:
  const ::apipb::LsBgpPeerSegmentSID& _internal_bgp_peer_node_sid() const;
  ::apipb::LsBgpPeerSegmentSID* _internal_mutable_bgp_peer_node_sid();
  public:
  void unsafe_arena_set_allocated_bgp_peer_node_sid(
      ::apipb::LsBgpPeerSegmentSID* bgp_peer_node_sid);
  ::apipb::LsBgpPeerSegmentSID* unsafe_arena_release_bgp_peer_node_sid();

  // .apipb.LsBgpPeerSegmentSID bgp_peer_adjacency_sid = 2;
  bool has_bgp_peer_adjacency_sid() const;
  private:
  bool _internal_has_bgp_peer_adjacency_sid() const;
  public:
  void clear_bgp_peer_adjacency_sid();
  const ::apipb::LsBgpPeerSegmentSID& bgp_peer_adjacency_sid() const;
  ::apipb::LsBgpPeerSegmentSID* release_bgp_peer_adjacency_sid();
  ::apipb::LsBgpPeerSegmentSID* mutable_bgp_peer_adjacency_sid();
  void set_allocated_bgp_peer_adjacency_sid(::apipb::LsBgpPeerSegmentSID* bgp_peer_adjacency_sid);
  private:
  const ::apipb::LsBgpPeerSegmentSID& _internal_bgp_peer_adjacency_sid() const;
  ::apipb::LsBgpPeerSegmentSID* _internal_mutable_bgp_peer_adjacency_sid();
  public:
  void unsafe_arena_set_allocated_bgp_peer_adjacency_sid(
      ::apipb::LsBgpPeerSegmentSID* bgp_peer_adjacency_sid);
  ::apipb::LsBgpPeerSegmentSID* unsafe_arena_release_bgp_peer_adjacency_sid();

  // .apipb.LsBgpPeerSegmentSID bgp_peer_set_sid = 3;
  bool has_bgp_peer_set_sid() const;
  private:
  bool _internal_has_bgp_peer_set_sid() const;
  public:
  void clear_bgp_peer_set_sid();
  const ::apipb::LsBgpPeerSegmentSID& bgp_peer_set_sid() const;
  ::apipb::LsBgpPeerSegmentSID* release_bgp_peer_set_sid();
  ::apipb::LsBgpPeerSegmentSID* mutable_bgp_peer_set_sid();
  void set_allocated_bgp_peer_set_sid(::apipb::LsBgpPeerSegmentSID* bgp_peer_set_sid);
  private:
  const ::apipb::LsBgpPeerSegmentSID& _internal_bgp_peer_set_sid() const;
  ::apipb::LsBgpPeerSegmentSID* _internal_mutable_bgp_peer_set_sid();
  public:
  void unsafe_arena_set_allocated_bgp_peer_set_sid(
      ::apipb::LsBgpPeerSegmentSID* bgp_peer_set_sid);
  ::apipb::LsBgpPeerSegmentSID* unsafe_arena_release_bgp_peer_set_sid();

  // @@protoc_insertion_point(class_scope:apipb.LsAttributeBgpPeerSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsBgpPeerSegmentSID* bgp_peer_node_sid_;
  ::apipb::LsBgpPeerSegmentSID* bgp_peer_adjacency_sid_;
  ::apipb::LsBgpPeerSegmentSID* bgp_peer_set_sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.LsAttribute) */ {
 public:
  inline LsAttribute() : LsAttribute(nullptr) {}
  virtual ~LsAttribute();

  LsAttribute(const LsAttribute& from);
  LsAttribute(LsAttribute&& from) noexcept
    : LsAttribute() {
    *this = ::std::move(from);
  }

  inline LsAttribute& operator=(const LsAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttribute& operator=(LsAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttribute* internal_default_instance() {
    return reinterpret_cast<const LsAttribute*>(
               &_LsAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(LsAttribute& a, LsAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LsAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttribute* New() const final {
    return CreateMaybeMessage<LsAttribute>(nullptr);
  }

  LsAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttribute& from);
  void MergeFrom(const LsAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.LsAttribute";
  }
  protected:
  explicit LsAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kLinkFieldNumber = 2,
    kPrefixFieldNumber = 3,
    kBgpPeerSegmentFieldNumber = 4,
  };
  // .apipb.LsAttributeNode node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::apipb::LsAttributeNode& node() const;
  ::apipb::LsAttributeNode* release_node();
  ::apipb::LsAttributeNode* mutable_node();
  void set_allocated_node(::apipb::LsAttributeNode* node);
  private:
  const ::apipb::LsAttributeNode& _internal_node() const;
  ::apipb::LsAttributeNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::apipb::LsAttributeNode* node);
  ::apipb::LsAttributeNode* unsafe_arena_release_node();

  // .apipb.LsAttributeLink link = 2;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::apipb::LsAttributeLink& link() const;
  ::apipb::LsAttributeLink* release_link();
  ::apipb::LsAttributeLink* mutable_link();
  void set_allocated_link(::apipb::LsAttributeLink* link);
  private:
  const ::apipb::LsAttributeLink& _internal_link() const;
  ::apipb::LsAttributeLink* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::apipb::LsAttributeLink* link);
  ::apipb::LsAttributeLink* unsafe_arena_release_link();

  // .apipb.LsAttributePrefix prefix = 3;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::apipb::LsAttributePrefix& prefix() const;
  ::apipb::LsAttributePrefix* release_prefix();
  ::apipb::LsAttributePrefix* mutable_prefix();
  void set_allocated_prefix(::apipb::LsAttributePrefix* prefix);
  private:
  const ::apipb::LsAttributePrefix& _internal_prefix() const;
  ::apipb::LsAttributePrefix* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::apipb::LsAttributePrefix* prefix);
  ::apipb::LsAttributePrefix* unsafe_arena_release_prefix();

  // .apipb.LsAttributeBgpPeerSegment bgp_peer_segment = 4;
  bool has_bgp_peer_segment() const;
  private:
  bool _internal_has_bgp_peer_segment() const;
  public:
  void clear_bgp_peer_segment();
  const ::apipb::LsAttributeBgpPeerSegment& bgp_peer_segment() const;
  ::apipb::LsAttributeBgpPeerSegment* release_bgp_peer_segment();
  ::apipb::LsAttributeBgpPeerSegment* mutable_bgp_peer_segment();
  void set_allocated_bgp_peer_segment(::apipb::LsAttributeBgpPeerSegment* bgp_peer_segment);
  private:
  const ::apipb::LsAttributeBgpPeerSegment& _internal_bgp_peer_segment() const;
  ::apipb::LsAttributeBgpPeerSegment* _internal_mutable_bgp_peer_segment();
  public:
  void unsafe_arena_set_allocated_bgp_peer_segment(
      ::apipb::LsAttributeBgpPeerSegment* bgp_peer_segment);
  ::apipb::LsAttributeBgpPeerSegment* unsafe_arena_release_bgp_peer_segment();

  // @@protoc_insertion_point(class_scope:apipb.LsAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apipb::LsAttributeNode* node_;
  ::apipb::LsAttributeLink* link_;
  ::apipb::LsAttributePrefix* prefix_;
  ::apipb::LsAttributeBgpPeerSegment* bgp_peer_segment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class UnknownAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.UnknownAttribute) */ {
 public:
  inline UnknownAttribute() : UnknownAttribute(nullptr) {}
  virtual ~UnknownAttribute();

  UnknownAttribute(const UnknownAttribute& from);
  UnknownAttribute(UnknownAttribute&& from) noexcept
    : UnknownAttribute() {
    *this = ::std::move(from);
  }

  inline UnknownAttribute& operator=(const UnknownAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownAttribute& operator=(UnknownAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnknownAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnknownAttribute* internal_default_instance() {
    return reinterpret_cast<const UnknownAttribute*>(
               &_UnknownAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(UnknownAttribute& a, UnknownAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnknownAttribute* New() const final {
    return CreateMaybeMessage<UnknownAttribute>(nullptr);
  }

  UnknownAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnknownAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnknownAttribute& from);
  void MergeFrom(const UnknownAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.UnknownAttribute";
  }
  protected:
  explicit UnknownAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kFlagsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.UnknownAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6StructureSubSubTLV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6StructureSubSubTLV) */ {
 public:
  inline SRv6StructureSubSubTLV() : SRv6StructureSubSubTLV(nullptr) {}
  virtual ~SRv6StructureSubSubTLV();

  SRv6StructureSubSubTLV(const SRv6StructureSubSubTLV& from);
  SRv6StructureSubSubTLV(SRv6StructureSubSubTLV&& from) noexcept
    : SRv6StructureSubSubTLV() {
    *this = ::std::move(from);
  }

  inline SRv6StructureSubSubTLV& operator=(const SRv6StructureSubSubTLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6StructureSubSubTLV& operator=(SRv6StructureSubSubTLV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6StructureSubSubTLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6StructureSubSubTLV* internal_default_instance() {
    return reinterpret_cast<const SRv6StructureSubSubTLV*>(
               &_SRv6StructureSubSubTLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(SRv6StructureSubSubTLV& a, SRv6StructureSubSubTLV& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6StructureSubSubTLV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6StructureSubSubTLV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6StructureSubSubTLV* New() const final {
    return CreateMaybeMessage<SRv6StructureSubSubTLV>(nullptr);
  }

  SRv6StructureSubSubTLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6StructureSubSubTLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6StructureSubSubTLV& from);
  void MergeFrom(const SRv6StructureSubSubTLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6StructureSubSubTLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6StructureSubSubTLV";
  }
  protected:
  explicit SRv6StructureSubSubTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorBlockLengthFieldNumber = 1,
    kLocatorNodeLengthFieldNumber = 2,
    kFunctionLengthFieldNumber = 3,
    kArgumentLengthFieldNumber = 4,
    kTranspositionLengthFieldNumber = 5,
    kTranspositionOffsetFieldNumber = 6,
  };
  // uint32 locator_block_length = 1;
  void clear_locator_block_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 locator_block_length() const;
  void set_locator_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_locator_block_length() const;
  void _internal_set_locator_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 locator_node_length = 2;
  void clear_locator_node_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 locator_node_length() const;
  void set_locator_node_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_locator_node_length() const;
  void _internal_set_locator_node_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 function_length = 3;
  void clear_function_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 function_length() const;
  void set_function_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_function_length() const;
  void _internal_set_function_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 argument_length = 4;
  void clear_argument_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 argument_length() const;
  void set_argument_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_argument_length() const;
  void _internal_set_argument_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 transposition_length = 5;
  void clear_transposition_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 transposition_length() const;
  void set_transposition_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transposition_length() const;
  void _internal_set_transposition_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 transposition_offset = 6;
  void clear_transposition_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 transposition_offset() const;
  void set_transposition_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transposition_offset() const;
  void _internal_set_transposition_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRv6StructureSubSubTLV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 locator_block_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 locator_node_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 function_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 argument_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transposition_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transposition_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6SIDFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6SIDFlags) */ {
 public:
  inline SRv6SIDFlags() : SRv6SIDFlags(nullptr) {}
  virtual ~SRv6SIDFlags();

  SRv6SIDFlags(const SRv6SIDFlags& from);
  SRv6SIDFlags(SRv6SIDFlags&& from) noexcept
    : SRv6SIDFlags() {
    *this = ::std::move(from);
  }

  inline SRv6SIDFlags& operator=(const SRv6SIDFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6SIDFlags& operator=(SRv6SIDFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6SIDFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6SIDFlags* internal_default_instance() {
    return reinterpret_cast<const SRv6SIDFlags*>(
               &_SRv6SIDFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SRv6SIDFlags& a, SRv6SIDFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6SIDFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6SIDFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6SIDFlags* New() const final {
    return CreateMaybeMessage<SRv6SIDFlags>(nullptr);
  }

  SRv6SIDFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6SIDFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6SIDFlags& from);
  void MergeFrom(const SRv6SIDFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6SIDFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6SIDFlags";
  }
  protected:
  explicit SRv6SIDFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlag1FieldNumber = 1,
  };
  // bool flag_1 = 1;
  void clear_flag_1();
  bool flag_1() const;
  void set_flag_1(bool value);
  private:
  bool _internal_flag_1() const;
  void _internal_set_flag_1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRv6SIDFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool flag_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6TLV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6TLV) */ {
 public:
  inline SRv6TLV() : SRv6TLV(nullptr) {}
  virtual ~SRv6TLV();

  SRv6TLV(const SRv6TLV& from);
  SRv6TLV(SRv6TLV&& from) noexcept
    : SRv6TLV() {
    *this = ::std::move(from);
  }

  inline SRv6TLV& operator=(const SRv6TLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6TLV& operator=(SRv6TLV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6TLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6TLV* internal_default_instance() {
    return reinterpret_cast<const SRv6TLV*>(
               &_SRv6TLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SRv6TLV& a, SRv6TLV& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6TLV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6TLV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6TLV* New() const final {
    return CreateMaybeMessage<SRv6TLV>(nullptr);
  }

  SRv6TLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6TLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6TLV& from);
  void MergeFrom(const SRv6TLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6TLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6TLV";
  }
  protected:
  explicit SRv6TLV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvFieldNumber = 1,
  };
  // repeated .google.protobuf.Any tlv = 1;
  int tlv_size() const;
  private:
  int _internal_tlv_size() const;
  public:
  void clear_tlv();
  PROTOBUF_NAMESPACE_ID::Any* mutable_tlv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_tlv();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_tlv(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_tlv();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& tlv(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_tlv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      tlv() const;

  // @@protoc_insertion_point(class_scope:apipb.SRv6TLV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > tlv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse();
  explicit SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse& other);
  static const SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse*>(&_SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[118];
  }

  public:
};

// -------------------------------------------------------------------

class SRv6InformationSubTLV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6InformationSubTLV) */ {
 public:
  inline SRv6InformationSubTLV() : SRv6InformationSubTLV(nullptr) {}
  virtual ~SRv6InformationSubTLV();

  SRv6InformationSubTLV(const SRv6InformationSubTLV& from);
  SRv6InformationSubTLV(SRv6InformationSubTLV&& from) noexcept
    : SRv6InformationSubTLV() {
    *this = ::std::move(from);
  }

  inline SRv6InformationSubTLV& operator=(const SRv6InformationSubTLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6InformationSubTLV& operator=(SRv6InformationSubTLV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6InformationSubTLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6InformationSubTLV* internal_default_instance() {
    return reinterpret_cast<const SRv6InformationSubTLV*>(
               &_SRv6InformationSubTLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(SRv6InformationSubTLV& a, SRv6InformationSubTLV& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6InformationSubTLV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6InformationSubTLV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6InformationSubTLV* New() const final {
    return CreateMaybeMessage<SRv6InformationSubTLV>(nullptr);
  }

  SRv6InformationSubTLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6InformationSubTLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6InformationSubTLV& from);
  void MergeFrom(const SRv6InformationSubTLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6InformationSubTLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6InformationSubTLV";
  }
  protected:
  explicit SRv6InformationSubTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubSubTlvsFieldNumber = 4,
    kSidFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kEndpointBehaviorFieldNumber = 3,
  };
  // map<uint32, .apipb.SRv6TLV> sub_sub_tlvs = 4;
  int sub_sub_tlvs_size() const;
  private:
  int _internal_sub_sub_tlvs_size() const;
  public:
  void clear_sub_sub_tlvs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
      _internal_sub_sub_tlvs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
      _internal_mutable_sub_sub_tlvs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
      sub_sub_tlvs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
      mutable_sub_sub_tlvs();

  // bytes sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const void* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // .apipb.SRv6SIDFlags flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::apipb::SRv6SIDFlags& flags() const;
  ::apipb::SRv6SIDFlags* release_flags();
  ::apipb::SRv6SIDFlags* mutable_flags();
  void set_allocated_flags(::apipb::SRv6SIDFlags* flags);
  private:
  const ::apipb::SRv6SIDFlags& _internal_flags() const;
  ::apipb::SRv6SIDFlags* _internal_mutable_flags();
  public:
  void unsafe_arena_set_allocated_flags(
      ::apipb::SRv6SIDFlags* flags);
  ::apipb::SRv6SIDFlags* unsafe_arena_release_flags();

  // uint32 endpoint_behavior = 3;
  void clear_endpoint_behavior();
  ::PROTOBUF_NAMESPACE_ID::uint32 endpoint_behavior() const;
  void set_endpoint_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endpoint_behavior() const;
  void _internal_set_endpoint_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apipb.SRv6InformationSubTLV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SRv6InformationSubTLV_SubSubTlvsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sub_sub_tlvs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::apipb::SRv6SIDFlags* flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endpoint_behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse();
  explicit SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse& other);
  static const SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse*>(&_SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[120];
  }

  public:
};

// -------------------------------------------------------------------

class SRv6L3ServiceTLV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6L3ServiceTLV) */ {
 public:
  inline SRv6L3ServiceTLV() : SRv6L3ServiceTLV(nullptr) {}
  virtual ~SRv6L3ServiceTLV();

  SRv6L3ServiceTLV(const SRv6L3ServiceTLV& from);
  SRv6L3ServiceTLV(SRv6L3ServiceTLV&& from) noexcept
    : SRv6L3ServiceTLV() {
    *this = ::std::move(from);
  }

  inline SRv6L3ServiceTLV& operator=(const SRv6L3ServiceTLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6L3ServiceTLV& operator=(SRv6L3ServiceTLV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6L3ServiceTLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6L3ServiceTLV* internal_default_instance() {
    return reinterpret_cast<const SRv6L3ServiceTLV*>(
               &_SRv6L3ServiceTLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(SRv6L3ServiceTLV& a, SRv6L3ServiceTLV& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6L3ServiceTLV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6L3ServiceTLV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6L3ServiceTLV* New() const final {
    return CreateMaybeMessage<SRv6L3ServiceTLV>(nullptr);
  }

  SRv6L3ServiceTLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6L3ServiceTLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6L3ServiceTLV& from);
  void MergeFrom(const SRv6L3ServiceTLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6L3ServiceTLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6L3ServiceTLV";
  }
  protected:
  explicit SRv6L3ServiceTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubTlvsFieldNumber = 1,
  };
  // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
  int sub_tlvs_size() const;
  private:
  int _internal_sub_tlvs_size() const;
  public:
  void clear_sub_tlvs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
      _internal_sub_tlvs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
      _internal_mutable_sub_tlvs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
      sub_tlvs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
      mutable_sub_tlvs();

  // @@protoc_insertion_point(class_scope:apipb.SRv6L3ServiceTLV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SRv6L3ServiceTLV_SubTlvsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sub_tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse();
  explicit SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse& other);
  static const SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse*>(&_SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[122];
  }

  public:
};

// -------------------------------------------------------------------

class SRv6L2ServiceTLV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.SRv6L2ServiceTLV) */ {
 public:
  inline SRv6L2ServiceTLV() : SRv6L2ServiceTLV(nullptr) {}
  virtual ~SRv6L2ServiceTLV();

  SRv6L2ServiceTLV(const SRv6L2ServiceTLV& from);
  SRv6L2ServiceTLV(SRv6L2ServiceTLV&& from) noexcept
    : SRv6L2ServiceTLV() {
    *this = ::std::move(from);
  }

  inline SRv6L2ServiceTLV& operator=(const SRv6L2ServiceTLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRv6L2ServiceTLV& operator=(SRv6L2ServiceTLV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRv6L2ServiceTLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRv6L2ServiceTLV* internal_default_instance() {
    return reinterpret_cast<const SRv6L2ServiceTLV*>(
               &_SRv6L2ServiceTLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(SRv6L2ServiceTLV& a, SRv6L2ServiceTLV& b) {
    a.Swap(&b);
  }
  inline void Swap(SRv6L2ServiceTLV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRv6L2ServiceTLV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRv6L2ServiceTLV* New() const final {
    return CreateMaybeMessage<SRv6L2ServiceTLV>(nullptr);
  }

  SRv6L2ServiceTLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRv6L2ServiceTLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRv6L2ServiceTLV& from);
  void MergeFrom(const SRv6L2ServiceTLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRv6L2ServiceTLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.SRv6L2ServiceTLV";
  }
  protected:
  explicit SRv6L2ServiceTLV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubTlvsFieldNumber = 1,
  };
  // map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
  int sub_tlvs_size() const;
  private:
  int _internal_sub_tlvs_size() const;
  public:
  void clear_sub_tlvs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
      _internal_sub_tlvs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
      _internal_mutable_sub_tlvs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
      sub_tlvs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
      mutable_sub_tlvs();

  // @@protoc_insertion_point(class_scope:apipb.SRv6L2ServiceTLV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SRv6L2ServiceTLV_SubTlvsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sub_tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class PrefixSID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apipb.PrefixSID) */ {
 public:
  inline PrefixSID() : PrefixSID(nullptr) {}
  virtual ~PrefixSID();

  PrefixSID(const PrefixSID& from);
  PrefixSID(PrefixSID&& from) noexcept
    : PrefixSID() {
    *this = ::std::move(from);
  }

  inline PrefixSID& operator=(const PrefixSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixSID& operator=(PrefixSID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrefixSID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrefixSID* internal_default_instance() {
    return reinterpret_cast<const PrefixSID*>(
               &_PrefixSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(PrefixSID& a, PrefixSID& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefixSID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefixSID* New() const final {
    return CreateMaybeMessage<PrefixSID>(nullptr);
  }

  PrefixSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefixSID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrefixSID& from);
  void MergeFrom(const PrefixSID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrefixSID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apipb.PrefixSID";
  }
  protected:
  explicit PrefixSID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 1,
  };
  // repeated .google.protobuf.Any tlvs = 1;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  PROTOBUF_NAMESPACE_ID::Any* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_tlvs();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_tlvs();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      tlvs() const;

  // @@protoc_insertion_point(class_scope:apipb.PrefixSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OriginAttribute

// uint32 origin = 1;
inline void OriginAttribute::clear_origin() {
  origin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OriginAttribute::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OriginAttribute::origin() const {
  // @@protoc_insertion_point(field_get:apipb.OriginAttribute.origin)
  return _internal_origin();
}
inline void OriginAttribute::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  origin_ = value;
}
inline void OriginAttribute::set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:apipb.OriginAttribute.origin)
}

// -------------------------------------------------------------------

// AsSegment

// .apipb.AsSegment.Type type = 1;
inline void AsSegment::clear_type() {
  type_ = 0;
}
inline ::apipb::AsSegment_Type AsSegment::_internal_type() const {
  return static_cast< ::apipb::AsSegment_Type >(type_);
}
inline ::apipb::AsSegment_Type AsSegment::type() const {
  // @@protoc_insertion_point(field_get:apipb.AsSegment.type)
  return _internal_type();
}
inline void AsSegment::_internal_set_type(::apipb::AsSegment_Type value) {
  
  type_ = value;
}
inline void AsSegment::set_type(::apipb::AsSegment_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.AsSegment.type)
}

// repeated uint32 numbers = 2;
inline int AsSegment::_internal_numbers_size() const {
  return numbers_.size();
}
inline int AsSegment::numbers_size() const {
  return _internal_numbers_size();
}
inline void AsSegment::clear_numbers() {
  numbers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsSegment::_internal_numbers(int index) const {
  return numbers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsSegment::numbers(int index) const {
  // @@protoc_insertion_point(field_get:apipb.AsSegment.numbers)
  return _internal_numbers(index);
}
inline void AsSegment::set_numbers(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.AsSegment.numbers)
}
inline void AsSegment::_internal_add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  numbers_.Add(value);
}
inline void AsSegment::add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_numbers(value);
  // @@protoc_insertion_point(field_add:apipb.AsSegment.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AsSegment::_internal_numbers() const {
  return numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AsSegment::numbers() const {
  // @@protoc_insertion_point(field_list:apipb.AsSegment.numbers)
  return _internal_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AsSegment::_internal_mutable_numbers() {
  return &numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AsSegment::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:apipb.AsSegment.numbers)
  return _internal_mutable_numbers();
}

// -------------------------------------------------------------------

// AsPathAttribute

// repeated .apipb.AsSegment segments = 1;
inline int AsPathAttribute::_internal_segments_size() const {
  return segments_.size();
}
inline int AsPathAttribute::segments_size() const {
  return _internal_segments_size();
}
inline void AsPathAttribute::clear_segments() {
  segments_.Clear();
}
inline ::apipb::AsSegment* AsPathAttribute::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.AsPathAttribute.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >*
AsPathAttribute::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:apipb.AsPathAttribute.segments)
  return &segments_;
}
inline const ::apipb::AsSegment& AsPathAttribute::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::apipb::AsSegment& AsPathAttribute::segments(int index) const {
  // @@protoc_insertion_point(field_get:apipb.AsPathAttribute.segments)
  return _internal_segments(index);
}
inline ::apipb::AsSegment* AsPathAttribute::_internal_add_segments() {
  return segments_.Add();
}
inline ::apipb::AsSegment* AsPathAttribute::add_segments() {
  // @@protoc_insertion_point(field_add:apipb.AsPathAttribute.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >&
AsPathAttribute::segments() const {
  // @@protoc_insertion_point(field_list:apipb.AsPathAttribute.segments)
  return segments_;
}

// -------------------------------------------------------------------

// NextHopAttribute

// string next_hop = 1;
inline void NextHopAttribute::clear_next_hop() {
  next_hop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NextHopAttribute::next_hop() const {
  // @@protoc_insertion_point(field_get:apipb.NextHopAttribute.next_hop)
  return _internal_next_hop();
}
inline void NextHopAttribute::set_next_hop(const std::string& value) {
  _internal_set_next_hop(value);
  // @@protoc_insertion_point(field_set:apipb.NextHopAttribute.next_hop)
}
inline std::string* NextHopAttribute::mutable_next_hop() {
  // @@protoc_insertion_point(field_mutable:apipb.NextHopAttribute.next_hop)
  return _internal_mutable_next_hop();
}
inline const std::string& NextHopAttribute::_internal_next_hop() const {
  return next_hop_.Get();
}
inline void NextHopAttribute::_internal_set_next_hop(const std::string& value) {
  
  next_hop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NextHopAttribute::set_next_hop(std::string&& value) {
  
  next_hop_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.NextHopAttribute.next_hop)
}
inline void NextHopAttribute::set_next_hop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_hop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.NextHopAttribute.next_hop)
}
inline void NextHopAttribute::set_next_hop(const char* value,
    size_t size) {
  
  next_hop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.NextHopAttribute.next_hop)
}
inline std::string* NextHopAttribute::_internal_mutable_next_hop() {
  
  return next_hop_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NextHopAttribute::release_next_hop() {
  // @@protoc_insertion_point(field_release:apipb.NextHopAttribute.next_hop)
  return next_hop_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NextHopAttribute::set_allocated_next_hop(std::string* next_hop) {
  if (next_hop != nullptr) {
    
  } else {
    
  }
  next_hop_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_hop,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.NextHopAttribute.next_hop)
}

// -------------------------------------------------------------------

// MultiExitDiscAttribute

// uint32 med = 1;
inline void MultiExitDiscAttribute::clear_med() {
  med_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiExitDiscAttribute::_internal_med() const {
  return med_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiExitDiscAttribute::med() const {
  // @@protoc_insertion_point(field_get:apipb.MultiExitDiscAttribute.med)
  return _internal_med();
}
inline void MultiExitDiscAttribute::_internal_set_med(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  med_ = value;
}
inline void MultiExitDiscAttribute::set_med(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_med(value);
  // @@protoc_insertion_point(field_set:apipb.MultiExitDiscAttribute.med)
}

// -------------------------------------------------------------------

// LocalPrefAttribute

// uint32 local_pref = 1;
inline void LocalPrefAttribute::clear_local_pref() {
  local_pref_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalPrefAttribute::_internal_local_pref() const {
  return local_pref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalPrefAttribute::local_pref() const {
  // @@protoc_insertion_point(field_get:apipb.LocalPrefAttribute.local_pref)
  return _internal_local_pref();
}
inline void LocalPrefAttribute::_internal_set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_pref_ = value;
}
inline void LocalPrefAttribute::set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_pref(value);
  // @@protoc_insertion_point(field_set:apipb.LocalPrefAttribute.local_pref)
}

// -------------------------------------------------------------------

// AtomicAggregateAttribute

// -------------------------------------------------------------------

// AggregatorAttribute

// uint32 asn = 1;
inline void AggregatorAttribute::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregatorAttribute::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregatorAttribute::asn() const {
  // @@protoc_insertion_point(field_get:apipb.AggregatorAttribute.asn)
  return _internal_asn();
}
inline void AggregatorAttribute::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void AggregatorAttribute::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.AggregatorAttribute.asn)
}

// string address = 2;
inline void AggregatorAttribute::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AggregatorAttribute::address() const {
  // @@protoc_insertion_point(field_get:apipb.AggregatorAttribute.address)
  return _internal_address();
}
inline void AggregatorAttribute::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.AggregatorAttribute.address)
}
inline std::string* AggregatorAttribute::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.AggregatorAttribute.address)
  return _internal_mutable_address();
}
inline const std::string& AggregatorAttribute::_internal_address() const {
  return address_.Get();
}
inline void AggregatorAttribute::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AggregatorAttribute::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.AggregatorAttribute.address)
}
inline void AggregatorAttribute::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.AggregatorAttribute.address)
}
inline void AggregatorAttribute::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.AggregatorAttribute.address)
}
inline std::string* AggregatorAttribute::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AggregatorAttribute::release_address() {
  // @@protoc_insertion_point(field_release:apipb.AggregatorAttribute.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AggregatorAttribute::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.AggregatorAttribute.address)
}

// -------------------------------------------------------------------

// CommunitiesAttribute

// repeated uint32 communities = 1;
inline int CommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int CommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline void CommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:apipb.CommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline void CommunitiesAttribute::set_communities(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  communities_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.CommunitiesAttribute.communities)
}
inline void CommunitiesAttribute::_internal_add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  communities_.Add(value);
}
inline void CommunitiesAttribute::add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_communities(value);
  // @@protoc_insertion_point(field_add:apipb.CommunitiesAttribute.communities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommunitiesAttribute::_internal_communities() const {
  return communities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:apipb.CommunitiesAttribute.communities)
  return _internal_communities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommunitiesAttribute::_internal_mutable_communities() {
  return &communities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:apipb.CommunitiesAttribute.communities)
  return _internal_mutable_communities();
}

// -------------------------------------------------------------------

// OriginatorIdAttribute

// string id = 1;
inline void OriginatorIdAttribute::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OriginatorIdAttribute::id() const {
  // @@protoc_insertion_point(field_get:apipb.OriginatorIdAttribute.id)
  return _internal_id();
}
inline void OriginatorIdAttribute::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apipb.OriginatorIdAttribute.id)
}
inline std::string* OriginatorIdAttribute::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apipb.OriginatorIdAttribute.id)
  return _internal_mutable_id();
}
inline const std::string& OriginatorIdAttribute::_internal_id() const {
  return id_.Get();
}
inline void OriginatorIdAttribute::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OriginatorIdAttribute::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.OriginatorIdAttribute.id)
}
inline void OriginatorIdAttribute::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.OriginatorIdAttribute.id)
}
inline void OriginatorIdAttribute::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.OriginatorIdAttribute.id)
}
inline std::string* OriginatorIdAttribute::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OriginatorIdAttribute::release_id() {
  // @@protoc_insertion_point(field_release:apipb.OriginatorIdAttribute.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OriginatorIdAttribute::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.OriginatorIdAttribute.id)
}

// -------------------------------------------------------------------

// ClusterListAttribute

// repeated string ids = 1;
inline int ClusterListAttribute::_internal_ids_size() const {
  return ids_.size();
}
inline int ClusterListAttribute::ids_size() const {
  return _internal_ids_size();
}
inline void ClusterListAttribute::clear_ids() {
  ids_.Clear();
}
inline std::string* ClusterListAttribute::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:apipb.ClusterListAttribute.ids)
  return _internal_add_ids();
}
inline const std::string& ClusterListAttribute::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ClusterListAttribute::ids(int index) const {
  // @@protoc_insertion_point(field_get:apipb.ClusterListAttribute.ids)
  return _internal_ids(index);
}
inline std::string* ClusterListAttribute::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.ClusterListAttribute.ids)
  return ids_.Mutable(index);
}
inline void ClusterListAttribute::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apipb.ClusterListAttribute.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ClusterListAttribute::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apipb.ClusterListAttribute.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ClusterListAttribute::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apipb.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apipb.ClusterListAttribute.ids)
}
inline std::string* ClusterListAttribute::_internal_add_ids() {
  return ids_.Add();
}
inline void ClusterListAttribute::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apipb.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apipb.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apipb.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apipb.ClusterListAttribute.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClusterListAttribute::ids() const {
  // @@protoc_insertion_point(field_list:apipb.ClusterListAttribute.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClusterListAttribute::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:apipb.ClusterListAttribute.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// IPAddressPrefix

// uint32 prefix_len = 1;
inline void IPAddressPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPAddressPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPAddressPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:apipb.IPAddressPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void IPAddressPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void IPAddressPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:apipb.IPAddressPrefix.prefix_len)
}

// string prefix = 2;
inline void IPAddressPrefix::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPAddressPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.IPAddressPrefix.prefix)
  return _internal_prefix();
}
inline void IPAddressPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.IPAddressPrefix.prefix)
}
inline std::string* IPAddressPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.IPAddressPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& IPAddressPrefix::_internal_prefix() const {
  return prefix_.Get();
}
inline void IPAddressPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPAddressPrefix::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.IPAddressPrefix.prefix)
}
inline void IPAddressPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.IPAddressPrefix.prefix)
}
inline void IPAddressPrefix::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.IPAddressPrefix.prefix)
}
inline std::string* IPAddressPrefix::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPAddressPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.IPAddressPrefix.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPAddressPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.IPAddressPrefix.prefix)
}

// -------------------------------------------------------------------

// LabeledIPAddressPrefix

// repeated uint32 labels = 1;
inline int LabeledIPAddressPrefix::_internal_labels_size() const {
  return labels_.size();
}
inline int LabeledIPAddressPrefix::labels_size() const {
  return _internal_labels_size();
}
inline void LabeledIPAddressPrefix::clear_labels() {
  labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::labels(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LabeledIPAddressPrefix.labels)
  return _internal_labels(index);
}
inline void LabeledIPAddressPrefix::set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.LabeledIPAddressPrefix.labels)
}
inline void LabeledIPAddressPrefix::_internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Add(value);
}
inline void LabeledIPAddressPrefix::add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:apipb.LabeledIPAddressPrefix.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledIPAddressPrefix::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledIPAddressPrefix::labels() const {
  // @@protoc_insertion_point(field_list:apipb.LabeledIPAddressPrefix.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledIPAddressPrefix::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledIPAddressPrefix::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LabeledIPAddressPrefix.labels)
  return _internal_mutable_labels();
}

// uint32 prefix_len = 2;
inline void LabeledIPAddressPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:apipb.LabeledIPAddressPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void LabeledIPAddressPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void LabeledIPAddressPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:apipb.LabeledIPAddressPrefix.prefix_len)
}

// string prefix = 3;
inline void LabeledIPAddressPrefix::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabeledIPAddressPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.LabeledIPAddressPrefix.prefix)
  return _internal_prefix();
}
inline void LabeledIPAddressPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.LabeledIPAddressPrefix.prefix)
}
inline std::string* LabeledIPAddressPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.LabeledIPAddressPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& LabeledIPAddressPrefix::_internal_prefix() const {
  return prefix_.Get();
}
inline void LabeledIPAddressPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabeledIPAddressPrefix::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LabeledIPAddressPrefix.prefix)
}
inline void LabeledIPAddressPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LabeledIPAddressPrefix.prefix)
}
inline void LabeledIPAddressPrefix::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LabeledIPAddressPrefix.prefix)
}
inline std::string* LabeledIPAddressPrefix::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabeledIPAddressPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.LabeledIPAddressPrefix.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabeledIPAddressPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LabeledIPAddressPrefix.prefix)
}

// -------------------------------------------------------------------

// EncapsulationNLRI

// string address = 1;
inline void EncapsulationNLRI::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncapsulationNLRI::address() const {
  // @@protoc_insertion_point(field_get:apipb.EncapsulationNLRI.address)
  return _internal_address();
}
inline void EncapsulationNLRI::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.EncapsulationNLRI.address)
}
inline std::string* EncapsulationNLRI::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.EncapsulationNLRI.address)
  return _internal_mutable_address();
}
inline const std::string& EncapsulationNLRI::_internal_address() const {
  return address_.Get();
}
inline void EncapsulationNLRI::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncapsulationNLRI::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EncapsulationNLRI.address)
}
inline void EncapsulationNLRI::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EncapsulationNLRI.address)
}
inline void EncapsulationNLRI::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EncapsulationNLRI.address)
}
inline std::string* EncapsulationNLRI::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncapsulationNLRI::release_address() {
  // @@protoc_insertion_point(field_release:apipb.EncapsulationNLRI.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncapsulationNLRI::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EncapsulationNLRI.address)
}

// -------------------------------------------------------------------

// RouteDistinguisherTwoOctetASN

// uint32 admin = 1;
inline void RouteDistinguisherTwoOctetASN::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetASN::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetASN::admin() const {
  // @@protoc_insertion_point(field_get:apipb.RouteDistinguisherTwoOctetASN.admin)
  return _internal_admin();
}
inline void RouteDistinguisherTwoOctetASN::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void RouteDistinguisherTwoOctetASN::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RouteDistinguisherTwoOctetASN.admin)
}

// uint32 assigned = 2;
inline void RouteDistinguisherTwoOctetASN::clear_assigned() {
  assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetASN::_internal_assigned() const {
  return assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetASN::assigned() const {
  // @@protoc_insertion_point(field_get:apipb.RouteDistinguisherTwoOctetASN.assigned)
  return _internal_assigned();
}
inline void RouteDistinguisherTwoOctetASN::_internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assigned_ = value;
}
inline void RouteDistinguisherTwoOctetASN::set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assigned(value);
  // @@protoc_insertion_point(field_set:apipb.RouteDistinguisherTwoOctetASN.assigned)
}

// -------------------------------------------------------------------

// RouteDistinguisherIPAddress

// string admin = 1;
inline void RouteDistinguisherIPAddress::clear_admin() {
  admin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RouteDistinguisherIPAddress::admin() const {
  // @@protoc_insertion_point(field_get:apipb.RouteDistinguisherIPAddress.admin)
  return _internal_admin();
}
inline void RouteDistinguisherIPAddress::set_admin(const std::string& value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RouteDistinguisherIPAddress.admin)
}
inline std::string* RouteDistinguisherIPAddress::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:apipb.RouteDistinguisherIPAddress.admin)
  return _internal_mutable_admin();
}
inline const std::string& RouteDistinguisherIPAddress::_internal_admin() const {
  return admin_.Get();
}
inline void RouteDistinguisherIPAddress::_internal_set_admin(const std::string& value) {
  
  admin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RouteDistinguisherIPAddress::set_admin(std::string&& value) {
  
  admin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.RouteDistinguisherIPAddress.admin)
}
inline void RouteDistinguisherIPAddress::set_admin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  admin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.RouteDistinguisherIPAddress.admin)
}
inline void RouteDistinguisherIPAddress::set_admin(const char* value,
    size_t size) {
  
  admin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.RouteDistinguisherIPAddress.admin)
}
inline std::string* RouteDistinguisherIPAddress::_internal_mutable_admin() {
  
  return admin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RouteDistinguisherIPAddress::release_admin() {
  // @@protoc_insertion_point(field_release:apipb.RouteDistinguisherIPAddress.admin)
  return admin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouteDistinguisherIPAddress::set_allocated_admin(std::string* admin) {
  if (admin != nullptr) {
    
  } else {
    
  }
  admin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.RouteDistinguisherIPAddress.admin)
}

// uint32 assigned = 2;
inline void RouteDistinguisherIPAddress::clear_assigned() {
  assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherIPAddress::_internal_assigned() const {
  return assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherIPAddress::assigned() const {
  // @@protoc_insertion_point(field_get:apipb.RouteDistinguisherIPAddress.assigned)
  return _internal_assigned();
}
inline void RouteDistinguisherIPAddress::_internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assigned_ = value;
}
inline void RouteDistinguisherIPAddress::set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assigned(value);
  // @@protoc_insertion_point(field_set:apipb.RouteDistinguisherIPAddress.assigned)
}

// -------------------------------------------------------------------

// RouteDistinguisherFourOctetASN

// uint32 admin = 1;
inline void RouteDistinguisherFourOctetASN::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetASN::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetASN::admin() const {
  // @@protoc_insertion_point(field_get:apipb.RouteDistinguisherFourOctetASN.admin)
  return _internal_admin();
}
inline void RouteDistinguisherFourOctetASN::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void RouteDistinguisherFourOctetASN::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RouteDistinguisherFourOctetASN.admin)
}

// uint32 assigned = 2;
inline void RouteDistinguisherFourOctetASN::clear_assigned() {
  assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetASN::_internal_assigned() const {
  return assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetASN::assigned() const {
  // @@protoc_insertion_point(field_get:apipb.RouteDistinguisherFourOctetASN.assigned)
  return _internal_assigned();
}
inline void RouteDistinguisherFourOctetASN::_internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assigned_ = value;
}
inline void RouteDistinguisherFourOctetASN::set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assigned(value);
  // @@protoc_insertion_point(field_set:apipb.RouteDistinguisherFourOctetASN.assigned)
}

// -------------------------------------------------------------------

// EthernetSegmentIdentifier

// uint32 type = 1;
inline void EthernetSegmentIdentifier::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthernetSegmentIdentifier::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthernetSegmentIdentifier::type() const {
  // @@protoc_insertion_point(field_get:apipb.EthernetSegmentIdentifier.type)
  return _internal_type();
}
inline void EthernetSegmentIdentifier::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void EthernetSegmentIdentifier::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.EthernetSegmentIdentifier.type)
}

// bytes value = 2;
inline void EthernetSegmentIdentifier::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EthernetSegmentIdentifier::value() const {
  // @@protoc_insertion_point(field_get:apipb.EthernetSegmentIdentifier.value)
  return _internal_value();
}
inline void EthernetSegmentIdentifier::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.EthernetSegmentIdentifier.value)
}
inline std::string* EthernetSegmentIdentifier::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.EthernetSegmentIdentifier.value)
  return _internal_mutable_value();
}
inline const std::string& EthernetSegmentIdentifier::_internal_value() const {
  return value_.Get();
}
inline void EthernetSegmentIdentifier::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EthernetSegmentIdentifier::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EthernetSegmentIdentifier.value)
}
inline void EthernetSegmentIdentifier::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EthernetSegmentIdentifier.value)
}
inline void EthernetSegmentIdentifier::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EthernetSegmentIdentifier.value)
}
inline std::string* EthernetSegmentIdentifier::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EthernetSegmentIdentifier::release_value() {
  // @@protoc_insertion_point(field_release:apipb.EthernetSegmentIdentifier.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthernetSegmentIdentifier::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EthernetSegmentIdentifier.value)
}

// -------------------------------------------------------------------

// EVPNEthernetAutoDiscoveryRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNEthernetAutoDiscoveryRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNEthernetAutoDiscoveryRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetAutoDiscoveryRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetAutoDiscoveryRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetAutoDiscoveryRoute.rd)
  return _internal_rd();
}
inline void EVPNEthernetAutoDiscoveryRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNEthernetAutoDiscoveryRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.EVPNEthernetAutoDiscoveryRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNEthernetAutoDiscoveryRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNEthernetAutoDiscoveryRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNEthernetAutoDiscoveryRoute.rd)
}

// .apipb.EthernetSegmentIdentifier esi = 2;
inline bool EVPNEthernetAutoDiscoveryRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNEthernetAutoDiscoveryRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNEthernetAutoDiscoveryRoute::clear_esi() {
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNEthernetAutoDiscoveryRoute::_internal_esi() const {
  const ::apipb::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::EthernetSegmentIdentifier*>(
      &::apipb::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNEthernetAutoDiscoveryRoute::esi() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetAutoDiscoveryRoute.esi)
  return _internal_esi();
}
inline void EVPNEthernetAutoDiscoveryRoute::unsafe_arena_set_allocated_esi(
    ::apipb::EthernetSegmentIdentifier* esi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esi_);
  }
  esi_ = esi;
  if (esi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNEthernetAutoDiscoveryRoute.esi)
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::release_esi() {
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::unsafe_arena_release_esi() {
  // @@protoc_insertion_point(field_release:apipb.EVPNEthernetAutoDiscoveryRoute.esi)
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::EthernetSegmentIdentifier>(GetArena());
    esi_ = p;
  }
  return esi_;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNEthernetAutoDiscoveryRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNEthernetAutoDiscoveryRoute::set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esi);
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNEthernetAutoDiscoveryRoute.esi)
}

// uint32 ethernet_tag = 3;
inline void EVPNEthernetAutoDiscoveryRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetAutoDiscoveryRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNEthernetAutoDiscoveryRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNEthernetAutoDiscoveryRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNEthernetAutoDiscoveryRoute.ethernet_tag)
}

// uint32 label = 4;
inline void EVPNEthernetAutoDiscoveryRoute::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::label() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetAutoDiscoveryRoute.label)
  return _internal_label();
}
inline void EVPNEthernetAutoDiscoveryRoute::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void EVPNEthernetAutoDiscoveryRoute::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNEthernetAutoDiscoveryRoute.label)
}

// -------------------------------------------------------------------

// EVPNMACIPAdvertisementRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNMACIPAdvertisementRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNMACIPAdvertisementRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNMACIPAdvertisementRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNMACIPAdvertisementRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNMACIPAdvertisementRoute.rd)
  return _internal_rd();
}
inline void EVPNMACIPAdvertisementRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNMACIPAdvertisementRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.EVPNMACIPAdvertisementRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNMACIPAdvertisementRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNMACIPAdvertisementRoute.rd)
}

// .apipb.EthernetSegmentIdentifier esi = 2;
inline bool EVPNMACIPAdvertisementRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNMACIPAdvertisementRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNMACIPAdvertisementRoute::clear_esi() {
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNMACIPAdvertisementRoute::_internal_esi() const {
  const ::apipb::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::EthernetSegmentIdentifier*>(
      &::apipb::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNMACIPAdvertisementRoute::esi() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNMACIPAdvertisementRoute.esi)
  return _internal_esi();
}
inline void EVPNMACIPAdvertisementRoute::unsafe_arena_set_allocated_esi(
    ::apipb::EthernetSegmentIdentifier* esi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esi_);
  }
  esi_ = esi;
  if (esi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNMACIPAdvertisementRoute.esi)
}
inline ::apipb::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::release_esi() {
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::unsafe_arena_release_esi() {
  // @@protoc_insertion_point(field_release:apipb.EVPNMACIPAdvertisementRoute.esi)
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::EthernetSegmentIdentifier>(GetArena());
    esi_ = p;
  }
  return esi_;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNMACIPAdvertisementRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esi);
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNMACIPAdvertisementRoute.esi)
}

// uint32 ethernet_tag = 3;
inline void EVPNMACIPAdvertisementRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNMACIPAdvertisementRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNMACIPAdvertisementRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNMACIPAdvertisementRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNMACIPAdvertisementRoute.ethernet_tag)
}

// string mac_address = 4;
inline void EVPNMACIPAdvertisementRoute::clear_mac_address() {
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EVPNMACIPAdvertisementRoute::mac_address() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNMACIPAdvertisementRoute.mac_address)
  return _internal_mac_address();
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(const std::string& value) {
  _internal_set_mac_address(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNMACIPAdvertisementRoute.mac_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::mutable_mac_address() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNMACIPAdvertisementRoute.mac_address)
  return _internal_mutable_mac_address();
}
inline const std::string& EVPNMACIPAdvertisementRoute::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void EVPNMACIPAdvertisementRoute::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(std::string&& value) {
  
  mac_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EVPNMACIPAdvertisementRoute.mac_address)
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EVPNMACIPAdvertisementRoute.mac_address)
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(const char* value,
    size_t size) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EVPNMACIPAdvertisementRoute.mac_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EVPNMACIPAdvertisementRoute::release_mac_address() {
  // @@protoc_insertion_point(field_release:apipb.EVPNMACIPAdvertisementRoute.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNMACIPAdvertisementRoute.mac_address)
}

// string ip_address = 5;
inline void EVPNMACIPAdvertisementRoute::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EVPNMACIPAdvertisementRoute::ip_address() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNMACIPAdvertisementRoute.ip_address)
  return _internal_ip_address();
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNMACIPAdvertisementRoute.ip_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNMACIPAdvertisementRoute.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EVPNMACIPAdvertisementRoute::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void EVPNMACIPAdvertisementRoute::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EVPNMACIPAdvertisementRoute.ip_address)
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EVPNMACIPAdvertisementRoute.ip_address)
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EVPNMACIPAdvertisementRoute.ip_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EVPNMACIPAdvertisementRoute::release_ip_address() {
  // @@protoc_insertion_point(field_release:apipb.EVPNMACIPAdvertisementRoute.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNMACIPAdvertisementRoute.ip_address)
}

// repeated uint32 labels = 6;
inline int EVPNMACIPAdvertisementRoute::_internal_labels_size() const {
  return labels_.size();
}
inline int EVPNMACIPAdvertisementRoute::labels_size() const {
  return _internal_labels_size();
}
inline void EVPNMACIPAdvertisementRoute::clear_labels() {
  labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::labels(int index) const {
  // @@protoc_insertion_point(field_get:apipb.EVPNMACIPAdvertisementRoute.labels)
  return _internal_labels(index);
}
inline void EVPNMACIPAdvertisementRoute::set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.EVPNMACIPAdvertisementRoute.labels)
}
inline void EVPNMACIPAdvertisementRoute::_internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Add(value);
}
inline void EVPNMACIPAdvertisementRoute::add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:apipb.EVPNMACIPAdvertisementRoute.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EVPNMACIPAdvertisementRoute::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EVPNMACIPAdvertisementRoute::labels() const {
  // @@protoc_insertion_point(field_list:apipb.EVPNMACIPAdvertisementRoute.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EVPNMACIPAdvertisementRoute::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EVPNMACIPAdvertisementRoute::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:apipb.EVPNMACIPAdvertisementRoute.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// EVPNInclusiveMulticastEthernetTagRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNInclusiveMulticastEthernetTagRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNInclusiveMulticastEthernetTagRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNInclusiveMulticastEthernetTagRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNInclusiveMulticastEthernetTagRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNInclusiveMulticastEthernetTagRoute.rd)
  return _internal_rd();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNInclusiveMulticastEthernetTagRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.EVPNInclusiveMulticastEthernetTagRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNInclusiveMulticastEthernetTagRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNInclusiveMulticastEthernetTagRoute.rd)
}

// uint32 ethernet_tag = 2;
inline void EVPNInclusiveMulticastEthernetTagRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNInclusiveMulticastEthernetTagRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNInclusiveMulticastEthernetTagRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNInclusiveMulticastEthernetTagRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNInclusiveMulticastEthernetTagRoute.ethernet_tag)
}

// string ip_address = 3;
inline void EVPNInclusiveMulticastEthernetTagRoute::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EVPNInclusiveMulticastEthernetTagRoute::ip_address() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
  return _internal_ip_address();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline std::string* EVPNInclusiveMulticastEthernetTagRoute::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EVPNInclusiveMulticastEthernetTagRoute::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline std::string* EVPNInclusiveMulticastEthernetTagRoute::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EVPNInclusiveMulticastEthernetTagRoute::release_ip_address() {
  // @@protoc_insertion_point(field_release:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}

// -------------------------------------------------------------------

// EVPNEthernetSegmentRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNEthernetSegmentRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNEthernetSegmentRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetSegmentRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetSegmentRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetSegmentRoute.rd)
  return _internal_rd();
}
inline void EVPNEthernetSegmentRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNEthernetSegmentRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.EVPNEthernetSegmentRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNEthernetSegmentRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNEthernetSegmentRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNEthernetSegmentRoute.rd)
}

// .apipb.EthernetSegmentIdentifier esi = 2;
inline bool EVPNEthernetSegmentRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNEthernetSegmentRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNEthernetSegmentRoute::clear_esi() {
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNEthernetSegmentRoute::_internal_esi() const {
  const ::apipb::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::EthernetSegmentIdentifier*>(
      &::apipb::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNEthernetSegmentRoute::esi() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetSegmentRoute.esi)
  return _internal_esi();
}
inline void EVPNEthernetSegmentRoute::unsafe_arena_set_allocated_esi(
    ::apipb::EthernetSegmentIdentifier* esi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esi_);
  }
  esi_ = esi;
  if (esi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNEthernetSegmentRoute.esi)
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::release_esi() {
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::unsafe_arena_release_esi() {
  // @@protoc_insertion_point(field_release:apipb.EVPNEthernetSegmentRoute.esi)
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::EthernetSegmentIdentifier>(GetArena());
    esi_ = p;
  }
  return esi_;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNEthernetSegmentRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNEthernetSegmentRoute::set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esi);
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNEthernetSegmentRoute.esi)
}

// string ip_address = 3;
inline void EVPNEthernetSegmentRoute::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EVPNEthernetSegmentRoute::ip_address() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNEthernetSegmentRoute.ip_address)
  return _internal_ip_address();
}
inline void EVPNEthernetSegmentRoute::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNEthernetSegmentRoute.ip_address)
}
inline std::string* EVPNEthernetSegmentRoute::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNEthernetSegmentRoute.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EVPNEthernetSegmentRoute::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void EVPNEthernetSegmentRoute::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EVPNEthernetSegmentRoute::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EVPNEthernetSegmentRoute.ip_address)
}
inline void EVPNEthernetSegmentRoute::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EVPNEthernetSegmentRoute.ip_address)
}
inline void EVPNEthernetSegmentRoute::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EVPNEthernetSegmentRoute.ip_address)
}
inline std::string* EVPNEthernetSegmentRoute::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EVPNEthernetSegmentRoute::release_ip_address() {
  // @@protoc_insertion_point(field_release:apipb.EVPNEthernetSegmentRoute.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EVPNEthernetSegmentRoute::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNEthernetSegmentRoute.ip_address)
}

// -------------------------------------------------------------------

// EVPNIPPrefixRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNIPPrefixRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNIPPrefixRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPPrefixRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPPrefixRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.rd)
  return _internal_rd();
}
inline void EVPNIPPrefixRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNIPPrefixRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.EVPNIPPrefixRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNIPPrefixRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNIPPrefixRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNIPPrefixRoute.rd)
}

// .apipb.EthernetSegmentIdentifier esi = 2;
inline bool EVPNIPPrefixRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNIPPrefixRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNIPPrefixRoute::clear_esi() {
  if (GetArena() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNIPPrefixRoute::_internal_esi() const {
  const ::apipb::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::EthernetSegmentIdentifier*>(
      &::apipb::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::apipb::EthernetSegmentIdentifier& EVPNIPPrefixRoute::esi() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.esi)
  return _internal_esi();
}
inline void EVPNIPPrefixRoute::unsafe_arena_set_allocated_esi(
    ::apipb::EthernetSegmentIdentifier* esi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esi_);
  }
  esi_ = esi;
  if (esi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNIPPrefixRoute.esi)
}
inline ::apipb::EthernetSegmentIdentifier* EVPNIPPrefixRoute::release_esi() {
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNIPPrefixRoute::unsafe_arena_release_esi() {
  // @@protoc_insertion_point(field_release:apipb.EVPNIPPrefixRoute.esi)
  
  ::apipb::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNIPPrefixRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::EthernetSegmentIdentifier>(GetArena());
    esi_ = p;
  }
  return esi_;
}
inline ::apipb::EthernetSegmentIdentifier* EVPNIPPrefixRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNIPPrefixRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNIPPrefixRoute::set_allocated_esi(::apipb::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esi);
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNIPPrefixRoute.esi)
}

// uint32 ethernet_tag = 3;
inline void EVPNIPPrefixRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNIPPrefixRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNIPPrefixRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNIPPrefixRoute.ethernet_tag)
}

// string ip_prefix = 4;
inline void EVPNIPPrefixRoute::clear_ip_prefix() {
  ip_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EVPNIPPrefixRoute::ip_prefix() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.ip_prefix)
  return _internal_ip_prefix();
}
inline void EVPNIPPrefixRoute::set_ip_prefix(const std::string& value) {
  _internal_set_ip_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNIPPrefixRoute.ip_prefix)
}
inline std::string* EVPNIPPrefixRoute::mutable_ip_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNIPPrefixRoute.ip_prefix)
  return _internal_mutable_ip_prefix();
}
inline const std::string& EVPNIPPrefixRoute::_internal_ip_prefix() const {
  return ip_prefix_.Get();
}
inline void EVPNIPPrefixRoute::_internal_set_ip_prefix(const std::string& value) {
  
  ip_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EVPNIPPrefixRoute::set_ip_prefix(std::string&& value) {
  
  ip_prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EVPNIPPrefixRoute.ip_prefix)
}
inline void EVPNIPPrefixRoute::set_ip_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EVPNIPPrefixRoute.ip_prefix)
}
inline void EVPNIPPrefixRoute::set_ip_prefix(const char* value,
    size_t size) {
  
  ip_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EVPNIPPrefixRoute.ip_prefix)
}
inline std::string* EVPNIPPrefixRoute::_internal_mutable_ip_prefix() {
  
  return ip_prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EVPNIPPrefixRoute::release_ip_prefix() {
  // @@protoc_insertion_point(field_release:apipb.EVPNIPPrefixRoute.ip_prefix)
  return ip_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EVPNIPPrefixRoute::set_allocated_ip_prefix(std::string* ip_prefix) {
  if (ip_prefix != nullptr) {
    
  } else {
    
  }
  ip_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNIPPrefixRoute.ip_prefix)
}

// uint32 ip_prefix_len = 5;
inline void EVPNIPPrefixRoute::clear_ip_prefix_len() {
  ip_prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::_internal_ip_prefix_len() const {
  return ip_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::ip_prefix_len() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.ip_prefix_len)
  return _internal_ip_prefix_len();
}
inline void EVPNIPPrefixRoute::_internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ip_prefix_len_ = value;
}
inline void EVPNIPPrefixRoute::set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_prefix_len(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNIPPrefixRoute.ip_prefix_len)
}

// string gw_address = 6;
inline void EVPNIPPrefixRoute::clear_gw_address() {
  gw_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EVPNIPPrefixRoute::gw_address() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.gw_address)
  return _internal_gw_address();
}
inline void EVPNIPPrefixRoute::set_gw_address(const std::string& value) {
  _internal_set_gw_address(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNIPPrefixRoute.gw_address)
}
inline std::string* EVPNIPPrefixRoute::mutable_gw_address() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNIPPrefixRoute.gw_address)
  return _internal_mutable_gw_address();
}
inline const std::string& EVPNIPPrefixRoute::_internal_gw_address() const {
  return gw_address_.Get();
}
inline void EVPNIPPrefixRoute::_internal_set_gw_address(const std::string& value) {
  
  gw_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EVPNIPPrefixRoute::set_gw_address(std::string&& value) {
  
  gw_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.EVPNIPPrefixRoute.gw_address)
}
inline void EVPNIPPrefixRoute::set_gw_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gw_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.EVPNIPPrefixRoute.gw_address)
}
inline void EVPNIPPrefixRoute::set_gw_address(const char* value,
    size_t size) {
  
  gw_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.EVPNIPPrefixRoute.gw_address)
}
inline std::string* EVPNIPPrefixRoute::_internal_mutable_gw_address() {
  
  return gw_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EVPNIPPrefixRoute::release_gw_address() {
  // @@protoc_insertion_point(field_release:apipb.EVPNIPPrefixRoute.gw_address)
  return gw_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EVPNIPPrefixRoute::set_allocated_gw_address(std::string* gw_address) {
  if (gw_address != nullptr) {
    
  } else {
    
  }
  gw_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gw_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNIPPrefixRoute.gw_address)
}

// uint32 label = 7;
inline void EVPNIPPrefixRoute::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::label() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPPrefixRoute.label)
  return _internal_label();
}
inline void EVPNIPPrefixRoute::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void EVPNIPPrefixRoute::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNIPPrefixRoute.label)
}

// -------------------------------------------------------------------

// EVPNIPMSIRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNIPMSIRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNIPMSIRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPMSIRoute.rd)
  return _internal_rd();
}
inline void EVPNIPMSIRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNIPMSIRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.EVPNIPMSIRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNIPMSIRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNIPMSIRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNIPMSIRoute.rd)
}

// uint32 ethernet_tag = 2;
inline void EVPNIPMSIRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPMSIRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPMSIRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPMSIRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNIPMSIRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNIPMSIRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:apipb.EVPNIPMSIRoute.ethernet_tag)
}

// .google.protobuf.Any rt = 3;
inline bool EVPNIPMSIRoute::_internal_has_rt() const {
  return this != internal_default_instance() && rt_ != nullptr;
}
inline bool EVPNIPMSIRoute::has_rt() const {
  return _internal_has_rt();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::_internal_rt() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rt_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::rt() const {
  // @@protoc_insertion_point(field_get:apipb.EVPNIPMSIRoute.rt)
  return _internal_rt();
}
inline void EVPNIPMSIRoute::unsafe_arena_set_allocated_rt(
    PROTOBUF_NAMESPACE_ID::Any* rt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_);
  }
  rt_ = rt;
  if (rt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.EVPNIPMSIRoute.rt)
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::release_rt() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rt_;
  rt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::unsafe_arena_release_rt() {
  // @@protoc_insertion_point(field_release:apipb.EVPNIPMSIRoute.rt)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rt_;
  rt_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::_internal_mutable_rt() {
  
  if (rt_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rt_ = p;
  }
  return rt_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::mutable_rt() {
  // @@protoc_insertion_point(field_mutable:apipb.EVPNIPMSIRoute.rt)
  return _internal_mutable_rt();
}
inline void EVPNIPMSIRoute::set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_);
  }
  if (rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt)->GetArena();
    if (message_arena != submessage_arena) {
      rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt, submessage_arena);
    }
    
  } else {
    
  }
  rt_ = rt;
  // @@protoc_insertion_point(field_set_allocated:apipb.EVPNIPMSIRoute.rt)
}

// -------------------------------------------------------------------

// SRPolicyNLRI

// uint32 length = 1;
inline void SRPolicyNLRI::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRPolicyNLRI::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRPolicyNLRI::length() const {
  // @@protoc_insertion_point(field_get:apipb.SRPolicyNLRI.length)
  return _internal_length();
}
inline void SRPolicyNLRI::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void SRPolicyNLRI::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apipb.SRPolicyNLRI.length)
}

// uint32 distinguisher = 2;
inline void SRPolicyNLRI::clear_distinguisher() {
  distinguisher_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRPolicyNLRI::_internal_distinguisher() const {
  return distinguisher_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRPolicyNLRI::distinguisher() const {
  // @@protoc_insertion_point(field_get:apipb.SRPolicyNLRI.distinguisher)
  return _internal_distinguisher();
}
inline void SRPolicyNLRI::_internal_set_distinguisher(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  distinguisher_ = value;
}
inline void SRPolicyNLRI::set_distinguisher(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distinguisher(value);
  // @@protoc_insertion_point(field_set:apipb.SRPolicyNLRI.distinguisher)
}

// uint32 color = 3;
inline void SRPolicyNLRI::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRPolicyNLRI::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRPolicyNLRI::color() const {
  // @@protoc_insertion_point(field_get:apipb.SRPolicyNLRI.color)
  return _internal_color();
}
inline void SRPolicyNLRI::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void SRPolicyNLRI::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apipb.SRPolicyNLRI.color)
}

// bytes endpoint = 4;
inline void SRPolicyNLRI::clear_endpoint() {
  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SRPolicyNLRI::endpoint() const {
  // @@protoc_insertion_point(field_get:apipb.SRPolicyNLRI.endpoint)
  return _internal_endpoint();
}
inline void SRPolicyNLRI::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:apipb.SRPolicyNLRI.endpoint)
}
inline std::string* SRPolicyNLRI::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:apipb.SRPolicyNLRI.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& SRPolicyNLRI::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void SRPolicyNLRI::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SRPolicyNLRI::set_endpoint(std::string&& value) {
  
  endpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.SRPolicyNLRI.endpoint)
}
inline void SRPolicyNLRI::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.SRPolicyNLRI.endpoint)
}
inline void SRPolicyNLRI::set_endpoint(const void* value,
    size_t size) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.SRPolicyNLRI.endpoint)
}
inline std::string* SRPolicyNLRI::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SRPolicyNLRI::release_endpoint() {
  // @@protoc_insertion_point(field_release:apipb.SRPolicyNLRI.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRPolicyNLRI::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.SRPolicyNLRI.endpoint)
}

// -------------------------------------------------------------------

// LabeledVPNIPAddressPrefix

// repeated uint32 labels = 1;
inline int LabeledVPNIPAddressPrefix::_internal_labels_size() const {
  return labels_.size();
}
inline int LabeledVPNIPAddressPrefix::labels_size() const {
  return _internal_labels_size();
}
inline void LabeledVPNIPAddressPrefix::clear_labels() {
  labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::labels(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LabeledVPNIPAddressPrefix.labels)
  return _internal_labels(index);
}
inline void LabeledVPNIPAddressPrefix::set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.LabeledVPNIPAddressPrefix.labels)
}
inline void LabeledVPNIPAddressPrefix::_internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Add(value);
}
inline void LabeledVPNIPAddressPrefix::add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:apipb.LabeledVPNIPAddressPrefix.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledVPNIPAddressPrefix::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledVPNIPAddressPrefix::labels() const {
  // @@protoc_insertion_point(field_list:apipb.LabeledVPNIPAddressPrefix.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledVPNIPAddressPrefix::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledVPNIPAddressPrefix::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LabeledVPNIPAddressPrefix.labels)
  return _internal_mutable_labels();
}

// .google.protobuf.Any rd = 2;
inline bool LabeledVPNIPAddressPrefix::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool LabeledVPNIPAddressPrefix::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& LabeledVPNIPAddressPrefix::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& LabeledVPNIPAddressPrefix::rd() const {
  // @@protoc_insertion_point(field_get:apipb.LabeledVPNIPAddressPrefix.rd)
  return _internal_rd();
}
inline void LabeledVPNIPAddressPrefix::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LabeledVPNIPAddressPrefix.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.LabeledVPNIPAddressPrefix.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.LabeledVPNIPAddressPrefix.rd)
  return _internal_mutable_rd();
}
inline void LabeledVPNIPAddressPrefix::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.LabeledVPNIPAddressPrefix.rd)
}

// uint32 prefix_len = 3;
inline void LabeledVPNIPAddressPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:apipb.LabeledVPNIPAddressPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void LabeledVPNIPAddressPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void LabeledVPNIPAddressPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:apipb.LabeledVPNIPAddressPrefix.prefix_len)
}

// string prefix = 4;
inline void LabeledVPNIPAddressPrefix::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabeledVPNIPAddressPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.LabeledVPNIPAddressPrefix.prefix)
  return _internal_prefix();
}
inline void LabeledVPNIPAddressPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.LabeledVPNIPAddressPrefix.prefix)
}
inline std::string* LabeledVPNIPAddressPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.LabeledVPNIPAddressPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& LabeledVPNIPAddressPrefix::_internal_prefix() const {
  return prefix_.Get();
}
inline void LabeledVPNIPAddressPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabeledVPNIPAddressPrefix::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LabeledVPNIPAddressPrefix.prefix)
}
inline void LabeledVPNIPAddressPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LabeledVPNIPAddressPrefix.prefix)
}
inline void LabeledVPNIPAddressPrefix::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LabeledVPNIPAddressPrefix.prefix)
}
inline std::string* LabeledVPNIPAddressPrefix::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabeledVPNIPAddressPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.LabeledVPNIPAddressPrefix.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabeledVPNIPAddressPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LabeledVPNIPAddressPrefix.prefix)
}

// -------------------------------------------------------------------

// RouteTargetMembershipNLRI

// uint32 asn = 1;
inline void RouteTargetMembershipNLRI::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipNLRI::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipNLRI::asn() const {
  // @@protoc_insertion_point(field_get:apipb.RouteTargetMembershipNLRI.asn)
  return _internal_asn();
}
inline void RouteTargetMembershipNLRI::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void RouteTargetMembershipNLRI::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.RouteTargetMembershipNLRI.asn)
}

// .google.protobuf.Any rt = 2;
inline bool RouteTargetMembershipNLRI::_internal_has_rt() const {
  return this != internal_default_instance() && rt_ != nullptr;
}
inline bool RouteTargetMembershipNLRI::has_rt() const {
  return _internal_has_rt();
}
inline const PROTOBUF_NAMESPACE_ID::Any& RouteTargetMembershipNLRI::_internal_rt() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rt_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& RouteTargetMembershipNLRI::rt() const {
  // @@protoc_insertion_point(field_get:apipb.RouteTargetMembershipNLRI.rt)
  return _internal_rt();
}
inline void RouteTargetMembershipNLRI::unsafe_arena_set_allocated_rt(
    PROTOBUF_NAMESPACE_ID::Any* rt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_);
  }
  rt_ = rt;
  if (rt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.RouteTargetMembershipNLRI.rt)
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::release_rt() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rt_;
  rt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::unsafe_arena_release_rt() {
  // @@protoc_insertion_point(field_release:apipb.RouteTargetMembershipNLRI.rt)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rt_;
  rt_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::_internal_mutable_rt() {
  
  if (rt_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rt_ = p;
  }
  return rt_;
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::mutable_rt() {
  // @@protoc_insertion_point(field_mutable:apipb.RouteTargetMembershipNLRI.rt)
  return _internal_mutable_rt();
}
inline void RouteTargetMembershipNLRI::set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_);
  }
  if (rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt)->GetArena();
    if (message_arena != submessage_arena) {
      rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt, submessage_arena);
    }
    
  } else {
    
  }
  rt_ = rt;
  // @@protoc_insertion_point(field_set_allocated:apipb.RouteTargetMembershipNLRI.rt)
}

// -------------------------------------------------------------------

// FlowSpecIPPrefix

// uint32 type = 1;
inline void FlowSpecIPPrefix::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::type() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecIPPrefix.type)
  return _internal_type();
}
inline void FlowSpecIPPrefix::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void FlowSpecIPPrefix::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecIPPrefix.type)
}

// uint32 prefix_len = 2;
inline void FlowSpecIPPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecIPPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void FlowSpecIPPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void FlowSpecIPPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecIPPrefix.prefix_len)
}

// string prefix = 3;
inline void FlowSpecIPPrefix::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowSpecIPPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecIPPrefix.prefix)
  return _internal_prefix();
}
inline void FlowSpecIPPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecIPPrefix.prefix)
}
inline std::string* FlowSpecIPPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.FlowSpecIPPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& FlowSpecIPPrefix::_internal_prefix() const {
  return prefix_.Get();
}
inline void FlowSpecIPPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowSpecIPPrefix::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.FlowSpecIPPrefix.prefix)
}
inline void FlowSpecIPPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.FlowSpecIPPrefix.prefix)
}
inline void FlowSpecIPPrefix::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.FlowSpecIPPrefix.prefix)
}
inline std::string* FlowSpecIPPrefix::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowSpecIPPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.FlowSpecIPPrefix.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowSpecIPPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.FlowSpecIPPrefix.prefix)
}

// uint32 offset = 4;
inline void FlowSpecIPPrefix::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::offset() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecIPPrefix.offset)
  return _internal_offset();
}
inline void FlowSpecIPPrefix::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void FlowSpecIPPrefix::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecIPPrefix.offset)
}

// -------------------------------------------------------------------

// FlowSpecMAC

// uint32 type = 1;
inline void FlowSpecMAC::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecMAC::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecMAC::type() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecMAC.type)
  return _internal_type();
}
inline void FlowSpecMAC::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void FlowSpecMAC::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecMAC.type)
}

// string address = 2;
inline void FlowSpecMAC::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowSpecMAC::address() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecMAC.address)
  return _internal_address();
}
inline void FlowSpecMAC::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecMAC.address)
}
inline std::string* FlowSpecMAC::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.FlowSpecMAC.address)
  return _internal_mutable_address();
}
inline const std::string& FlowSpecMAC::_internal_address() const {
  return address_.Get();
}
inline void FlowSpecMAC::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowSpecMAC::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.FlowSpecMAC.address)
}
inline void FlowSpecMAC::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.FlowSpecMAC.address)
}
inline void FlowSpecMAC::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.FlowSpecMAC.address)
}
inline std::string* FlowSpecMAC::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowSpecMAC::release_address() {
  // @@protoc_insertion_point(field_release:apipb.FlowSpecMAC.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowSpecMAC::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.FlowSpecMAC.address)
}

// -------------------------------------------------------------------

// FlowSpecComponentItem

// uint32 op = 1;
inline void FlowSpecComponentItem::clear_op() {
  op_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponentItem::_internal_op() const {
  return op_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponentItem::op() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecComponentItem.op)
  return _internal_op();
}
inline void FlowSpecComponentItem::_internal_set_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  op_ = value;
}
inline void FlowSpecComponentItem::set_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecComponentItem.op)
}

// uint64 value = 2;
inline void FlowSpecComponentItem::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowSpecComponentItem::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowSpecComponentItem::value() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecComponentItem.value)
  return _internal_value();
}
inline void FlowSpecComponentItem::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void FlowSpecComponentItem::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecComponentItem.value)
}

// -------------------------------------------------------------------

// FlowSpecComponent

// uint32 type = 1;
inline void FlowSpecComponent::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponent::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponent::type() const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecComponent.type)
  return _internal_type();
}
inline void FlowSpecComponent::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void FlowSpecComponent::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.FlowSpecComponent.type)
}

// repeated .apipb.FlowSpecComponentItem items = 2;
inline int FlowSpecComponent::_internal_items_size() const {
  return items_.size();
}
inline int FlowSpecComponent::items_size() const {
  return _internal_items_size();
}
inline void FlowSpecComponent::clear_items() {
  items_.Clear();
}
inline ::apipb::FlowSpecComponentItem* FlowSpecComponent::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.FlowSpecComponent.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::FlowSpecComponentItem >*
FlowSpecComponent::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:apipb.FlowSpecComponent.items)
  return &items_;
}
inline const ::apipb::FlowSpecComponentItem& FlowSpecComponent::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::apipb::FlowSpecComponentItem& FlowSpecComponent::items(int index) const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecComponent.items)
  return _internal_items(index);
}
inline ::apipb::FlowSpecComponentItem* FlowSpecComponent::_internal_add_items() {
  return items_.Add();
}
inline ::apipb::FlowSpecComponentItem* FlowSpecComponent::add_items() {
  // @@protoc_insertion_point(field_add:apipb.FlowSpecComponent.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::FlowSpecComponentItem >&
FlowSpecComponent::items() const {
  // @@protoc_insertion_point(field_list:apipb.FlowSpecComponent.items)
  return items_;
}

// -------------------------------------------------------------------

// FlowSpecNLRI

// repeated .google.protobuf.Any rules = 1;
inline int FlowSpecNLRI::_internal_rules_size() const {
  return rules_.size();
}
inline int FlowSpecNLRI::rules_size() const {
  return _internal_rules_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* FlowSpecNLRI::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.FlowSpecNLRI.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
FlowSpecNLRI::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:apipb.FlowSpecNLRI.rules)
  return &rules_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& FlowSpecNLRI::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& FlowSpecNLRI::rules(int index) const {
  // @@protoc_insertion_point(field_get:apipb.FlowSpecNLRI.rules)
  return _internal_rules(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* FlowSpecNLRI::_internal_add_rules() {
  return rules_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* FlowSpecNLRI::add_rules() {
  // @@protoc_insertion_point(field_add:apipb.FlowSpecNLRI.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
FlowSpecNLRI::rules() const {
  // @@protoc_insertion_point(field_list:apipb.FlowSpecNLRI.rules)
  return rules_;
}

// -------------------------------------------------------------------

// VPNFlowSpecNLRI

// .google.protobuf.Any rd = 1;
inline bool VPNFlowSpecNLRI::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool VPNFlowSpecNLRI::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::rd() const {
  // @@protoc_insertion_point(field_get:apipb.VPNFlowSpecNLRI.rd)
  return _internal_rd();
}
inline void VPNFlowSpecNLRI::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.VPNFlowSpecNLRI.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.VPNFlowSpecNLRI.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.VPNFlowSpecNLRI.rd)
  return _internal_mutable_rd();
}
inline void VPNFlowSpecNLRI::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.VPNFlowSpecNLRI.rd)
}

// repeated .google.protobuf.Any rules = 2;
inline int VPNFlowSpecNLRI::_internal_rules_size() const {
  return rules_.size();
}
inline int VPNFlowSpecNLRI::rules_size() const {
  return _internal_rules_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.VPNFlowSpecNLRI.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
VPNFlowSpecNLRI::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:apipb.VPNFlowSpecNLRI.rules)
  return &rules_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::rules(int index) const {
  // @@protoc_insertion_point(field_get:apipb.VPNFlowSpecNLRI.rules)
  return _internal_rules(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::_internal_add_rules() {
  return rules_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::add_rules() {
  // @@protoc_insertion_point(field_add:apipb.VPNFlowSpecNLRI.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
VPNFlowSpecNLRI::rules() const {
  // @@protoc_insertion_point(field_list:apipb.VPNFlowSpecNLRI.rules)
  return rules_;
}

// -------------------------------------------------------------------

// OpaqueNLRI

// bytes key = 1;
inline void OpaqueNLRI::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpaqueNLRI::key() const {
  // @@protoc_insertion_point(field_get:apipb.OpaqueNLRI.key)
  return _internal_key();
}
inline void OpaqueNLRI::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:apipb.OpaqueNLRI.key)
}
inline std::string* OpaqueNLRI::mutable_key() {
  // @@protoc_insertion_point(field_mutable:apipb.OpaqueNLRI.key)
  return _internal_mutable_key();
}
inline const std::string& OpaqueNLRI::_internal_key() const {
  return key_.Get();
}
inline void OpaqueNLRI::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpaqueNLRI::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.OpaqueNLRI.key)
}
inline void OpaqueNLRI::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.OpaqueNLRI.key)
}
inline void OpaqueNLRI::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.OpaqueNLRI.key)
}
inline std::string* OpaqueNLRI::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpaqueNLRI::release_key() {
  // @@protoc_insertion_point(field_release:apipb.OpaqueNLRI.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpaqueNLRI::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.OpaqueNLRI.key)
}

// bytes value = 2;
inline void OpaqueNLRI::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpaqueNLRI::value() const {
  // @@protoc_insertion_point(field_get:apipb.OpaqueNLRI.value)
  return _internal_value();
}
inline void OpaqueNLRI::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.OpaqueNLRI.value)
}
inline std::string* OpaqueNLRI::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.OpaqueNLRI.value)
  return _internal_mutable_value();
}
inline const std::string& OpaqueNLRI::_internal_value() const {
  return value_.Get();
}
inline void OpaqueNLRI::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpaqueNLRI::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.OpaqueNLRI.value)
}
inline void OpaqueNLRI::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.OpaqueNLRI.value)
}
inline void OpaqueNLRI::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.OpaqueNLRI.value)
}
inline std::string* OpaqueNLRI::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpaqueNLRI::release_value() {
  // @@protoc_insertion_point(field_release:apipb.OpaqueNLRI.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpaqueNLRI::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.OpaqueNLRI.value)
}

// -------------------------------------------------------------------

// LsNodeDescriptor

// uint32 asn = 1;
inline void LsNodeDescriptor::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::asn() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.asn)
  return _internal_asn();
}
inline void LsNodeDescriptor::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void LsNodeDescriptor::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.asn)
}

// uint32 bgp_ls_id = 2;
inline void LsNodeDescriptor::clear_bgp_ls_id() {
  bgp_ls_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_bgp_ls_id() const {
  return bgp_ls_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::bgp_ls_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.bgp_ls_id)
  return _internal_bgp_ls_id();
}
inline void LsNodeDescriptor::_internal_set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bgp_ls_id_ = value;
}
inline void LsNodeDescriptor::set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bgp_ls_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.bgp_ls_id)
}

// uint32 ospf_area_id = 3;
inline void LsNodeDescriptor::clear_ospf_area_id() {
  ospf_area_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_ospf_area_id() const {
  return ospf_area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::ospf_area_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.ospf_area_id)
  return _internal_ospf_area_id();
}
inline void LsNodeDescriptor::_internal_set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ospf_area_id_ = value;
}
inline void LsNodeDescriptor::set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ospf_area_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.ospf_area_id)
}

// bool pseudonode = 4;
inline void LsNodeDescriptor::clear_pseudonode() {
  pseudonode_ = false;
}
inline bool LsNodeDescriptor::_internal_pseudonode() const {
  return pseudonode_;
}
inline bool LsNodeDescriptor::pseudonode() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.pseudonode)
  return _internal_pseudonode();
}
inline void LsNodeDescriptor::_internal_set_pseudonode(bool value) {
  
  pseudonode_ = value;
}
inline void LsNodeDescriptor::set_pseudonode(bool value) {
  _internal_set_pseudonode(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.pseudonode)
}

// string igp_router_id = 5;
inline void LsNodeDescriptor::clear_igp_router_id() {
  igp_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsNodeDescriptor::igp_router_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.igp_router_id)
  return _internal_igp_router_id();
}
inline void LsNodeDescriptor::set_igp_router_id(const std::string& value) {
  _internal_set_igp_router_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.igp_router_id)
}
inline std::string* LsNodeDescriptor::mutable_igp_router_id() {
  // @@protoc_insertion_point(field_mutable:apipb.LsNodeDescriptor.igp_router_id)
  return _internal_mutable_igp_router_id();
}
inline const std::string& LsNodeDescriptor::_internal_igp_router_id() const {
  return igp_router_id_.Get();
}
inline void LsNodeDescriptor::_internal_set_igp_router_id(const std::string& value) {
  
  igp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsNodeDescriptor::set_igp_router_id(std::string&& value) {
  
  igp_router_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsNodeDescriptor.igp_router_id)
}
inline void LsNodeDescriptor::set_igp_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  igp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsNodeDescriptor.igp_router_id)
}
inline void LsNodeDescriptor::set_igp_router_id(const char* value,
    size_t size) {
  
  igp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsNodeDescriptor.igp_router_id)
}
inline std::string* LsNodeDescriptor::_internal_mutable_igp_router_id() {
  
  return igp_router_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsNodeDescriptor::release_igp_router_id() {
  // @@protoc_insertion_point(field_release:apipb.LsNodeDescriptor.igp_router_id)
  return igp_router_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsNodeDescriptor::set_allocated_igp_router_id(std::string* igp_router_id) {
  if (igp_router_id != nullptr) {
    
  } else {
    
  }
  igp_router_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), igp_router_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsNodeDescriptor.igp_router_id)
}

// string bgp_router_id = 6;
inline void LsNodeDescriptor::clear_bgp_router_id() {
  bgp_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsNodeDescriptor::bgp_router_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.bgp_router_id)
  return _internal_bgp_router_id();
}
inline void LsNodeDescriptor::set_bgp_router_id(const std::string& value) {
  _internal_set_bgp_router_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.bgp_router_id)
}
inline std::string* LsNodeDescriptor::mutable_bgp_router_id() {
  // @@protoc_insertion_point(field_mutable:apipb.LsNodeDescriptor.bgp_router_id)
  return _internal_mutable_bgp_router_id();
}
inline const std::string& LsNodeDescriptor::_internal_bgp_router_id() const {
  return bgp_router_id_.Get();
}
inline void LsNodeDescriptor::_internal_set_bgp_router_id(const std::string& value) {
  
  bgp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsNodeDescriptor::set_bgp_router_id(std::string&& value) {
  
  bgp_router_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsNodeDescriptor.bgp_router_id)
}
inline void LsNodeDescriptor::set_bgp_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bgp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsNodeDescriptor.bgp_router_id)
}
inline void LsNodeDescriptor::set_bgp_router_id(const char* value,
    size_t size) {
  
  bgp_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsNodeDescriptor.bgp_router_id)
}
inline std::string* LsNodeDescriptor::_internal_mutable_bgp_router_id() {
  
  return bgp_router_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsNodeDescriptor::release_bgp_router_id() {
  // @@protoc_insertion_point(field_release:apipb.LsNodeDescriptor.bgp_router_id)
  return bgp_router_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsNodeDescriptor::set_allocated_bgp_router_id(std::string* bgp_router_id) {
  if (bgp_router_id != nullptr) {
    
  } else {
    
  }
  bgp_router_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_router_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsNodeDescriptor.bgp_router_id)
}

// uint32 bgp_confederation_member = 7;
inline void LsNodeDescriptor::clear_bgp_confederation_member() {
  bgp_confederation_member_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_bgp_confederation_member() const {
  return bgp_confederation_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::bgp_confederation_member() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeDescriptor.bgp_confederation_member)
  return _internal_bgp_confederation_member();
}
inline void LsNodeDescriptor::_internal_set_bgp_confederation_member(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bgp_confederation_member_ = value;
}
inline void LsNodeDescriptor::set_bgp_confederation_member(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bgp_confederation_member(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeDescriptor.bgp_confederation_member)
}

// -------------------------------------------------------------------

// LsLinkDescriptor

// uint32 link_local_id = 1;
inline void LsLinkDescriptor::clear_link_local_id() {
  link_local_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::_internal_link_local_id() const {
  return link_local_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::link_local_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkDescriptor.link_local_id)
  return _internal_link_local_id();
}
inline void LsLinkDescriptor::_internal_set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_local_id_ = value;
}
inline void LsLinkDescriptor::set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_local_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsLinkDescriptor.link_local_id)
}

// uint32 link_remote_id = 2;
inline void LsLinkDescriptor::clear_link_remote_id() {
  link_remote_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::_internal_link_remote_id() const {
  return link_remote_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::link_remote_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkDescriptor.link_remote_id)
  return _internal_link_remote_id();
}
inline void LsLinkDescriptor::_internal_set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_remote_id_ = value;
}
inline void LsLinkDescriptor::set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_remote_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsLinkDescriptor.link_remote_id)
}

// string interface_addr_ipv4 = 3;
inline void LsLinkDescriptor::clear_interface_addr_ipv4() {
  interface_addr_ipv4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsLinkDescriptor::interface_addr_ipv4() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkDescriptor.interface_addr_ipv4)
  return _internal_interface_addr_ipv4();
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(const std::string& value) {
  _internal_set_interface_addr_ipv4(value);
  // @@protoc_insertion_point(field_set:apipb.LsLinkDescriptor.interface_addr_ipv4)
}
inline std::string* LsLinkDescriptor::mutable_interface_addr_ipv4() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkDescriptor.interface_addr_ipv4)
  return _internal_mutable_interface_addr_ipv4();
}
inline const std::string& LsLinkDescriptor::_internal_interface_addr_ipv4() const {
  return interface_addr_ipv4_.Get();
}
inline void LsLinkDescriptor::_internal_set_interface_addr_ipv4(const std::string& value) {
  
  interface_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(std::string&& value) {
  
  interface_addr_ipv4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsLinkDescriptor.interface_addr_ipv4)
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsLinkDescriptor.interface_addr_ipv4)
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(const char* value,
    size_t size) {
  
  interface_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsLinkDescriptor.interface_addr_ipv4)
}
inline std::string* LsLinkDescriptor::_internal_mutable_interface_addr_ipv4() {
  
  return interface_addr_ipv4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsLinkDescriptor::release_interface_addr_ipv4() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkDescriptor.interface_addr_ipv4)
  return interface_addr_ipv4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsLinkDescriptor::set_allocated_interface_addr_ipv4(std::string* interface_addr_ipv4) {
  if (interface_addr_ipv4 != nullptr) {
    
  } else {
    
  }
  interface_addr_ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_addr_ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkDescriptor.interface_addr_ipv4)
}

// string neighbor_addr_ipv4 = 4;
inline void LsLinkDescriptor::clear_neighbor_addr_ipv4() {
  neighbor_addr_ipv4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsLinkDescriptor::neighbor_addr_ipv4() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
  return _internal_neighbor_addr_ipv4();
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(const std::string& value) {
  _internal_set_neighbor_addr_ipv4(value);
  // @@protoc_insertion_point(field_set:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline std::string* LsLinkDescriptor::mutable_neighbor_addr_ipv4() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
  return _internal_mutable_neighbor_addr_ipv4();
}
inline const std::string& LsLinkDescriptor::_internal_neighbor_addr_ipv4() const {
  return neighbor_addr_ipv4_.Get();
}
inline void LsLinkDescriptor::_internal_set_neighbor_addr_ipv4(const std::string& value) {
  
  neighbor_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(std::string&& value) {
  
  neighbor_addr_ipv4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(const char* value,
    size_t size) {
  
  neighbor_addr_ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline std::string* LsLinkDescriptor::_internal_mutable_neighbor_addr_ipv4() {
  
  return neighbor_addr_ipv4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsLinkDescriptor::release_neighbor_addr_ipv4() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
  return neighbor_addr_ipv4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsLinkDescriptor::set_allocated_neighbor_addr_ipv4(std::string* neighbor_addr_ipv4) {
  if (neighbor_addr_ipv4 != nullptr) {
    
  } else {
    
  }
  neighbor_addr_ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_addr_ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkDescriptor.neighbor_addr_ipv4)
}

// string interface_addr_ipv6 = 5;
inline void LsLinkDescriptor::clear_interface_addr_ipv6() {
  interface_addr_ipv6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsLinkDescriptor::interface_addr_ipv6() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkDescriptor.interface_addr_ipv6)
  return _internal_interface_addr_ipv6();
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(const std::string& value) {
  _internal_set_interface_addr_ipv6(value);
  // @@protoc_insertion_point(field_set:apipb.LsLinkDescriptor.interface_addr_ipv6)
}
inline std::string* LsLinkDescriptor::mutable_interface_addr_ipv6() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkDescriptor.interface_addr_ipv6)
  return _internal_mutable_interface_addr_ipv6();
}
inline const std::string& LsLinkDescriptor::_internal_interface_addr_ipv6() const {
  return interface_addr_ipv6_.Get();
}
inline void LsLinkDescriptor::_internal_set_interface_addr_ipv6(const std::string& value) {
  
  interface_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(std::string&& value) {
  
  interface_addr_ipv6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsLinkDescriptor.interface_addr_ipv6)
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsLinkDescriptor.interface_addr_ipv6)
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(const char* value,
    size_t size) {
  
  interface_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsLinkDescriptor.interface_addr_ipv6)
}
inline std::string* LsLinkDescriptor::_internal_mutable_interface_addr_ipv6() {
  
  return interface_addr_ipv6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsLinkDescriptor::release_interface_addr_ipv6() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkDescriptor.interface_addr_ipv6)
  return interface_addr_ipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsLinkDescriptor::set_allocated_interface_addr_ipv6(std::string* interface_addr_ipv6) {
  if (interface_addr_ipv6 != nullptr) {
    
  } else {
    
  }
  interface_addr_ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_addr_ipv6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkDescriptor.interface_addr_ipv6)
}

// string neighbor_addr_ipv6 = 6;
inline void LsLinkDescriptor::clear_neighbor_addr_ipv6() {
  neighbor_addr_ipv6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsLinkDescriptor::neighbor_addr_ipv6() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
  return _internal_neighbor_addr_ipv6();
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(const std::string& value) {
  _internal_set_neighbor_addr_ipv6(value);
  // @@protoc_insertion_point(field_set:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline std::string* LsLinkDescriptor::mutable_neighbor_addr_ipv6() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
  return _internal_mutable_neighbor_addr_ipv6();
}
inline const std::string& LsLinkDescriptor::_internal_neighbor_addr_ipv6() const {
  return neighbor_addr_ipv6_.Get();
}
inline void LsLinkDescriptor::_internal_set_neighbor_addr_ipv6(const std::string& value) {
  
  neighbor_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(std::string&& value) {
  
  neighbor_addr_ipv6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(const char* value,
    size_t size) {
  
  neighbor_addr_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline std::string* LsLinkDescriptor::_internal_mutable_neighbor_addr_ipv6() {
  
  return neighbor_addr_ipv6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsLinkDescriptor::release_neighbor_addr_ipv6() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
  return neighbor_addr_ipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsLinkDescriptor::set_allocated_neighbor_addr_ipv6(std::string* neighbor_addr_ipv6) {
  if (neighbor_addr_ipv6 != nullptr) {
    
  } else {
    
  }
  neighbor_addr_ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_addr_ipv6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkDescriptor.neighbor_addr_ipv6)
}

// -------------------------------------------------------------------

// LsPrefixDescriptor

// repeated string ip_reachability = 1;
inline int LsPrefixDescriptor::_internal_ip_reachability_size() const {
  return ip_reachability_.size();
}
inline int LsPrefixDescriptor::ip_reachability_size() const {
  return _internal_ip_reachability_size();
}
inline void LsPrefixDescriptor::clear_ip_reachability() {
  ip_reachability_.Clear();
}
inline std::string* LsPrefixDescriptor::add_ip_reachability() {
  // @@protoc_insertion_point(field_add_mutable:apipb.LsPrefixDescriptor.ip_reachability)
  return _internal_add_ip_reachability();
}
inline const std::string& LsPrefixDescriptor::_internal_ip_reachability(int index) const {
  return ip_reachability_.Get(index);
}
inline const std::string& LsPrefixDescriptor::ip_reachability(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LsPrefixDescriptor.ip_reachability)
  return _internal_ip_reachability(index);
}
inline std::string* LsPrefixDescriptor::mutable_ip_reachability(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.LsPrefixDescriptor.ip_reachability)
  return ip_reachability_.Mutable(index);
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apipb.LsPrefixDescriptor.ip_reachability)
  ip_reachability_.Mutable(index)->assign(value);
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apipb.LsPrefixDescriptor.ip_reachability)
  ip_reachability_.Mutable(index)->assign(std::move(value));
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_reachability_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apipb.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, const char* value, size_t size) {
  ip_reachability_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apipb.LsPrefixDescriptor.ip_reachability)
}
inline std::string* LsPrefixDescriptor::_internal_add_ip_reachability() {
  return ip_reachability_.Add();
}
inline void LsPrefixDescriptor::add_ip_reachability(const std::string& value) {
  ip_reachability_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apipb.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::add_ip_reachability(std::string&& value) {
  ip_reachability_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apipb.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::add_ip_reachability(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_reachability_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apipb.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::add_ip_reachability(const char* value, size_t size) {
  ip_reachability_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apipb.LsPrefixDescriptor.ip_reachability)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LsPrefixDescriptor::ip_reachability() const {
  // @@protoc_insertion_point(field_list:apipb.LsPrefixDescriptor.ip_reachability)
  return ip_reachability_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LsPrefixDescriptor::mutable_ip_reachability() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LsPrefixDescriptor.ip_reachability)
  return &ip_reachability_;
}

// .apipb.LsOspfRouteType ospf_route_type = 2;
inline void LsPrefixDescriptor::clear_ospf_route_type() {
  ospf_route_type_ = 0;
}
inline ::apipb::LsOspfRouteType LsPrefixDescriptor::_internal_ospf_route_type() const {
  return static_cast< ::apipb::LsOspfRouteType >(ospf_route_type_);
}
inline ::apipb::LsOspfRouteType LsPrefixDescriptor::ospf_route_type() const {
  // @@protoc_insertion_point(field_get:apipb.LsPrefixDescriptor.ospf_route_type)
  return _internal_ospf_route_type();
}
inline void LsPrefixDescriptor::_internal_set_ospf_route_type(::apipb::LsOspfRouteType value) {
  
  ospf_route_type_ = value;
}
inline void LsPrefixDescriptor::set_ospf_route_type(::apipb::LsOspfRouteType value) {
  _internal_set_ospf_route_type(value);
  // @@protoc_insertion_point(field_set:apipb.LsPrefixDescriptor.ospf_route_type)
}

// -------------------------------------------------------------------

// LsNodeNLRI

// .apipb.LsNodeDescriptor local_node = 1;
inline bool LsNodeNLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsNodeNLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsNodeNLRI::clear_local_node() {
  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::apipb::LsNodeDescriptor& LsNodeNLRI::_internal_local_node() const {
  const ::apipb::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsNodeDescriptor*>(
      &::apipb::_LsNodeDescriptor_default_instance_);
}
inline const ::apipb::LsNodeDescriptor& LsNodeNLRI::local_node() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeNLRI.local_node)
  return _internal_local_node();
}
inline void LsNodeNLRI::unsafe_arena_set_allocated_local_node(
    ::apipb::LsNodeDescriptor* local_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_node_);
  }
  local_node_ = local_node;
  if (local_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsNodeNLRI.local_node)
}
inline ::apipb::LsNodeDescriptor* LsNodeNLRI::release_local_node() {
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsNodeNLRI::unsafe_arena_release_local_node() {
  // @@protoc_insertion_point(field_release:apipb.LsNodeNLRI.local_node)
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsNodeNLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsNodeDescriptor>(GetArena());
    local_node_ = p;
  }
  return local_node_;
}
inline ::apipb::LsNodeDescriptor* LsNodeNLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:apipb.LsNodeNLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsNodeNLRI::set_allocated_local_node(::apipb::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_node);
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsNodeNLRI.local_node)
}

// -------------------------------------------------------------------

// LsLinkNLRI

// .apipb.LsNodeDescriptor local_node = 1;
inline bool LsLinkNLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsLinkNLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsLinkNLRI::clear_local_node() {
  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::apipb::LsNodeDescriptor& LsLinkNLRI::_internal_local_node() const {
  const ::apipb::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsNodeDescriptor*>(
      &::apipb::_LsNodeDescriptor_default_instance_);
}
inline const ::apipb::LsNodeDescriptor& LsLinkNLRI::local_node() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkNLRI.local_node)
  return _internal_local_node();
}
inline void LsLinkNLRI::unsafe_arena_set_allocated_local_node(
    ::apipb::LsNodeDescriptor* local_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_node_);
  }
  local_node_ = local_node;
  if (local_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsLinkNLRI.local_node)
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::release_local_node() {
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::unsafe_arena_release_local_node() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkNLRI.local_node)
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsNodeDescriptor>(GetArena());
    local_node_ = p;
  }
  return local_node_;
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkNLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsLinkNLRI::set_allocated_local_node(::apipb::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_node);
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkNLRI.local_node)
}

// .apipb.LsNodeDescriptor remote_node = 2;
inline bool LsLinkNLRI::_internal_has_remote_node() const {
  return this != internal_default_instance() && remote_node_ != nullptr;
}
inline bool LsLinkNLRI::has_remote_node() const {
  return _internal_has_remote_node();
}
inline void LsLinkNLRI::clear_remote_node() {
  if (GetArena() == nullptr && remote_node_ != nullptr) {
    delete remote_node_;
  }
  remote_node_ = nullptr;
}
inline const ::apipb::LsNodeDescriptor& LsLinkNLRI::_internal_remote_node() const {
  const ::apipb::LsNodeDescriptor* p = remote_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsNodeDescriptor*>(
      &::apipb::_LsNodeDescriptor_default_instance_);
}
inline const ::apipb::LsNodeDescriptor& LsLinkNLRI::remote_node() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkNLRI.remote_node)
  return _internal_remote_node();
}
inline void LsLinkNLRI::unsafe_arena_set_allocated_remote_node(
    ::apipb::LsNodeDescriptor* remote_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_node_);
  }
  remote_node_ = remote_node;
  if (remote_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsLinkNLRI.remote_node)
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::release_remote_node() {
  
  ::apipb::LsNodeDescriptor* temp = remote_node_;
  remote_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::unsafe_arena_release_remote_node() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkNLRI.remote_node)
  
  ::apipb::LsNodeDescriptor* temp = remote_node_;
  remote_node_ = nullptr;
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::_internal_mutable_remote_node() {
  
  if (remote_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsNodeDescriptor>(GetArena());
    remote_node_ = p;
  }
  return remote_node_;
}
inline ::apipb::LsNodeDescriptor* LsLinkNLRI::mutable_remote_node() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkNLRI.remote_node)
  return _internal_mutable_remote_node();
}
inline void LsLinkNLRI::set_allocated_remote_node(::apipb::LsNodeDescriptor* remote_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remote_node_;
  }
  if (remote_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remote_node);
    if (message_arena != submessage_arena) {
      remote_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_node, submessage_arena);
    }
    
  } else {
    
  }
  remote_node_ = remote_node;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkNLRI.remote_node)
}

// .apipb.LsLinkDescriptor link_descriptor = 3;
inline bool LsLinkNLRI::_internal_has_link_descriptor() const {
  return this != internal_default_instance() && link_descriptor_ != nullptr;
}
inline bool LsLinkNLRI::has_link_descriptor() const {
  return _internal_has_link_descriptor();
}
inline void LsLinkNLRI::clear_link_descriptor() {
  if (GetArena() == nullptr && link_descriptor_ != nullptr) {
    delete link_descriptor_;
  }
  link_descriptor_ = nullptr;
}
inline const ::apipb::LsLinkDescriptor& LsLinkNLRI::_internal_link_descriptor() const {
  const ::apipb::LsLinkDescriptor* p = link_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsLinkDescriptor*>(
      &::apipb::_LsLinkDescriptor_default_instance_);
}
inline const ::apipb::LsLinkDescriptor& LsLinkNLRI::link_descriptor() const {
  // @@protoc_insertion_point(field_get:apipb.LsLinkNLRI.link_descriptor)
  return _internal_link_descriptor();
}
inline void LsLinkNLRI::unsafe_arena_set_allocated_link_descriptor(
    ::apipb::LsLinkDescriptor* link_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_descriptor_);
  }
  link_descriptor_ = link_descriptor;
  if (link_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsLinkNLRI.link_descriptor)
}
inline ::apipb::LsLinkDescriptor* LsLinkNLRI::release_link_descriptor() {
  
  ::apipb::LsLinkDescriptor* temp = link_descriptor_;
  link_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsLinkDescriptor* LsLinkNLRI::unsafe_arena_release_link_descriptor() {
  // @@protoc_insertion_point(field_release:apipb.LsLinkNLRI.link_descriptor)
  
  ::apipb::LsLinkDescriptor* temp = link_descriptor_;
  link_descriptor_ = nullptr;
  return temp;
}
inline ::apipb::LsLinkDescriptor* LsLinkNLRI::_internal_mutable_link_descriptor() {
  
  if (link_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsLinkDescriptor>(GetArena());
    link_descriptor_ = p;
  }
  return link_descriptor_;
}
inline ::apipb::LsLinkDescriptor* LsLinkNLRI::mutable_link_descriptor() {
  // @@protoc_insertion_point(field_mutable:apipb.LsLinkNLRI.link_descriptor)
  return _internal_mutable_link_descriptor();
}
inline void LsLinkNLRI::set_allocated_link_descriptor(::apipb::LsLinkDescriptor* link_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_descriptor_;
  }
  if (link_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link_descriptor);
    if (message_arena != submessage_arena) {
      link_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  link_descriptor_ = link_descriptor;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsLinkNLRI.link_descriptor)
}

// -------------------------------------------------------------------

// LsPrefixV4NLRI

// .apipb.LsNodeDescriptor local_node = 1;
inline bool LsPrefixV4NLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsPrefixV4NLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsPrefixV4NLRI::clear_local_node() {
  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::apipb::LsNodeDescriptor& LsPrefixV4NLRI::_internal_local_node() const {
  const ::apipb::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsNodeDescriptor*>(
      &::apipb::_LsNodeDescriptor_default_instance_);
}
inline const ::apipb::LsNodeDescriptor& LsPrefixV4NLRI::local_node() const {
  // @@protoc_insertion_point(field_get:apipb.LsPrefixV4NLRI.local_node)
  return _internal_local_node();
}
inline void LsPrefixV4NLRI::unsafe_arena_set_allocated_local_node(
    ::apipb::LsNodeDescriptor* local_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_node_);
  }
  local_node_ = local_node;
  if (local_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsPrefixV4NLRI.local_node)
}
inline ::apipb::LsNodeDescriptor* LsPrefixV4NLRI::release_local_node() {
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsPrefixV4NLRI::unsafe_arena_release_local_node() {
  // @@protoc_insertion_point(field_release:apipb.LsPrefixV4NLRI.local_node)
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsPrefixV4NLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsNodeDescriptor>(GetArena());
    local_node_ = p;
  }
  return local_node_;
}
inline ::apipb::LsNodeDescriptor* LsPrefixV4NLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:apipb.LsPrefixV4NLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsPrefixV4NLRI::set_allocated_local_node(::apipb::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_node);
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsPrefixV4NLRI.local_node)
}

// .apipb.LsPrefixDescriptor prefix_descriptor = 2;
inline bool LsPrefixV4NLRI::_internal_has_prefix_descriptor() const {
  return this != internal_default_instance() && prefix_descriptor_ != nullptr;
}
inline bool LsPrefixV4NLRI::has_prefix_descriptor() const {
  return _internal_has_prefix_descriptor();
}
inline void LsPrefixV4NLRI::clear_prefix_descriptor() {
  if (GetArena() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
}
inline const ::apipb::LsPrefixDescriptor& LsPrefixV4NLRI::_internal_prefix_descriptor() const {
  const ::apipb::LsPrefixDescriptor* p = prefix_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsPrefixDescriptor*>(
      &::apipb::_LsPrefixDescriptor_default_instance_);
}
inline const ::apipb::LsPrefixDescriptor& LsPrefixV4NLRI::prefix_descriptor() const {
  // @@protoc_insertion_point(field_get:apipb.LsPrefixV4NLRI.prefix_descriptor)
  return _internal_prefix_descriptor();
}
inline void LsPrefixV4NLRI::unsafe_arena_set_allocated_prefix_descriptor(
    ::apipb::LsPrefixDescriptor* prefix_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_descriptor_);
  }
  prefix_descriptor_ = prefix_descriptor;
  if (prefix_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsPrefixV4NLRI.prefix_descriptor)
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV4NLRI::release_prefix_descriptor() {
  
  ::apipb::LsPrefixDescriptor* temp = prefix_descriptor_;
  prefix_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV4NLRI::unsafe_arena_release_prefix_descriptor() {
  // @@protoc_insertion_point(field_release:apipb.LsPrefixV4NLRI.prefix_descriptor)
  
  ::apipb::LsPrefixDescriptor* temp = prefix_descriptor_;
  prefix_descriptor_ = nullptr;
  return temp;
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV4NLRI::_internal_mutable_prefix_descriptor() {
  
  if (prefix_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsPrefixDescriptor>(GetArena());
    prefix_descriptor_ = p;
  }
  return prefix_descriptor_;
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV4NLRI::mutable_prefix_descriptor() {
  // @@protoc_insertion_point(field_mutable:apipb.LsPrefixV4NLRI.prefix_descriptor)
  return _internal_mutable_prefix_descriptor();
}
inline void LsPrefixV4NLRI::set_allocated_prefix_descriptor(::apipb::LsPrefixDescriptor* prefix_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prefix_descriptor_;
  }
  if (prefix_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prefix_descriptor);
    if (message_arena != submessage_arena) {
      prefix_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  prefix_descriptor_ = prefix_descriptor;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsPrefixV4NLRI.prefix_descriptor)
}

// -------------------------------------------------------------------

// LsPrefixV6NLRI

// .apipb.LsNodeDescriptor local_node = 1;
inline bool LsPrefixV6NLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsPrefixV6NLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsPrefixV6NLRI::clear_local_node() {
  if (GetArena() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::apipb::LsNodeDescriptor& LsPrefixV6NLRI::_internal_local_node() const {
  const ::apipb::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsNodeDescriptor*>(
      &::apipb::_LsNodeDescriptor_default_instance_);
}
inline const ::apipb::LsNodeDescriptor& LsPrefixV6NLRI::local_node() const {
  // @@protoc_insertion_point(field_get:apipb.LsPrefixV6NLRI.local_node)
  return _internal_local_node();
}
inline void LsPrefixV6NLRI::unsafe_arena_set_allocated_local_node(
    ::apipb::LsNodeDescriptor* local_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_node_);
  }
  local_node_ = local_node;
  if (local_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsPrefixV6NLRI.local_node)
}
inline ::apipb::LsNodeDescriptor* LsPrefixV6NLRI::release_local_node() {
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsPrefixV6NLRI::unsafe_arena_release_local_node() {
  // @@protoc_insertion_point(field_release:apipb.LsPrefixV6NLRI.local_node)
  
  ::apipb::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::apipb::LsNodeDescriptor* LsPrefixV6NLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsNodeDescriptor>(GetArena());
    local_node_ = p;
  }
  return local_node_;
}
inline ::apipb::LsNodeDescriptor* LsPrefixV6NLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:apipb.LsPrefixV6NLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsPrefixV6NLRI::set_allocated_local_node(::apipb::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_node);
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsPrefixV6NLRI.local_node)
}

// .apipb.LsPrefixDescriptor prefix_descriptor = 2;
inline bool LsPrefixV6NLRI::_internal_has_prefix_descriptor() const {
  return this != internal_default_instance() && prefix_descriptor_ != nullptr;
}
inline bool LsPrefixV6NLRI::has_prefix_descriptor() const {
  return _internal_has_prefix_descriptor();
}
inline void LsPrefixV6NLRI::clear_prefix_descriptor() {
  if (GetArena() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
}
inline const ::apipb::LsPrefixDescriptor& LsPrefixV6NLRI::_internal_prefix_descriptor() const {
  const ::apipb::LsPrefixDescriptor* p = prefix_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsPrefixDescriptor*>(
      &::apipb::_LsPrefixDescriptor_default_instance_);
}
inline const ::apipb::LsPrefixDescriptor& LsPrefixV6NLRI::prefix_descriptor() const {
  // @@protoc_insertion_point(field_get:apipb.LsPrefixV6NLRI.prefix_descriptor)
  return _internal_prefix_descriptor();
}
inline void LsPrefixV6NLRI::unsafe_arena_set_allocated_prefix_descriptor(
    ::apipb::LsPrefixDescriptor* prefix_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_descriptor_);
  }
  prefix_descriptor_ = prefix_descriptor;
  if (prefix_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsPrefixV6NLRI.prefix_descriptor)
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV6NLRI::release_prefix_descriptor() {
  
  ::apipb::LsPrefixDescriptor* temp = prefix_descriptor_;
  prefix_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV6NLRI::unsafe_arena_release_prefix_descriptor() {
  // @@protoc_insertion_point(field_release:apipb.LsPrefixV6NLRI.prefix_descriptor)
  
  ::apipb::LsPrefixDescriptor* temp = prefix_descriptor_;
  prefix_descriptor_ = nullptr;
  return temp;
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV6NLRI::_internal_mutable_prefix_descriptor() {
  
  if (prefix_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsPrefixDescriptor>(GetArena());
    prefix_descriptor_ = p;
  }
  return prefix_descriptor_;
}
inline ::apipb::LsPrefixDescriptor* LsPrefixV6NLRI::mutable_prefix_descriptor() {
  // @@protoc_insertion_point(field_mutable:apipb.LsPrefixV6NLRI.prefix_descriptor)
  return _internal_mutable_prefix_descriptor();
}
inline void LsPrefixV6NLRI::set_allocated_prefix_descriptor(::apipb::LsPrefixDescriptor* prefix_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prefix_descriptor_;
  }
  if (prefix_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prefix_descriptor);
    if (message_arena != submessage_arena) {
      prefix_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  prefix_descriptor_ = prefix_descriptor;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsPrefixV6NLRI.prefix_descriptor)
}

// -------------------------------------------------------------------

// LsAddrPrefix

// .apipb.LsNLRIType type = 1;
inline void LsAddrPrefix::clear_type() {
  type_ = 0;
}
inline ::apipb::LsNLRIType LsAddrPrefix::_internal_type() const {
  return static_cast< ::apipb::LsNLRIType >(type_);
}
inline ::apipb::LsNLRIType LsAddrPrefix::type() const {
  // @@protoc_insertion_point(field_get:apipb.LsAddrPrefix.type)
  return _internal_type();
}
inline void LsAddrPrefix::_internal_set_type(::apipb::LsNLRIType value) {
  
  type_ = value;
}
inline void LsAddrPrefix::set_type(::apipb::LsNLRIType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.LsAddrPrefix.type)
}

// .google.protobuf.Any nlri = 2;
inline bool LsAddrPrefix::_internal_has_nlri() const {
  return this != internal_default_instance() && nlri_ != nullptr;
}
inline bool LsAddrPrefix::has_nlri() const {
  return _internal_has_nlri();
}
inline const PROTOBUF_NAMESPACE_ID::Any& LsAddrPrefix::_internal_nlri() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = nlri_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& LsAddrPrefix::nlri() const {
  // @@protoc_insertion_point(field_get:apipb.LsAddrPrefix.nlri)
  return _internal_nlri();
}
inline void LsAddrPrefix::unsafe_arena_set_allocated_nlri(
    PROTOBUF_NAMESPACE_ID::Any* nlri) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri_);
  }
  nlri_ = nlri;
  if (nlri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAddrPrefix.nlri)
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::release_nlri() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = nlri_;
  nlri_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::unsafe_arena_release_nlri() {
  // @@protoc_insertion_point(field_release:apipb.LsAddrPrefix.nlri)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = nlri_;
  nlri_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::_internal_mutable_nlri() {
  
  if (nlri_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    nlri_ = p;
  }
  return nlri_;
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::mutable_nlri() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAddrPrefix.nlri)
  return _internal_mutable_nlri();
}
inline void LsAddrPrefix::set_allocated_nlri(PROTOBUF_NAMESPACE_ID::Any* nlri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri_);
  }
  if (nlri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri)->GetArena();
    if (message_arena != submessage_arena) {
      nlri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nlri, submessage_arena);
    }
    
  } else {
    
  }
  nlri_ = nlri;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAddrPrefix.nlri)
}

// uint32 length = 3;
inline void LsAddrPrefix::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAddrPrefix::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAddrPrefix::length() const {
  // @@protoc_insertion_point(field_get:apipb.LsAddrPrefix.length)
  return _internal_length();
}
inline void LsAddrPrefix::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void LsAddrPrefix::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apipb.LsAddrPrefix.length)
}

// .apipb.LsProtocolID protocol_id = 4;
inline void LsAddrPrefix::clear_protocol_id() {
  protocol_id_ = 0;
}
inline ::apipb::LsProtocolID LsAddrPrefix::_internal_protocol_id() const {
  return static_cast< ::apipb::LsProtocolID >(protocol_id_);
}
inline ::apipb::LsProtocolID LsAddrPrefix::protocol_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsAddrPrefix.protocol_id)
  return _internal_protocol_id();
}
inline void LsAddrPrefix::_internal_set_protocol_id(::apipb::LsProtocolID value) {
  
  protocol_id_ = value;
}
inline void LsAddrPrefix::set_protocol_id(::apipb::LsProtocolID value) {
  _internal_set_protocol_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsAddrPrefix.protocol_id)
}

// uint64 identifier = 5;
inline void LsAddrPrefix::clear_identifier() {
  identifier_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LsAddrPrefix::_internal_identifier() const {
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LsAddrPrefix::identifier() const {
  // @@protoc_insertion_point(field_get:apipb.LsAddrPrefix.identifier)
  return _internal_identifier();
}
inline void LsAddrPrefix::_internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  identifier_ = value;
}
inline void LsAddrPrefix::set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:apipb.LsAddrPrefix.identifier)
}

// -------------------------------------------------------------------

// MUPInterworkSegmentDiscoveryRoute

// .google.protobuf.Any rd = 1;
inline bool MUPInterworkSegmentDiscoveryRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool MUPInterworkSegmentDiscoveryRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPInterworkSegmentDiscoveryRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPInterworkSegmentDiscoveryRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.MUPInterworkSegmentDiscoveryRoute.rd)
  return _internal_rd();
}
inline void MUPInterworkSegmentDiscoveryRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.MUPInterworkSegmentDiscoveryRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPInterworkSegmentDiscoveryRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPInterworkSegmentDiscoveryRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.MUPInterworkSegmentDiscoveryRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPInterworkSegmentDiscoveryRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPInterworkSegmentDiscoveryRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPInterworkSegmentDiscoveryRoute.rd)
  return _internal_mutable_rd();
}
inline void MUPInterworkSegmentDiscoveryRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPInterworkSegmentDiscoveryRoute.rd)
}

// string prefix = 2;
inline void MUPInterworkSegmentDiscoveryRoute::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MUPInterworkSegmentDiscoveryRoute::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
  return _internal_prefix();
}
inline void MUPInterworkSegmentDiscoveryRoute::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
}
inline std::string* MUPInterworkSegmentDiscoveryRoute::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& MUPInterworkSegmentDiscoveryRoute::_internal_prefix() const {
  return prefix_.Get();
}
inline void MUPInterworkSegmentDiscoveryRoute::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MUPInterworkSegmentDiscoveryRoute::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
}
inline void MUPInterworkSegmentDiscoveryRoute::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
}
inline void MUPInterworkSegmentDiscoveryRoute::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
}
inline std::string* MUPInterworkSegmentDiscoveryRoute::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MUPInterworkSegmentDiscoveryRoute::release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MUPInterworkSegmentDiscoveryRoute::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPInterworkSegmentDiscoveryRoute.prefix)
}

// -------------------------------------------------------------------

// MUPDirectSegmentDiscoveryRoute

// .google.protobuf.Any rd = 1;
inline bool MUPDirectSegmentDiscoveryRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool MUPDirectSegmentDiscoveryRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPDirectSegmentDiscoveryRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPDirectSegmentDiscoveryRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.MUPDirectSegmentDiscoveryRoute.rd)
  return _internal_rd();
}
inline void MUPDirectSegmentDiscoveryRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.MUPDirectSegmentDiscoveryRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPDirectSegmentDiscoveryRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPDirectSegmentDiscoveryRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.MUPDirectSegmentDiscoveryRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPDirectSegmentDiscoveryRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPDirectSegmentDiscoveryRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPDirectSegmentDiscoveryRoute.rd)
  return _internal_mutable_rd();
}
inline void MUPDirectSegmentDiscoveryRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPDirectSegmentDiscoveryRoute.rd)
}

// string address = 2;
inline void MUPDirectSegmentDiscoveryRoute::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MUPDirectSegmentDiscoveryRoute::address() const {
  // @@protoc_insertion_point(field_get:apipb.MUPDirectSegmentDiscoveryRoute.address)
  return _internal_address();
}
inline void MUPDirectSegmentDiscoveryRoute::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.MUPDirectSegmentDiscoveryRoute.address)
}
inline std::string* MUPDirectSegmentDiscoveryRoute::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPDirectSegmentDiscoveryRoute.address)
  return _internal_mutable_address();
}
inline const std::string& MUPDirectSegmentDiscoveryRoute::_internal_address() const {
  return address_.Get();
}
inline void MUPDirectSegmentDiscoveryRoute::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MUPDirectSegmentDiscoveryRoute::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.MUPDirectSegmentDiscoveryRoute.address)
}
inline void MUPDirectSegmentDiscoveryRoute::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.MUPDirectSegmentDiscoveryRoute.address)
}
inline void MUPDirectSegmentDiscoveryRoute::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.MUPDirectSegmentDiscoveryRoute.address)
}
inline std::string* MUPDirectSegmentDiscoveryRoute::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MUPDirectSegmentDiscoveryRoute::release_address() {
  // @@protoc_insertion_point(field_release:apipb.MUPDirectSegmentDiscoveryRoute.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MUPDirectSegmentDiscoveryRoute::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPDirectSegmentDiscoveryRoute.address)
}

// -------------------------------------------------------------------

// MUPType1SessionTransformedRoute

// .google.protobuf.Any rd = 1;
inline bool MUPType1SessionTransformedRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool MUPType1SessionTransformedRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPType1SessionTransformedRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPType1SessionTransformedRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.rd)
  return _internal_rd();
}
inline void MUPType1SessionTransformedRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.MUPType1SessionTransformedRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType1SessionTransformedRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType1SessionTransformedRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.MUPType1SessionTransformedRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType1SessionTransformedRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType1SessionTransformedRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPType1SessionTransformedRoute.rd)
  return _internal_mutable_rd();
}
inline void MUPType1SessionTransformedRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPType1SessionTransformedRoute.rd)
}

// uint32 prefix_length = 2 [deprecated = true];
inline void MUPType1SessionTransformedRoute::clear_prefix_length() {
  prefix_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::_internal_prefix_length() const {
  return prefix_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::prefix_length() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.prefix_length)
  return _internal_prefix_length();
}
inline void MUPType1SessionTransformedRoute::_internal_set_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_length_ = value;
}
inline void MUPType1SessionTransformedRoute::set_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_length(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType1SessionTransformedRoute.prefix_length)
}

// string prefix = 3;
inline void MUPType1SessionTransformedRoute::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MUPType1SessionTransformedRoute::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.prefix)
  return _internal_prefix();
}
inline void MUPType1SessionTransformedRoute::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType1SessionTransformedRoute.prefix)
}
inline std::string* MUPType1SessionTransformedRoute::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPType1SessionTransformedRoute.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& MUPType1SessionTransformedRoute::_internal_prefix() const {
  return prefix_.Get();
}
inline void MUPType1SessionTransformedRoute::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MUPType1SessionTransformedRoute::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.MUPType1SessionTransformedRoute.prefix)
}
inline void MUPType1SessionTransformedRoute::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.MUPType1SessionTransformedRoute.prefix)
}
inline void MUPType1SessionTransformedRoute::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.MUPType1SessionTransformedRoute.prefix)
}
inline std::string* MUPType1SessionTransformedRoute::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MUPType1SessionTransformedRoute::release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.MUPType1SessionTransformedRoute.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MUPType1SessionTransformedRoute::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPType1SessionTransformedRoute.prefix)
}

// uint32 teid = 4;
inline void MUPType1SessionTransformedRoute::clear_teid() {
  teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::_internal_teid() const {
  return teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::teid() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.teid)
  return _internal_teid();
}
inline void MUPType1SessionTransformedRoute::_internal_set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  teid_ = value;
}
inline void MUPType1SessionTransformedRoute::set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teid(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType1SessionTransformedRoute.teid)
}

// uint32 qfi = 5;
inline void MUPType1SessionTransformedRoute::clear_qfi() {
  qfi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::_internal_qfi() const {
  return qfi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::qfi() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.qfi)
  return _internal_qfi();
}
inline void MUPType1SessionTransformedRoute::_internal_set_qfi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  qfi_ = value;
}
inline void MUPType1SessionTransformedRoute::set_qfi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qfi(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType1SessionTransformedRoute.qfi)
}

// uint32 endpoint_address_length = 6;
inline void MUPType1SessionTransformedRoute::clear_endpoint_address_length() {
  endpoint_address_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::_internal_endpoint_address_length() const {
  return endpoint_address_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType1SessionTransformedRoute::endpoint_address_length() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.endpoint_address_length)
  return _internal_endpoint_address_length();
}
inline void MUPType1SessionTransformedRoute::_internal_set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  endpoint_address_length_ = value;
}
inline void MUPType1SessionTransformedRoute::set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endpoint_address_length(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType1SessionTransformedRoute.endpoint_address_length)
}

// string endpoint_address = 7;
inline void MUPType1SessionTransformedRoute::clear_endpoint_address() {
  endpoint_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MUPType1SessionTransformedRoute::endpoint_address() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType1SessionTransformedRoute.endpoint_address)
  return _internal_endpoint_address();
}
inline void MUPType1SessionTransformedRoute::set_endpoint_address(const std::string& value) {
  _internal_set_endpoint_address(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType1SessionTransformedRoute.endpoint_address)
}
inline std::string* MUPType1SessionTransformedRoute::mutable_endpoint_address() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPType1SessionTransformedRoute.endpoint_address)
  return _internal_mutable_endpoint_address();
}
inline const std::string& MUPType1SessionTransformedRoute::_internal_endpoint_address() const {
  return endpoint_address_.Get();
}
inline void MUPType1SessionTransformedRoute::_internal_set_endpoint_address(const std::string& value) {
  
  endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MUPType1SessionTransformedRoute::set_endpoint_address(std::string&& value) {
  
  endpoint_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.MUPType1SessionTransformedRoute.endpoint_address)
}
inline void MUPType1SessionTransformedRoute::set_endpoint_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.MUPType1SessionTransformedRoute.endpoint_address)
}
inline void MUPType1SessionTransformedRoute::set_endpoint_address(const char* value,
    size_t size) {
  
  endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.MUPType1SessionTransformedRoute.endpoint_address)
}
inline std::string* MUPType1SessionTransformedRoute::_internal_mutable_endpoint_address() {
  
  return endpoint_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MUPType1SessionTransformedRoute::release_endpoint_address() {
  // @@protoc_insertion_point(field_release:apipb.MUPType1SessionTransformedRoute.endpoint_address)
  return endpoint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MUPType1SessionTransformedRoute::set_allocated_endpoint_address(std::string* endpoint_address) {
  if (endpoint_address != nullptr) {
    
  } else {
    
  }
  endpoint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPType1SessionTransformedRoute.endpoint_address)
}

// -------------------------------------------------------------------

// MUPType2SessionTransformedRoute

// .google.protobuf.Any rd = 1;
inline bool MUPType2SessionTransformedRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool MUPType2SessionTransformedRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPType2SessionTransformedRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MUPType2SessionTransformedRoute::rd() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType2SessionTransformedRoute.rd)
  return _internal_rd();
}
inline void MUPType2SessionTransformedRoute::unsafe_arena_set_allocated_rd(
    PROTOBUF_NAMESPACE_ID::Any* rd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  rd_ = rd;
  if (rd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.MUPType2SessionTransformedRoute.rd)
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType2SessionTransformedRoute::release_rd() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType2SessionTransformedRoute::unsafe_arena_release_rd() {
  // @@protoc_insertion_point(field_release:apipb.MUPType2SessionTransformedRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType2SessionTransformedRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* MUPType2SessionTransformedRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPType2SessionTransformedRoute.rd)
  return _internal_mutable_rd();
}
inline void MUPType2SessionTransformedRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd)->GetArena();
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPType2SessionTransformedRoute.rd)
}

// uint32 endpoint_address_length = 2;
inline void MUPType2SessionTransformedRoute::clear_endpoint_address_length() {
  endpoint_address_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType2SessionTransformedRoute::_internal_endpoint_address_length() const {
  return endpoint_address_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType2SessionTransformedRoute::endpoint_address_length() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType2SessionTransformedRoute.endpoint_address_length)
  return _internal_endpoint_address_length();
}
inline void MUPType2SessionTransformedRoute::_internal_set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  endpoint_address_length_ = value;
}
inline void MUPType2SessionTransformedRoute::set_endpoint_address_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endpoint_address_length(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType2SessionTransformedRoute.endpoint_address_length)
}

// string endpoint_address = 3;
inline void MUPType2SessionTransformedRoute::clear_endpoint_address() {
  endpoint_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MUPType2SessionTransformedRoute::endpoint_address() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType2SessionTransformedRoute.endpoint_address)
  return _internal_endpoint_address();
}
inline void MUPType2SessionTransformedRoute::set_endpoint_address(const std::string& value) {
  _internal_set_endpoint_address(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType2SessionTransformedRoute.endpoint_address)
}
inline std::string* MUPType2SessionTransformedRoute::mutable_endpoint_address() {
  // @@protoc_insertion_point(field_mutable:apipb.MUPType2SessionTransformedRoute.endpoint_address)
  return _internal_mutable_endpoint_address();
}
inline const std::string& MUPType2SessionTransformedRoute::_internal_endpoint_address() const {
  return endpoint_address_.Get();
}
inline void MUPType2SessionTransformedRoute::_internal_set_endpoint_address(const std::string& value) {
  
  endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MUPType2SessionTransformedRoute::set_endpoint_address(std::string&& value) {
  
  endpoint_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.MUPType2SessionTransformedRoute.endpoint_address)
}
inline void MUPType2SessionTransformedRoute::set_endpoint_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.MUPType2SessionTransformedRoute.endpoint_address)
}
inline void MUPType2SessionTransformedRoute::set_endpoint_address(const char* value,
    size_t size) {
  
  endpoint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.MUPType2SessionTransformedRoute.endpoint_address)
}
inline std::string* MUPType2SessionTransformedRoute::_internal_mutable_endpoint_address() {
  
  return endpoint_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MUPType2SessionTransformedRoute::release_endpoint_address() {
  // @@protoc_insertion_point(field_release:apipb.MUPType2SessionTransformedRoute.endpoint_address)
  return endpoint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MUPType2SessionTransformedRoute::set_allocated_endpoint_address(std::string* endpoint_address) {
  if (endpoint_address != nullptr) {
    
  } else {
    
  }
  endpoint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.MUPType2SessionTransformedRoute.endpoint_address)
}

// uint32 teid = 4;
inline void MUPType2SessionTransformedRoute::clear_teid() {
  teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType2SessionTransformedRoute::_internal_teid() const {
  return teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPType2SessionTransformedRoute::teid() const {
  // @@protoc_insertion_point(field_get:apipb.MUPType2SessionTransformedRoute.teid)
  return _internal_teid();
}
inline void MUPType2SessionTransformedRoute::_internal_set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  teid_ = value;
}
inline void MUPType2SessionTransformedRoute::set_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teid(value);
  // @@protoc_insertion_point(field_set:apipb.MUPType2SessionTransformedRoute.teid)
}

// -------------------------------------------------------------------

// MpReachNLRIAttribute

// .apipb.Family family = 1;
inline bool MpReachNLRIAttribute::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool MpReachNLRIAttribute::has_family() const {
  return _internal_has_family();
}
inline const ::apipb::Family& MpReachNLRIAttribute::_internal_family() const {
  const ::apipb::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::Family*>(
      &::apipb::_Family_default_instance_);
}
inline const ::apipb::Family& MpReachNLRIAttribute::family() const {
  // @@protoc_insertion_point(field_get:apipb.MpReachNLRIAttribute.family)
  return _internal_family();
}
inline void MpReachNLRIAttribute::unsafe_arena_set_allocated_family(
    ::apipb::Family* family) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_);
  }
  family_ = family;
  if (family) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.MpReachNLRIAttribute.family)
}
inline ::apipb::Family* MpReachNLRIAttribute::release_family() {
  
  ::apipb::Family* temp = family_;
  family_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::Family* MpReachNLRIAttribute::unsafe_arena_release_family() {
  // @@protoc_insertion_point(field_release:apipb.MpReachNLRIAttribute.family)
  
  ::apipb::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::apipb::Family* MpReachNLRIAttribute::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::Family>(GetArena());
    family_ = p;
  }
  return family_;
}
inline ::apipb::Family* MpReachNLRIAttribute::mutable_family() {
  // @@protoc_insertion_point(field_mutable:apipb.MpReachNLRIAttribute.family)
  return _internal_mutable_family();
}
inline void MpReachNLRIAttribute::set_allocated_family(::apipb::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_);
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family)->GetArena();
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:apipb.MpReachNLRIAttribute.family)
}

// repeated string next_hops = 2;
inline int MpReachNLRIAttribute::_internal_next_hops_size() const {
  return next_hops_.size();
}
inline int MpReachNLRIAttribute::next_hops_size() const {
  return _internal_next_hops_size();
}
inline void MpReachNLRIAttribute::clear_next_hops() {
  next_hops_.Clear();
}
inline std::string* MpReachNLRIAttribute::add_next_hops() {
  // @@protoc_insertion_point(field_add_mutable:apipb.MpReachNLRIAttribute.next_hops)
  return _internal_add_next_hops();
}
inline const std::string& MpReachNLRIAttribute::_internal_next_hops(int index) const {
  return next_hops_.Get(index);
}
inline const std::string& MpReachNLRIAttribute::next_hops(int index) const {
  // @@protoc_insertion_point(field_get:apipb.MpReachNLRIAttribute.next_hops)
  return _internal_next_hops(index);
}
inline std::string* MpReachNLRIAttribute::mutable_next_hops(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.MpReachNLRIAttribute.next_hops)
  return next_hops_.Mutable(index);
}
inline void MpReachNLRIAttribute::set_next_hops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apipb.MpReachNLRIAttribute.next_hops)
  next_hops_.Mutable(index)->assign(value);
}
inline void MpReachNLRIAttribute::set_next_hops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apipb.MpReachNLRIAttribute.next_hops)
  next_hops_.Mutable(index)->assign(std::move(value));
}
inline void MpReachNLRIAttribute::set_next_hops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  next_hops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apipb.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::set_next_hops(int index, const char* value, size_t size) {
  next_hops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apipb.MpReachNLRIAttribute.next_hops)
}
inline std::string* MpReachNLRIAttribute::_internal_add_next_hops() {
  return next_hops_.Add();
}
inline void MpReachNLRIAttribute::add_next_hops(const std::string& value) {
  next_hops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apipb.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::add_next_hops(std::string&& value) {
  next_hops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apipb.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::add_next_hops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  next_hops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apipb.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::add_next_hops(const char* value, size_t size) {
  next_hops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apipb.MpReachNLRIAttribute.next_hops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MpReachNLRIAttribute::next_hops() const {
  // @@protoc_insertion_point(field_list:apipb.MpReachNLRIAttribute.next_hops)
  return next_hops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MpReachNLRIAttribute::mutable_next_hops() {
  // @@protoc_insertion_point(field_mutable_list:apipb.MpReachNLRIAttribute.next_hops)
  return &next_hops_;
}

// repeated .google.protobuf.Any nlris = 3;
inline int MpReachNLRIAttribute::_internal_nlris_size() const {
  return nlris_.size();
}
inline int MpReachNLRIAttribute::nlris_size() const {
  return _internal_nlris_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpReachNLRIAttribute::mutable_nlris(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.MpReachNLRIAttribute.nlris)
  return nlris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
MpReachNLRIAttribute::mutable_nlris() {
  // @@protoc_insertion_point(field_mutable_list:apipb.MpReachNLRIAttribute.nlris)
  return &nlris_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpReachNLRIAttribute::_internal_nlris(int index) const {
  return nlris_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpReachNLRIAttribute::nlris(int index) const {
  // @@protoc_insertion_point(field_get:apipb.MpReachNLRIAttribute.nlris)
  return _internal_nlris(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* MpReachNLRIAttribute::_internal_add_nlris() {
  return nlris_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpReachNLRIAttribute::add_nlris() {
  // @@protoc_insertion_point(field_add:apipb.MpReachNLRIAttribute.nlris)
  return _internal_add_nlris();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
MpReachNLRIAttribute::nlris() const {
  // @@protoc_insertion_point(field_list:apipb.MpReachNLRIAttribute.nlris)
  return nlris_;
}

// -------------------------------------------------------------------

// MpUnreachNLRIAttribute

// .apipb.Family family = 1;
inline bool MpUnreachNLRIAttribute::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool MpUnreachNLRIAttribute::has_family() const {
  return _internal_has_family();
}
inline const ::apipb::Family& MpUnreachNLRIAttribute::_internal_family() const {
  const ::apipb::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::Family*>(
      &::apipb::_Family_default_instance_);
}
inline const ::apipb::Family& MpUnreachNLRIAttribute::family() const {
  // @@protoc_insertion_point(field_get:apipb.MpUnreachNLRIAttribute.family)
  return _internal_family();
}
inline void MpUnreachNLRIAttribute::unsafe_arena_set_allocated_family(
    ::apipb::Family* family) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_);
  }
  family_ = family;
  if (family) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.MpUnreachNLRIAttribute.family)
}
inline ::apipb::Family* MpUnreachNLRIAttribute::release_family() {
  
  ::apipb::Family* temp = family_;
  family_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::Family* MpUnreachNLRIAttribute::unsafe_arena_release_family() {
  // @@protoc_insertion_point(field_release:apipb.MpUnreachNLRIAttribute.family)
  
  ::apipb::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::apipb::Family* MpUnreachNLRIAttribute::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::Family>(GetArena());
    family_ = p;
  }
  return family_;
}
inline ::apipb::Family* MpUnreachNLRIAttribute::mutable_family() {
  // @@protoc_insertion_point(field_mutable:apipb.MpUnreachNLRIAttribute.family)
  return _internal_mutable_family();
}
inline void MpUnreachNLRIAttribute::set_allocated_family(::apipb::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_);
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family)->GetArena();
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:apipb.MpUnreachNLRIAttribute.family)
}

// repeated .google.protobuf.Any nlris = 3;
inline int MpUnreachNLRIAttribute::_internal_nlris_size() const {
  return nlris_.size();
}
inline int MpUnreachNLRIAttribute::nlris_size() const {
  return _internal_nlris_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpUnreachNLRIAttribute::mutable_nlris(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.MpUnreachNLRIAttribute.nlris)
  return nlris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
MpUnreachNLRIAttribute::mutable_nlris() {
  // @@protoc_insertion_point(field_mutable_list:apipb.MpUnreachNLRIAttribute.nlris)
  return &nlris_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpUnreachNLRIAttribute::_internal_nlris(int index) const {
  return nlris_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpUnreachNLRIAttribute::nlris(int index) const {
  // @@protoc_insertion_point(field_get:apipb.MpUnreachNLRIAttribute.nlris)
  return _internal_nlris(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* MpUnreachNLRIAttribute::_internal_add_nlris() {
  return nlris_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpUnreachNLRIAttribute::add_nlris() {
  // @@protoc_insertion_point(field_add:apipb.MpUnreachNLRIAttribute.nlris)
  return _internal_add_nlris();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
MpUnreachNLRIAttribute::nlris() const {
  // @@protoc_insertion_point(field_list:apipb.MpUnreachNLRIAttribute.nlris)
  return nlris_;
}

// -------------------------------------------------------------------

// TwoOctetAsSpecificExtended

// bool is_transitive = 1;
inline void TwoOctetAsSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool TwoOctetAsSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool TwoOctetAsSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:apipb.TwoOctetAsSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void TwoOctetAsSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void TwoOctetAsSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:apipb.TwoOctetAsSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void TwoOctetAsSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:apipb.TwoOctetAsSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void TwoOctetAsSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void TwoOctetAsSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apipb.TwoOctetAsSpecificExtended.sub_type)
}

// uint32 asn = 3;
inline void TwoOctetAsSpecificExtended::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::asn() const {
  // @@protoc_insertion_point(field_get:apipb.TwoOctetAsSpecificExtended.asn)
  return _internal_asn();
}
inline void TwoOctetAsSpecificExtended::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void TwoOctetAsSpecificExtended::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.TwoOctetAsSpecificExtended.asn)
}

// uint32 local_admin = 4;
inline void TwoOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.TwoOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void TwoOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void TwoOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.TwoOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// IPv4AddressSpecificExtended

// bool is_transitive = 1;
inline void IPv4AddressSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool IPv4AddressSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool IPv4AddressSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:apipb.IPv4AddressSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void IPv4AddressSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void IPv4AddressSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:apipb.IPv4AddressSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void IPv4AddressSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:apipb.IPv4AddressSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void IPv4AddressSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void IPv4AddressSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apipb.IPv4AddressSpecificExtended.sub_type)
}

// string address = 3;
inline void IPv4AddressSpecificExtended::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPv4AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:apipb.IPv4AddressSpecificExtended.address)
  return _internal_address();
}
inline void IPv4AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.IPv4AddressSpecificExtended.address)
}
inline std::string* IPv4AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.IPv4AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& IPv4AddressSpecificExtended::_internal_address() const {
  return address_.Get();
}
inline void IPv4AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPv4AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.IPv4AddressSpecificExtended.address)
}
inline void IPv4AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.IPv4AddressSpecificExtended.address)
}
inline void IPv4AddressSpecificExtended::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.IPv4AddressSpecificExtended.address)
}
inline std::string* IPv4AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPv4AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:apipb.IPv4AddressSpecificExtended.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPv4AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.IPv4AddressSpecificExtended.address)
}

// uint32 local_admin = 4;
inline void IPv4AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.IPv4AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void IPv4AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void IPv4AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.IPv4AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// FourOctetAsSpecificExtended

// bool is_transitive = 1;
inline void FourOctetAsSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool FourOctetAsSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool FourOctetAsSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:apipb.FourOctetAsSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void FourOctetAsSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void FourOctetAsSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:apipb.FourOctetAsSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void FourOctetAsSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:apipb.FourOctetAsSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void FourOctetAsSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void FourOctetAsSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apipb.FourOctetAsSpecificExtended.sub_type)
}

// uint32 asn = 3;
inline void FourOctetAsSpecificExtended::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::asn() const {
  // @@protoc_insertion_point(field_get:apipb.FourOctetAsSpecificExtended.asn)
  return _internal_asn();
}
inline void FourOctetAsSpecificExtended::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void FourOctetAsSpecificExtended::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.FourOctetAsSpecificExtended.asn)
}

// uint32 local_admin = 4;
inline void FourOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.FourOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void FourOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void FourOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.FourOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// LinkBandwidthExtended

// uint32 asn = 1;
inline void LinkBandwidthExtended::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkBandwidthExtended::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkBandwidthExtended::asn() const {
  // @@protoc_insertion_point(field_get:apipb.LinkBandwidthExtended.asn)
  return _internal_asn();
}
inline void LinkBandwidthExtended::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void LinkBandwidthExtended::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.LinkBandwidthExtended.asn)
}

// float bandwidth = 2;
inline void LinkBandwidthExtended::clear_bandwidth() {
  bandwidth_ = 0;
}
inline float LinkBandwidthExtended::_internal_bandwidth() const {
  return bandwidth_;
}
inline float LinkBandwidthExtended::bandwidth() const {
  // @@protoc_insertion_point(field_get:apipb.LinkBandwidthExtended.bandwidth)
  return _internal_bandwidth();
}
inline void LinkBandwidthExtended::_internal_set_bandwidth(float value) {
  
  bandwidth_ = value;
}
inline void LinkBandwidthExtended::set_bandwidth(float value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:apipb.LinkBandwidthExtended.bandwidth)
}

// -------------------------------------------------------------------

// ValidationExtended

// uint32 state = 1;
inline void ValidationExtended::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ValidationExtended::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ValidationExtended::state() const {
  // @@protoc_insertion_point(field_get:apipb.ValidationExtended.state)
  return _internal_state();
}
inline void ValidationExtended::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void ValidationExtended::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:apipb.ValidationExtended.state)
}

// -------------------------------------------------------------------

// ColorExtended

// uint32 color = 1;
inline void ColorExtended::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorExtended::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorExtended::color() const {
  // @@protoc_insertion_point(field_get:apipb.ColorExtended.color)
  return _internal_color();
}
inline void ColorExtended::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void ColorExtended::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apipb.ColorExtended.color)
}

// -------------------------------------------------------------------

// EncapExtended

// uint32 tunnel_type = 1;
inline void EncapExtended::clear_tunnel_type() {
  tunnel_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncapExtended::_internal_tunnel_type() const {
  return tunnel_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncapExtended::tunnel_type() const {
  // @@protoc_insertion_point(field_get:apipb.EncapExtended.tunnel_type)
  return _internal_tunnel_type();
}
inline void EncapExtended::_internal_set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tunnel_type_ = value;
}
inline void EncapExtended::set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tunnel_type(value);
  // @@protoc_insertion_point(field_set:apipb.EncapExtended.tunnel_type)
}

// -------------------------------------------------------------------

// DefaultGatewayExtended

// -------------------------------------------------------------------

// OpaqueExtended

// bool is_transitive = 1;
inline void OpaqueExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool OpaqueExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool OpaqueExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:apipb.OpaqueExtended.is_transitive)
  return _internal_is_transitive();
}
inline void OpaqueExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void OpaqueExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:apipb.OpaqueExtended.is_transitive)
}

// bytes value = 3;
inline void OpaqueExtended::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpaqueExtended::value() const {
  // @@protoc_insertion_point(field_get:apipb.OpaqueExtended.value)
  return _internal_value();
}
inline void OpaqueExtended::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.OpaqueExtended.value)
}
inline std::string* OpaqueExtended::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.OpaqueExtended.value)
  return _internal_mutable_value();
}
inline const std::string& OpaqueExtended::_internal_value() const {
  return value_.Get();
}
inline void OpaqueExtended::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpaqueExtended::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.OpaqueExtended.value)
}
inline void OpaqueExtended::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.OpaqueExtended.value)
}
inline void OpaqueExtended::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.OpaqueExtended.value)
}
inline std::string* OpaqueExtended::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpaqueExtended::release_value() {
  // @@protoc_insertion_point(field_release:apipb.OpaqueExtended.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpaqueExtended::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.OpaqueExtended.value)
}

// -------------------------------------------------------------------

// ESILabelExtended

// bool is_single_active = 1;
inline void ESILabelExtended::clear_is_single_active() {
  is_single_active_ = false;
}
inline bool ESILabelExtended::_internal_is_single_active() const {
  return is_single_active_;
}
inline bool ESILabelExtended::is_single_active() const {
  // @@protoc_insertion_point(field_get:apipb.ESILabelExtended.is_single_active)
  return _internal_is_single_active();
}
inline void ESILabelExtended::_internal_set_is_single_active(bool value) {
  
  is_single_active_ = value;
}
inline void ESILabelExtended::set_is_single_active(bool value) {
  _internal_set_is_single_active(value);
  // @@protoc_insertion_point(field_set:apipb.ESILabelExtended.is_single_active)
}

// uint32 label = 2;
inline void ESILabelExtended::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ESILabelExtended::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ESILabelExtended::label() const {
  // @@protoc_insertion_point(field_get:apipb.ESILabelExtended.label)
  return _internal_label();
}
inline void ESILabelExtended::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void ESILabelExtended::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apipb.ESILabelExtended.label)
}

// -------------------------------------------------------------------

// ESImportRouteTarget

// string es_import = 1;
inline void ESImportRouteTarget::clear_es_import() {
  es_import_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ESImportRouteTarget::es_import() const {
  // @@protoc_insertion_point(field_get:apipb.ESImportRouteTarget.es_import)
  return _internal_es_import();
}
inline void ESImportRouteTarget::set_es_import(const std::string& value) {
  _internal_set_es_import(value);
  // @@protoc_insertion_point(field_set:apipb.ESImportRouteTarget.es_import)
}
inline std::string* ESImportRouteTarget::mutable_es_import() {
  // @@protoc_insertion_point(field_mutable:apipb.ESImportRouteTarget.es_import)
  return _internal_mutable_es_import();
}
inline const std::string& ESImportRouteTarget::_internal_es_import() const {
  return es_import_.Get();
}
inline void ESImportRouteTarget::_internal_set_es_import(const std::string& value) {
  
  es_import_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ESImportRouteTarget::set_es_import(std::string&& value) {
  
  es_import_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.ESImportRouteTarget.es_import)
}
inline void ESImportRouteTarget::set_es_import(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  es_import_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.ESImportRouteTarget.es_import)
}
inline void ESImportRouteTarget::set_es_import(const char* value,
    size_t size) {
  
  es_import_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.ESImportRouteTarget.es_import)
}
inline std::string* ESImportRouteTarget::_internal_mutable_es_import() {
  
  return es_import_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ESImportRouteTarget::release_es_import() {
  // @@protoc_insertion_point(field_release:apipb.ESImportRouteTarget.es_import)
  return es_import_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ESImportRouteTarget::set_allocated_es_import(std::string* es_import) {
  if (es_import != nullptr) {
    
  } else {
    
  }
  es_import_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), es_import,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.ESImportRouteTarget.es_import)
}

// -------------------------------------------------------------------

// MacMobilityExtended

// bool is_sticky = 1;
inline void MacMobilityExtended::clear_is_sticky() {
  is_sticky_ = false;
}
inline bool MacMobilityExtended::_internal_is_sticky() const {
  return is_sticky_;
}
inline bool MacMobilityExtended::is_sticky() const {
  // @@protoc_insertion_point(field_get:apipb.MacMobilityExtended.is_sticky)
  return _internal_is_sticky();
}
inline void MacMobilityExtended::_internal_set_is_sticky(bool value) {
  
  is_sticky_ = value;
}
inline void MacMobilityExtended::set_is_sticky(bool value) {
  _internal_set_is_sticky(value);
  // @@protoc_insertion_point(field_set:apipb.MacMobilityExtended.is_sticky)
}

// uint32 sequence_num = 2;
inline void MacMobilityExtended::clear_sequence_num() {
  sequence_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MacMobilityExtended::_internal_sequence_num() const {
  return sequence_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MacMobilityExtended::sequence_num() const {
  // @@protoc_insertion_point(field_get:apipb.MacMobilityExtended.sequence_num)
  return _internal_sequence_num();
}
inline void MacMobilityExtended::_internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_num_ = value;
}
inline void MacMobilityExtended::set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_num(value);
  // @@protoc_insertion_point(field_set:apipb.MacMobilityExtended.sequence_num)
}

// -------------------------------------------------------------------

// RouterMacExtended

// string mac = 1;
inline void RouterMacExtended::clear_mac() {
  mac_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RouterMacExtended::mac() const {
  // @@protoc_insertion_point(field_get:apipb.RouterMacExtended.mac)
  return _internal_mac();
}
inline void RouterMacExtended::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:apipb.RouterMacExtended.mac)
}
inline std::string* RouterMacExtended::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:apipb.RouterMacExtended.mac)
  return _internal_mutable_mac();
}
inline const std::string& RouterMacExtended::_internal_mac() const {
  return mac_.Get();
}
inline void RouterMacExtended::_internal_set_mac(const std::string& value) {
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RouterMacExtended::set_mac(std::string&& value) {
  
  mac_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.RouterMacExtended.mac)
}
inline void RouterMacExtended::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.RouterMacExtended.mac)
}
inline void RouterMacExtended::set_mac(const char* value,
    size_t size) {
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.RouterMacExtended.mac)
}
inline std::string* RouterMacExtended::_internal_mutable_mac() {
  
  return mac_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RouterMacExtended::release_mac() {
  // @@protoc_insertion_point(field_release:apipb.RouterMacExtended.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouterMacExtended::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.RouterMacExtended.mac)
}

// -------------------------------------------------------------------

// TrafficRateExtended

// uint32 asn = 1;
inline void TrafficRateExtended::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRateExtended::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRateExtended::asn() const {
  // @@protoc_insertion_point(field_get:apipb.TrafficRateExtended.asn)
  return _internal_asn();
}
inline void TrafficRateExtended::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void TrafficRateExtended::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.TrafficRateExtended.asn)
}

// float rate = 2;
inline void TrafficRateExtended::clear_rate() {
  rate_ = 0;
}
inline float TrafficRateExtended::_internal_rate() const {
  return rate_;
}
inline float TrafficRateExtended::rate() const {
  // @@protoc_insertion_point(field_get:apipb.TrafficRateExtended.rate)
  return _internal_rate();
}
inline void TrafficRateExtended::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void TrafficRateExtended::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:apipb.TrafficRateExtended.rate)
}

// -------------------------------------------------------------------

// TrafficActionExtended

// bool terminal = 1;
inline void TrafficActionExtended::clear_terminal() {
  terminal_ = false;
}
inline bool TrafficActionExtended::_internal_terminal() const {
  return terminal_;
}
inline bool TrafficActionExtended::terminal() const {
  // @@protoc_insertion_point(field_get:apipb.TrafficActionExtended.terminal)
  return _internal_terminal();
}
inline void TrafficActionExtended::_internal_set_terminal(bool value) {
  
  terminal_ = value;
}
inline void TrafficActionExtended::set_terminal(bool value) {
  _internal_set_terminal(value);
  // @@protoc_insertion_point(field_set:apipb.TrafficActionExtended.terminal)
}

// bool sample = 2;
inline void TrafficActionExtended::clear_sample() {
  sample_ = false;
}
inline bool TrafficActionExtended::_internal_sample() const {
  return sample_;
}
inline bool TrafficActionExtended::sample() const {
  // @@protoc_insertion_point(field_get:apipb.TrafficActionExtended.sample)
  return _internal_sample();
}
inline void TrafficActionExtended::_internal_set_sample(bool value) {
  
  sample_ = value;
}
inline void TrafficActionExtended::set_sample(bool value) {
  _internal_set_sample(value);
  // @@protoc_insertion_point(field_set:apipb.TrafficActionExtended.sample)
}

// -------------------------------------------------------------------

// RedirectTwoOctetAsSpecificExtended

// uint32 asn = 1;
inline void RedirectTwoOctetAsSpecificExtended::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::asn() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectTwoOctetAsSpecificExtended.asn)
  return _internal_asn();
}
inline void RedirectTwoOctetAsSpecificExtended::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void RedirectTwoOctetAsSpecificExtended::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectTwoOctetAsSpecificExtended.asn)
}

// uint32 local_admin = 2;
inline void RedirectTwoOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectTwoOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectTwoOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectTwoOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectTwoOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// RedirectIPv4AddressSpecificExtended

// string address = 1;
inline void RedirectIPv4AddressSpecificExtended::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RedirectIPv4AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectIPv4AddressSpecificExtended.address)
  return _internal_address();
}
inline void RedirectIPv4AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectIPv4AddressSpecificExtended.address)
}
inline std::string* RedirectIPv4AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.RedirectIPv4AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& RedirectIPv4AddressSpecificExtended::_internal_address() const {
  return address_.Get();
}
inline void RedirectIPv4AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RedirectIPv4AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.RedirectIPv4AddressSpecificExtended.address)
}
inline void RedirectIPv4AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.RedirectIPv4AddressSpecificExtended.address)
}
inline void RedirectIPv4AddressSpecificExtended::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.RedirectIPv4AddressSpecificExtended.address)
}
inline std::string* RedirectIPv4AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RedirectIPv4AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:apipb.RedirectIPv4AddressSpecificExtended.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RedirectIPv4AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.RedirectIPv4AddressSpecificExtended.address)
}

// uint32 local_admin = 2;
inline void RedirectIPv4AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv4AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv4AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectIPv4AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectIPv4AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectIPv4AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectIPv4AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// RedirectFourOctetAsSpecificExtended

// uint32 asn = 1;
inline void RedirectFourOctetAsSpecificExtended::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::asn() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectFourOctetAsSpecificExtended.asn)
  return _internal_asn();
}
inline void RedirectFourOctetAsSpecificExtended::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void RedirectFourOctetAsSpecificExtended::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectFourOctetAsSpecificExtended.asn)
}

// uint32 local_admin = 2;
inline void RedirectFourOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectFourOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectFourOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectFourOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectFourOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// TrafficRemarkExtended

// uint32 dscp = 1;
inline void TrafficRemarkExtended::clear_dscp() {
  dscp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRemarkExtended::_internal_dscp() const {
  return dscp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRemarkExtended::dscp() const {
  // @@protoc_insertion_point(field_get:apipb.TrafficRemarkExtended.dscp)
  return _internal_dscp();
}
inline void TrafficRemarkExtended::_internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dscp_ = value;
}
inline void TrafficRemarkExtended::set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dscp(value);
  // @@protoc_insertion_point(field_set:apipb.TrafficRemarkExtended.dscp)
}

// -------------------------------------------------------------------

// MUPExtended

// uint32 sub_type = 1;
inline void MUPExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:apipb.MUPExtended.sub_type)
  return _internal_sub_type();
}
inline void MUPExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void MUPExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apipb.MUPExtended.sub_type)
}

// uint32 segment_id2 = 2;
inline void MUPExtended::clear_segment_id2() {
  segment_id2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPExtended::_internal_segment_id2() const {
  return segment_id2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPExtended::segment_id2() const {
  // @@protoc_insertion_point(field_get:apipb.MUPExtended.segment_id2)
  return _internal_segment_id2();
}
inline void MUPExtended::_internal_set_segment_id2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  segment_id2_ = value;
}
inline void MUPExtended::set_segment_id2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_id2(value);
  // @@protoc_insertion_point(field_set:apipb.MUPExtended.segment_id2)
}

// uint32 segment_id4 = 3;
inline void MUPExtended::clear_segment_id4() {
  segment_id4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPExtended::_internal_segment_id4() const {
  return segment_id4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MUPExtended::segment_id4() const {
  // @@protoc_insertion_point(field_get:apipb.MUPExtended.segment_id4)
  return _internal_segment_id4();
}
inline void MUPExtended::_internal_set_segment_id4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  segment_id4_ = value;
}
inline void MUPExtended::set_segment_id4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_id4(value);
  // @@protoc_insertion_point(field_set:apipb.MUPExtended.segment_id4)
}

// -------------------------------------------------------------------

// UnknownExtended

// uint32 type = 1;
inline void UnknownExtended::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownExtended::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownExtended::type() const {
  // @@protoc_insertion_point(field_get:apipb.UnknownExtended.type)
  return _internal_type();
}
inline void UnknownExtended::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void UnknownExtended::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.UnknownExtended.type)
}

// bytes value = 2;
inline void UnknownExtended::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnknownExtended::value() const {
  // @@protoc_insertion_point(field_get:apipb.UnknownExtended.value)
  return _internal_value();
}
inline void UnknownExtended::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.UnknownExtended.value)
}
inline std::string* UnknownExtended::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.UnknownExtended.value)
  return _internal_mutable_value();
}
inline const std::string& UnknownExtended::_internal_value() const {
  return value_.Get();
}
inline void UnknownExtended::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnknownExtended::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.UnknownExtended.value)
}
inline void UnknownExtended::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.UnknownExtended.value)
}
inline void UnknownExtended::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.UnknownExtended.value)
}
inline std::string* UnknownExtended::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnknownExtended::release_value() {
  // @@protoc_insertion_point(field_release:apipb.UnknownExtended.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnknownExtended::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.UnknownExtended.value)
}

// -------------------------------------------------------------------

// ExtendedCommunitiesAttribute

// repeated .google.protobuf.Any communities = 1;
inline int ExtendedCommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int ExtendedCommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtendedCommunitiesAttribute::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.ExtendedCommunitiesAttribute.communities)
  return communities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
ExtendedCommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:apipb.ExtendedCommunitiesAttribute.communities)
  return &communities_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtendedCommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtendedCommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:apipb.ExtendedCommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtendedCommunitiesAttribute::_internal_add_communities() {
  return communities_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtendedCommunitiesAttribute::add_communities() {
  // @@protoc_insertion_point(field_add:apipb.ExtendedCommunitiesAttribute.communities)
  return _internal_add_communities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
ExtendedCommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:apipb.ExtendedCommunitiesAttribute.communities)
  return communities_;
}

// -------------------------------------------------------------------

// As4PathAttribute

// repeated .apipb.AsSegment segments = 1;
inline int As4PathAttribute::_internal_segments_size() const {
  return segments_.size();
}
inline int As4PathAttribute::segments_size() const {
  return _internal_segments_size();
}
inline void As4PathAttribute::clear_segments() {
  segments_.Clear();
}
inline ::apipb::AsSegment* As4PathAttribute::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.As4PathAttribute.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >*
As4PathAttribute::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:apipb.As4PathAttribute.segments)
  return &segments_;
}
inline const ::apipb::AsSegment& As4PathAttribute::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::apipb::AsSegment& As4PathAttribute::segments(int index) const {
  // @@protoc_insertion_point(field_get:apipb.As4PathAttribute.segments)
  return _internal_segments(index);
}
inline ::apipb::AsSegment* As4PathAttribute::_internal_add_segments() {
  return segments_.Add();
}
inline ::apipb::AsSegment* As4PathAttribute::add_segments() {
  // @@protoc_insertion_point(field_add:apipb.As4PathAttribute.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::AsSegment >&
As4PathAttribute::segments() const {
  // @@protoc_insertion_point(field_list:apipb.As4PathAttribute.segments)
  return segments_;
}

// -------------------------------------------------------------------

// As4AggregatorAttribute

// uint32 asn = 2;
inline void As4AggregatorAttribute::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 As4AggregatorAttribute::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 As4AggregatorAttribute::asn() const {
  // @@protoc_insertion_point(field_get:apipb.As4AggregatorAttribute.asn)
  return _internal_asn();
}
inline void As4AggregatorAttribute::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void As4AggregatorAttribute::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:apipb.As4AggregatorAttribute.asn)
}

// string address = 3;
inline void As4AggregatorAttribute::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& As4AggregatorAttribute::address() const {
  // @@protoc_insertion_point(field_get:apipb.As4AggregatorAttribute.address)
  return _internal_address();
}
inline void As4AggregatorAttribute::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.As4AggregatorAttribute.address)
}
inline std::string* As4AggregatorAttribute::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.As4AggregatorAttribute.address)
  return _internal_mutable_address();
}
inline const std::string& As4AggregatorAttribute::_internal_address() const {
  return address_.Get();
}
inline void As4AggregatorAttribute::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void As4AggregatorAttribute::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.As4AggregatorAttribute.address)
}
inline void As4AggregatorAttribute::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.As4AggregatorAttribute.address)
}
inline void As4AggregatorAttribute::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.As4AggregatorAttribute.address)
}
inline std::string* As4AggregatorAttribute::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* As4AggregatorAttribute::release_address() {
  // @@protoc_insertion_point(field_release:apipb.As4AggregatorAttribute.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void As4AggregatorAttribute::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.As4AggregatorAttribute.address)
}

// -------------------------------------------------------------------

// PmsiTunnelAttribute

// uint32 flags = 1;
inline void PmsiTunnelAttribute::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::flags() const {
  // @@protoc_insertion_point(field_get:apipb.PmsiTunnelAttribute.flags)
  return _internal_flags();
}
inline void PmsiTunnelAttribute::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void PmsiTunnelAttribute::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:apipb.PmsiTunnelAttribute.flags)
}

// uint32 type = 2;
inline void PmsiTunnelAttribute::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::type() const {
  // @@protoc_insertion_point(field_get:apipb.PmsiTunnelAttribute.type)
  return _internal_type();
}
inline void PmsiTunnelAttribute::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void PmsiTunnelAttribute::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.PmsiTunnelAttribute.type)
}

// uint32 label = 3;
inline void PmsiTunnelAttribute::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::label() const {
  // @@protoc_insertion_point(field_get:apipb.PmsiTunnelAttribute.label)
  return _internal_label();
}
inline void PmsiTunnelAttribute::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void PmsiTunnelAttribute::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apipb.PmsiTunnelAttribute.label)
}

// bytes id = 4;
inline void PmsiTunnelAttribute::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PmsiTunnelAttribute::id() const {
  // @@protoc_insertion_point(field_get:apipb.PmsiTunnelAttribute.id)
  return _internal_id();
}
inline void PmsiTunnelAttribute::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apipb.PmsiTunnelAttribute.id)
}
inline std::string* PmsiTunnelAttribute::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apipb.PmsiTunnelAttribute.id)
  return _internal_mutable_id();
}
inline const std::string& PmsiTunnelAttribute::_internal_id() const {
  return id_.Get();
}
inline void PmsiTunnelAttribute::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PmsiTunnelAttribute::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.PmsiTunnelAttribute.id)
}
inline void PmsiTunnelAttribute::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.PmsiTunnelAttribute.id)
}
inline void PmsiTunnelAttribute::set_id(const void* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.PmsiTunnelAttribute.id)
}
inline std::string* PmsiTunnelAttribute::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PmsiTunnelAttribute::release_id() {
  // @@protoc_insertion_point(field_release:apipb.PmsiTunnelAttribute.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmsiTunnelAttribute::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.PmsiTunnelAttribute.id)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVEncapsulation

// uint32 key = 1;
inline void TunnelEncapSubTLVEncapsulation::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVEncapsulation::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVEncapsulation::key() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVEncapsulation.key)
  return _internal_key();
}
inline void TunnelEncapSubTLVEncapsulation::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void TunnelEncapSubTLVEncapsulation::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVEncapsulation.key)
}

// bytes cookie = 2;
inline void TunnelEncapSubTLVEncapsulation::clear_cookie() {
  cookie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TunnelEncapSubTLVEncapsulation::cookie() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVEncapsulation.cookie)
  return _internal_cookie();
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(const std::string& value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVEncapsulation.cookie)
}
inline std::string* TunnelEncapSubTLVEncapsulation::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVEncapsulation.cookie)
  return _internal_mutable_cookie();
}
inline const std::string& TunnelEncapSubTLVEncapsulation::_internal_cookie() const {
  return cookie_.Get();
}
inline void TunnelEncapSubTLVEncapsulation::_internal_set_cookie(const std::string& value) {
  
  cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(std::string&& value) {
  
  cookie_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.TunnelEncapSubTLVEncapsulation.cookie)
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.TunnelEncapSubTLVEncapsulation.cookie)
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(const void* value,
    size_t size) {
  
  cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.TunnelEncapSubTLVEncapsulation.cookie)
}
inline std::string* TunnelEncapSubTLVEncapsulation::_internal_mutable_cookie() {
  
  return cookie_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TunnelEncapSubTLVEncapsulation::release_cookie() {
  // @@protoc_insertion_point(field_release:apipb.TunnelEncapSubTLVEncapsulation.cookie)
  return cookie_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TunnelEncapSubTLVEncapsulation::set_allocated_cookie(std::string* cookie) {
  if (cookie != nullptr) {
    
  } else {
    
  }
  cookie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cookie,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.TunnelEncapSubTLVEncapsulation.cookie)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVProtocol

// uint32 protocol = 1;
inline void TunnelEncapSubTLVProtocol::clear_protocol() {
  protocol_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVProtocol::_internal_protocol() const {
  return protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVProtocol::protocol() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVProtocol.protocol)
  return _internal_protocol();
}
inline void TunnelEncapSubTLVProtocol::_internal_set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protocol_ = value;
}
inline void TunnelEncapSubTLVProtocol::set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVProtocol.protocol)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVColor

// uint32 color = 1;
inline void TunnelEncapSubTLVColor::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVColor::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVColor::color() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVColor.color)
  return _internal_color();
}
inline void TunnelEncapSubTLVColor::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void TunnelEncapSubTLVColor::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVColor.color)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVSRPreference

// uint32 flags = 1;
inline void TunnelEncapSubTLVSRPreference::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRPreference::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRPreference::flags() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRPreference.flags)
  return _internal_flags();
}
inline void TunnelEncapSubTLVSRPreference::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void TunnelEncapSubTLVSRPreference::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVSRPreference.flags)
}

// uint32 preference = 2;
inline void TunnelEncapSubTLVSRPreference::clear_preference() {
  preference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRPreference::_internal_preference() const {
  return preference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRPreference::preference() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRPreference.preference)
  return _internal_preference();
}
inline void TunnelEncapSubTLVSRPreference::_internal_set_preference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  preference_ = value;
}
inline void TunnelEncapSubTLVSRPreference::set_preference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preference(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVSRPreference.preference)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVSRCandidatePathName

// string candidate_path_name = 1;
inline void TunnelEncapSubTLVSRCandidatePathName::clear_candidate_path_name() {
  candidate_path_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TunnelEncapSubTLVSRCandidatePathName::candidate_path_name() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
  return _internal_candidate_path_name();
}
inline void TunnelEncapSubTLVSRCandidatePathName::set_candidate_path_name(const std::string& value) {
  _internal_set_candidate_path_name(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
}
inline std::string* TunnelEncapSubTLVSRCandidatePathName::mutable_candidate_path_name() {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
  return _internal_mutable_candidate_path_name();
}
inline const std::string& TunnelEncapSubTLVSRCandidatePathName::_internal_candidate_path_name() const {
  return candidate_path_name_.Get();
}
inline void TunnelEncapSubTLVSRCandidatePathName::_internal_set_candidate_path_name(const std::string& value) {
  
  candidate_path_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TunnelEncapSubTLVSRCandidatePathName::set_candidate_path_name(std::string&& value) {
  
  candidate_path_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
}
inline void TunnelEncapSubTLVSRCandidatePathName::set_candidate_path_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidate_path_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
}
inline void TunnelEncapSubTLVSRCandidatePathName::set_candidate_path_name(const char* value,
    size_t size) {
  
  candidate_path_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
}
inline std::string* TunnelEncapSubTLVSRCandidatePathName::_internal_mutable_candidate_path_name() {
  
  return candidate_path_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TunnelEncapSubTLVSRCandidatePathName::release_candidate_path_name() {
  // @@protoc_insertion_point(field_release:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
  return candidate_path_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TunnelEncapSubTLVSRCandidatePathName::set_allocated_candidate_path_name(std::string* candidate_path_name) {
  if (candidate_path_name != nullptr) {
    
  } else {
    
  }
  candidate_path_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate_path_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.TunnelEncapSubTLVSRCandidatePathName.candidate_path_name)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVSRPriority

// uint32 priority = 1;
inline void TunnelEncapSubTLVSRPriority::clear_priority() {
  priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRPriority::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRPriority::priority() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRPriority.priority)
  return _internal_priority();
}
inline void TunnelEncapSubTLVSRPriority::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  priority_ = value;
}
inline void TunnelEncapSubTLVSRPriority::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVSRPriority.priority)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVSRBindingSID

// .google.protobuf.Any bsid = 1;
inline bool TunnelEncapSubTLVSRBindingSID::_internal_has_bsid() const {
  return this != internal_default_instance() && bsid_ != nullptr;
}
inline bool TunnelEncapSubTLVSRBindingSID::has_bsid() const {
  return _internal_has_bsid();
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapSubTLVSRBindingSID::_internal_bsid() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = bsid_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapSubTLVSRBindingSID::bsid() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRBindingSID.bsid)
  return _internal_bsid();
}
inline void TunnelEncapSubTLVSRBindingSID::unsafe_arena_set_allocated_bsid(
    PROTOBUF_NAMESPACE_ID::Any* bsid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsid_);
  }
  bsid_ = bsid;
  if (bsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.TunnelEncapSubTLVSRBindingSID.bsid)
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRBindingSID::release_bsid() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = bsid_;
  bsid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRBindingSID::unsafe_arena_release_bsid() {
  // @@protoc_insertion_point(field_release:apipb.TunnelEncapSubTLVSRBindingSID.bsid)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = bsid_;
  bsid_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRBindingSID::_internal_mutable_bsid() {
  
  if (bsid_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    bsid_ = p;
  }
  return bsid_;
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRBindingSID::mutable_bsid() {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVSRBindingSID.bsid)
  return _internal_mutable_bsid();
}
inline void TunnelEncapSubTLVSRBindingSID::set_allocated_bsid(PROTOBUF_NAMESPACE_ID::Any* bsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsid_);
  }
  if (bsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsid)->GetArena();
    if (message_arena != submessage_arena) {
      bsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsid, submessage_arena);
    }
    
  } else {
    
  }
  bsid_ = bsid;
  // @@protoc_insertion_point(field_set_allocated:apipb.TunnelEncapSubTLVSRBindingSID.bsid)
}

// -------------------------------------------------------------------

// SRBindingSID

// bool s_flag = 1;
inline void SRBindingSID::clear_s_flag() {
  s_flag_ = false;
}
inline bool SRBindingSID::_internal_s_flag() const {
  return s_flag_;
}
inline bool SRBindingSID::s_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SRBindingSID.s_flag)
  return _internal_s_flag();
}
inline void SRBindingSID::_internal_set_s_flag(bool value) {
  
  s_flag_ = value;
}
inline void SRBindingSID::set_s_flag(bool value) {
  _internal_set_s_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SRBindingSID.s_flag)
}

// bool i_flag = 2;
inline void SRBindingSID::clear_i_flag() {
  i_flag_ = false;
}
inline bool SRBindingSID::_internal_i_flag() const {
  return i_flag_;
}
inline bool SRBindingSID::i_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SRBindingSID.i_flag)
  return _internal_i_flag();
}
inline void SRBindingSID::_internal_set_i_flag(bool value) {
  
  i_flag_ = value;
}
inline void SRBindingSID::set_i_flag(bool value) {
  _internal_set_i_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SRBindingSID.i_flag)
}

// bytes sid = 3;
inline void SRBindingSID::clear_sid() {
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SRBindingSID::sid() const {
  // @@protoc_insertion_point(field_get:apipb.SRBindingSID.sid)
  return _internal_sid();
}
inline void SRBindingSID::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:apipb.SRBindingSID.sid)
}
inline std::string* SRBindingSID::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.SRBindingSID.sid)
  return _internal_mutable_sid();
}
inline const std::string& SRBindingSID::_internal_sid() const {
  return sid_.Get();
}
inline void SRBindingSID::_internal_set_sid(const std::string& value) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SRBindingSID::set_sid(std::string&& value) {
  
  sid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.SRBindingSID.sid)
}
inline void SRBindingSID::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.SRBindingSID.sid)
}
inline void SRBindingSID::set_sid(const void* value,
    size_t size) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.SRBindingSID.sid)
}
inline std::string* SRBindingSID::_internal_mutable_sid() {
  
  return sid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SRBindingSID::release_sid() {
  // @@protoc_insertion_point(field_release:apipb.SRBindingSID.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRBindingSID::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.SRBindingSID.sid)
}

// -------------------------------------------------------------------

// SRv6EndPointBehavior

// .apipb.SRv6Behavior behavior = 1;
inline void SRv6EndPointBehavior::clear_behavior() {
  behavior_ = 0;
}
inline ::apipb::SRv6Behavior SRv6EndPointBehavior::_internal_behavior() const {
  return static_cast< ::apipb::SRv6Behavior >(behavior_);
}
inline ::apipb::SRv6Behavior SRv6EndPointBehavior::behavior() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6EndPointBehavior.behavior)
  return _internal_behavior();
}
inline void SRv6EndPointBehavior::_internal_set_behavior(::apipb::SRv6Behavior value) {
  
  behavior_ = value;
}
inline void SRv6EndPointBehavior::set_behavior(::apipb::SRv6Behavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6EndPointBehavior.behavior)
}

// uint32 block_len = 2;
inline void SRv6EndPointBehavior::clear_block_len() {
  block_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::_internal_block_len() const {
  return block_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::block_len() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6EndPointBehavior.block_len)
  return _internal_block_len();
}
inline void SRv6EndPointBehavior::_internal_set_block_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_len_ = value;
}
inline void SRv6EndPointBehavior::set_block_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_len(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6EndPointBehavior.block_len)
}

// uint32 node_len = 3;
inline void SRv6EndPointBehavior::clear_node_len() {
  node_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::_internal_node_len() const {
  return node_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::node_len() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6EndPointBehavior.node_len)
  return _internal_node_len();
}
inline void SRv6EndPointBehavior::_internal_set_node_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_len_ = value;
}
inline void SRv6EndPointBehavior::set_node_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_len(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6EndPointBehavior.node_len)
}

// uint32 func_len = 4;
inline void SRv6EndPointBehavior::clear_func_len() {
  func_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::_internal_func_len() const {
  return func_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::func_len() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6EndPointBehavior.func_len)
  return _internal_func_len();
}
inline void SRv6EndPointBehavior::_internal_set_func_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  func_len_ = value;
}
inline void SRv6EndPointBehavior::set_func_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_func_len(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6EndPointBehavior.func_len)
}

// uint32 arg_len = 5;
inline void SRv6EndPointBehavior::clear_arg_len() {
  arg_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::_internal_arg_len() const {
  return arg_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6EndPointBehavior::arg_len() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6EndPointBehavior.arg_len)
  return _internal_arg_len();
}
inline void SRv6EndPointBehavior::_internal_set_arg_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  arg_len_ = value;
}
inline void SRv6EndPointBehavior::set_arg_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_arg_len(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6EndPointBehavior.arg_len)
}

// -------------------------------------------------------------------

// SRv6BindingSID

// bool s_flag = 1;
inline void SRv6BindingSID::clear_s_flag() {
  s_flag_ = false;
}
inline bool SRv6BindingSID::_internal_s_flag() const {
  return s_flag_;
}
inline bool SRv6BindingSID::s_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6BindingSID.s_flag)
  return _internal_s_flag();
}
inline void SRv6BindingSID::_internal_set_s_flag(bool value) {
  
  s_flag_ = value;
}
inline void SRv6BindingSID::set_s_flag(bool value) {
  _internal_set_s_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6BindingSID.s_flag)
}

// bool i_flag = 2;
inline void SRv6BindingSID::clear_i_flag() {
  i_flag_ = false;
}
inline bool SRv6BindingSID::_internal_i_flag() const {
  return i_flag_;
}
inline bool SRv6BindingSID::i_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6BindingSID.i_flag)
  return _internal_i_flag();
}
inline void SRv6BindingSID::_internal_set_i_flag(bool value) {
  
  i_flag_ = value;
}
inline void SRv6BindingSID::set_i_flag(bool value) {
  _internal_set_i_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6BindingSID.i_flag)
}

// bool b_flag = 3;
inline void SRv6BindingSID::clear_b_flag() {
  b_flag_ = false;
}
inline bool SRv6BindingSID::_internal_b_flag() const {
  return b_flag_;
}
inline bool SRv6BindingSID::b_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6BindingSID.b_flag)
  return _internal_b_flag();
}
inline void SRv6BindingSID::_internal_set_b_flag(bool value) {
  
  b_flag_ = value;
}
inline void SRv6BindingSID::set_b_flag(bool value) {
  _internal_set_b_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6BindingSID.b_flag)
}

// bytes sid = 4;
inline void SRv6BindingSID::clear_sid() {
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SRv6BindingSID::sid() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6BindingSID.sid)
  return _internal_sid();
}
inline void SRv6BindingSID::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6BindingSID.sid)
}
inline std::string* SRv6BindingSID::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.SRv6BindingSID.sid)
  return _internal_mutable_sid();
}
inline const std::string& SRv6BindingSID::_internal_sid() const {
  return sid_.Get();
}
inline void SRv6BindingSID::_internal_set_sid(const std::string& value) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SRv6BindingSID::set_sid(std::string&& value) {
  
  sid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.SRv6BindingSID.sid)
}
inline void SRv6BindingSID::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.SRv6BindingSID.sid)
}
inline void SRv6BindingSID::set_sid(const void* value,
    size_t size) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.SRv6BindingSID.sid)
}
inline std::string* SRv6BindingSID::_internal_mutable_sid() {
  
  return sid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SRv6BindingSID::release_sid() {
  // @@protoc_insertion_point(field_release:apipb.SRv6BindingSID.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRv6BindingSID::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.SRv6BindingSID.sid)
}

// .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 5;
inline bool SRv6BindingSID::_internal_has_endpoint_behavior_structure() const {
  return this != internal_default_instance() && endpoint_behavior_structure_ != nullptr;
}
inline bool SRv6BindingSID::has_endpoint_behavior_structure() const {
  return _internal_has_endpoint_behavior_structure();
}
inline void SRv6BindingSID::clear_endpoint_behavior_structure() {
  if (GetArena() == nullptr && endpoint_behavior_structure_ != nullptr) {
    delete endpoint_behavior_structure_;
  }
  endpoint_behavior_structure_ = nullptr;
}
inline const ::apipb::SRv6EndPointBehavior& SRv6BindingSID::_internal_endpoint_behavior_structure() const {
  const ::apipb::SRv6EndPointBehavior* p = endpoint_behavior_structure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::SRv6EndPointBehavior*>(
      &::apipb::_SRv6EndPointBehavior_default_instance_);
}
inline const ::apipb::SRv6EndPointBehavior& SRv6BindingSID::endpoint_behavior_structure() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6BindingSID.endpoint_behavior_structure)
  return _internal_endpoint_behavior_structure();
}
inline void SRv6BindingSID::unsafe_arena_set_allocated_endpoint_behavior_structure(
    ::apipb::SRv6EndPointBehavior* endpoint_behavior_structure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint_behavior_structure_);
  }
  endpoint_behavior_structure_ = endpoint_behavior_structure;
  if (endpoint_behavior_structure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.SRv6BindingSID.endpoint_behavior_structure)
}
inline ::apipb::SRv6EndPointBehavior* SRv6BindingSID::release_endpoint_behavior_structure() {
  
  ::apipb::SRv6EndPointBehavior* temp = endpoint_behavior_structure_;
  endpoint_behavior_structure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::SRv6EndPointBehavior* SRv6BindingSID::unsafe_arena_release_endpoint_behavior_structure() {
  // @@protoc_insertion_point(field_release:apipb.SRv6BindingSID.endpoint_behavior_structure)
  
  ::apipb::SRv6EndPointBehavior* temp = endpoint_behavior_structure_;
  endpoint_behavior_structure_ = nullptr;
  return temp;
}
inline ::apipb::SRv6EndPointBehavior* SRv6BindingSID::_internal_mutable_endpoint_behavior_structure() {
  
  if (endpoint_behavior_structure_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::SRv6EndPointBehavior>(GetArena());
    endpoint_behavior_structure_ = p;
  }
  return endpoint_behavior_structure_;
}
inline ::apipb::SRv6EndPointBehavior* SRv6BindingSID::mutable_endpoint_behavior_structure() {
  // @@protoc_insertion_point(field_mutable:apipb.SRv6BindingSID.endpoint_behavior_structure)
  return _internal_mutable_endpoint_behavior_structure();
}
inline void SRv6BindingSID::set_allocated_endpoint_behavior_structure(::apipb::SRv6EndPointBehavior* endpoint_behavior_structure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete endpoint_behavior_structure_;
  }
  if (endpoint_behavior_structure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(endpoint_behavior_structure);
    if (message_arena != submessage_arena) {
      endpoint_behavior_structure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint_behavior_structure, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_behavior_structure_ = endpoint_behavior_structure;
  // @@protoc_insertion_point(field_set_allocated:apipb.SRv6BindingSID.endpoint_behavior_structure)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVSRENLP

// uint32 flags = 1;
inline void TunnelEncapSubTLVSRENLP::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRENLP::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVSRENLP::flags() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRENLP.flags)
  return _internal_flags();
}
inline void TunnelEncapSubTLVSRENLP::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void TunnelEncapSubTLVSRENLP::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVSRENLP.flags)
}

// .apipb.ENLPType enlp = 2;
inline void TunnelEncapSubTLVSRENLP::clear_enlp() {
  enlp_ = 0;
}
inline ::apipb::ENLPType TunnelEncapSubTLVSRENLP::_internal_enlp() const {
  return static_cast< ::apipb::ENLPType >(enlp_);
}
inline ::apipb::ENLPType TunnelEncapSubTLVSRENLP::enlp() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRENLP.enlp)
  return _internal_enlp();
}
inline void TunnelEncapSubTLVSRENLP::_internal_set_enlp(::apipb::ENLPType value) {
  
  enlp_ = value;
}
inline void TunnelEncapSubTLVSRENLP::set_enlp(::apipb::ENLPType value) {
  _internal_set_enlp(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVSRENLP.enlp)
}

// -------------------------------------------------------------------

// SRWeight

// uint32 flags = 1;
inline void SRWeight::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRWeight::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRWeight::flags() const {
  // @@protoc_insertion_point(field_get:apipb.SRWeight.flags)
  return _internal_flags();
}
inline void SRWeight::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void SRWeight::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:apipb.SRWeight.flags)
}

// uint32 weight = 2;
inline void SRWeight::clear_weight() {
  weight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRWeight::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRWeight::weight() const {
  // @@protoc_insertion_point(field_get:apipb.SRWeight.weight)
  return _internal_weight();
}
inline void SRWeight::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weight_ = value;
}
inline void SRWeight::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:apipb.SRWeight.weight)
}

// -------------------------------------------------------------------

// SegmentFlags

// bool v_flag = 1;
inline void SegmentFlags::clear_v_flag() {
  v_flag_ = false;
}
inline bool SegmentFlags::_internal_v_flag() const {
  return v_flag_;
}
inline bool SegmentFlags::v_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentFlags.v_flag)
  return _internal_v_flag();
}
inline void SegmentFlags::_internal_set_v_flag(bool value) {
  
  v_flag_ = value;
}
inline void SegmentFlags::set_v_flag(bool value) {
  _internal_set_v_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SegmentFlags.v_flag)
}

// bool a_flag = 2;
inline void SegmentFlags::clear_a_flag() {
  a_flag_ = false;
}
inline bool SegmentFlags::_internal_a_flag() const {
  return a_flag_;
}
inline bool SegmentFlags::a_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentFlags.a_flag)
  return _internal_a_flag();
}
inline void SegmentFlags::_internal_set_a_flag(bool value) {
  
  a_flag_ = value;
}
inline void SegmentFlags::set_a_flag(bool value) {
  _internal_set_a_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SegmentFlags.a_flag)
}

// bool s_flag = 3;
inline void SegmentFlags::clear_s_flag() {
  s_flag_ = false;
}
inline bool SegmentFlags::_internal_s_flag() const {
  return s_flag_;
}
inline bool SegmentFlags::s_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentFlags.s_flag)
  return _internal_s_flag();
}
inline void SegmentFlags::_internal_set_s_flag(bool value) {
  
  s_flag_ = value;
}
inline void SegmentFlags::set_s_flag(bool value) {
  _internal_set_s_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SegmentFlags.s_flag)
}

// bool b_flag = 4;
inline void SegmentFlags::clear_b_flag() {
  b_flag_ = false;
}
inline bool SegmentFlags::_internal_b_flag() const {
  return b_flag_;
}
inline bool SegmentFlags::b_flag() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentFlags.b_flag)
  return _internal_b_flag();
}
inline void SegmentFlags::_internal_set_b_flag(bool value) {
  
  b_flag_ = value;
}
inline void SegmentFlags::set_b_flag(bool value) {
  _internal_set_b_flag(value);
  // @@protoc_insertion_point(field_set:apipb.SegmentFlags.b_flag)
}

// -------------------------------------------------------------------

// SegmentTypeA

// .apipb.SegmentFlags flags = 1;
inline bool SegmentTypeA::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool SegmentTypeA::has_flags() const {
  return _internal_has_flags();
}
inline void SegmentTypeA::clear_flags() {
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::apipb::SegmentFlags& SegmentTypeA::_internal_flags() const {
  const ::apipb::SegmentFlags* p = flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::SegmentFlags*>(
      &::apipb::_SegmentFlags_default_instance_);
}
inline const ::apipb::SegmentFlags& SegmentTypeA::flags() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentTypeA.flags)
  return _internal_flags();
}
inline void SegmentTypeA::unsafe_arena_set_allocated_flags(
    ::apipb::SegmentFlags* flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.SegmentTypeA.flags)
}
inline ::apipb::SegmentFlags* SegmentTypeA::release_flags() {
  
  ::apipb::SegmentFlags* temp = flags_;
  flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::SegmentFlags* SegmentTypeA::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_release:apipb.SegmentTypeA.flags)
  
  ::apipb::SegmentFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::apipb::SegmentFlags* SegmentTypeA::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::SegmentFlags>(GetArena());
    flags_ = p;
  }
  return flags_;
}
inline ::apipb::SegmentFlags* SegmentTypeA::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:apipb.SegmentTypeA.flags)
  return _internal_mutable_flags();
}
inline void SegmentTypeA::set_allocated_flags(::apipb::SegmentFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flags);
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:apipb.SegmentTypeA.flags)
}

// uint32 label = 2;
inline void SegmentTypeA::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentTypeA::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentTypeA::label() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentTypeA.label)
  return _internal_label();
}
inline void SegmentTypeA::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void SegmentTypeA::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apipb.SegmentTypeA.label)
}

// -------------------------------------------------------------------

// SegmentTypeB

// .apipb.SegmentFlags flags = 1;
inline bool SegmentTypeB::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool SegmentTypeB::has_flags() const {
  return _internal_has_flags();
}
inline void SegmentTypeB::clear_flags() {
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::apipb::SegmentFlags& SegmentTypeB::_internal_flags() const {
  const ::apipb::SegmentFlags* p = flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::SegmentFlags*>(
      &::apipb::_SegmentFlags_default_instance_);
}
inline const ::apipb::SegmentFlags& SegmentTypeB::flags() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentTypeB.flags)
  return _internal_flags();
}
inline void SegmentTypeB::unsafe_arena_set_allocated_flags(
    ::apipb::SegmentFlags* flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.SegmentTypeB.flags)
}
inline ::apipb::SegmentFlags* SegmentTypeB::release_flags() {
  
  ::apipb::SegmentFlags* temp = flags_;
  flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::SegmentFlags* SegmentTypeB::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_release:apipb.SegmentTypeB.flags)
  
  ::apipb::SegmentFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::apipb::SegmentFlags* SegmentTypeB::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::SegmentFlags>(GetArena());
    flags_ = p;
  }
  return flags_;
}
inline ::apipb::SegmentFlags* SegmentTypeB::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:apipb.SegmentTypeB.flags)
  return _internal_mutable_flags();
}
inline void SegmentTypeB::set_allocated_flags(::apipb::SegmentFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flags);
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:apipb.SegmentTypeB.flags)
}

// bytes sid = 2;
inline void SegmentTypeB::clear_sid() {
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SegmentTypeB::sid() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentTypeB.sid)
  return _internal_sid();
}
inline void SegmentTypeB::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:apipb.SegmentTypeB.sid)
}
inline std::string* SegmentTypeB::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.SegmentTypeB.sid)
  return _internal_mutable_sid();
}
inline const std::string& SegmentTypeB::_internal_sid() const {
  return sid_.Get();
}
inline void SegmentTypeB::_internal_set_sid(const std::string& value) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SegmentTypeB::set_sid(std::string&& value) {
  
  sid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.SegmentTypeB.sid)
}
inline void SegmentTypeB::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.SegmentTypeB.sid)
}
inline void SegmentTypeB::set_sid(const void* value,
    size_t size) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.SegmentTypeB.sid)
}
inline std::string* SegmentTypeB::_internal_mutable_sid() {
  
  return sid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SegmentTypeB::release_sid() {
  // @@protoc_insertion_point(field_release:apipb.SegmentTypeB.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SegmentTypeB::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.SegmentTypeB.sid)
}

// .apipb.SRv6EndPointBehavior endpoint_behavior_structure = 3;
inline bool SegmentTypeB::_internal_has_endpoint_behavior_structure() const {
  return this != internal_default_instance() && endpoint_behavior_structure_ != nullptr;
}
inline bool SegmentTypeB::has_endpoint_behavior_structure() const {
  return _internal_has_endpoint_behavior_structure();
}
inline void SegmentTypeB::clear_endpoint_behavior_structure() {
  if (GetArena() == nullptr && endpoint_behavior_structure_ != nullptr) {
    delete endpoint_behavior_structure_;
  }
  endpoint_behavior_structure_ = nullptr;
}
inline const ::apipb::SRv6EndPointBehavior& SegmentTypeB::_internal_endpoint_behavior_structure() const {
  const ::apipb::SRv6EndPointBehavior* p = endpoint_behavior_structure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::SRv6EndPointBehavior*>(
      &::apipb::_SRv6EndPointBehavior_default_instance_);
}
inline const ::apipb::SRv6EndPointBehavior& SegmentTypeB::endpoint_behavior_structure() const {
  // @@protoc_insertion_point(field_get:apipb.SegmentTypeB.endpoint_behavior_structure)
  return _internal_endpoint_behavior_structure();
}
inline void SegmentTypeB::unsafe_arena_set_allocated_endpoint_behavior_structure(
    ::apipb::SRv6EndPointBehavior* endpoint_behavior_structure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint_behavior_structure_);
  }
  endpoint_behavior_structure_ = endpoint_behavior_structure;
  if (endpoint_behavior_structure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.SegmentTypeB.endpoint_behavior_structure)
}
inline ::apipb::SRv6EndPointBehavior* SegmentTypeB::release_endpoint_behavior_structure() {
  
  ::apipb::SRv6EndPointBehavior* temp = endpoint_behavior_structure_;
  endpoint_behavior_structure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::SRv6EndPointBehavior* SegmentTypeB::unsafe_arena_release_endpoint_behavior_structure() {
  // @@protoc_insertion_point(field_release:apipb.SegmentTypeB.endpoint_behavior_structure)
  
  ::apipb::SRv6EndPointBehavior* temp = endpoint_behavior_structure_;
  endpoint_behavior_structure_ = nullptr;
  return temp;
}
inline ::apipb::SRv6EndPointBehavior* SegmentTypeB::_internal_mutable_endpoint_behavior_structure() {
  
  if (endpoint_behavior_structure_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::SRv6EndPointBehavior>(GetArena());
    endpoint_behavior_structure_ = p;
  }
  return endpoint_behavior_structure_;
}
inline ::apipb::SRv6EndPointBehavior* SegmentTypeB::mutable_endpoint_behavior_structure() {
  // @@protoc_insertion_point(field_mutable:apipb.SegmentTypeB.endpoint_behavior_structure)
  return _internal_mutable_endpoint_behavior_structure();
}
inline void SegmentTypeB::set_allocated_endpoint_behavior_structure(::apipb::SRv6EndPointBehavior* endpoint_behavior_structure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete endpoint_behavior_structure_;
  }
  if (endpoint_behavior_structure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(endpoint_behavior_structure);
    if (message_arena != submessage_arena) {
      endpoint_behavior_structure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint_behavior_structure, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_behavior_structure_ = endpoint_behavior_structure;
  // @@protoc_insertion_point(field_set_allocated:apipb.SegmentTypeB.endpoint_behavior_structure)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVSRSegmentList

// .apipb.SRWeight weight = 1;
inline bool TunnelEncapSubTLVSRSegmentList::_internal_has_weight() const {
  return this != internal_default_instance() && weight_ != nullptr;
}
inline bool TunnelEncapSubTLVSRSegmentList::has_weight() const {
  return _internal_has_weight();
}
inline void TunnelEncapSubTLVSRSegmentList::clear_weight() {
  if (GetArena() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
}
inline const ::apipb::SRWeight& TunnelEncapSubTLVSRSegmentList::_internal_weight() const {
  const ::apipb::SRWeight* p = weight_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::SRWeight*>(
      &::apipb::_SRWeight_default_instance_);
}
inline const ::apipb::SRWeight& TunnelEncapSubTLVSRSegmentList::weight() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRSegmentList.weight)
  return _internal_weight();
}
inline void TunnelEncapSubTLVSRSegmentList::unsafe_arena_set_allocated_weight(
    ::apipb::SRWeight* weight) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.TunnelEncapSubTLVSRSegmentList.weight)
}
inline ::apipb::SRWeight* TunnelEncapSubTLVSRSegmentList::release_weight() {
  
  ::apipb::SRWeight* temp = weight_;
  weight_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::SRWeight* TunnelEncapSubTLVSRSegmentList::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_release:apipb.TunnelEncapSubTLVSRSegmentList.weight)
  
  ::apipb::SRWeight* temp = weight_;
  weight_ = nullptr;
  return temp;
}
inline ::apipb::SRWeight* TunnelEncapSubTLVSRSegmentList::_internal_mutable_weight() {
  
  if (weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::SRWeight>(GetArena());
    weight_ = p;
  }
  return weight_;
}
inline ::apipb::SRWeight* TunnelEncapSubTLVSRSegmentList::mutable_weight() {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVSRSegmentList.weight)
  return _internal_mutable_weight();
}
inline void TunnelEncapSubTLVSRSegmentList::set_allocated_weight(::apipb::SRWeight* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weight_;
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weight);
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:apipb.TunnelEncapSubTLVSRSegmentList.weight)
}

// repeated .google.protobuf.Any segments = 2;
inline int TunnelEncapSubTLVSRSegmentList::_internal_segments_size() const {
  return segments_.size();
}
inline int TunnelEncapSubTLVSRSegmentList::segments_size() const {
  return _internal_segments_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRSegmentList::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVSRSegmentList.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
TunnelEncapSubTLVSRSegmentList::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:apipb.TunnelEncapSubTLVSRSegmentList.segments)
  return &segments_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapSubTLVSRSegmentList::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapSubTLVSRSegmentList::segments(int index) const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVSRSegmentList.segments)
  return _internal_segments(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRSegmentList::_internal_add_segments() {
  return segments_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapSubTLVSRSegmentList::add_segments() {
  // @@protoc_insertion_point(field_add:apipb.TunnelEncapSubTLVSRSegmentList.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
TunnelEncapSubTLVSRSegmentList::segments() const {
  // @@protoc_insertion_point(field_list:apipb.TunnelEncapSubTLVSRSegmentList.segments)
  return segments_;
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVEgressEndpoint

// string address = 1;
inline void TunnelEncapSubTLVEgressEndpoint::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TunnelEncapSubTLVEgressEndpoint::address() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVEgressEndpoint.address)
  return _internal_address();
}
inline void TunnelEncapSubTLVEgressEndpoint::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVEgressEndpoint.address)
}
inline std::string* TunnelEncapSubTLVEgressEndpoint::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVEgressEndpoint.address)
  return _internal_mutable_address();
}
inline const std::string& TunnelEncapSubTLVEgressEndpoint::_internal_address() const {
  return address_.Get();
}
inline void TunnelEncapSubTLVEgressEndpoint::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TunnelEncapSubTLVEgressEndpoint::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.TunnelEncapSubTLVEgressEndpoint.address)
}
inline void TunnelEncapSubTLVEgressEndpoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.TunnelEncapSubTLVEgressEndpoint.address)
}
inline void TunnelEncapSubTLVEgressEndpoint::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.TunnelEncapSubTLVEgressEndpoint.address)
}
inline std::string* TunnelEncapSubTLVEgressEndpoint::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TunnelEncapSubTLVEgressEndpoint::release_address() {
  // @@protoc_insertion_point(field_release:apipb.TunnelEncapSubTLVEgressEndpoint.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TunnelEncapSubTLVEgressEndpoint::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.TunnelEncapSubTLVEgressEndpoint.address)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVUDPDestPort

// uint32 port = 1;
inline void TunnelEncapSubTLVUDPDestPort::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVUDPDestPort::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVUDPDestPort::port() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVUDPDestPort.port)
  return _internal_port();
}
inline void TunnelEncapSubTLVUDPDestPort::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TunnelEncapSubTLVUDPDestPort::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVUDPDestPort.port)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVUnknown

// uint32 type = 1;
inline void TunnelEncapSubTLVUnknown::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVUnknown::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVUnknown::type() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVUnknown.type)
  return _internal_type();
}
inline void TunnelEncapSubTLVUnknown::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TunnelEncapSubTLVUnknown::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVUnknown.type)
}

// bytes value = 2;
inline void TunnelEncapSubTLVUnknown::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TunnelEncapSubTLVUnknown::value() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapSubTLVUnknown.value)
  return _internal_value();
}
inline void TunnelEncapSubTLVUnknown::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapSubTLVUnknown.value)
}
inline std::string* TunnelEncapSubTLVUnknown::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapSubTLVUnknown.value)
  return _internal_mutable_value();
}
inline const std::string& TunnelEncapSubTLVUnknown::_internal_value() const {
  return value_.Get();
}
inline void TunnelEncapSubTLVUnknown::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TunnelEncapSubTLVUnknown::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.TunnelEncapSubTLVUnknown.value)
}
inline void TunnelEncapSubTLVUnknown::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.TunnelEncapSubTLVUnknown.value)
}
inline void TunnelEncapSubTLVUnknown::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.TunnelEncapSubTLVUnknown.value)
}
inline std::string* TunnelEncapSubTLVUnknown::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TunnelEncapSubTLVUnknown::release_value() {
  // @@protoc_insertion_point(field_release:apipb.TunnelEncapSubTLVUnknown.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TunnelEncapSubTLVUnknown::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.TunnelEncapSubTLVUnknown.value)
}

// -------------------------------------------------------------------

// TunnelEncapTLV

// uint32 type = 1;
inline void TunnelEncapTLV::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapTLV::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapTLV::type() const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapTLV.type)
  return _internal_type();
}
inline void TunnelEncapTLV::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TunnelEncapTLV::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.TunnelEncapTLV.type)
}

// repeated .google.protobuf.Any tlvs = 2;
inline int TunnelEncapTLV::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int TunnelEncapTLV::tlvs_size() const {
  return _internal_tlvs_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapTLV::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapTLV.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
TunnelEncapTLV::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:apipb.TunnelEncapTLV.tlvs)
  return &tlvs_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapTLV::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapTLV::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapTLV.tlvs)
  return _internal_tlvs(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapTLV::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapTLV::add_tlvs() {
  // @@protoc_insertion_point(field_add:apipb.TunnelEncapTLV.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
TunnelEncapTLV::tlvs() const {
  // @@protoc_insertion_point(field_list:apipb.TunnelEncapTLV.tlvs)
  return tlvs_;
}

// -------------------------------------------------------------------

// TunnelEncapAttribute

// repeated .apipb.TunnelEncapTLV tlvs = 1;
inline int TunnelEncapAttribute::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int TunnelEncapAttribute::tlvs_size() const {
  return _internal_tlvs_size();
}
inline void TunnelEncapAttribute::clear_tlvs() {
  tlvs_.Clear();
}
inline ::apipb::TunnelEncapTLV* TunnelEncapAttribute::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.TunnelEncapAttribute.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::TunnelEncapTLV >*
TunnelEncapAttribute::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:apipb.TunnelEncapAttribute.tlvs)
  return &tlvs_;
}
inline const ::apipb::TunnelEncapTLV& TunnelEncapAttribute::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const ::apipb::TunnelEncapTLV& TunnelEncapAttribute::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:apipb.TunnelEncapAttribute.tlvs)
  return _internal_tlvs(index);
}
inline ::apipb::TunnelEncapTLV* TunnelEncapAttribute::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline ::apipb::TunnelEncapTLV* TunnelEncapAttribute::add_tlvs() {
  // @@protoc_insertion_point(field_add:apipb.TunnelEncapAttribute.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::TunnelEncapTLV >&
TunnelEncapAttribute::tlvs() const {
  // @@protoc_insertion_point(field_list:apipb.TunnelEncapAttribute.tlvs)
  return tlvs_;
}

// -------------------------------------------------------------------

// IPv6AddressSpecificExtended

// bool is_transitive = 1;
inline void IPv6AddressSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool IPv6AddressSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool IPv6AddressSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:apipb.IPv6AddressSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void IPv6AddressSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void IPv6AddressSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:apipb.IPv6AddressSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void IPv6AddressSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:apipb.IPv6AddressSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void IPv6AddressSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void IPv6AddressSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apipb.IPv6AddressSpecificExtended.sub_type)
}

// string address = 3;
inline void IPv6AddressSpecificExtended::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPv6AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:apipb.IPv6AddressSpecificExtended.address)
  return _internal_address();
}
inline void IPv6AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.IPv6AddressSpecificExtended.address)
}
inline std::string* IPv6AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.IPv6AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& IPv6AddressSpecificExtended::_internal_address() const {
  return address_.Get();
}
inline void IPv6AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPv6AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.IPv6AddressSpecificExtended.address)
}
inline void IPv6AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.IPv6AddressSpecificExtended.address)
}
inline void IPv6AddressSpecificExtended::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.IPv6AddressSpecificExtended.address)
}
inline std::string* IPv6AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPv6AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:apipb.IPv6AddressSpecificExtended.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPv6AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.IPv6AddressSpecificExtended.address)
}

// uint32 local_admin = 4;
inline void IPv6AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.IPv6AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void IPv6AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void IPv6AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.IPv6AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// RedirectIPv6AddressSpecificExtended

// string address = 1;
inline void RedirectIPv6AddressSpecificExtended::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RedirectIPv6AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectIPv6AddressSpecificExtended.address)
  return _internal_address();
}
inline void RedirectIPv6AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectIPv6AddressSpecificExtended.address)
}
inline std::string* RedirectIPv6AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:apipb.RedirectIPv6AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& RedirectIPv6AddressSpecificExtended::_internal_address() const {
  return address_.Get();
}
inline void RedirectIPv6AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RedirectIPv6AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.RedirectIPv6AddressSpecificExtended.address)
}
inline void RedirectIPv6AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.RedirectIPv6AddressSpecificExtended.address)
}
inline void RedirectIPv6AddressSpecificExtended::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.RedirectIPv6AddressSpecificExtended.address)
}
inline std::string* RedirectIPv6AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RedirectIPv6AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:apipb.RedirectIPv6AddressSpecificExtended.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RedirectIPv6AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.RedirectIPv6AddressSpecificExtended.address)
}

// uint32 local_admin = 2;
inline void RedirectIPv6AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv6AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv6AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:apipb.RedirectIPv6AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectIPv6AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectIPv6AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:apipb.RedirectIPv6AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// IP6ExtendedCommunitiesAttribute

// repeated .google.protobuf.Any communities = 1;
inline int IP6ExtendedCommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int IP6ExtendedCommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* IP6ExtendedCommunitiesAttribute::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.IP6ExtendedCommunitiesAttribute.communities)
  return communities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
IP6ExtendedCommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:apipb.IP6ExtendedCommunitiesAttribute.communities)
  return &communities_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& IP6ExtendedCommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& IP6ExtendedCommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:apipb.IP6ExtendedCommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* IP6ExtendedCommunitiesAttribute::_internal_add_communities() {
  return communities_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* IP6ExtendedCommunitiesAttribute::add_communities() {
  // @@protoc_insertion_point(field_add:apipb.IP6ExtendedCommunitiesAttribute.communities)
  return _internal_add_communities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
IP6ExtendedCommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:apipb.IP6ExtendedCommunitiesAttribute.communities)
  return communities_;
}

// -------------------------------------------------------------------

// AigpTLVIGPMetric

// uint64 metric = 1;
inline void AigpTLVIGPMetric::clear_metric() {
  metric_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AigpTLVIGPMetric::_internal_metric() const {
  return metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AigpTLVIGPMetric::metric() const {
  // @@protoc_insertion_point(field_get:apipb.AigpTLVIGPMetric.metric)
  return _internal_metric();
}
inline void AigpTLVIGPMetric::_internal_set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metric_ = value;
}
inline void AigpTLVIGPMetric::set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:apipb.AigpTLVIGPMetric.metric)
}

// -------------------------------------------------------------------

// AigpTLVUnknown

// uint32 type = 1;
inline void AigpTLVUnknown::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AigpTLVUnknown::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AigpTLVUnknown::type() const {
  // @@protoc_insertion_point(field_get:apipb.AigpTLVUnknown.type)
  return _internal_type();
}
inline void AigpTLVUnknown::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void AigpTLVUnknown::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.AigpTLVUnknown.type)
}

// bytes value = 2;
inline void AigpTLVUnknown::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AigpTLVUnknown::value() const {
  // @@protoc_insertion_point(field_get:apipb.AigpTLVUnknown.value)
  return _internal_value();
}
inline void AigpTLVUnknown::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.AigpTLVUnknown.value)
}
inline std::string* AigpTLVUnknown::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.AigpTLVUnknown.value)
  return _internal_mutable_value();
}
inline const std::string& AigpTLVUnknown::_internal_value() const {
  return value_.Get();
}
inline void AigpTLVUnknown::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AigpTLVUnknown::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.AigpTLVUnknown.value)
}
inline void AigpTLVUnknown::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.AigpTLVUnknown.value)
}
inline void AigpTLVUnknown::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.AigpTLVUnknown.value)
}
inline std::string* AigpTLVUnknown::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AigpTLVUnknown::release_value() {
  // @@protoc_insertion_point(field_release:apipb.AigpTLVUnknown.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AigpTLVUnknown::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.AigpTLVUnknown.value)
}

// -------------------------------------------------------------------

// AigpAttribute

// repeated .google.protobuf.Any tlvs = 1;
inline int AigpAttribute::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int AigpAttribute::tlvs_size() const {
  return _internal_tlvs_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* AigpAttribute::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.AigpAttribute.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
AigpAttribute::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:apipb.AigpAttribute.tlvs)
  return &tlvs_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& AigpAttribute::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& AigpAttribute::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:apipb.AigpAttribute.tlvs)
  return _internal_tlvs(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* AigpAttribute::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* AigpAttribute::add_tlvs() {
  // @@protoc_insertion_point(field_add:apipb.AigpAttribute.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
AigpAttribute::tlvs() const {
  // @@protoc_insertion_point(field_list:apipb.AigpAttribute.tlvs)
  return tlvs_;
}

// -------------------------------------------------------------------

// LargeCommunity

// uint32 global_admin = 1;
inline void LargeCommunity::clear_global_admin() {
  global_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::_internal_global_admin() const {
  return global_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::global_admin() const {
  // @@protoc_insertion_point(field_get:apipb.LargeCommunity.global_admin)
  return _internal_global_admin();
}
inline void LargeCommunity::_internal_set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_admin_ = value;
}
inline void LargeCommunity::set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_admin(value);
  // @@protoc_insertion_point(field_set:apipb.LargeCommunity.global_admin)
}

// uint32 local_data1 = 2;
inline void LargeCommunity::clear_local_data1() {
  local_data1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::_internal_local_data1() const {
  return local_data1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::local_data1() const {
  // @@protoc_insertion_point(field_get:apipb.LargeCommunity.local_data1)
  return _internal_local_data1();
}
inline void LargeCommunity::_internal_set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_data1_ = value;
}
inline void LargeCommunity::set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_data1(value);
  // @@protoc_insertion_point(field_set:apipb.LargeCommunity.local_data1)
}

// uint32 local_data2 = 3;
inline void LargeCommunity::clear_local_data2() {
  local_data2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::_internal_local_data2() const {
  return local_data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::local_data2() const {
  // @@protoc_insertion_point(field_get:apipb.LargeCommunity.local_data2)
  return _internal_local_data2();
}
inline void LargeCommunity::_internal_set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_data2_ = value;
}
inline void LargeCommunity::set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_data2(value);
  // @@protoc_insertion_point(field_set:apipb.LargeCommunity.local_data2)
}

// -------------------------------------------------------------------

// LargeCommunitiesAttribute

// repeated .apipb.LargeCommunity communities = 1;
inline int LargeCommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int LargeCommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline void LargeCommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
inline ::apipb::LargeCommunity* LargeCommunitiesAttribute::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.LargeCommunitiesAttribute.communities)
  return communities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LargeCommunity >*
LargeCommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LargeCommunitiesAttribute.communities)
  return &communities_;
}
inline const ::apipb::LargeCommunity& LargeCommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const ::apipb::LargeCommunity& LargeCommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LargeCommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline ::apipb::LargeCommunity* LargeCommunitiesAttribute::_internal_add_communities() {
  return communities_.Add();
}
inline ::apipb::LargeCommunity* LargeCommunitiesAttribute::add_communities() {
  // @@protoc_insertion_point(field_add:apipb.LargeCommunitiesAttribute.communities)
  return _internal_add_communities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LargeCommunity >&
LargeCommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:apipb.LargeCommunitiesAttribute.communities)
  return communities_;
}

// -------------------------------------------------------------------

// LsNodeFlags

// bool overload = 1;
inline void LsNodeFlags::clear_overload() {
  overload_ = false;
}
inline bool LsNodeFlags::_internal_overload() const {
  return overload_;
}
inline bool LsNodeFlags::overload() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeFlags.overload)
  return _internal_overload();
}
inline void LsNodeFlags::_internal_set_overload(bool value) {
  
  overload_ = value;
}
inline void LsNodeFlags::set_overload(bool value) {
  _internal_set_overload(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeFlags.overload)
}

// bool attached = 2;
inline void LsNodeFlags::clear_attached() {
  attached_ = false;
}
inline bool LsNodeFlags::_internal_attached() const {
  return attached_;
}
inline bool LsNodeFlags::attached() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeFlags.attached)
  return _internal_attached();
}
inline void LsNodeFlags::_internal_set_attached(bool value) {
  
  attached_ = value;
}
inline void LsNodeFlags::set_attached(bool value) {
  _internal_set_attached(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeFlags.attached)
}

// bool external = 3;
inline void LsNodeFlags::clear_external() {
  external_ = false;
}
inline bool LsNodeFlags::_internal_external() const {
  return external_;
}
inline bool LsNodeFlags::external() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeFlags.external)
  return _internal_external();
}
inline void LsNodeFlags::_internal_set_external(bool value) {
  
  external_ = value;
}
inline void LsNodeFlags::set_external(bool value) {
  _internal_set_external(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeFlags.external)
}

// bool abr = 4;
inline void LsNodeFlags::clear_abr() {
  abr_ = false;
}
inline bool LsNodeFlags::_internal_abr() const {
  return abr_;
}
inline bool LsNodeFlags::abr() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeFlags.abr)
  return _internal_abr();
}
inline void LsNodeFlags::_internal_set_abr(bool value) {
  
  abr_ = value;
}
inline void LsNodeFlags::set_abr(bool value) {
  _internal_set_abr(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeFlags.abr)
}

// bool router = 5;
inline void LsNodeFlags::clear_router() {
  router_ = false;
}
inline bool LsNodeFlags::_internal_router() const {
  return router_;
}
inline bool LsNodeFlags::router() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeFlags.router)
  return _internal_router();
}
inline void LsNodeFlags::_internal_set_router(bool value) {
  
  router_ = value;
}
inline void LsNodeFlags::set_router(bool value) {
  _internal_set_router(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeFlags.router)
}

// bool v6 = 6;
inline void LsNodeFlags::clear_v6() {
  v6_ = false;
}
inline bool LsNodeFlags::_internal_v6() const {
  return v6_;
}
inline bool LsNodeFlags::v6() const {
  // @@protoc_insertion_point(field_get:apipb.LsNodeFlags.v6)
  return _internal_v6();
}
inline void LsNodeFlags::_internal_set_v6(bool value) {
  
  v6_ = value;
}
inline void LsNodeFlags::set_v6(bool value) {
  _internal_set_v6(value);
  // @@protoc_insertion_point(field_set:apipb.LsNodeFlags.v6)
}

// -------------------------------------------------------------------

// LsIGPFlags

// bool down = 1;
inline void LsIGPFlags::clear_down() {
  down_ = false;
}
inline bool LsIGPFlags::_internal_down() const {
  return down_;
}
inline bool LsIGPFlags::down() const {
  // @@protoc_insertion_point(field_get:apipb.LsIGPFlags.down)
  return _internal_down();
}
inline void LsIGPFlags::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void LsIGPFlags::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:apipb.LsIGPFlags.down)
}

// bool no_unicast = 2;
inline void LsIGPFlags::clear_no_unicast() {
  no_unicast_ = false;
}
inline bool LsIGPFlags::_internal_no_unicast() const {
  return no_unicast_;
}
inline bool LsIGPFlags::no_unicast() const {
  // @@protoc_insertion_point(field_get:apipb.LsIGPFlags.no_unicast)
  return _internal_no_unicast();
}
inline void LsIGPFlags::_internal_set_no_unicast(bool value) {
  
  no_unicast_ = value;
}
inline void LsIGPFlags::set_no_unicast(bool value) {
  _internal_set_no_unicast(value);
  // @@protoc_insertion_point(field_set:apipb.LsIGPFlags.no_unicast)
}

// bool local_address = 3;
inline void LsIGPFlags::clear_local_address() {
  local_address_ = false;
}
inline bool LsIGPFlags::_internal_local_address() const {
  return local_address_;
}
inline bool LsIGPFlags::local_address() const {
  // @@protoc_insertion_point(field_get:apipb.LsIGPFlags.local_address)
  return _internal_local_address();
}
inline void LsIGPFlags::_internal_set_local_address(bool value) {
  
  local_address_ = value;
}
inline void LsIGPFlags::set_local_address(bool value) {
  _internal_set_local_address(value);
  // @@protoc_insertion_point(field_set:apipb.LsIGPFlags.local_address)
}

// bool propagate_nssa = 4;
inline void LsIGPFlags::clear_propagate_nssa() {
  propagate_nssa_ = false;
}
inline bool LsIGPFlags::_internal_propagate_nssa() const {
  return propagate_nssa_;
}
inline bool LsIGPFlags::propagate_nssa() const {
  // @@protoc_insertion_point(field_get:apipb.LsIGPFlags.propagate_nssa)
  return _internal_propagate_nssa();
}
inline void LsIGPFlags::_internal_set_propagate_nssa(bool value) {
  
  propagate_nssa_ = value;
}
inline void LsIGPFlags::set_propagate_nssa(bool value) {
  _internal_set_propagate_nssa(value);
  // @@protoc_insertion_point(field_set:apipb.LsIGPFlags.propagate_nssa)
}

// -------------------------------------------------------------------

// LsSrRange

// uint32 begin = 1;
inline void LsSrRange::clear_begin() {
  begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::begin() const {
  // @@protoc_insertion_point(field_get:apipb.LsSrRange.begin)
  return _internal_begin();
}
inline void LsSrRange::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  begin_ = value;
}
inline void LsSrRange::set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:apipb.LsSrRange.begin)
}

// uint32 end = 2;
inline void LsSrRange::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::end() const {
  // @@protoc_insertion_point(field_get:apipb.LsSrRange.end)
  return _internal_end();
}
inline void LsSrRange::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
}
inline void LsSrRange::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:apipb.LsSrRange.end)
}

// -------------------------------------------------------------------

// LsSrCapabilities

// bool ipv4_supported = 1;
inline void LsSrCapabilities::clear_ipv4_supported() {
  ipv4_supported_ = false;
}
inline bool LsSrCapabilities::_internal_ipv4_supported() const {
  return ipv4_supported_;
}
inline bool LsSrCapabilities::ipv4_supported() const {
  // @@protoc_insertion_point(field_get:apipb.LsSrCapabilities.ipv4_supported)
  return _internal_ipv4_supported();
}
inline void LsSrCapabilities::_internal_set_ipv4_supported(bool value) {
  
  ipv4_supported_ = value;
}
inline void LsSrCapabilities::set_ipv4_supported(bool value) {
  _internal_set_ipv4_supported(value);
  // @@protoc_insertion_point(field_set:apipb.LsSrCapabilities.ipv4_supported)
}

// bool ipv6_supported = 2;
inline void LsSrCapabilities::clear_ipv6_supported() {
  ipv6_supported_ = false;
}
inline bool LsSrCapabilities::_internal_ipv6_supported() const {
  return ipv6_supported_;
}
inline bool LsSrCapabilities::ipv6_supported() const {
  // @@protoc_insertion_point(field_get:apipb.LsSrCapabilities.ipv6_supported)
  return _internal_ipv6_supported();
}
inline void LsSrCapabilities::_internal_set_ipv6_supported(bool value) {
  
  ipv6_supported_ = value;
}
inline void LsSrCapabilities::set_ipv6_supported(bool value) {
  _internal_set_ipv6_supported(value);
  // @@protoc_insertion_point(field_set:apipb.LsSrCapabilities.ipv6_supported)
}

// repeated .apipb.LsSrRange ranges = 3;
inline int LsSrCapabilities::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LsSrCapabilities::ranges_size() const {
  return _internal_ranges_size();
}
inline void LsSrCapabilities::clear_ranges() {
  ranges_.Clear();
}
inline ::apipb::LsSrRange* LsSrCapabilities::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.LsSrCapabilities.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >*
LsSrCapabilities::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LsSrCapabilities.ranges)
  return &ranges_;
}
inline const ::apipb::LsSrRange& LsSrCapabilities::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::apipb::LsSrRange& LsSrCapabilities::ranges(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LsSrCapabilities.ranges)
  return _internal_ranges(index);
}
inline ::apipb::LsSrRange* LsSrCapabilities::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::apipb::LsSrRange* LsSrCapabilities::add_ranges() {
  // @@protoc_insertion_point(field_add:apipb.LsSrCapabilities.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >&
LsSrCapabilities::ranges() const {
  // @@protoc_insertion_point(field_list:apipb.LsSrCapabilities.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// LsSrLocalBlock

// repeated .apipb.LsSrRange ranges = 1;
inline int LsSrLocalBlock::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LsSrLocalBlock::ranges_size() const {
  return _internal_ranges_size();
}
inline void LsSrLocalBlock::clear_ranges() {
  ranges_.Clear();
}
inline ::apipb::LsSrRange* LsSrLocalBlock::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.LsSrLocalBlock.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >*
LsSrLocalBlock::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LsSrLocalBlock.ranges)
  return &ranges_;
}
inline const ::apipb::LsSrRange& LsSrLocalBlock::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::apipb::LsSrRange& LsSrLocalBlock::ranges(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LsSrLocalBlock.ranges)
  return _internal_ranges(index);
}
inline ::apipb::LsSrRange* LsSrLocalBlock::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::apipb::LsSrRange* LsSrLocalBlock::add_ranges() {
  // @@protoc_insertion_point(field_add:apipb.LsSrLocalBlock.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apipb::LsSrRange >&
LsSrLocalBlock::ranges() const {
  // @@protoc_insertion_point(field_list:apipb.LsSrLocalBlock.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// LsAttributeNode

// string name = 1;
inline void LsAttributeNode::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeNode::name() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.name)
  return _internal_name();
}
inline void LsAttributeNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeNode.name)
}
inline std::string* LsAttributeNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.name)
  return _internal_mutable_name();
}
inline const std::string& LsAttributeNode::_internal_name() const {
  return name_.Get();
}
inline void LsAttributeNode::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeNode::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeNode.name)
}
inline void LsAttributeNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeNode.name)
}
inline void LsAttributeNode::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeNode.name)
}
inline std::string* LsAttributeNode::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeNode::release_name() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.name)
}

// .apipb.LsNodeFlags flags = 2;
inline bool LsAttributeNode::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool LsAttributeNode::has_flags() const {
  return _internal_has_flags();
}
inline void LsAttributeNode::clear_flags() {
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::apipb::LsNodeFlags& LsAttributeNode::_internal_flags() const {
  const ::apipb::LsNodeFlags* p = flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsNodeFlags*>(
      &::apipb::_LsNodeFlags_default_instance_);
}
inline const ::apipb::LsNodeFlags& LsAttributeNode::flags() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.flags)
  return _internal_flags();
}
inline void LsAttributeNode::unsafe_arena_set_allocated_flags(
    ::apipb::LsNodeFlags* flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributeNode.flags)
}
inline ::apipb::LsNodeFlags* LsAttributeNode::release_flags() {
  
  ::apipb::LsNodeFlags* temp = flags_;
  flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsNodeFlags* LsAttributeNode::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.flags)
  
  ::apipb::LsNodeFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::apipb::LsNodeFlags* LsAttributeNode::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsNodeFlags>(GetArena());
    flags_ = p;
  }
  return flags_;
}
inline ::apipb::LsNodeFlags* LsAttributeNode::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.flags)
  return _internal_mutable_flags();
}
inline void LsAttributeNode::set_allocated_flags(::apipb::LsNodeFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flags);
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.flags)
}

// string local_router_id = 3;
inline void LsAttributeNode::clear_local_router_id() {
  local_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeNode::local_router_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.local_router_id)
  return _internal_local_router_id();
}
inline void LsAttributeNode::set_local_router_id(const std::string& value) {
  _internal_set_local_router_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeNode.local_router_id)
}
inline std::string* LsAttributeNode::mutable_local_router_id() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.local_router_id)
  return _internal_mutable_local_router_id();
}
inline const std::string& LsAttributeNode::_internal_local_router_id() const {
  return local_router_id_.Get();
}
inline void LsAttributeNode::_internal_set_local_router_id(const std::string& value) {
  
  local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeNode::set_local_router_id(std::string&& value) {
  
  local_router_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeNode.local_router_id)
}
inline void LsAttributeNode::set_local_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeNode.local_router_id)
}
inline void LsAttributeNode::set_local_router_id(const char* value,
    size_t size) {
  
  local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeNode.local_router_id)
}
inline std::string* LsAttributeNode::_internal_mutable_local_router_id() {
  
  return local_router_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeNode::release_local_router_id() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.local_router_id)
  return local_router_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeNode::set_allocated_local_router_id(std::string* local_router_id) {
  if (local_router_id != nullptr) {
    
  } else {
    
  }
  local_router_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.local_router_id)
}

// string local_router_id_v6 = 4;
inline void LsAttributeNode::clear_local_router_id_v6() {
  local_router_id_v6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeNode::local_router_id_v6() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.local_router_id_v6)
  return _internal_local_router_id_v6();
}
inline void LsAttributeNode::set_local_router_id_v6(const std::string& value) {
  _internal_set_local_router_id_v6(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeNode.local_router_id_v6)
}
inline std::string* LsAttributeNode::mutable_local_router_id_v6() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.local_router_id_v6)
  return _internal_mutable_local_router_id_v6();
}
inline const std::string& LsAttributeNode::_internal_local_router_id_v6() const {
  return local_router_id_v6_.Get();
}
inline void LsAttributeNode::_internal_set_local_router_id_v6(const std::string& value) {
  
  local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeNode::set_local_router_id_v6(std::string&& value) {
  
  local_router_id_v6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeNode.local_router_id_v6)
}
inline void LsAttributeNode::set_local_router_id_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeNode.local_router_id_v6)
}
inline void LsAttributeNode::set_local_router_id_v6(const char* value,
    size_t size) {
  
  local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeNode.local_router_id_v6)
}
inline std::string* LsAttributeNode::_internal_mutable_local_router_id_v6() {
  
  return local_router_id_v6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeNode::release_local_router_id_v6() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.local_router_id_v6)
  return local_router_id_v6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeNode::set_allocated_local_router_id_v6(std::string* local_router_id_v6) {
  if (local_router_id_v6 != nullptr) {
    
  } else {
    
  }
  local_router_id_v6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id_v6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.local_router_id_v6)
}

// bytes isis_area = 5;
inline void LsAttributeNode::clear_isis_area() {
  isis_area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeNode::isis_area() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.isis_area)
  return _internal_isis_area();
}
inline void LsAttributeNode::set_isis_area(const std::string& value) {
  _internal_set_isis_area(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeNode.isis_area)
}
inline std::string* LsAttributeNode::mutable_isis_area() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.isis_area)
  return _internal_mutable_isis_area();
}
inline const std::string& LsAttributeNode::_internal_isis_area() const {
  return isis_area_.Get();
}
inline void LsAttributeNode::_internal_set_isis_area(const std::string& value) {
  
  isis_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeNode::set_isis_area(std::string&& value) {
  
  isis_area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeNode.isis_area)
}
inline void LsAttributeNode::set_isis_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isis_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeNode.isis_area)
}
inline void LsAttributeNode::set_isis_area(const void* value,
    size_t size) {
  
  isis_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeNode.isis_area)
}
inline std::string* LsAttributeNode::_internal_mutable_isis_area() {
  
  return isis_area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeNode::release_isis_area() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.isis_area)
  return isis_area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeNode::set_allocated_isis_area(std::string* isis_area) {
  if (isis_area != nullptr) {
    
  } else {
    
  }
  isis_area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isis_area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.isis_area)
}

// bytes opaque = 6;
inline void LsAttributeNode::clear_opaque() {
  opaque_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeNode::opaque() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.opaque)
  return _internal_opaque();
}
inline void LsAttributeNode::set_opaque(const std::string& value) {
  _internal_set_opaque(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeNode.opaque)
}
inline std::string* LsAttributeNode::mutable_opaque() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.opaque)
  return _internal_mutable_opaque();
}
inline const std::string& LsAttributeNode::_internal_opaque() const {
  return opaque_.Get();
}
inline void LsAttributeNode::_internal_set_opaque(const std::string& value) {
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeNode::set_opaque(std::string&& value) {
  
  opaque_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeNode.opaque)
}
inline void LsAttributeNode::set_opaque(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeNode.opaque)
}
inline void LsAttributeNode::set_opaque(const void* value,
    size_t size) {
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeNode.opaque)
}
inline std::string* LsAttributeNode::_internal_mutable_opaque() {
  
  return opaque_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeNode::release_opaque() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.opaque)
  return opaque_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeNode::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    
  } else {
    
  }
  opaque_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.opaque)
}

// .apipb.LsSrCapabilities sr_capabilities = 7;
inline bool LsAttributeNode::_internal_has_sr_capabilities() const {
  return this != internal_default_instance() && sr_capabilities_ != nullptr;
}
inline bool LsAttributeNode::has_sr_capabilities() const {
  return _internal_has_sr_capabilities();
}
inline void LsAttributeNode::clear_sr_capabilities() {
  if (GetArena() == nullptr && sr_capabilities_ != nullptr) {
    delete sr_capabilities_;
  }
  sr_capabilities_ = nullptr;
}
inline const ::apipb::LsSrCapabilities& LsAttributeNode::_internal_sr_capabilities() const {
  const ::apipb::LsSrCapabilities* p = sr_capabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsSrCapabilities*>(
      &::apipb::_LsSrCapabilities_default_instance_);
}
inline const ::apipb::LsSrCapabilities& LsAttributeNode::sr_capabilities() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.sr_capabilities)
  return _internal_sr_capabilities();
}
inline void LsAttributeNode::unsafe_arena_set_allocated_sr_capabilities(
    ::apipb::LsSrCapabilities* sr_capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sr_capabilities_);
  }
  sr_capabilities_ = sr_capabilities;
  if (sr_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributeNode.sr_capabilities)
}
inline ::apipb::LsSrCapabilities* LsAttributeNode::release_sr_capabilities() {
  
  ::apipb::LsSrCapabilities* temp = sr_capabilities_;
  sr_capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsSrCapabilities* LsAttributeNode::unsafe_arena_release_sr_capabilities() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.sr_capabilities)
  
  ::apipb::LsSrCapabilities* temp = sr_capabilities_;
  sr_capabilities_ = nullptr;
  return temp;
}
inline ::apipb::LsSrCapabilities* LsAttributeNode::_internal_mutable_sr_capabilities() {
  
  if (sr_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsSrCapabilities>(GetArena());
    sr_capabilities_ = p;
  }
  return sr_capabilities_;
}
inline ::apipb::LsSrCapabilities* LsAttributeNode::mutable_sr_capabilities() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.sr_capabilities)
  return _internal_mutable_sr_capabilities();
}
inline void LsAttributeNode::set_allocated_sr_capabilities(::apipb::LsSrCapabilities* sr_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sr_capabilities_;
  }
  if (sr_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sr_capabilities);
    if (message_arena != submessage_arena) {
      sr_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  sr_capabilities_ = sr_capabilities;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.sr_capabilities)
}

// bytes sr_algorithms = 8;
inline void LsAttributeNode::clear_sr_algorithms() {
  sr_algorithms_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeNode::sr_algorithms() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.sr_algorithms)
  return _internal_sr_algorithms();
}
inline void LsAttributeNode::set_sr_algorithms(const std::string& value) {
  _internal_set_sr_algorithms(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeNode.sr_algorithms)
}
inline std::string* LsAttributeNode::mutable_sr_algorithms() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.sr_algorithms)
  return _internal_mutable_sr_algorithms();
}
inline const std::string& LsAttributeNode::_internal_sr_algorithms() const {
  return sr_algorithms_.Get();
}
inline void LsAttributeNode::_internal_set_sr_algorithms(const std::string& value) {
  
  sr_algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeNode::set_sr_algorithms(std::string&& value) {
  
  sr_algorithms_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeNode.sr_algorithms)
}
inline void LsAttributeNode::set_sr_algorithms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sr_algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeNode.sr_algorithms)
}
inline void LsAttributeNode::set_sr_algorithms(const void* value,
    size_t size) {
  
  sr_algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeNode.sr_algorithms)
}
inline std::string* LsAttributeNode::_internal_mutable_sr_algorithms() {
  
  return sr_algorithms_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeNode::release_sr_algorithms() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.sr_algorithms)
  return sr_algorithms_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeNode::set_allocated_sr_algorithms(std::string* sr_algorithms) {
  if (sr_algorithms != nullptr) {
    
  } else {
    
  }
  sr_algorithms_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sr_algorithms,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.sr_algorithms)
}

// .apipb.LsSrLocalBlock sr_local_block = 9;
inline bool LsAttributeNode::_internal_has_sr_local_block() const {
  return this != internal_default_instance() && sr_local_block_ != nullptr;
}
inline bool LsAttributeNode::has_sr_local_block() const {
  return _internal_has_sr_local_block();
}
inline void LsAttributeNode::clear_sr_local_block() {
  if (GetArena() == nullptr && sr_local_block_ != nullptr) {
    delete sr_local_block_;
  }
  sr_local_block_ = nullptr;
}
inline const ::apipb::LsSrLocalBlock& LsAttributeNode::_internal_sr_local_block() const {
  const ::apipb::LsSrLocalBlock* p = sr_local_block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsSrLocalBlock*>(
      &::apipb::_LsSrLocalBlock_default_instance_);
}
inline const ::apipb::LsSrLocalBlock& LsAttributeNode::sr_local_block() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeNode.sr_local_block)
  return _internal_sr_local_block();
}
inline void LsAttributeNode::unsafe_arena_set_allocated_sr_local_block(
    ::apipb::LsSrLocalBlock* sr_local_block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sr_local_block_);
  }
  sr_local_block_ = sr_local_block;
  if (sr_local_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributeNode.sr_local_block)
}
inline ::apipb::LsSrLocalBlock* LsAttributeNode::release_sr_local_block() {
  
  ::apipb::LsSrLocalBlock* temp = sr_local_block_;
  sr_local_block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsSrLocalBlock* LsAttributeNode::unsafe_arena_release_sr_local_block() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeNode.sr_local_block)
  
  ::apipb::LsSrLocalBlock* temp = sr_local_block_;
  sr_local_block_ = nullptr;
  return temp;
}
inline ::apipb::LsSrLocalBlock* LsAttributeNode::_internal_mutable_sr_local_block() {
  
  if (sr_local_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsSrLocalBlock>(GetArena());
    sr_local_block_ = p;
  }
  return sr_local_block_;
}
inline ::apipb::LsSrLocalBlock* LsAttributeNode::mutable_sr_local_block() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeNode.sr_local_block)
  return _internal_mutable_sr_local_block();
}
inline void LsAttributeNode::set_allocated_sr_local_block(::apipb::LsSrLocalBlock* sr_local_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sr_local_block_;
  }
  if (sr_local_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sr_local_block);
    if (message_arena != submessage_arena) {
      sr_local_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr_local_block, submessage_arena);
    }
    
  } else {
    
  }
  sr_local_block_ = sr_local_block;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeNode.sr_local_block)
}

// -------------------------------------------------------------------

// LsAttributeLink

// string name = 1;
inline void LsAttributeLink::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeLink::name() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.name)
  return _internal_name();
}
inline void LsAttributeLink::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.name)
}
inline std::string* LsAttributeLink::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeLink.name)
  return _internal_mutable_name();
}
inline const std::string& LsAttributeLink::_internal_name() const {
  return name_.Get();
}
inline void LsAttributeLink::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeLink::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeLink.name)
}
inline void LsAttributeLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeLink.name)
}
inline void LsAttributeLink::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeLink.name)
}
inline std::string* LsAttributeLink::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeLink::release_name() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeLink.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeLink.name)
}

// string local_router_id = 2;
inline void LsAttributeLink::clear_local_router_id() {
  local_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeLink::local_router_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.local_router_id)
  return _internal_local_router_id();
}
inline void LsAttributeLink::set_local_router_id(const std::string& value) {
  _internal_set_local_router_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.local_router_id)
}
inline std::string* LsAttributeLink::mutable_local_router_id() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeLink.local_router_id)
  return _internal_mutable_local_router_id();
}
inline const std::string& LsAttributeLink::_internal_local_router_id() const {
  return local_router_id_.Get();
}
inline void LsAttributeLink::_internal_set_local_router_id(const std::string& value) {
  
  local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeLink::set_local_router_id(std::string&& value) {
  
  local_router_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeLink.local_router_id)
}
inline void LsAttributeLink::set_local_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeLink.local_router_id)
}
inline void LsAttributeLink::set_local_router_id(const char* value,
    size_t size) {
  
  local_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeLink.local_router_id)
}
inline std::string* LsAttributeLink::_internal_mutable_local_router_id() {
  
  return local_router_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeLink::release_local_router_id() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeLink.local_router_id)
  return local_router_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeLink::set_allocated_local_router_id(std::string* local_router_id) {
  if (local_router_id != nullptr) {
    
  } else {
    
  }
  local_router_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeLink.local_router_id)
}

// string local_router_id_v6 = 3;
inline void LsAttributeLink::clear_local_router_id_v6() {
  local_router_id_v6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeLink::local_router_id_v6() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.local_router_id_v6)
  return _internal_local_router_id_v6();
}
inline void LsAttributeLink::set_local_router_id_v6(const std::string& value) {
  _internal_set_local_router_id_v6(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.local_router_id_v6)
}
inline std::string* LsAttributeLink::mutable_local_router_id_v6() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeLink.local_router_id_v6)
  return _internal_mutable_local_router_id_v6();
}
inline const std::string& LsAttributeLink::_internal_local_router_id_v6() const {
  return local_router_id_v6_.Get();
}
inline void LsAttributeLink::_internal_set_local_router_id_v6(const std::string& value) {
  
  local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeLink::set_local_router_id_v6(std::string&& value) {
  
  local_router_id_v6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeLink.local_router_id_v6)
}
inline void LsAttributeLink::set_local_router_id_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeLink.local_router_id_v6)
}
inline void LsAttributeLink::set_local_router_id_v6(const char* value,
    size_t size) {
  
  local_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeLink.local_router_id_v6)
}
inline std::string* LsAttributeLink::_internal_mutable_local_router_id_v6() {
  
  return local_router_id_v6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeLink::release_local_router_id_v6() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeLink.local_router_id_v6)
  return local_router_id_v6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeLink::set_allocated_local_router_id_v6(std::string* local_router_id_v6) {
  if (local_router_id_v6 != nullptr) {
    
  } else {
    
  }
  local_router_id_v6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id_v6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeLink.local_router_id_v6)
}

// string remote_router_id = 4;
inline void LsAttributeLink::clear_remote_router_id() {
  remote_router_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeLink::remote_router_id() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.remote_router_id)
  return _internal_remote_router_id();
}
inline void LsAttributeLink::set_remote_router_id(const std::string& value) {
  _internal_set_remote_router_id(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.remote_router_id)
}
inline std::string* LsAttributeLink::mutable_remote_router_id() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeLink.remote_router_id)
  return _internal_mutable_remote_router_id();
}
inline const std::string& LsAttributeLink::_internal_remote_router_id() const {
  return remote_router_id_.Get();
}
inline void LsAttributeLink::_internal_set_remote_router_id(const std::string& value) {
  
  remote_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeLink::set_remote_router_id(std::string&& value) {
  
  remote_router_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeLink.remote_router_id)
}
inline void LsAttributeLink::set_remote_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeLink.remote_router_id)
}
inline void LsAttributeLink::set_remote_router_id(const char* value,
    size_t size) {
  
  remote_router_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeLink.remote_router_id)
}
inline std::string* LsAttributeLink::_internal_mutable_remote_router_id() {
  
  return remote_router_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeLink::release_remote_router_id() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeLink.remote_router_id)
  return remote_router_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeLink::set_allocated_remote_router_id(std::string* remote_router_id) {
  if (remote_router_id != nullptr) {
    
  } else {
    
  }
  remote_router_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_router_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeLink.remote_router_id)
}

// string remote_router_id_v6 = 5;
inline void LsAttributeLink::clear_remote_router_id_v6() {
  remote_router_id_v6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeLink::remote_router_id_v6() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.remote_router_id_v6)
  return _internal_remote_router_id_v6();
}
inline void LsAttributeLink::set_remote_router_id_v6(const std::string& value) {
  _internal_set_remote_router_id_v6(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.remote_router_id_v6)
}
inline std::string* LsAttributeLink::mutable_remote_router_id_v6() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeLink.remote_router_id_v6)
  return _internal_mutable_remote_router_id_v6();
}
inline const std::string& LsAttributeLink::_internal_remote_router_id_v6() const {
  return remote_router_id_v6_.Get();
}
inline void LsAttributeLink::_internal_set_remote_router_id_v6(const std::string& value) {
  
  remote_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeLink::set_remote_router_id_v6(std::string&& value) {
  
  remote_router_id_v6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeLink.remote_router_id_v6)
}
inline void LsAttributeLink::set_remote_router_id_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeLink.remote_router_id_v6)
}
inline void LsAttributeLink::set_remote_router_id_v6(const char* value,
    size_t size) {
  
  remote_router_id_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeLink.remote_router_id_v6)
}
inline std::string* LsAttributeLink::_internal_mutable_remote_router_id_v6() {
  
  return remote_router_id_v6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeLink::release_remote_router_id_v6() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeLink.remote_router_id_v6)
  return remote_router_id_v6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeLink::set_allocated_remote_router_id_v6(std::string* remote_router_id_v6) {
  if (remote_router_id_v6 != nullptr) {
    
  } else {
    
  }
  remote_router_id_v6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_router_id_v6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeLink.remote_router_id_v6)
}

// uint32 admin_group = 6;
inline void LsAttributeLink::clear_admin_group() {
  admin_group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_admin_group() const {
  return admin_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::admin_group() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.admin_group)
  return _internal_admin_group();
}
inline void LsAttributeLink::_internal_set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_group_ = value;
}
inline void LsAttributeLink::set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin_group(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.admin_group)
}

// uint32 default_te_metric = 7;
inline void LsAttributeLink::clear_default_te_metric() {
  default_te_metric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_default_te_metric() const {
  return default_te_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::default_te_metric() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.default_te_metric)
  return _internal_default_te_metric();
}
inline void LsAttributeLink::_internal_set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  default_te_metric_ = value;
}
inline void LsAttributeLink::set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_te_metric(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.default_te_metric)
}

// uint32 igp_metric = 8;
inline void LsAttributeLink::clear_igp_metric() {
  igp_metric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_igp_metric() const {
  return igp_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::igp_metric() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.igp_metric)
  return _internal_igp_metric();
}
inline void LsAttributeLink::_internal_set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  igp_metric_ = value;
}
inline void LsAttributeLink::set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_igp_metric(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.igp_metric)
}

// bytes opaque = 9;
inline void LsAttributeLink::clear_opaque() {
  opaque_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributeLink::opaque() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.opaque)
  return _internal_opaque();
}
inline void LsAttributeLink::set_opaque(const std::string& value) {
  _internal_set_opaque(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.opaque)
}
inline std::string* LsAttributeLink::mutable_opaque() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeLink.opaque)
  return _internal_mutable_opaque();
}
inline const std::string& LsAttributeLink::_internal_opaque() const {
  return opaque_.Get();
}
inline void LsAttributeLink::_internal_set_opaque(const std::string& value) {
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributeLink::set_opaque(std::string&& value) {
  
  opaque_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributeLink.opaque)
}
inline void LsAttributeLink::set_opaque(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributeLink.opaque)
}
inline void LsAttributeLink::set_opaque(const void* value,
    size_t size) {
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributeLink.opaque)
}
inline std::string* LsAttributeLink::_internal_mutable_opaque() {
  
  return opaque_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributeLink::release_opaque() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeLink.opaque)
  return opaque_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributeLink::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    
  } else {
    
  }
  opaque_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeLink.opaque)
}

// float bandwidth = 10;
inline void LsAttributeLink::clear_bandwidth() {
  bandwidth_ = 0;
}
inline float LsAttributeLink::_internal_bandwidth() const {
  return bandwidth_;
}
inline float LsAttributeLink::bandwidth() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.bandwidth)
  return _internal_bandwidth();
}
inline void LsAttributeLink::_internal_set_bandwidth(float value) {
  
  bandwidth_ = value;
}
inline void LsAttributeLink::set_bandwidth(float value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.bandwidth)
}

// float reservable_bandwidth = 11;
inline void LsAttributeLink::clear_reservable_bandwidth() {
  reservable_bandwidth_ = 0;
}
inline float LsAttributeLink::_internal_reservable_bandwidth() const {
  return reservable_bandwidth_;
}
inline float LsAttributeLink::reservable_bandwidth() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.reservable_bandwidth)
  return _internal_reservable_bandwidth();
}
inline void LsAttributeLink::_internal_set_reservable_bandwidth(float value) {
  
  reservable_bandwidth_ = value;
}
inline void LsAttributeLink::set_reservable_bandwidth(float value) {
  _internal_set_reservable_bandwidth(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.reservable_bandwidth)
}

// repeated float unreserved_bandwidth = 12;
inline int LsAttributeLink::_internal_unreserved_bandwidth_size() const {
  return unreserved_bandwidth_.size();
}
inline int LsAttributeLink::unreserved_bandwidth_size() const {
  return _internal_unreserved_bandwidth_size();
}
inline void LsAttributeLink::clear_unreserved_bandwidth() {
  unreserved_bandwidth_.Clear();
}
inline float LsAttributeLink::_internal_unreserved_bandwidth(int index) const {
  return unreserved_bandwidth_.Get(index);
}
inline float LsAttributeLink::unreserved_bandwidth(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.unreserved_bandwidth)
  return _internal_unreserved_bandwidth(index);
}
inline void LsAttributeLink::set_unreserved_bandwidth(int index, float value) {
  unreserved_bandwidth_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.unreserved_bandwidth)
}
inline void LsAttributeLink::_internal_add_unreserved_bandwidth(float value) {
  unreserved_bandwidth_.Add(value);
}
inline void LsAttributeLink::add_unreserved_bandwidth(float value) {
  _internal_add_unreserved_bandwidth(value);
  // @@protoc_insertion_point(field_add:apipb.LsAttributeLink.unreserved_bandwidth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LsAttributeLink::_internal_unreserved_bandwidth() const {
  return unreserved_bandwidth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LsAttributeLink::unreserved_bandwidth() const {
  // @@protoc_insertion_point(field_list:apipb.LsAttributeLink.unreserved_bandwidth)
  return _internal_unreserved_bandwidth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LsAttributeLink::_internal_mutable_unreserved_bandwidth() {
  return &unreserved_bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LsAttributeLink::mutable_unreserved_bandwidth() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LsAttributeLink.unreserved_bandwidth)
  return _internal_mutable_unreserved_bandwidth();
}

// uint32 sr_adjacency_sid = 13;
inline void LsAttributeLink::clear_sr_adjacency_sid() {
  sr_adjacency_sid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_sr_adjacency_sid() const {
  return sr_adjacency_sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::sr_adjacency_sid() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.sr_adjacency_sid)
  return _internal_sr_adjacency_sid();
}
inline void LsAttributeLink::_internal_set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sr_adjacency_sid_ = value;
}
inline void LsAttributeLink::set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sr_adjacency_sid(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.sr_adjacency_sid)
}

// repeated uint32 srlgs = 14;
inline int LsAttributeLink::_internal_srlgs_size() const {
  return srlgs_.size();
}
inline int LsAttributeLink::srlgs_size() const {
  return _internal_srlgs_size();
}
inline void LsAttributeLink::clear_srlgs() {
  srlgs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_srlgs(int index) const {
  return srlgs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::srlgs(int index) const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeLink.srlgs)
  return _internal_srlgs(index);
}
inline void LsAttributeLink::set_srlgs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srlgs_.Set(index, value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributeLink.srlgs)
}
inline void LsAttributeLink::_internal_add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srlgs_.Add(value);
}
inline void LsAttributeLink::add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_srlgs(value);
  // @@protoc_insertion_point(field_add:apipb.LsAttributeLink.srlgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LsAttributeLink::_internal_srlgs() const {
  return srlgs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LsAttributeLink::srlgs() const {
  // @@protoc_insertion_point(field_list:apipb.LsAttributeLink.srlgs)
  return _internal_srlgs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LsAttributeLink::_internal_mutable_srlgs() {
  return &srlgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LsAttributeLink::mutable_srlgs() {
  // @@protoc_insertion_point(field_mutable_list:apipb.LsAttributeLink.srlgs)
  return _internal_mutable_srlgs();
}

// -------------------------------------------------------------------

// LsAttributePrefix

// .apipb.LsIGPFlags igp_flags = 1;
inline bool LsAttributePrefix::_internal_has_igp_flags() const {
  return this != internal_default_instance() && igp_flags_ != nullptr;
}
inline bool LsAttributePrefix::has_igp_flags() const {
  return _internal_has_igp_flags();
}
inline void LsAttributePrefix::clear_igp_flags() {
  if (GetArena() == nullptr && igp_flags_ != nullptr) {
    delete igp_flags_;
  }
  igp_flags_ = nullptr;
}
inline const ::apipb::LsIGPFlags& LsAttributePrefix::_internal_igp_flags() const {
  const ::apipb::LsIGPFlags* p = igp_flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsIGPFlags*>(
      &::apipb::_LsIGPFlags_default_instance_);
}
inline const ::apipb::LsIGPFlags& LsAttributePrefix::igp_flags() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributePrefix.igp_flags)
  return _internal_igp_flags();
}
inline void LsAttributePrefix::unsafe_arena_set_allocated_igp_flags(
    ::apipb::LsIGPFlags* igp_flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(igp_flags_);
  }
  igp_flags_ = igp_flags;
  if (igp_flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributePrefix.igp_flags)
}
inline ::apipb::LsIGPFlags* LsAttributePrefix::release_igp_flags() {
  
  ::apipb::LsIGPFlags* temp = igp_flags_;
  igp_flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsIGPFlags* LsAttributePrefix::unsafe_arena_release_igp_flags() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributePrefix.igp_flags)
  
  ::apipb::LsIGPFlags* temp = igp_flags_;
  igp_flags_ = nullptr;
  return temp;
}
inline ::apipb::LsIGPFlags* LsAttributePrefix::_internal_mutable_igp_flags() {
  
  if (igp_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsIGPFlags>(GetArena());
    igp_flags_ = p;
  }
  return igp_flags_;
}
inline ::apipb::LsIGPFlags* LsAttributePrefix::mutable_igp_flags() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributePrefix.igp_flags)
  return _internal_mutable_igp_flags();
}
inline void LsAttributePrefix::set_allocated_igp_flags(::apipb::LsIGPFlags* igp_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete igp_flags_;
  }
  if (igp_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(igp_flags);
    if (message_arena != submessage_arena) {
      igp_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, igp_flags, submessage_arena);
    }
    
  } else {
    
  }
  igp_flags_ = igp_flags;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributePrefix.igp_flags)
}

// bytes opaque = 2;
inline void LsAttributePrefix::clear_opaque() {
  opaque_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LsAttributePrefix::opaque() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributePrefix.opaque)
  return _internal_opaque();
}
inline void LsAttributePrefix::set_opaque(const std::string& value) {
  _internal_set_opaque(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributePrefix.opaque)
}
inline std::string* LsAttributePrefix::mutable_opaque() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributePrefix.opaque)
  return _internal_mutable_opaque();
}
inline const std::string& LsAttributePrefix::_internal_opaque() const {
  return opaque_.Get();
}
inline void LsAttributePrefix::_internal_set_opaque(const std::string& value) {
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LsAttributePrefix::set_opaque(std::string&& value) {
  
  opaque_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.LsAttributePrefix.opaque)
}
inline void LsAttributePrefix::set_opaque(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.LsAttributePrefix.opaque)
}
inline void LsAttributePrefix::set_opaque(const void* value,
    size_t size) {
  
  opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.LsAttributePrefix.opaque)
}
inline std::string* LsAttributePrefix::_internal_mutable_opaque() {
  
  return opaque_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LsAttributePrefix::release_opaque() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributePrefix.opaque)
  return opaque_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LsAttributePrefix::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    
  } else {
    
  }
  opaque_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributePrefix.opaque)
}

// uint32 sr_prefix_sid = 3;
inline void LsAttributePrefix::clear_sr_prefix_sid() {
  sr_prefix_sid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributePrefix::_internal_sr_prefix_sid() const {
  return sr_prefix_sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributePrefix::sr_prefix_sid() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributePrefix.sr_prefix_sid)
  return _internal_sr_prefix_sid();
}
inline void LsAttributePrefix::_internal_set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sr_prefix_sid_ = value;
}
inline void LsAttributePrefix::set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sr_prefix_sid(value);
  // @@protoc_insertion_point(field_set:apipb.LsAttributePrefix.sr_prefix_sid)
}

// -------------------------------------------------------------------

// LsBgpPeerSegmentSIDFlags

// bool value = 1;
inline void LsBgpPeerSegmentSIDFlags::clear_value() {
  value_ = false;
}
inline bool LsBgpPeerSegmentSIDFlags::_internal_value() const {
  return value_;
}
inline bool LsBgpPeerSegmentSIDFlags::value() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSIDFlags.value)
  return _internal_value();
}
inline void LsBgpPeerSegmentSIDFlags::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void LsBgpPeerSegmentSIDFlags::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.LsBgpPeerSegmentSIDFlags.value)
}

// bool local = 2;
inline void LsBgpPeerSegmentSIDFlags::clear_local() {
  local_ = false;
}
inline bool LsBgpPeerSegmentSIDFlags::_internal_local() const {
  return local_;
}
inline bool LsBgpPeerSegmentSIDFlags::local() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSIDFlags.local)
  return _internal_local();
}
inline void LsBgpPeerSegmentSIDFlags::_internal_set_local(bool value) {
  
  local_ = value;
}
inline void LsBgpPeerSegmentSIDFlags::set_local(bool value) {
  _internal_set_local(value);
  // @@protoc_insertion_point(field_set:apipb.LsBgpPeerSegmentSIDFlags.local)
}

// bool backup = 3;
inline void LsBgpPeerSegmentSIDFlags::clear_backup() {
  backup_ = false;
}
inline bool LsBgpPeerSegmentSIDFlags::_internal_backup() const {
  return backup_;
}
inline bool LsBgpPeerSegmentSIDFlags::backup() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSIDFlags.backup)
  return _internal_backup();
}
inline void LsBgpPeerSegmentSIDFlags::_internal_set_backup(bool value) {
  
  backup_ = value;
}
inline void LsBgpPeerSegmentSIDFlags::set_backup(bool value) {
  _internal_set_backup(value);
  // @@protoc_insertion_point(field_set:apipb.LsBgpPeerSegmentSIDFlags.backup)
}

// bool persistent = 4;
inline void LsBgpPeerSegmentSIDFlags::clear_persistent() {
  persistent_ = false;
}
inline bool LsBgpPeerSegmentSIDFlags::_internal_persistent() const {
  return persistent_;
}
inline bool LsBgpPeerSegmentSIDFlags::persistent() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSIDFlags.persistent)
  return _internal_persistent();
}
inline void LsBgpPeerSegmentSIDFlags::_internal_set_persistent(bool value) {
  
  persistent_ = value;
}
inline void LsBgpPeerSegmentSIDFlags::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:apipb.LsBgpPeerSegmentSIDFlags.persistent)
}

// -------------------------------------------------------------------

// LsBgpPeerSegmentSID

// .apipb.LsBgpPeerSegmentSIDFlags flags = 1;
inline bool LsBgpPeerSegmentSID::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool LsBgpPeerSegmentSID::has_flags() const {
  return _internal_has_flags();
}
inline void LsBgpPeerSegmentSID::clear_flags() {
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::apipb::LsBgpPeerSegmentSIDFlags& LsBgpPeerSegmentSID::_internal_flags() const {
  const ::apipb::LsBgpPeerSegmentSIDFlags* p = flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsBgpPeerSegmentSIDFlags*>(
      &::apipb::_LsBgpPeerSegmentSIDFlags_default_instance_);
}
inline const ::apipb::LsBgpPeerSegmentSIDFlags& LsBgpPeerSegmentSID::flags() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSID.flags)
  return _internal_flags();
}
inline void LsBgpPeerSegmentSID::unsafe_arena_set_allocated_flags(
    ::apipb::LsBgpPeerSegmentSIDFlags* flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsBgpPeerSegmentSID.flags)
}
inline ::apipb::LsBgpPeerSegmentSIDFlags* LsBgpPeerSegmentSID::release_flags() {
  
  ::apipb::LsBgpPeerSegmentSIDFlags* temp = flags_;
  flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSIDFlags* LsBgpPeerSegmentSID::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_release:apipb.LsBgpPeerSegmentSID.flags)
  
  ::apipb::LsBgpPeerSegmentSIDFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSIDFlags* LsBgpPeerSegmentSID::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsBgpPeerSegmentSIDFlags>(GetArena());
    flags_ = p;
  }
  return flags_;
}
inline ::apipb::LsBgpPeerSegmentSIDFlags* LsBgpPeerSegmentSID::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:apipb.LsBgpPeerSegmentSID.flags)
  return _internal_mutable_flags();
}
inline void LsBgpPeerSegmentSID::set_allocated_flags(::apipb::LsBgpPeerSegmentSIDFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flags);
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsBgpPeerSegmentSID.flags)
}

// uint32 weight = 2;
inline void LsBgpPeerSegmentSID::clear_weight() {
  weight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsBgpPeerSegmentSID::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsBgpPeerSegmentSID::weight() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSID.weight)
  return _internal_weight();
}
inline void LsBgpPeerSegmentSID::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weight_ = value;
}
inline void LsBgpPeerSegmentSID::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:apipb.LsBgpPeerSegmentSID.weight)
}

// uint32 sid = 3;
inline void LsBgpPeerSegmentSID::clear_sid() {
  sid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsBgpPeerSegmentSID::_internal_sid() const {
  return sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsBgpPeerSegmentSID::sid() const {
  // @@protoc_insertion_point(field_get:apipb.LsBgpPeerSegmentSID.sid)
  return _internal_sid();
}
inline void LsBgpPeerSegmentSID::_internal_set_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sid_ = value;
}
inline void LsBgpPeerSegmentSID::set_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:apipb.LsBgpPeerSegmentSID.sid)
}

// -------------------------------------------------------------------

// LsAttributeBgpPeerSegment

// .apipb.LsBgpPeerSegmentSID bgp_peer_node_sid = 1;
inline bool LsAttributeBgpPeerSegment::_internal_has_bgp_peer_node_sid() const {
  return this != internal_default_instance() && bgp_peer_node_sid_ != nullptr;
}
inline bool LsAttributeBgpPeerSegment::has_bgp_peer_node_sid() const {
  return _internal_has_bgp_peer_node_sid();
}
inline void LsAttributeBgpPeerSegment::clear_bgp_peer_node_sid() {
  if (GetArena() == nullptr && bgp_peer_node_sid_ != nullptr) {
    delete bgp_peer_node_sid_;
  }
  bgp_peer_node_sid_ = nullptr;
}
inline const ::apipb::LsBgpPeerSegmentSID& LsAttributeBgpPeerSegment::_internal_bgp_peer_node_sid() const {
  const ::apipb::LsBgpPeerSegmentSID* p = bgp_peer_node_sid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsBgpPeerSegmentSID*>(
      &::apipb::_LsBgpPeerSegmentSID_default_instance_);
}
inline const ::apipb::LsBgpPeerSegmentSID& LsAttributeBgpPeerSegment::bgp_peer_node_sid() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeBgpPeerSegment.bgp_peer_node_sid)
  return _internal_bgp_peer_node_sid();
}
inline void LsAttributeBgpPeerSegment::unsafe_arena_set_allocated_bgp_peer_node_sid(
    ::apipb::LsBgpPeerSegmentSID* bgp_peer_node_sid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_peer_node_sid_);
  }
  bgp_peer_node_sid_ = bgp_peer_node_sid;
  if (bgp_peer_node_sid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributeBgpPeerSegment.bgp_peer_node_sid)
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::release_bgp_peer_node_sid() {
  
  ::apipb::LsBgpPeerSegmentSID* temp = bgp_peer_node_sid_;
  bgp_peer_node_sid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::unsafe_arena_release_bgp_peer_node_sid() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeBgpPeerSegment.bgp_peer_node_sid)
  
  ::apipb::LsBgpPeerSegmentSID* temp = bgp_peer_node_sid_;
  bgp_peer_node_sid_ = nullptr;
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::_internal_mutable_bgp_peer_node_sid() {
  
  if (bgp_peer_node_sid_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsBgpPeerSegmentSID>(GetArena());
    bgp_peer_node_sid_ = p;
  }
  return bgp_peer_node_sid_;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::mutable_bgp_peer_node_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeBgpPeerSegment.bgp_peer_node_sid)
  return _internal_mutable_bgp_peer_node_sid();
}
inline void LsAttributeBgpPeerSegment::set_allocated_bgp_peer_node_sid(::apipb::LsBgpPeerSegmentSID* bgp_peer_node_sid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bgp_peer_node_sid_;
  }
  if (bgp_peer_node_sid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bgp_peer_node_sid);
    if (message_arena != submessage_arena) {
      bgp_peer_node_sid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgp_peer_node_sid, submessage_arena);
    }
    
  } else {
    
  }
  bgp_peer_node_sid_ = bgp_peer_node_sid;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeBgpPeerSegment.bgp_peer_node_sid)
}

// .apipb.LsBgpPeerSegmentSID bgp_peer_adjacency_sid = 2;
inline bool LsAttributeBgpPeerSegment::_internal_has_bgp_peer_adjacency_sid() const {
  return this != internal_default_instance() && bgp_peer_adjacency_sid_ != nullptr;
}
inline bool LsAttributeBgpPeerSegment::has_bgp_peer_adjacency_sid() const {
  return _internal_has_bgp_peer_adjacency_sid();
}
inline void LsAttributeBgpPeerSegment::clear_bgp_peer_adjacency_sid() {
  if (GetArena() == nullptr && bgp_peer_adjacency_sid_ != nullptr) {
    delete bgp_peer_adjacency_sid_;
  }
  bgp_peer_adjacency_sid_ = nullptr;
}
inline const ::apipb::LsBgpPeerSegmentSID& LsAttributeBgpPeerSegment::_internal_bgp_peer_adjacency_sid() const {
  const ::apipb::LsBgpPeerSegmentSID* p = bgp_peer_adjacency_sid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsBgpPeerSegmentSID*>(
      &::apipb::_LsBgpPeerSegmentSID_default_instance_);
}
inline const ::apipb::LsBgpPeerSegmentSID& LsAttributeBgpPeerSegment::bgp_peer_adjacency_sid() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeBgpPeerSegment.bgp_peer_adjacency_sid)
  return _internal_bgp_peer_adjacency_sid();
}
inline void LsAttributeBgpPeerSegment::unsafe_arena_set_allocated_bgp_peer_adjacency_sid(
    ::apipb::LsBgpPeerSegmentSID* bgp_peer_adjacency_sid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_peer_adjacency_sid_);
  }
  bgp_peer_adjacency_sid_ = bgp_peer_adjacency_sid;
  if (bgp_peer_adjacency_sid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributeBgpPeerSegment.bgp_peer_adjacency_sid)
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::release_bgp_peer_adjacency_sid() {
  
  ::apipb::LsBgpPeerSegmentSID* temp = bgp_peer_adjacency_sid_;
  bgp_peer_adjacency_sid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::unsafe_arena_release_bgp_peer_adjacency_sid() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeBgpPeerSegment.bgp_peer_adjacency_sid)
  
  ::apipb::LsBgpPeerSegmentSID* temp = bgp_peer_adjacency_sid_;
  bgp_peer_adjacency_sid_ = nullptr;
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::_internal_mutable_bgp_peer_adjacency_sid() {
  
  if (bgp_peer_adjacency_sid_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsBgpPeerSegmentSID>(GetArena());
    bgp_peer_adjacency_sid_ = p;
  }
  return bgp_peer_adjacency_sid_;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::mutable_bgp_peer_adjacency_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeBgpPeerSegment.bgp_peer_adjacency_sid)
  return _internal_mutable_bgp_peer_adjacency_sid();
}
inline void LsAttributeBgpPeerSegment::set_allocated_bgp_peer_adjacency_sid(::apipb::LsBgpPeerSegmentSID* bgp_peer_adjacency_sid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bgp_peer_adjacency_sid_;
  }
  if (bgp_peer_adjacency_sid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bgp_peer_adjacency_sid);
    if (message_arena != submessage_arena) {
      bgp_peer_adjacency_sid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgp_peer_adjacency_sid, submessage_arena);
    }
    
  } else {
    
  }
  bgp_peer_adjacency_sid_ = bgp_peer_adjacency_sid;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeBgpPeerSegment.bgp_peer_adjacency_sid)
}

// .apipb.LsBgpPeerSegmentSID bgp_peer_set_sid = 3;
inline bool LsAttributeBgpPeerSegment::_internal_has_bgp_peer_set_sid() const {
  return this != internal_default_instance() && bgp_peer_set_sid_ != nullptr;
}
inline bool LsAttributeBgpPeerSegment::has_bgp_peer_set_sid() const {
  return _internal_has_bgp_peer_set_sid();
}
inline void LsAttributeBgpPeerSegment::clear_bgp_peer_set_sid() {
  if (GetArena() == nullptr && bgp_peer_set_sid_ != nullptr) {
    delete bgp_peer_set_sid_;
  }
  bgp_peer_set_sid_ = nullptr;
}
inline const ::apipb::LsBgpPeerSegmentSID& LsAttributeBgpPeerSegment::_internal_bgp_peer_set_sid() const {
  const ::apipb::LsBgpPeerSegmentSID* p = bgp_peer_set_sid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsBgpPeerSegmentSID*>(
      &::apipb::_LsBgpPeerSegmentSID_default_instance_);
}
inline const ::apipb::LsBgpPeerSegmentSID& LsAttributeBgpPeerSegment::bgp_peer_set_sid() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttributeBgpPeerSegment.bgp_peer_set_sid)
  return _internal_bgp_peer_set_sid();
}
inline void LsAttributeBgpPeerSegment::unsafe_arena_set_allocated_bgp_peer_set_sid(
    ::apipb::LsBgpPeerSegmentSID* bgp_peer_set_sid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_peer_set_sid_);
  }
  bgp_peer_set_sid_ = bgp_peer_set_sid;
  if (bgp_peer_set_sid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttributeBgpPeerSegment.bgp_peer_set_sid)
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::release_bgp_peer_set_sid() {
  
  ::apipb::LsBgpPeerSegmentSID* temp = bgp_peer_set_sid_;
  bgp_peer_set_sid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::unsafe_arena_release_bgp_peer_set_sid() {
  // @@protoc_insertion_point(field_release:apipb.LsAttributeBgpPeerSegment.bgp_peer_set_sid)
  
  ::apipb::LsBgpPeerSegmentSID* temp = bgp_peer_set_sid_;
  bgp_peer_set_sid_ = nullptr;
  return temp;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::_internal_mutable_bgp_peer_set_sid() {
  
  if (bgp_peer_set_sid_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsBgpPeerSegmentSID>(GetArena());
    bgp_peer_set_sid_ = p;
  }
  return bgp_peer_set_sid_;
}
inline ::apipb::LsBgpPeerSegmentSID* LsAttributeBgpPeerSegment::mutable_bgp_peer_set_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttributeBgpPeerSegment.bgp_peer_set_sid)
  return _internal_mutable_bgp_peer_set_sid();
}
inline void LsAttributeBgpPeerSegment::set_allocated_bgp_peer_set_sid(::apipb::LsBgpPeerSegmentSID* bgp_peer_set_sid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bgp_peer_set_sid_;
  }
  if (bgp_peer_set_sid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bgp_peer_set_sid);
    if (message_arena != submessage_arena) {
      bgp_peer_set_sid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgp_peer_set_sid, submessage_arena);
    }
    
  } else {
    
  }
  bgp_peer_set_sid_ = bgp_peer_set_sid;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttributeBgpPeerSegment.bgp_peer_set_sid)
}

// -------------------------------------------------------------------

// LsAttribute

// .apipb.LsAttributeNode node = 1;
inline bool LsAttribute::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool LsAttribute::has_node() const {
  return _internal_has_node();
}
inline void LsAttribute::clear_node() {
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::apipb::LsAttributeNode& LsAttribute::_internal_node() const {
  const ::apipb::LsAttributeNode* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsAttributeNode*>(
      &::apipb::_LsAttributeNode_default_instance_);
}
inline const ::apipb::LsAttributeNode& LsAttribute::node() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttribute.node)
  return _internal_node();
}
inline void LsAttribute::unsafe_arena_set_allocated_node(
    ::apipb::LsAttributeNode* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttribute.node)
}
inline ::apipb::LsAttributeNode* LsAttribute::release_node() {
  
  ::apipb::LsAttributeNode* temp = node_;
  node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsAttributeNode* LsAttribute::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:apipb.LsAttribute.node)
  
  ::apipb::LsAttributeNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::apipb::LsAttributeNode* LsAttribute::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsAttributeNode>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::apipb::LsAttributeNode* LsAttribute::mutable_node() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttribute.node)
  return _internal_mutable_node();
}
inline void LsAttribute::set_allocated_node(::apipb::LsAttributeNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttribute.node)
}

// .apipb.LsAttributeLink link = 2;
inline bool LsAttribute::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool LsAttribute::has_link() const {
  return _internal_has_link();
}
inline void LsAttribute::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::apipb::LsAttributeLink& LsAttribute::_internal_link() const {
  const ::apipb::LsAttributeLink* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsAttributeLink*>(
      &::apipb::_LsAttributeLink_default_instance_);
}
inline const ::apipb::LsAttributeLink& LsAttribute::link() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttribute.link)
  return _internal_link();
}
inline void LsAttribute::unsafe_arena_set_allocated_link(
    ::apipb::LsAttributeLink* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttribute.link)
}
inline ::apipb::LsAttributeLink* LsAttribute::release_link() {
  
  ::apipb::LsAttributeLink* temp = link_;
  link_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsAttributeLink* LsAttribute::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:apipb.LsAttribute.link)
  
  ::apipb::LsAttributeLink* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::apipb::LsAttributeLink* LsAttribute::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsAttributeLink>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::apipb::LsAttributeLink* LsAttribute::mutable_link() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttribute.link)
  return _internal_mutable_link();
}
inline void LsAttribute::set_allocated_link(::apipb::LsAttributeLink* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttribute.link)
}

// .apipb.LsAttributePrefix prefix = 3;
inline bool LsAttribute::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool LsAttribute::has_prefix() const {
  return _internal_has_prefix();
}
inline void LsAttribute::clear_prefix() {
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::apipb::LsAttributePrefix& LsAttribute::_internal_prefix() const {
  const ::apipb::LsAttributePrefix* p = prefix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsAttributePrefix*>(
      &::apipb::_LsAttributePrefix_default_instance_);
}
inline const ::apipb::LsAttributePrefix& LsAttribute::prefix() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttribute.prefix)
  return _internal_prefix();
}
inline void LsAttribute::unsafe_arena_set_allocated_prefix(
    ::apipb::LsAttributePrefix* prefix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttribute.prefix)
}
inline ::apipb::LsAttributePrefix* LsAttribute::release_prefix() {
  
  ::apipb::LsAttributePrefix* temp = prefix_;
  prefix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsAttributePrefix* LsAttribute::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:apipb.LsAttribute.prefix)
  
  ::apipb::LsAttributePrefix* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::apipb::LsAttributePrefix* LsAttribute::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsAttributePrefix>(GetArena());
    prefix_ = p;
  }
  return prefix_;
}
inline ::apipb::LsAttributePrefix* LsAttribute::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttribute.prefix)
  return _internal_mutable_prefix();
}
inline void LsAttribute::set_allocated_prefix(::apipb::LsAttributePrefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttribute.prefix)
}

// .apipb.LsAttributeBgpPeerSegment bgp_peer_segment = 4;
inline bool LsAttribute::_internal_has_bgp_peer_segment() const {
  return this != internal_default_instance() && bgp_peer_segment_ != nullptr;
}
inline bool LsAttribute::has_bgp_peer_segment() const {
  return _internal_has_bgp_peer_segment();
}
inline void LsAttribute::clear_bgp_peer_segment() {
  if (GetArena() == nullptr && bgp_peer_segment_ != nullptr) {
    delete bgp_peer_segment_;
  }
  bgp_peer_segment_ = nullptr;
}
inline const ::apipb::LsAttributeBgpPeerSegment& LsAttribute::_internal_bgp_peer_segment() const {
  const ::apipb::LsAttributeBgpPeerSegment* p = bgp_peer_segment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::LsAttributeBgpPeerSegment*>(
      &::apipb::_LsAttributeBgpPeerSegment_default_instance_);
}
inline const ::apipb::LsAttributeBgpPeerSegment& LsAttribute::bgp_peer_segment() const {
  // @@protoc_insertion_point(field_get:apipb.LsAttribute.bgp_peer_segment)
  return _internal_bgp_peer_segment();
}
inline void LsAttribute::unsafe_arena_set_allocated_bgp_peer_segment(
    ::apipb::LsAttributeBgpPeerSegment* bgp_peer_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_peer_segment_);
  }
  bgp_peer_segment_ = bgp_peer_segment;
  if (bgp_peer_segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.LsAttribute.bgp_peer_segment)
}
inline ::apipb::LsAttributeBgpPeerSegment* LsAttribute::release_bgp_peer_segment() {
  
  ::apipb::LsAttributeBgpPeerSegment* temp = bgp_peer_segment_;
  bgp_peer_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::LsAttributeBgpPeerSegment* LsAttribute::unsafe_arena_release_bgp_peer_segment() {
  // @@protoc_insertion_point(field_release:apipb.LsAttribute.bgp_peer_segment)
  
  ::apipb::LsAttributeBgpPeerSegment* temp = bgp_peer_segment_;
  bgp_peer_segment_ = nullptr;
  return temp;
}
inline ::apipb::LsAttributeBgpPeerSegment* LsAttribute::_internal_mutable_bgp_peer_segment() {
  
  if (bgp_peer_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::LsAttributeBgpPeerSegment>(GetArena());
    bgp_peer_segment_ = p;
  }
  return bgp_peer_segment_;
}
inline ::apipb::LsAttributeBgpPeerSegment* LsAttribute::mutable_bgp_peer_segment() {
  // @@protoc_insertion_point(field_mutable:apipb.LsAttribute.bgp_peer_segment)
  return _internal_mutable_bgp_peer_segment();
}
inline void LsAttribute::set_allocated_bgp_peer_segment(::apipb::LsAttributeBgpPeerSegment* bgp_peer_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bgp_peer_segment_;
  }
  if (bgp_peer_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bgp_peer_segment);
    if (message_arena != submessage_arena) {
      bgp_peer_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgp_peer_segment, submessage_arena);
    }
    
  } else {
    
  }
  bgp_peer_segment_ = bgp_peer_segment;
  // @@protoc_insertion_point(field_set_allocated:apipb.LsAttribute.bgp_peer_segment)
}

// -------------------------------------------------------------------

// UnknownAttribute

// uint32 flags = 1;
inline void UnknownAttribute::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::flags() const {
  // @@protoc_insertion_point(field_get:apipb.UnknownAttribute.flags)
  return _internal_flags();
}
inline void UnknownAttribute::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void UnknownAttribute::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:apipb.UnknownAttribute.flags)
}

// uint32 type = 2;
inline void UnknownAttribute::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::type() const {
  // @@protoc_insertion_point(field_get:apipb.UnknownAttribute.type)
  return _internal_type();
}
inline void UnknownAttribute::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void UnknownAttribute::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apipb.UnknownAttribute.type)
}

// bytes value = 3;
inline void UnknownAttribute::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnknownAttribute::value() const {
  // @@protoc_insertion_point(field_get:apipb.UnknownAttribute.value)
  return _internal_value();
}
inline void UnknownAttribute::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apipb.UnknownAttribute.value)
}
inline std::string* UnknownAttribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:apipb.UnknownAttribute.value)
  return _internal_mutable_value();
}
inline const std::string& UnknownAttribute::_internal_value() const {
  return value_.Get();
}
inline void UnknownAttribute::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnknownAttribute::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.UnknownAttribute.value)
}
inline void UnknownAttribute::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.UnknownAttribute.value)
}
inline void UnknownAttribute::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.UnknownAttribute.value)
}
inline std::string* UnknownAttribute::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnknownAttribute::release_value() {
  // @@protoc_insertion_point(field_release:apipb.UnknownAttribute.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnknownAttribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.UnknownAttribute.value)
}

// -------------------------------------------------------------------

// SRv6StructureSubSubTLV

// uint32 locator_block_length = 1;
inline void SRv6StructureSubSubTLV::clear_locator_block_length() {
  locator_block_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::_internal_locator_block_length() const {
  return locator_block_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::locator_block_length() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6StructureSubSubTLV.locator_block_length)
  return _internal_locator_block_length();
}
inline void SRv6StructureSubSubTLV::_internal_set_locator_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  locator_block_length_ = value;
}
inline void SRv6StructureSubSubTLV::set_locator_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_locator_block_length(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6StructureSubSubTLV.locator_block_length)
}

// uint32 locator_node_length = 2;
inline void SRv6StructureSubSubTLV::clear_locator_node_length() {
  locator_node_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::_internal_locator_node_length() const {
  return locator_node_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::locator_node_length() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6StructureSubSubTLV.locator_node_length)
  return _internal_locator_node_length();
}
inline void SRv6StructureSubSubTLV::_internal_set_locator_node_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  locator_node_length_ = value;
}
inline void SRv6StructureSubSubTLV::set_locator_node_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_locator_node_length(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6StructureSubSubTLV.locator_node_length)
}

// uint32 function_length = 3;
inline void SRv6StructureSubSubTLV::clear_function_length() {
  function_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::_internal_function_length() const {
  return function_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::function_length() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6StructureSubSubTLV.function_length)
  return _internal_function_length();
}
inline void SRv6StructureSubSubTLV::_internal_set_function_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  function_length_ = value;
}
inline void SRv6StructureSubSubTLV::set_function_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_function_length(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6StructureSubSubTLV.function_length)
}

// uint32 argument_length = 4;
inline void SRv6StructureSubSubTLV::clear_argument_length() {
  argument_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::_internal_argument_length() const {
  return argument_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::argument_length() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6StructureSubSubTLV.argument_length)
  return _internal_argument_length();
}
inline void SRv6StructureSubSubTLV::_internal_set_argument_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  argument_length_ = value;
}
inline void SRv6StructureSubSubTLV::set_argument_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_argument_length(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6StructureSubSubTLV.argument_length)
}

// uint32 transposition_length = 5;
inline void SRv6StructureSubSubTLV::clear_transposition_length() {
  transposition_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::_internal_transposition_length() const {
  return transposition_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::transposition_length() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6StructureSubSubTLV.transposition_length)
  return _internal_transposition_length();
}
inline void SRv6StructureSubSubTLV::_internal_set_transposition_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  transposition_length_ = value;
}
inline void SRv6StructureSubSubTLV::set_transposition_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transposition_length(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6StructureSubSubTLV.transposition_length)
}

// uint32 transposition_offset = 6;
inline void SRv6StructureSubSubTLV::clear_transposition_offset() {
  transposition_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::_internal_transposition_offset() const {
  return transposition_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6StructureSubSubTLV::transposition_offset() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6StructureSubSubTLV.transposition_offset)
  return _internal_transposition_offset();
}
inline void SRv6StructureSubSubTLV::_internal_set_transposition_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  transposition_offset_ = value;
}
inline void SRv6StructureSubSubTLV::set_transposition_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transposition_offset(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6StructureSubSubTLV.transposition_offset)
}

// -------------------------------------------------------------------

// SRv6SIDFlags

// bool flag_1 = 1;
inline void SRv6SIDFlags::clear_flag_1() {
  flag_1_ = false;
}
inline bool SRv6SIDFlags::_internal_flag_1() const {
  return flag_1_;
}
inline bool SRv6SIDFlags::flag_1() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6SIDFlags.flag_1)
  return _internal_flag_1();
}
inline void SRv6SIDFlags::_internal_set_flag_1(bool value) {
  
  flag_1_ = value;
}
inline void SRv6SIDFlags::set_flag_1(bool value) {
  _internal_set_flag_1(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6SIDFlags.flag_1)
}

// -------------------------------------------------------------------

// SRv6TLV

// repeated .google.protobuf.Any tlv = 1;
inline int SRv6TLV::_internal_tlv_size() const {
  return tlv_.size();
}
inline int SRv6TLV::tlv_size() const {
  return _internal_tlv_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* SRv6TLV::mutable_tlv(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.SRv6TLV.tlv)
  return tlv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
SRv6TLV::mutable_tlv() {
  // @@protoc_insertion_point(field_mutable_list:apipb.SRv6TLV.tlv)
  return &tlv_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& SRv6TLV::_internal_tlv(int index) const {
  return tlv_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& SRv6TLV::tlv(int index) const {
  // @@protoc_insertion_point(field_get:apipb.SRv6TLV.tlv)
  return _internal_tlv(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* SRv6TLV::_internal_add_tlv() {
  return tlv_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* SRv6TLV::add_tlv() {
  // @@protoc_insertion_point(field_add:apipb.SRv6TLV.tlv)
  return _internal_add_tlv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
SRv6TLV::tlv() const {
  // @@protoc_insertion_point(field_list:apipb.SRv6TLV.tlv)
  return tlv_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SRv6InformationSubTLV

// bytes sid = 1;
inline void SRv6InformationSubTLV::clear_sid() {
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SRv6InformationSubTLV::sid() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6InformationSubTLV.sid)
  return _internal_sid();
}
inline void SRv6InformationSubTLV::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6InformationSubTLV.sid)
}
inline std::string* SRv6InformationSubTLV::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:apipb.SRv6InformationSubTLV.sid)
  return _internal_mutable_sid();
}
inline const std::string& SRv6InformationSubTLV::_internal_sid() const {
  return sid_.Get();
}
inline void SRv6InformationSubTLV::_internal_set_sid(const std::string& value) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SRv6InformationSubTLV::set_sid(std::string&& value) {
  
  sid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apipb.SRv6InformationSubTLV.sid)
}
inline void SRv6InformationSubTLV::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:apipb.SRv6InformationSubTLV.sid)
}
inline void SRv6InformationSubTLV::set_sid(const void* value,
    size_t size) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apipb.SRv6InformationSubTLV.sid)
}
inline std::string* SRv6InformationSubTLV::_internal_mutable_sid() {
  
  return sid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SRv6InformationSubTLV::release_sid() {
  // @@protoc_insertion_point(field_release:apipb.SRv6InformationSubTLV.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRv6InformationSubTLV::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apipb.SRv6InformationSubTLV.sid)
}

// .apipb.SRv6SIDFlags flags = 2;
inline bool SRv6InformationSubTLV::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool SRv6InformationSubTLV::has_flags() const {
  return _internal_has_flags();
}
inline void SRv6InformationSubTLV::clear_flags() {
  if (GetArena() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::apipb::SRv6SIDFlags& SRv6InformationSubTLV::_internal_flags() const {
  const ::apipb::SRv6SIDFlags* p = flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apipb::SRv6SIDFlags*>(
      &::apipb::_SRv6SIDFlags_default_instance_);
}
inline const ::apipb::SRv6SIDFlags& SRv6InformationSubTLV::flags() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6InformationSubTLV.flags)
  return _internal_flags();
}
inline void SRv6InformationSubTLV::unsafe_arena_set_allocated_flags(
    ::apipb::SRv6SIDFlags* flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apipb.SRv6InformationSubTLV.flags)
}
inline ::apipb::SRv6SIDFlags* SRv6InformationSubTLV::release_flags() {
  
  ::apipb::SRv6SIDFlags* temp = flags_;
  flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apipb::SRv6SIDFlags* SRv6InformationSubTLV::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_release:apipb.SRv6InformationSubTLV.flags)
  
  ::apipb::SRv6SIDFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::apipb::SRv6SIDFlags* SRv6InformationSubTLV::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::apipb::SRv6SIDFlags>(GetArena());
    flags_ = p;
  }
  return flags_;
}
inline ::apipb::SRv6SIDFlags* SRv6InformationSubTLV::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:apipb.SRv6InformationSubTLV.flags)
  return _internal_mutable_flags();
}
inline void SRv6InformationSubTLV::set_allocated_flags(::apipb::SRv6SIDFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flags);
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:apipb.SRv6InformationSubTLV.flags)
}

// uint32 endpoint_behavior = 3;
inline void SRv6InformationSubTLV::clear_endpoint_behavior() {
  endpoint_behavior_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6InformationSubTLV::_internal_endpoint_behavior() const {
  return endpoint_behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRv6InformationSubTLV::endpoint_behavior() const {
  // @@protoc_insertion_point(field_get:apipb.SRv6InformationSubTLV.endpoint_behavior)
  return _internal_endpoint_behavior();
}
inline void SRv6InformationSubTLV::_internal_set_endpoint_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  endpoint_behavior_ = value;
}
inline void SRv6InformationSubTLV::set_endpoint_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endpoint_behavior(value);
  // @@protoc_insertion_point(field_set:apipb.SRv6InformationSubTLV.endpoint_behavior)
}

// map<uint32, .apipb.SRv6TLV> sub_sub_tlvs = 4;
inline int SRv6InformationSubTLV::_internal_sub_sub_tlvs_size() const {
  return sub_sub_tlvs_.size();
}
inline int SRv6InformationSubTLV::sub_sub_tlvs_size() const {
  return _internal_sub_sub_tlvs_size();
}
inline void SRv6InformationSubTLV::clear_sub_sub_tlvs() {
  sub_sub_tlvs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
SRv6InformationSubTLV::_internal_sub_sub_tlvs() const {
  return sub_sub_tlvs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
SRv6InformationSubTLV::sub_sub_tlvs() const {
  // @@protoc_insertion_point(field_map:apipb.SRv6InformationSubTLV.sub_sub_tlvs)
  return _internal_sub_sub_tlvs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
SRv6InformationSubTLV::_internal_mutable_sub_sub_tlvs() {
  return sub_sub_tlvs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
SRv6InformationSubTLV::mutable_sub_sub_tlvs() {
  // @@protoc_insertion_point(field_mutable_map:apipb.SRv6InformationSubTLV.sub_sub_tlvs)
  return _internal_mutable_sub_sub_tlvs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SRv6L3ServiceTLV

// map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
inline int SRv6L3ServiceTLV::_internal_sub_tlvs_size() const {
  return sub_tlvs_.size();
}
inline int SRv6L3ServiceTLV::sub_tlvs_size() const {
  return _internal_sub_tlvs_size();
}
inline void SRv6L3ServiceTLV::clear_sub_tlvs() {
  sub_tlvs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
SRv6L3ServiceTLV::_internal_sub_tlvs() const {
  return sub_tlvs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
SRv6L3ServiceTLV::sub_tlvs() const {
  // @@protoc_insertion_point(field_map:apipb.SRv6L3ServiceTLV.sub_tlvs)
  return _internal_sub_tlvs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
SRv6L3ServiceTLV::_internal_mutable_sub_tlvs() {
  return sub_tlvs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
SRv6L3ServiceTLV::mutable_sub_tlvs() {
  // @@protoc_insertion_point(field_mutable_map:apipb.SRv6L3ServiceTLV.sub_tlvs)
  return _internal_mutable_sub_tlvs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SRv6L2ServiceTLV

// map<uint32, .apipb.SRv6TLV> sub_tlvs = 1;
inline int SRv6L2ServiceTLV::_internal_sub_tlvs_size() const {
  return sub_tlvs_.size();
}
inline int SRv6L2ServiceTLV::sub_tlvs_size() const {
  return _internal_sub_tlvs_size();
}
inline void SRv6L2ServiceTLV::clear_sub_tlvs() {
  sub_tlvs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
SRv6L2ServiceTLV::_internal_sub_tlvs() const {
  return sub_tlvs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >&
SRv6L2ServiceTLV::sub_tlvs() const {
  // @@protoc_insertion_point(field_map:apipb.SRv6L2ServiceTLV.sub_tlvs)
  return _internal_sub_tlvs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
SRv6L2ServiceTLV::_internal_mutable_sub_tlvs() {
  return sub_tlvs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::apipb::SRv6TLV >*
SRv6L2ServiceTLV::mutable_sub_tlvs() {
  // @@protoc_insertion_point(field_mutable_map:apipb.SRv6L2ServiceTLV.sub_tlvs)
  return _internal_mutable_sub_tlvs();
}

// -------------------------------------------------------------------

// PrefixSID

// repeated .google.protobuf.Any tlvs = 1;
inline int PrefixSID::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int PrefixSID::tlvs_size() const {
  return _internal_tlvs_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* PrefixSID::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:apipb.PrefixSID.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
PrefixSID::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:apipb.PrefixSID.tlvs)
  return &tlvs_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& PrefixSID::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& PrefixSID::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:apipb.PrefixSID.tlvs)
  return _internal_tlvs(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* PrefixSID::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* PrefixSID::add_tlvs() {
  // @@protoc_insertion_point(field_add:apipb.PrefixSID.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
PrefixSID::tlvs() const {
  // @@protoc_insertion_point(field_list:apipb.PrefixSID.tlvs)
  return tlvs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace apipb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apipb::AsSegment_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apipb::AsSegment_Type>() {
  return ::apipb::AsSegment_Type_descriptor();
}
template <> struct is_proto_enum< ::apipb::LsOspfRouteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apipb::LsOspfRouteType>() {
  return ::apipb::LsOspfRouteType_descriptor();
}
template <> struct is_proto_enum< ::apipb::LsNLRIType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apipb::LsNLRIType>() {
  return ::apipb::LsNLRIType_descriptor();
}
template <> struct is_proto_enum< ::apipb::LsProtocolID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apipb::LsProtocolID>() {
  return ::apipb::LsProtocolID_descriptor();
}
template <> struct is_proto_enum< ::apipb::SRv6Behavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apipb::SRv6Behavior>() {
  return ::apipb::SRv6Behavior_descriptor();
}
template <> struct is_proto_enum< ::apipb::ENLPType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apipb::ENLPType>() {
  return ::apipb::ENLPType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_attribute_2eproto
